create or replace package Pkg_Col_Coleta is

   /************************************************************/
   /**            Tipo Cursor para Retorno de Procedures      **/
   /************************************************************/
   TYPE T_CURSOR IS REF CURSOR;

   /************************************************************/
   /**            RELAÇÃO DE CONSTANTES PÚBLICAS              **/
   /************************************************************/
   Status_Normal  Constant Char(1) := 'N';
   Status_Erro    Constant Char(1) := 'E';
   Status_Warning Constant Char(1) := 'W';
   /************************************************************/

   TipoEmailColetaGerada     constant char(2) := 'CG';
   TipoEmailColetaCancelada  constant char(2) := 'CC';
   TipoEmailColetaAutorizada constant char(2) := 'CA';
   NomeParametroAutorizar    constant varchar2(20) := 'PERMITEAUTORIZAR';
   GrupoEconomicoTDV         constant char(4) := '0000'; -- TDV = DELLA VOLPE
   GrupoEconomicoVALE        constant char(4) := '0020'; -- VALE = VALE
   GrupoEconomicoVLI         constant char(4) := '0074'; -- VLI = VLI
   GrupoEconomicoVTC         constant char(4) := '0507'; -- VTC = VOTORANTIN CIMENTOS (25/ABR/2018)
   GrupoEconomicoVTE         constant char(4) := '0534'; -- VTE = VOTORANTIN ENERGIA  (01/ABR/2019)
   GrupoEconomicoAMT         constant char(4) := '0535'; -- AMT = Arcelormittal
   GrupoEconomicoTHY         constant char(4) := '0570'; -- THY = TERNIUM
   GrupoEconomicoALB         constant char(4) := '0612'; -- ALB = ALBRAS (9/FEV/2018)
   GrupoEconomicoALC         constant char(4) := '0626'; -- ALC = ALCOA
   GrupoEconomicoRAI         constant char(4) := '0628'; -- RAI = RAIZEN (15/FEV/2018)
   GrupoEconomicoAPE         constant char(4) := '0561'; -- APE = APERAM (03/SET/2019)
   GrupoEconomicoBIO         constant char(4) := '0643'; -- BIO = BIOSEV (08/OUT/2019)
   GrupoEconomicoPET         constant char(4) := '0647'; -- PET = PETROPOLIS (29/jan/2020)
   GrupoEconomicoOXI         constant char(4) := '0658'; -- OXI = Oxiteno (20/mar/2020) 
   GrupoEconomicoVIX         constant char(4) := '0627'; -- VIX = Vivix  (16/08/2021)
   GrupoEconomicoAGL         constant char(4) := '0599'; -- AGL = ANGLO AMERICAM (13/abr/2020) 
   GrupoEconomicoAGN         constant char(4) := '0663'; -- AGN = ANGLO NIQUEL (28/abr/2020)
   GrupoEconomicoSOL         constant char(4) := '0730'; -- SOL = SOLTEC (08/JULHO/2021)  
   
   
   /***** SUZANO ******/
   GrupoEconomicoSUZ         constant char(4) := '0633'; -- SUZ = SUZANO (9/FEV/2018)
   GrupoEconomicoSUZ2        constant char(4) := '0634'; -- Alteração de contrato ( 12/NOV/2018)
   GrupoEconomicoSUZ3        constant char(4) := '0632'; -- Alteração de contrato ( 12/NOV/2018)
   GrupoEconomicoSUZ4        constant char(4) := '0678'; -- Alteração de contrato ( 13/NOV/2018)
   GrupoEconomicoSUZ5        constant char(4) := '0541'; -- Alteração de contrato ( 13/NOV/2018)
   GrupoEconomicoSUZ6        constant char(4) := '0673'; -- Alteração de contrato ( 13/NOV/2018)
   GrupoEconomicoSUZ7        constant char(4) := '0674'; -- Alteração de contrato ( 13/NOV/2018)
   GrupoEconomicoSUZ8        constant char(4) := '0675'; -- Alteração de contrato ( 13/NOV/2018)                                      
   GrupoEconomicoSUZ9        constant char(4) := '0676'; -- Alteração de contrato ( 13/NOV/2018)                                      
   GrupoEconomicoSUZ10       constant char(4) := '0677'; -- Alteração de contrato ( 13/NOV/2018)                                      
   GrupoEconomicoSUZ11       constant char(4) := '0656';  -- Alteração de contrato ( 13/NOV/2018)
   GrupoEconomicoSUZ12       constant char(4) := '0727';  -- Alteração de contrato ( 26/08/2021)   
   
   
   /***** Usiminas *****/
   GrupoEconomicoUSI         constant char(4) := '0567'; -- USI = USIMINAS (28/FEV/2018)
   GrupoEconomicoUSI2        constant char(4) := '0630'; -- USI2 = USIMINAS2
   
    /***** ENEVA ******/
    GrupoEconomicoENE        constant char(4) := '0697'; -- Alteração de contrato ( 28/12/2020)
    
    /***** OWENS ******/
    GrupoEconomicoOWE        constant char(4) := '0704'; -- Alteração de contrato ( 28/12/2020)
    
    /***** CARAIBA ******/
    GrupoEconomicoCAR        constant char(4) := '0551'; -- MINERACAO CARAIBA 
    
    /***** NOVELIS ******/
    GrupoEconomicoNOVELIS constant char(4) := '0639'; -- NOVELIS

    /***** ULTRACARGO ******/
    GrupoEconomicoULT        constant char(4) := '0714';
    -- ULT = ULTRACARGO (11/MAR/2021)
    
    
   /***** GILBARCO *****************/     
    GrupoEconomicoGIL       constant char(4) := '0682'; -- GIL = GILBARCO (23/ABRIL/2021)
    
   /***** ELDORADO *****************/     
    GrupoEconomicoELD       constant char(4) := '0739'; -- ELD = ELDORADO (20/SETEMBRO/2021)
    
   /***** PARANAPANEMA *****************/     
    GrupoEconomicoPARANA         constant char(4) := '0684'; -- SUZ = PARANAPANEMA (9/FEV/2018)   
    
       /***** Nouryon *****************/     
    GrupoEconomicoNOU         constant char(4) := '0688'; -- SUZ = PARANAPANEMA (9/FEV/2018)    
    
   /******* AmstedMaxion *******/
   GrupoEconomicoAMX         constant char(4) := '0006'; -- AMX = AMSTED (09/DEZ/2020)
   
  
  /*
   * Diego Lirio - Regra alterada somente Grupo 0569.
   * Regra solicitada por Kethleen 20/04/2017 - via Email
   */         
   GrupoEconomicoCBA         constant char(4) := '0569'; -- CBA = CBA
   /****Grupo HYDRO***/
   GrupoEconomicoHYD         constant char(4) := '0613'; -- HYD = HYDRO 
   GrupoEconomicoPAR         constant char(4) := '0614'; -- PAR = PARAGOMINAS ( 06/DEZ/2018)
   GrupoEconomicoPRA         constant char(4) := '0615'; -- PRA = PRADA ( 06/DEZ/2018)
   
   
   GrupoEconomicoVZI         constant char(4) := '0597'; -- VZI = VOTORANTIN METAIS
   TipoEnderecoPagador       constant t_arm_coletatppar.arm_coletatppar_codigo%type := 'CS';

   /************************************************************/
   /**           TIPOS USADO NO PROCESSO DE COLETA            **/
   /************************************************************/
   Type tListaItensColeta2 Is Table Of t_arm_coletancompra%RowType Index By Binary_Integer;

   Type TpParceirosColeta is record (cnpj       t_glb_cliend.glb_cliente_cgccpfcodigo%type,
                                     tpEnd      t_glb_cliend.glb_tpcliend_codigo%type,
                                     tpParceiro t_arm_coletaparceiro.arm_coletatppar_codigo%type);

   Type tListaParceiros   Is Table Of TpParceirosColeta Index By Binary_Integer;

   Type TpCliendTipo is record (GLB_CLIENTE_CGCCPFCODIGO    t_glb_cliend.glb_cliente_cgccpfcodigo%type,
                                GLB_TPCLIEND_CODIGO         t_glb_cliend.glb_tpcliend_codigo%type,
                                GLB_PAIS_CODIGO             t_glb_cliend.glb_pais_codigo%type,
                                GLB_ESTADO_CODIGO           t_glb_cliend.glb_estado_codigo%type,
                                GLB_CLIEND_ENDERECO         t_glb_cliend.glb_cliend_endereco%type,
                                GLB_CLIEND_COMPLEMENTO      t_glb_cliend.glb_cliend_complemento%type,
                                GLB_CLIEND_CIDADE           t_glb_cliend.glb_cliend_cidade%type,
                                GLB_CEP_CODIGO              t_glb_cliend.glb_cep_codigo%type,
                                GLB_LOCALIDADE_CODIGO       t_glb_cliend.glb_localidade_codigo%type,
                                GLB_CLIEND_CODCLIENTE       t_glb_cliend.glb_cliend_codcliente%type,
                                ARM_REGIAO_CODIGO           t_glb_cliend.arm_regiao_codigo%type,
                                ARM_REGIAO_METROPOLITANA    t_glb_cliend.arm_regiao_metropolitana%type,
                                ARM_SUBREGIAO_CODIGO        t_glb_cliend.arm_subregiao_codigo%type,
                                XML_CEP_CVRD                t_glb_cliend.xml_cep_cvrd%type,
                                GLB_CLIEND_EMAIL            t_glb_cliend.glb_cliend_email%type,
                                GLB_CLIEND_LATITUDE         t_glb_cliend.glb_cliend_latitude%type,
                                GLB_CLIEND_LONGITUDE        t_glb_cliend.glb_cliend_longitude%type,
                                GLB_CLIEND_LOGO             t_glb_cliend.glb_cliend_logo%type,
                                GLB_PORTARIA_ID             t_glb_cliend.glb_portaria_id%type,
                                GLB_CLIEND_IE               t_glb_cliend.glb_cliend_ie%type,
                                GLB_CLIEND_IM               t_glb_cliend.glb_cliend_im%type,
                                GLB_CLIEND_HIGIENIZADO      t_glb_cliend.glb_cliend_higienizado%type,
                                USU_USUARIO_CRIOU           t_glb_cliend.usu_usuario_criou%type,
                                USU_USUARIO_ALTEROU         t_glb_cliend.usu_usuario_alterou%type,
                                GLB_CLIEND_DTCRIACAO        t_glb_cliend.glb_cliend_dtcriacao%type,
                                GLB_CLIEND_DTALTERACAO      t_glb_cliend.glb_cliend_dtalteracao%type,
                                GLB_LOCALIDADE_CODIGOIE     t_glb_cliend.glb_localidade_codigoie%type,
                                GLB_CLIEND_NUMERO           t_glb_cliend.glb_cliend_numero%type,
                                GLB_CLIENTE_CNPJAUX         t_glb_cliend.glb_cliente_cnpjaux%type,
                                GLB_CLIENTE_RAZAOSOCIAL     t_glb_cliente.glb_cliente_razaosocial%type);

  Type TpParametros is record ( PERFIL    T_USU_PARAMETROTMP.PERFIL%TYPE,
                                DESCRICAO T_USU_PARAMETROTMP.DESCRICAO%TYPE,
                                QUENALTSA T_USU_PARAMETROTMP.QUENALTSA%TYPE,
                                TEXTO     T_USU_PARAMETROTMP.TEXTO%TYPE,
                                NUMERICO1 T_USU_PARAMETROTMP.NUMERICO1%TYPE,
                                NUMERICO2 T_USU_PARAMETROTMP.NUMERICO2%TYPE,
                                DATA1     T_USU_PARAMETROTMP.DATA1%TYPE,
                                DATA2     T_USU_PARAMETROTMP.DATA2%TYPE,
                                NIVEL     T_USU_PARAMETROTMP.NIVEL%TYPE,
                                HORARIOS  T_USU_PARAMETROTMP.HORARIO%TYPE,
                                NUMERICO3 T_USU_PARAMETROTMP.NUMERICO3%TYPE,
                                NUMERICO4 T_USU_PARAMETROTMP.NUMERICO4%TYPE,
                                NUMERICO5 T_USU_PARAMETROTMP.NUMERICO5%TYPE,
                                NUMERICO6 T_USU_PARAMETROTMP.NUMERICO6%TYPE,
                                DATA3     T_USU_PARAMETROTMP.DATA3%TYPE,
                                DATA4     T_USU_PARAMETROTMP.DATA4%TYPE );

   /************************************************************/

   /************************************************************/
   /*              VARIAVEIS                                   */
   /************************************************************/
   
    vDataIni        date;
    vDataFim        date;
    vUsuario        varchar2(10);
    vColeta         varchar2(6);
    vPedido         varchar2(30);
    vArmazem        varchar2(30);
    vCidadeOrigem   varchar2(100);
    vCidadeDestino  varchar2(100);
    vRemetente      varchar2(100);
    vDestinatario   varchar2(100);
    vTipoCarga      varchar2(30);
    vTipoVeiculo    varchar2(30);
    vOrigem         t_Arm_Coletaorigem.Arm_Coletaorigem_Cod%Type;
    vOcorrencia     varchar(2);
    vPagina         integer;
    vQntdeRegistros integer; -- Quantidade de registros a serem selecionados de cada vez
    vCnpjLogado     varchar2(20);
    vNota           varchar2(100);--T_arm_Nota.Arm_Nota_Numero%Type;
    vCTRC           varchar2(100);--t_Con_Conhecimento.Con_Conhecimento_Codigo%Type;



   /***********************************************************/
   /**  Funcções criadas para o Auxilio do cadastro da Coleta**/
   /***********************************************************/
  Function Fn_XmlToColetaRowType(pXml In Clob) return T_Arm_Coleta%Rowtype;
  
  Function Fn_XmlToLoteColetaRowType(pXml In Clob) return T_Arm_loteColeta%Rowtype;
  
  Function Fn_XmlToLoteColetaItemRowType(pXml In Clob) return T_Arm_loteColetaItem%Rowtype;

  Function Fn_ExtraiXmlContent(pXml Clob,
                               pTagXmlAbertura Varchar2,
                               pTagXmlFechamento Varchar2) return Clob;

  Function Fn_XmlToParceiros(pXml In Clob) return tListaParceiros;

  Function Fn_Col_XmlItemsToType(pColetaNumero  in  varchar2,
                                 pColetaCiclo    in  varchar2,
                                 pXml            in  clob,
                                 pListColetaItemRowType out tListaItensColeta2,
                                 pStatus         out char,
                                 pMessage        out varchar2)return boolean;

  Function Fn_Get_ColetaRowType(pNCompra in t_Arm_Coleta.Arm_Coleta_Ncompra%Type,
                                pCiclo   in T_arm_Coleta.Arm_Coleta_Ciclo%Type) return t_arm_Coleta%Rowtype;

  Function Fn_Col_ValidaArmazem(pColetaRowType in T_arm_coleta%RowType,
                                pStatus        out char,
                                pMessage       out varchar2)return boolean;

  Function Fn_Col_ValidaTipoColeta(pColetaRowType tdvadm.t_Arm_Coleta%RowType,
                                   pStatus     out char,
                                   pMessage    out varchar2)return boolean;

  Function Fn_Col_ValidaItemsColeta(pListColetaItemRowType in tListaItensColeta2,
                                    pStatus        out char,
                                    pMessage       out varchar2)return boolean;

  Function Fn_Col_ValidaContatoSol(pColetaRowType in T_arm_coleta%RowType,
                                   pStatus        out char,
                                   pMessage       out varchar2) return boolean;

  Function Fn_Col_ValidaRemetente(pColetaRowType in t_arm_coleta%RowType,
                                  pStatus        out char,
                                  pMessage       out varchar2)return boolean;

  Function Fn_Col_ValidaDestinatario(pColetaRowType in t_Arm_Coleta%RowType,
                                     pStatus        out char,
                                     pMessage       out varchar2)return boolean;

  Function Fn_Col_ValidaTipoFrete(pColetaRowType in T_arm_coleta%RowType,
                                  pStatus        out char,
                                  pMessage       out varchar2)return boolean;

  Function Fn_Col_ValidaDataProgramacao(pColetaRowType in t_arm_coleta%RowType,
                                        pStatus        out char,
                                        pMessage       out varchar2)return boolean;

  Function Fn_Col_ValidaHoraProgramacao(pColetaRowType in t_arm_coleta%RowType,
                                        pStatus        out char,
                                        pMessage       out varchar2)return boolean;
                                        
                                 
   Function Fn_PET_ValidaCampos(pColetaRowType in t_arm_coleta%RowType,
                                pStatus        out char,
                                pMessage       out varchar2) return boolean;    
                                
                                                                    
 function Fn_PET_RestringeAutoriza(pColetaRowType in t_arm_coleta%RowType,
                                    pUsuarioAutorizador  in t_arm_coleta.usu_usuario_codigoautoriza%type) return boolean;  

  Function Fn_Col_ValidaValorTotal(pColetaRowType in tdvadm.t_Arm_Coleta%RowType,
                                   pStatus        out char,
                                   pMessage       out varchar2)return boolean;
                                   
  Function Fn_Col_ValidaTipoCarga(pColetaRowType in T_arm_coleta%RowType,
                                  pStatus        out char,
                                  pMessage       out varchar2)return boolean;

  Function Fn_Col_ValidaTipoVeiculo(pColetaRowType in T_arm_coleta%RowType,
                                    pStatus        out char,
                                    pMessage       out varchar2)return boolean;

  Function Fn_Col_ValidaParceirosColeta(pListaParceiros in tListaParceiros,
                                        pStatus        out char,
                                        pMessage       out varchar2)return boolean;

  Function Fn_Col_ValidaCodOrigemColeta(pColetaRowType in t_arm_coleta%RowType,
                                        pStatus        out char,
                                        pMessage       out varchar2)return boolean;

  Function Fn_Col_ValidaBloqueiosCnpj(pColetaRowType in t_arm_coleta%RowType,
                                      pStatus        out char,
                                      pMessage       out varchar2)return boolean;

  Function Fn_Col_ValidaNumeroFrete(pColetaRowType in T_arm_coleta%RowType,
                                    pStatus        out char,
                                    pMessage       out varchar2)return boolean;

  Function Fn_Col_ValidaDimensao(pColetaRowType in T_arm_coleta%RowType,
                                 pStatus        out char,
                                 pMessage       out varchar2)return boolean;
                                 
  Function Fn_Col_ValidaPagadorFrete(pColetaRowType in T_arm_coleta%RowType,
                                     pStatus        out char,
                                     pMessage       out varchar2)return boolean;                                 
                                     
  Function Fn_Col_ValidaOcorColCancelada(pColetaRowType in tdvadm.T_arm_coleta%RowType,
                                         pStatus        out char,
                                         pMessage       out varchar2)return boolean;

  Procedure Sp_Col_Insert(pColetaRowType in t_arm_coleta%RowType,
                          pColetaNumero  out varchar2,
                          pColetaCiclo   out varchar2,
                          pStatus        out char,
                          pMessage       out varchar2);

  Procedure Sp_Col_InsertItem(pListColetaItemRowType in tListaItensColeta2,
                              pSeqItem      out t_arm_coletancompra.arm_coleta_seqitem%type,
                              pStatus       out varchar2,
                              pMessage      out varchar2);

  Procedure Sp_ConfirmPost_Coleta(pXmlColeta in clob,
                                   pStatus out char,
                                   pMessage out varchar2);

  Procedure Sp_Post_Coleta(pColetaXml    in  CLOB,
                           pColetaNumero out varchar2,
                           pColetaCiclo  out varchar2,
                           pStatus       out varchar2,
                           pMessage      out varchar2);

  Procedure Sp_Post_ColetaItem(pColetaXmlItem in  clob,
                               pColetaNumero  in  varchar2,
                               pColetaCiclo   in  varchar2,
                               pSeqItem       out t_arm_coletancompra.arm_coleta_seqitem%type,
                               pStatus        out varchar2,
                               pMessage       out varchar2);

  Procedure Sp_UpdateColetaPendente(pColetaNumero  in  varchar2,
                                    pColetaCiclo   in  varchar2,
                                    pStatus        Out Char,
                                    pMessage       Out Varchar2);

  Procedure Sp_Get_CliendPorCNPJ(pCnpj    in  varchar2,
                                  pCursor  out T_CURSOR,
                                  pStatus  out varchar2,
                                  pMessage out varchar2);

  Procedure Sp_Get_ClientePorCNPJ(pCnpj    in  varchar2,
                                  pCursor  out T_CURSOR,
                                  pStatus  out varchar2,
                                  pMessage out varchar2);
                                  
  Procedure Sp_Get_ClientePorCNPJEstr(pCnpj    in  varchar2,
                                             pCursor  out T_CURSOR,
                                             pStatus  out varchar2,
                                             pMessage out varchar2);

                                  
  Procedure Sp_Get_ClientePorRazaoEstr(pRazaoSocial    in  varchar2,
                                                    pCursor         out T_CURSOR,
                                                    pStatus         out varchar2,
                                                    pMessage        out varchar2);

  Procedure Sp_Get_EmbalagemLista(pCursor  out T_CURSOR,
                                  pStatus  out varchar2,
                                  pMessage out varchar2);
                                  
                                  
  procedure Sp_Col_InsertLote(pUsuario in t_usu_usuario.usu_usuario_codigo%type,
                             pStatus        out char,
                             pMessage       out varchar2,
                             pLote          out varchar2);
  
  procedure Sp_Col_InsertColetaLote(pXmlLoteColeta in clob,
                                      pStatus        out char,
                                      pMessage       out varchar2,
                                      pColetaLote    out varchar2);
                                      
   
  procedure Sp_Col_InsertColetaItemLote(pXmlLoteColetaItem in clob,
                                        pStatus        out char,
                                        pMessage       out varchar2);

  Procedure Sp_Get_CargaLista(pCursor  out T_CURSOR,
                              pStatus  out varchar2,
                              pMessage out varchar2);

  Procedure Sp_Get_MercadoriaLista(pCursor  out T_CURSOR,
                                   pStatus  out varchar2,
                                   pMessage out varchar2);

  Procedure Sp_Get_TipoVeiculoLista(pCursor  out T_CURSOR,
                                    pStatus  out varchar2,
                                    pMessage out varchar2);

  Procedure Sp_Col_ValidaCnpj(pCnpj    in  varchar2,
                              pStatus  out varchar2,
                              pMessage out varchar2);

  Procedure Sp_Get_DadosContato(pUsuario in  varchar2,
                                pCnpj    in  varchar2,
                                pCursor  out t_cursor,
                                pStatus  out varchar2,
                                pMessage out varchar2);

  Procedure Sp_Get_DadosFilialUf(pUf      in varchar2,
                                 pCursor  out t_cursor,
                                 pStatus  out varchar2,
                                 pMessage out varchar2);

  function fn_TrimASCII( pValue varchar2 ) return varchar2;

  Procedure Sp_Post_EfetivarColeta(pColetaNumero in t_arm_coleta.arm_coleta_ncompra%type,
                                    pColetaCiclo  in t_arm_coleta.arm_coleta_ciclo%type,
                                    pStatus       out varchar2,
                                    pMessage      out varchar2);

  Procedure Sp_Get_ColetasPendentes(pUsuario in varchar2,
                                    pCnpj    in varchar2,
                                    pCursor  out T_CURSOR,
                                    pStatus  out varchar2,
                                    pMessage out varchar2);

  Procedure Sp_Post_ExcluirItemColeta(pColetaNumero in t_arm_coleta.arm_coleta_ncompra%type,
                                      pColetaCiclo  in t_arm_coleta.arm_coleta_ciclo%type,
                                      pSeqItem      in t_arm_coletancompra.arm_coleta_seqitem%type,
                                      pStatus       out varchar2,
                                      pMessage      out varchar2);

  function Fn_Get_CorpoEmail(pColetaNumero in t_arm_coleta.arm_coleta_ncompra%type,
                             pColetaCiclo  in t_arm_coleta.arm_coleta_ciclo%type,
                             pTipoEmail    in char) return clob;


  function Fn_Get_MessageInfoColeta(pColetaNumero in t_arm_coleta.arm_coleta_ncompra%type,
                                    pColetaCiclo  in t_arm_coleta.arm_coleta_ciclo%type,
                                    pAguardarAutorizacao in Boolean) return Varchar2;

  procedure Sp_Get_EmailColeta(pColetaNumero in t_arm_coleta.arm_coleta_ncompra%type,
                               pColetaCiclo  in t_arm_coleta.arm_coleta_ciclo%type,
                               pEmailDestino out varchar2,
                               pEmailsCopia  out varchar2,
                               pStatus       out varchar2,
                               pMessage      out varchar2);

  Procedure Sp_Col_Update(pColetaRowType in T_arm_coleta%RowType,
                          pColetaNumero out varchar2,
                          pColetaCiclo  out varchar2,
                          pStatus       out char,
                          pMessage      out varchar2);

  Procedure Sp_Post_ExcluiColeta(pColeta  in t_arm_coleta.arm_coleta_ncompra%type,
                                 pCiclo   in t_arm_coleta.arm_coleta_ciclo%type,
                                 pStatus  out varchar2,
                                 pMessage out varchar2);

  Procedure Sp_Get_XmlColPend(pColeta  in t_arm_coleta.arm_coleta_ncompra%type,
                              pCiclo   in t_arm_coleta.arm_coleta_ciclo%type,
                              pXmlCol  out clob,
                              pStatus  out varchar2,
                              pMessage out varchar2);

  Procedure Sp_Get_ItensColeta(pColeta  in t_arm_coleta.arm_coleta_ncompra%type,
                               pCiclo   in t_arm_coleta.arm_coleta_ciclo%type,
                               pCursor  out T_CURSOR,
                               pStatus  out varchar2,
                               pMessage out varchar2);

  Procedure Sp_Get_Coleta(pColeta  in t_arm_coleta.arm_coleta_ncompra%type,
                          pCiclo   in t_arm_coleta.arm_coleta_ciclo%type,
                          pCursor  out T_CURSOR,
                          pStatus  out varchar2,
                          pMessage out varchar2);
  
  Procedure Sp_Get_ColetaEdit(pColeta         in t_arm_coleta.arm_coleta_ncompra%type,
                            pCiclo          in t_arm_coleta.arm_coleta_ciclo%type,
                            pCursor         out T_CURSOR,
                            pStatus         out varchar2,
                            pMessage        out varchar2);
                              
  Procedure Sp_Post_ColetaEdit(pColetaXml    in  CLOB,
                               pColetaNumero out varchar2,
                               pColetaCiclo  out varchar2,
                               pStatus       out varchar2,
                               pMessage      out varchar2);
                               
  Procedure Sp_Post_ParceiroColeta(pNCompra     in varchar2,
                                 pCnpj        in varchar2,
                                 pTpEnd       in varchar2,
                                 pTpParceiro  in varchar2,
                                 pCiclo       in varchar2,
                                 pStatus      out varchar2,
                                 pMessage     out varchar2);

  Procedure Sp_Get_ParceirosByColeta(pColeta  in t_arm_coleta.arm_coleta_ncompra%type,
                                     pCiclo   in t_arm_coleta.arm_coleta_ciclo%type,
                                     pCursor  out T_CURSOR,
                                     pStatus  out varchar2,
                                     pMessage out varchar2);
                                     
  Procedure Sp_Col_verificaColetaImport(PNCOMPRA        IN  VARCHAR2,
                                        PCICLO          IN  VARCHAR2,
                                        pFlagImportacao out varchar2,
                                        pStatus         out varchar2,
                                        pMessage        out varchar2);
                                     
  Procedure Sp_Get_ClientePorRazaoSocial(pRazaoSocial    in  varchar2,
                                         pCursor         out T_CURSOR,
                                         pStatus         out varchar2,
                                         pMessage        out varchar2);
                                         
  Procedure Sp_Get_GrupoEconomico(pCnpj in varchar2,
                                  pGrupoEconomico out varchar2,
                                  pStatus out varchar2,
                                  pMessage out varchar2);
  
  Procedure Sp_Get_ArmazemList(pUsuario   in  varchar2,
                               pAplicacao in  varchar2,
                               pCursor    out T_CURSOR,
                               pStatus    out varchar2,
                               pMessage   out varchar2);
                                         
  Procedure Sp_Del_ParceiroColeta(pNCompra        in  varchar2,
                                  pCiclo          in  varchar2,
                                  pTpParceiro     in  varchar2,
                                  pStatus         out varchar2,
                                  pMessage        out varchar2);

  Function Fn_Col_AguardarAutorizacao(pColeta t_arm_coleta.arm_coleta_ncompra%type,
                                      pCiclo  t_arm_coleta.arm_coleta_ciclo%type) return Boolean;

  Procedure Sp_Set_ColetaAGAutorizacao(pColeta  in t_arm_coleta.arm_coleta_ncompra%type,
                                       pCiclo   in t_arm_coleta.arm_coleta_ciclo%type,
                                       pStatus  out varchar2,
                                       pMessage out varchar2);

  Procedure Sp_Pos_Autorizar(pColetaRowType in t_Arm_Coleta%RowType,
                             pStatus out Char,
                             pMessage out Varchar2);

  Procedure Sp_Set_AutorizaColeta(pColeta   in t_arm_coleta.arm_coleta_ncompra%type,
                                  pCiclo    in t_arm_coleta.arm_coleta_ciclo%type,
                                  pUsuario  in t_arm_coleta.usu_usuario_codigoautoriza%type, -- usuário que está autorizando a Coleta
                                  pIsExpresso in Char,
                                  pXmlOut   out varchar2,
                                  pStatus   out varchar2,
                                  pMessage  out varchar2);

  Function Fn_PermiteColetaNova(pUsuario coleta.usuario_web.dc_usuario%type) return char;

  Procedure Sp_Get_ConsultaColetas(pXmlFilter in varchar2,
                                   pCursor  out T_CURSOR,
                                   pStatus  out varchar2,
                                   pMessage out varchar2);

  Function fn_retornaParametro(pParametro in varchar2) return varchar2;

  Procedure Sp_Get_ConsultaColetasPaginado(pXmlFilter      in varchar2,
                                           pCursor         out T_CURSOR,
                                           pQntdePaginas   out integer,
                                           pCount          out integer,
                                           pStatus         out varchar2,
                                           pMessage        out varchar2);
                                           
                                           
    Procedure Sp_Get_ConsultaLote(pLote      in varchar,
                                pUsuario   in varchar,                        
                                  pCursor    out T_CURSOR,
                                  pStatus     out varchar2,
                                 pMessage   out varchar2);

  Procedure Sp_Get_ConsultaColetasPaginad2(pXmlFilter      in varchar2,
                                           pCursor         out T_CURSOR,
                                           pQntdePaginas   out integer,
                                           pCount          out integer,
                                           pStatus         out varchar2,
                                           pMessage        out varchar2);

  Procedure Sp_Set_AutorizaColetaXml(pXmlColetas  in  clob,
                                     pXmlOut      out varchar2,
                                     pStatus      out varchar2,
                                     pMessage     out varchar2);

  Procedure Sp_Get_Habiltar(pUsuario   in  varchar2,
                            pCnpj      in  varchar2,
                            pParametro in  varchar2,
                            pHabiltar  out varchar2, -- S/N
                            pStatus    out varchar2,
                            pMessage   out varchar2);

  Procedure Sp_Get_SimulaValorColeta(pColeta  in tdvadm.t_arm_coleta.arm_coleta_ncompra%type,
                                     pCiclo   in tdvadm.t_arm_coleta.arm_coleta_ciclo%type,
                                     pUsuario in tdvadm.t_usu_usuario.usu_usuario_codigo%type,
                                     pCnpj    in  varchar2,
                                     pXml     out clob,
                                     pStatus  out varchar2,
                                     pMessage out varchar2);

  Procedure Sp_Get_SimulaValorColetaXML(pXmlIn   in Varchar2,
                                        pUsuario in Varchar2,
                                        pCnpj    in varchar2,
                                        pStatus  out varchar2,
                                        pMessage out varchar2);

  Procedure Sp_Get_OnuLista(pCursor  out T_CURSOR,
                            pStatus  out varchar2,
                            pMessage out varchar2);

  Procedure Sp_Get_Ocorrencias(pCursor  out T_CURSOR,
                               pStatus  out varchar2,
                               pMessage out varchar2);

  Procedure Sp_Set_UpdateColetaSetOcorr(pNCompra In t_Arm_Coleta.Arm_Coleta_Ncompra%Type,
                                        pCiclo   In t_Arm_Coleta.Arm_Coleta_Ciclo%Type,
                                        pOcorrencia In t_arm_coleta.arm_coletaocor_codigo%Type,
                                        pObservacao In Varchar2,
                                        pUsuario In Varchar2,
                                        pStatus  out char,
                                        pMessage out varchar2);

  Procedure Sp_Set_UpdateColetaSetOcorr2(pNCompra        In t_Arm_Coleta.Arm_Coleta_Ncompra%Type,
                                         pCiclo          In t_Arm_Coleta.Arm_Coleta_Ciclo%Type,
                                         pOcorrencia     In t_arm_coleta.arm_coletaocor_codigo%Type,
                                         pObs            In Varchar2,
                                         pDataChegada    In Varchar2,
                                         pDataSaida      In Varchar2,
                                         pHoraChegada    In Varchar2,
                                         pHoraSaida      In Varchar2,
                                         pUsuario        In Varchar2,
                                         pExecPorUsuario in char default 'S',
                                         pStatus         out char,
                                         pMessage        out varchar2);

  Procedure Sp_Set_CancelarColetaPendente(pNCompra        In t_Arm_Coleta.Arm_Coleta_Ncompra%Type,
                                          pCiclo          In t_Arm_Coleta.Arm_Coleta_Ciclo%Type,
                                          pObservacao     In Varchar2,
                                          pUsuario        In Varchar2,
                                          pStatus         out Char,
                                          pMessage        Out Varchar2);

  Procedure Sp_Get_ColetaTpFreteLista(pCnpjSolicitante in t_glb_cliente.glb_cliente_cgccpfcodigo%type,
                                      pCursor  out T_CURSOR,
                                      pStatus  out varchar2,
                                      pMessage out varchar2);

  Function Fn_Col_ValidaColetaTpFrete(pColetaRowType in T_arm_coleta%RowType,
                                      pStatus        out char,
                                      pMessage       out varchar2)return boolean;

  Procedure Sp_Get_AtualizaValoresPeso(pColeta  in tdvadm.t_arm_coleta.arm_coleta_ncompra%type,
                                       pCiclo   in tdvadm.t_arm_coleta.arm_coleta_ciclo%type,
                                       pStatus  out varchar2,
                                       pMessage out varchar2);

  Procedure Sp_Get_Localidade(pCursor  Out Types.cursorType,
                              pStatus  Out Char,
                              pMessage Out Varchar);

  Procedure Sp_Search_Localidade(pTexto In Varchar2,
                                 pCursor  Out Types.cursorType,
                                 pStatus  Out Char,
                                 pMessage Out Varchar);

  Procedure Sp_Get_SistemasOrigens(pCursor  Out Types.cursorType,
                                   pStatus  Out Char,
                                   pMessage Out Varchar);

  Procedure Sp_Get_CargaVeiculos(pCNPJSolicitante  in  tdvadm.t_glb_cliente.glb_cliente_cgccpfcodigo%type,
                                 pCNPJRemetente    in  tdvadm.t_glb_cliente.glb_cliente_cgccpfcodigo%type,
                                 pCNPJDestinatario in  tdvadm.t_glb_cliente.glb_cliente_cgccpfcodigo%type,
                                 pPagadorFrete     in  char,
                                 pCursor           out T_CURSOR,
                                 pStatus           out varchar2,
                                 pMessage          out varchar2);

  Procedure Sp_Get_TpCargaPorCnpj(pCNPJPagador in tdvadm.t_glb_cliente.glb_cliente_cgccpfcodigo%type,
                                  pTipoColeta  in tdvadm.t_arm_coleta.arm_coleta_tpcoleta%type,
                                  pCursor      out T_CURSOR,
                                  pStatus      out varchar2,
                                  pMessage     out varchar2);

  Procedure Sp_Get_TpVeiculos(pCNPJSolicitante  in  tdvadm.t_glb_cliente.glb_cliente_cgccpfcodigo%type,
                              pCNPJRemetente    in  tdvadm.t_glb_cliente.glb_cliente_cgccpfcodigo%type,
                              pCNPJDestinatario in  tdvadm.t_glb_cliente.glb_cliente_cgccpfcodigo%type,
                              pCNPJOutros in  tdvadm.t_glb_cliente.glb_cliente_cgccpfcodigo%type,
                              pPagadorFrete     in  char,
                              pTpCargaCodigo    in  tdvadm.t_arm_coleta.fcf_tpcarga_codigo%Type,
                              pCursor           out T_CURSOR,
                              pStatus           out varchar2,
                              pMessage          out varchar2);

  Procedure Sp_Set_ColetaExpressa(pColeta  in tdvadm.t_arm_coleta.arm_coleta_ncompra%type,
                                  pCiclo   in tdvadm.t_arm_coleta.arm_coleta_ciclo%type,
                                  pUsuario in tdvadm.t_arm_coleta.usu_usuario_autorizatpcarga%type, -- usuario que autorizou como empressa
                                  pStatus  out varchar2,
                                  pMessage out varchar2);

  Procedure Sp_Get_OcorrenciasFilter(pCursor  out T_CURSOR,
                                     pStatus  out varchar2,
                                     pMessage out varchar2);

  Function Fn_Get_PodeSerEfetivada(pColeta in tdvadm.t_arm_coleta.arm_coleta_ncompra%type,
                                   pCiclo  in tdvadm.t_arm_coleta.arm_coleta_ciclo%type) return boolean;

  Function Fn_Get_PodeAutorizarColeta(pUsuario in tdvadm.t_usu_usuario.usu_usuario_codigo%type,
                                      pCnpj    in varchar2) return boolean;

  Procedure Sp_Get_AbrirModalPreColeta(pColeta  in  tdvadm.t_arm_coleta.arm_coleta_ncompra%type,
                                       pCiclo   in  tdvadm.t_arm_coleta.arm_coleta_ciclo%type,
                                       pAbrir   out char, -- S/N
                                       pStatus  out varchar2,
                                       pMessage out varchar2);

  procedure Sp_Get_ItemsPedido(pPedido  in tdvadm.t_edi_arcelormittal.edi_arcelormittal_pedido%type,
                               pCursor      out types.cursorType,
                               pStatus      out varchar2,
                               pMessage     out varchar2);

  Procedure Sp_Post_ListColetaItemXml(pPreColetaXmlItem In Varchar2,
                                      pColetaNumero     In Varchar2,
                                      pColetaCiclo      In Varchar2,
                                      pStatus           out varchar2,
                                      pMessage          out varchar2);

  Function Fn_Get_EmailUsuario(pUsuarioCodigo in t_usu_usuario.usu_usuario_codigo%type) return varchar2;

  Function Fn_Get_EmailsColeta(pColeta  in  tdvadm.t_arm_coleta.arm_coleta_ncompra%type,
                               pCiclo   in  tdvadm.t_arm_coleta.arm_coleta_ciclo%type) return varchar2;

  Procedure Sp_Set_UpdatePosEfetivar(pColetaNumero in t_arm_coleta.arm_coleta_ncompra%type,
                                     pColetaCiclo  in t_arm_coleta.arm_coleta_ciclo%type,
                                     pStatus       out varchar2,
                                     pMessage      out varchar2);

  Procedure Sp_Set_EfetivarColetaDefault(pColetaNumero       in t_arm_coleta.arm_coleta_ncompra%type,
                                         pColetaCiclo        in t_arm_coleta.arm_coleta_ciclo%type,
                                         pMensagemEfeticacao out varchar2,
                                         pStatus             out varchar2,
                                         pMessage            out varchar2);

  Procedure Sp_Set_UpdateModalidade(pColetaNumero       in t_arm_coleta.arm_coleta_ncompra%type,
                                    pColetaCiclo        in t_arm_coleta.arm_coleta_ciclo%type,
                                    pUsuario            in t_usu_usuario.usu_usuario_codigo%type,
                                    pStatus             out varchar2,
                                    pMessage            out varchar2);

  Function Fn_Get_AlterarModalidadKpi(pUsuario In t_Usu_Usuario.Usu_Usuario_Codigo%Type) return Char;

  /*#######################################################################################################################################
  /*# 10/09/2015 - Fabiano Góes - Area especifica para Regras VALE
  /*#######################################################################################################################################*/

  function Fn_VALE_IsColetaVALE(pColetaRowType In t_Arm_Coleta%RowType) return boolean;

  Function Fn_VALE_ValidaCampos(pColetaRowType in t_arm_coleta%RowType,
                                pStatus        out char,
                                pMessage       out varchar2) return boolean;
                                               
  Function Fn_VALE_GETCONTRATO(pColetaRowType in t_arm_coleta%RowType)  return tdvadm.t_Arm_coleta.slf_contrato_codigo%type;
                                
  Function Fn_VALE_ValidaCamposNimbi(pColetaRowType in tdvadm.t_arm_coleta%RowType,
                                     pStatus        in out char,
                                     pMessage       in out varchar2) return boolean;

  Function Fn_VALE_LiberaItabrasco(pColetaRowType in tdvadm.t_arm_coleta%RowType,
                                     pStatus        in out char,
                                     pMessage       in out varchar2) return boolean;
                                     
  Function Fn_VALE_LiberaHispanobras(pColetaRowType in tdvadm.t_arm_coleta%RowType,
                                     pStatus        in out char,
                                     pMessage       in out varchar2) return boolean;
                                     
  Function Fn_VALE_LiberaNipoBrasileira(pColetaRowType in tdvadm.t_arm_coleta%RowType,
                                     pStatus        in out char,
                                     pMessage       in out varchar2) return boolean;

  Function Fn_VALE_LiberaMineracoesBR(pColetaRowType in tdvadm.t_arm_coleta%RowType,
                                     pStatus        in out char,
                                     pMessage       in out varchar2) return boolean;
                                     
  Function Fn_VALE_LiberaVale(pColetaRowType in tdvadm.t_arm_coleta%RowType,
                                     pStatus        in out char,
                                     pMessage       in out varchar2) return boolean;
  
  Function Fn_VALE_cnpjvale(pColetaRowType in tdvadm.t_arm_coleta%RowType) return boolean;
                                     
 Function Fn_VALE_baovale(pColetaRowType in tdvadm.t_arm_coleta%RowType,
                                     pStatus        in out char,
                                     pMessage       in out varchar2) return boolean;
                                    
 Function Fn_VALE_cnpjbaovale(pColetaRowType in tdvadm.t_arm_coleta%RowType) return boolean;
                                     
  Function Fn_VALE_LiberaFertilizantes(pColetaRowType in tdvadm.t_arm_coleta%RowType,
                                     pStatus        in out char,
                                     pMessage       in out varchar2) return boolean;
                                     
  Function Fn_VALE_LiberaValeMaraba(pColetaRowType in tdvadm.t_arm_coleta%RowType,
                                     pStatus        in out char,
                                     pMessage       in out varchar2) return boolean;
                                     
  Function Fn_VALE_LiberaValeSalobo(pColetaRowType in tdvadm.t_arm_coleta%RowType,
                                     pStatus        in out char,
                                     pMessage       in out varchar2) return boolean;
                                     
  Function Fn_VALE_LiberaKobrasco(pColetaRowType in tdvadm.t_arm_coleta%RowType,
                                     pStatus        in out char,
                                     pMessage       in out varchar2) return boolean;
  
  Function Fn_VALE_LiberaMosaic(pColetaRowType in tdvadm.t_arm_coleta%RowType,
                                     pStatus        in out char,
                                     pMessage       in out varchar2) return boolean; 
                                    
  
  Function Fn_VALE_LiberaSepetiba(pColetaRowType in tdvadm.t_arm_coleta%RowType,
                                     pStatus        in out char,
                                     pMessage       in out varchar2) return boolean; 
                                     
  Function Fn_VALE_LiberaMinCorumbaense(pColetaRowType in tdvadm.t_arm_coleta%RowType,
                                     pStatus        in out char,
                                     pMessage       in out varchar2) return boolean; 
                                     
  Function Fn_VALE_LiberaAcos(pColetaRowType in tdvadm.t_arm_coleta%RowType,
                                     pStatus        in out char,
                                     pMessage       in out varchar2) return boolean;
                                     
  Function Fn_VALE_LiberaAssociacaoVale(pColetaRowType in tdvadm.t_arm_coleta%RowType,
                                     pStatus        in out char,
                                     pMessage       in out varchar2) return boolean; 
                                     
  Function Fn_VALE_LiberaValeManganes(pColetaRowType in tdvadm.t_arm_coleta%RowType,
                                     pStatus        in out char,
                                     pMessage       in out varchar2) return boolean; 
                                      
                                     
  Function Fn_VALE_Usuarios_Autorizados(pColetaRowType in t_arm_coleta%RowType) return Boolean;
                                                                        
  Procedure Sp_VALE_EfetivarColeta(pColetaNumero in t_arm_coleta.arm_coleta_ncompra%type,
                                   pColetaCiclo  in t_arm_coleta.arm_coleta_ciclo%type,
                                   pMensagemEfeticacao out varchar2,
                                   pStatus       out varchar2,
                                   pMessage      out varchar2);
                                   
  Procedure Sp_VALE_EfetivarColetaNimbi(pColetaRowType in tdvadm.t_arm_coleta%RowType,
                                        pStatus       out varchar2,
                                        pMessage      out varchar2);       
  
  function Fn_VALE_RestringeAutoriza(pColetaRowType in t_arm_coleta%RowType,
                                    pUsuarioAutorizador  in t_arm_coleta.usu_usuario_codigoautoriza%type) return boolean;                                                                       
                                                                

  Function Fn_VALE_AguardaOuEfetiva(pColeta t_arm_coleta.arm_coleta_ncompra%type,
                                    pCiclo  t_arm_coleta.arm_coleta_ciclo%type) return Boolean;
                                    
  /*#######################################################################################################################################
  /*# 25/ABR/2018 - F.SEDEVITIZ - Area especifica para Regras VOTORANTIM CIMENTOS
  /*#######################################################################################################################################*/
   Function Fn_VTC_LiberaVTC(pColetaRowType in tdvadm.t_arm_coleta%RowType,
                                     pStatus        in out char,
                                     pMessage       in out varchar2) return boolean;                                       
        
  /*#######################################################################################################################################
  /*# 10/09/2015 - gustavo Vocatore - Area especifica para Regras ALCOA
  /*#######################################################################################################################################*/
      
   function Fn_ALC_RestringeAutoriza(pColetaRowType in t_arm_coleta%RowType,
                                    pUsuarioAutorizador  in t_arm_coleta.usu_usuario_codigoautoriza%type) return boolean;
  
    Function Fn_ALC_AguardaOuEfetiva(pColeta t_arm_coleta.arm_coleta_ncompra%type,
                                   pCiclo  t_arm_coleta.arm_coleta_ciclo%type) return Boolean;
  
   Procedure Sp_ALC_EfetivarColeta(pColetaNumero      in t_arm_coleta.arm_coleta_ncompra%type,
                                  pColetaCiclo        in t_arm_coleta.arm_coleta_ciclo%type,
                                  pMensagemEfeticacao out varchar2,
                                  pStatus             out varchar2,
                                  pMessage            out varchar2);   
                         
   function Fn_ALC_IsColetaALC(pColetaRowType in t_arm_coleta%RowType) return boolean;
                                    
   Function Fn_ALC_ValidaCampos(pColetaRowType in tdvadm.t_arm_coleta%RowType,
                               pStatus        out char,
                               pMessage       out varchar2) return boolean;
                               
                               
  /*#######################################################################################################################################
  /*# 09/12/2020 - Gustavo vocatore - Area especifica para Regras AMX
  /*#######################################################################################################################################*/

  function Fn_AMX_IsColetaAMX(pColetaRowType in t_arm_coleta%RowType) return boolean;
  
  Function Fn_AMX_ValidaCampos(pColetaRowType in tdvadm.t_arm_coleta%RowType,
                               pStatus        out char,
                               pMessage       out varchar2) return boolean;

  /*#######################################################################################################################################
  /*# 10/09/2015 - Fabiano Góes - Area especifica para Regras VLI
  /*#######################################################################################################################################*/
  Function Fn_VLI_AguardaOuEfetiva(pColeta t_arm_coleta.arm_coleta_ncompra%type,
                                   pCiclo  t_arm_coleta.arm_coleta_ciclo%type) return Boolean;

  Function Fn_VLI_ValidaCampos(pColetaRowType in tdvadm.t_arm_coleta%RowType,
                               pStatus        out char,
                               pMessage       out varchar2) return boolean;

  Procedure Sp_VLI_EfetivarColeta(pColetaNumero       in t_arm_coleta.arm_coleta_ncompra%type,
                                  pColetaCiclo        in t_arm_coleta.arm_coleta_ciclo%type,
                                  pMensagemEfeticacao out varchar2,
                                  pStatus             out varchar2,
                                  pMessage            out varchar2);


  function Fn_VLI_IsColetaVLI(pColetaRowType in t_arm_coleta%RowType) return boolean;
  
  function Fn_PET_IsColetaPET(pColetaRowType in t_arm_coleta%rowType) return boolean;

  function Fn_VLI_RestringeAutoriza(pColetaRowType in t_arm_coleta%RowType,
                                    pUsuarioAutorizador  in t_arm_coleta.usu_usuario_codigoautoriza%type) return boolean;

  /*#######################################################################################################################################
  /*# 01/04/2019 - Felipe Sedevitiz - Area especifica para Regras VTE
  /*#######################################################################################################################################*/
  Function Fn_VTE_AguardaOuEfetiva(pColeta t_arm_coleta.arm_coleta_ncompra%type,
                                   pCiclo  t_arm_coleta.arm_coleta_ciclo%type) return Boolean;

  Procedure Sp_VTE_EfetivarColeta(pColetaNumero       in t_arm_coleta.arm_coleta_ncompra%type,
                                  pColetaCiclo        in t_arm_coleta.arm_coleta_ciclo%type,
                                  pMensagemEfeticacao out varchar2,
                                  pStatus             out varchar2,
                                  pMessage            out varchar2);


  function Fn_VTE_IsColetaVTE(pColetaRowType in t_arm_coleta%RowType) return boolean;

  function Fn_VTE_RestringeAutoriza(pColetaRowType in t_arm_coleta%RowType,
                                    pUsuarioAutorizador  in t_arm_coleta.usu_usuario_codigoautoriza%type) return boolean;
                                    
                                    
  /*#######################################################################################################################################
  /*# 28/04/2020 - Rafael Noberto - Area especifica para Regras AGL=ANGLO AMERICAM
  /*#######################################################################################################################################*/                                 
  function Fn_AGL_IsColetaAGL(pColetaRowType in t_arm_coleta%RowType) return boolean;
       
  function Fn_AGL_RestringeAutoriza(pColetaRowType in t_arm_coleta%RowType,
                                    pUsuarioAutorizador  in t_arm_coleta.usu_usuario_codigoautoriza%type) return boolean;

  
  Procedure Sp_AGL_EfetivarColeta(pColetaNumero       in t_arm_coleta.arm_coleta_ncompra%type,
                                  pColetaCiclo        in t_arm_coleta.arm_coleta_ciclo%type,
                                  pMensagemEfeticacao out varchar2,
                                  pStatus             out varchar2,
                                  pMessage            out varchar2);   
                                      
  Function Fn_AGL_ValidaCampos(pColetaRowType in t_arm_coleta%RowType,
                               pStatus        out char,
                               pMessage       out varchar2)return boolean;
                         
                                  
  /*#######################################################################################################################################
  /*# 28/04/2020 - Rafael Noberto - Area especifica para Regras AGN=ANGLO NIQUEL
  /*#######################################################################################################################################*/                                 
  function Fn_AGN_IsColetaAGN(pColetaRowType in t_arm_coleta%RowType) return boolean;
       
  function Fn_AGN_RestringeAutoriza(pColetaRowType in t_arm_coleta%RowType,
                                    pUsuarioAutorizador  in t_arm_coleta.usu_usuario_codigoautoriza%type) return boolean;
                                    
   Function Fn_AGN_ValidaCampos(pColetaRowType in t_arm_coleta%RowType,
                               pStatus        out char,
                               pMessage       out varchar2)return boolean;

  
  Procedure Sp_AGN_EfetivarColeta(pColetaNumero       in t_arm_coleta.arm_coleta_ncompra%type,
                                  pColetaCiclo        in t_arm_coleta.arm_coleta_ciclo%type,
                                  pMensagemEfeticacao out varchar2,
                                  pStatus             out varchar2,
                                  pMessage            out varchar2);  
                                    

  /*#######################################################################################################################################
  /*# 10/09/2015 - Fabiano Góes - Area especifica para Regras AMT=Arcelomittla
  /*#######################################################################################################################################*/

  Procedure Sp_AMT_EfetivarColeta(pColetaNumero       in t_arm_coleta.arm_coleta_ncompra%type,
                                  pColetaCiclo        in t_arm_coleta.arm_coleta_ciclo%type,
                                  pMensagemEfeticacao out varchar2,
                                  pStatus             out varchar2,
                                  pMessage            out varchar2);
                                  
  Function Fn_AMT_AguardaOuEfetivaEX(pColeta t_arm_coleta.arm_coleta_ncompra%type,
                                     pCiclo  t_arm_coleta.arm_coleta_ciclo%type) return boolean;

  Function Fn_AMT_ValidaCampos(pColetaRowType in t_arm_coleta%RowType,
                               pStatus        out char,
                               pMessage       out varchar2)return boolean;
                               
 /* Function Fn_GIL_ValidaCampos(pColetaRowType in t_arm_coleta%RowType,
                               pStatus        out char,
                               pMessage       out varchar2)return boolean;*/                             

  function Fn_AMT_IsColetaAMT(pColetaRowType in t_arm_coleta%rowType) return boolean;
  
  function Fn_GIL_IsColetaGIL(pColetaRowType in t_arm_coleta%rowType) return boolean;

  Procedure Sp_AMT_ConfirmPost(pColetaType in T_arm_Coleta%RowType,
                                pStatus     out char,
                                pMessage    out varchar2);

  procedure Sp_AMT_SetColetaEntrega(pColetaNumero     In Varchar2,
                                    pColetaCiclo      In Varchar2,
                                    pStatus           out varchar2,
                                    pMessage          out varchar2);

  /*#######################################################################################################################################
  /*# 04/12/2015 - Diego - Area especifica para Regras THY=THYSSENKRUPP
  /*#######################################################################################################################################*/

  function Fn_THY_IsColetaTHYSSEN(pColetaRowType in t_arm_coleta%rowType) return boolean;

  Function Fn_THY_ValidaCampos(pColetaRowType in t_arm_coleta%RowType,
                               pStatus        out char,
                               pMessage       out varchar2)return boolean;
   
  /*********************************************************************************************
  * Data..: 29/04/2016
  * Autor.: Fabiano Góes
  * Versão: 2.0 - Refactor
  **********************************************************************************************/
  Function Fn_THY_AguardaOuEfetiva(pColeta t_arm_coleta.arm_coleta_ncompra%type, 
                                   pCiclo  t_arm_coleta.arm_coleta_ciclo%type) return Boolean;
                                   
  Procedure Sp_THY_EfetivarColeta(pColetaNumero       in t_arm_coleta.arm_coleta_ncompra%type,
                                  pColetaCiclo        in t_arm_coleta.arm_coleta_ciclo%type,
                                  pMensagemEfeticacao out varchar2,
                                  pStatus             out varchar2,
                                  pMessage            out varchar2);  


                                    
   /*#######################################################################################################################################
  /*# 14/01/2021 - Gustavo - Area especifica para Regras OWE=OWENS
  /*#######################################################################################################################################*/                                                   
               
     function Fn_OWE_RestringeAutoriza(pColetaRowType in t_arm_coleta%RowType,
                                    pUsuarioAutorizador  in t_arm_coleta.usu_usuario_codigoautoriza%type) return boolean;                                                                       
                          
               
     Function Fn_OWE_AguardaOuEfetiva(pColeta t_arm_coleta.arm_coleta_ncompra%type,
                                      pCiclo  t_arm_coleta.arm_coleta_ciclo%type) return Boolean;
                                                         
     function Fn_OWE_IsColetaOWE(pColetaRowType in t_arm_coleta%RowType) return boolean;
       
     Function Fn_OWE_ValidaCampos(pColetaRowType in t_arm_coleta%RowType,
                               pStatus        out char,
                               pMessage       out varchar2)return boolean;  
                               
     Procedure Sp_OWE_EfetivarColeta(pColetaNumero       in t_arm_coleta.arm_coleta_ncompra%type,
                                     pColetaCiclo        in t_arm_coleta.arm_coleta_ciclo%type,
                                     pMensagemEfeticacao out varchar2,
                                     pStatus             out varchar2,
                                     pMessage            out varchar2);
                                     
    /*#######################################################################################################################################
  /*# 08/06/2021 - TATI - Area especifica para Regras CAR=MINERACAO CARAIBA
  /*#######################################################################################################################################*/                                                                 
  function Fn_CAR_RestringeAutoriza(pColetaRowType in t_arm_coleta%RowType,
                                    pUsuarioAutorizador  in t_arm_coleta.usu_usuario_codigoautoriza%type) return boolean;                                                                       
                          
  
  Function Fn_CAR_AguardaOuEfetiva(pColeta t_arm_coleta.arm_coleta_ncompra%type,
                                      pCiclo  t_arm_coleta.arm_coleta_ciclo%type) return Boolean; 
  
  function Fn_CAR_IsColetaCAR(pColetaRowType in t_arm_coleta%RowType) return boolean;
  
  Function Fn_CAR_ValidaCampos(pColetaRowType in t_arm_coleta%RowType,
                               pStatus        out char,
                               pMessage       out varchar2)return boolean;  
   
  Procedure Sp_CAR_EfetivarColeta(pColetaNumero       in t_arm_coleta.arm_coleta_ncompra%type,
                                     pColetaCiclo        in t_arm_coleta.arm_coleta_ciclo%type,
                                     pMensagemEfeticacao out varchar2,
                                     pStatus             out varchar2,
                                     pMessage            out varchar2);                                                           

  /*#######################################################################################################################################
  /*# 18/01/2016 - Fabiano - Area especifica para Regras CBA Grupo = 0569
  /*#######################################################################################################################################*/

  function Fn_CBA_IsColetaCBA(pColetaRowType in t_arm_coleta%rowType) return boolean;

  Procedure Sp_CBA_EfetivarColeta(pColetaNumero       in t_arm_coleta.arm_coleta_ncompra%type,
                                  pColetaCiclo        in t_arm_coleta.arm_coleta_ciclo%type,
                                  pMensagemEfeticacao out varchar2,
                                  pStatus             out varchar2,
                                  pMessage            out varchar2);
                                  
  Function Fn_CBA_AguardaOuEfetiva(pUsuario t_Arm_coleta.Usu_Usuario_Codigo_Cad%type) return Boolean;  

  Function Fn_CBA_ValidaCampos(pColetaRowType in t_arm_coleta%RowType,
                               pStatus        out char,
                               pMessage       out varchar2) return boolean;
                               
                               
  function Fn_CBA_RestringeAutoriza(pColetaRowType in t_arm_coleta%RowType,
           pUsuarioAutorizador  in t_arm_coleta.usu_usuario_codigoautoriza%type) return boolean;
           
           
  /*#######################################################################################################################################
  /*# 28/04/2020 - Rafael Noberto - Area especifica para Regras OXI=OXITENO
  /*#######################################################################################################################################*/                                              
                                  
    Procedure Sp_OXI_EfetivarColeta(pColetaNumero       in t_arm_coleta.arm_coleta_ncompra%type,
                                  pColetaCiclo        in t_arm_coleta.arm_coleta_ciclo%type,
                                  pMensagemEfeticacao out varchar2,
                                  pStatus             out varchar2,
                                  pMessage            out varchar2);       
                                  
     function Fn_OXI_IsColetaOXI(pColetaRowType in t_arm_coleta%RowType) return boolean;      
     
                                         
     function Fn_OXI_RestringeAutoriza(pColetaRowType in t_arm_coleta%RowType,
                                    pUsuarioAutorizador  in t_arm_coleta.usu_usuario_codigoautoriza%type) return boolean; 
     
     Function Fn_OXI_ValidaCampos(pColetaRowType in t_arm_coleta%RowType,
                                  pStatus        out char,
                                  pMessage       out varchar2) return boolean;
                                  
    /*#######################################################################################################################################
  /*# 16/08/2021 - Tatiane Santos - Area especifica para Regras Vix=Vivix 
  /*#######################################################################################################################################*/  
  
    function Fn_VIX_IsColetaVIX(pColetaRowType in t_arm_coleta%RowType) return boolean;    
    

                                                                    
                                    
    
    Function Fn_ULT_AguardaOuEfetiva(pColetaRowType t_arm_coleta%rowtype, 
                                   pUsuario t_Arm_coleta.Usu_Usuario_Codigo_Cad%type)
     return Boolean;
    
    Procedure Sp_ULT_EfetivarColeta(pColetaNumero       in t_arm_coleta.arm_coleta_ncompra%type,
                                  pColetaCiclo        in t_arm_coleta.arm_coleta_ciclo%type,
                                  pMensagemEfeticacao out varchar2,
                                  pStatus             out varchar2,
                                  pMessage            out varchar2); 
                                     
    Function Fn_ULT_ValidaCampos(pColetaRowType in t_arm_coleta%rowType,
                                    pStatus        out char,
                                    pMessage       out varchar2)
    return boolean;
    
    function Fn_ULT_IsColetaULT(pColetaRowType in t_arm_coleta%rowType) return boolean;
    
  /*#######################################################################################################################################
  /*# 20/09/2021 - jOÃO - Area especifica para Regras ELDORADO
  /*#######################################################################################################################################*/                                                           
    function Fn_ELD_IsColetaELD(pColetaRowType in t_arm_coleta%RowType) return boolean;    
    
    Function Fn_ELD_ValidaCampos(pColetaRowType in t_arm_coleta%RowType,
                                pStatus        out char,
                                pMessage       out varchar2)return boolean;                                
                                                                             
  /*#######################################################################################################################################
  /*# 28/12/2020 - Tatiane - Area especifica para Regras ENE=ENEVA
  /*#######################################################################################################################################*/                                              
                                  
    Procedure Sp_ENE_EfetivarColeta(pColetaNumero       in t_arm_coleta.arm_coleta_ncompra%type,
                                  pColetaCiclo        in t_arm_coleta.arm_coleta_ciclo%type,
                                  pMensagemEfeticacao out varchar2,
                                  pStatus             out varchar2,
                                  pMessage            out varchar2);       
                                  
     function Fn_ENE_IsColetaENE(pColetaRowType in t_arm_coleta%RowType) return boolean;      
     
                                         
     function Fn_ENE_RestringeAutoriza(pColetaRowType in t_arm_coleta%RowType,
                                    pUsuarioAutorizador  in t_arm_coleta.usu_usuario_codigoautoriza%type) return boolean; 
     
     Function Fn_ENE_ValidaCampos(pColetaRowType in tdvadm.t_arm_coleta%RowType,
                               pStatus        out char,
                               pMessage       out varchar2) return boolean;
           
  /*#######################################################################################################################################
  /*# 16/08/2019 - Jonatas Veloso - Area especifica para Regras BioSev Grupo = 0643
  /*#######################################################################################################################################*/
   
   function Fn_BIO_IsColetaBIO(pColetaRowType in t_arm_coleta%rowType) return boolean;    
   
   Function Fn_BIO_AguardaOuEfetiva(pColetaRowType t_arm_coleta%rowtype, 
                                    pUsuario       t_Arm_coleta.Usu_Usuario_Codigo_Cad%type) return Boolean ;
   
   Procedure Sp_BIO_EfetivarColeta(pColetaNumero       in t_arm_coleta.arm_coleta_ncompra%type,
                                  pColetaCiclo        in t_arm_coleta.arm_coleta_ciclo%type,
                                  pMensagemEfeticacao out varchar2,
                                  pStatus             out varchar2,
                                  pMessage            out varchar2);   

   Function Fn_BIO_ValidaCampos(pColetaRowType in t_arm_coleta%RowType,
                                pStatus        out char,
                                pMessage       out varchar2)return boolean;
 /*#######################################################################################################################################
 /*# 08/07/2021 - Tatiane - Area especifica para Regras SOLTEC
 /*#######################################################################################################################################*/                               
    function Fn_SOL_IsColetaSOLTEC(pColetaRowType in t_arm_coleta%rowType) return boolean;  
                             
    Function Fn_SOL_ValidaCampos(pColetaRowType in t_arm_coleta%RowType,
                                pStatus        out char,
                                pMessage       out varchar2)return boolean;                                
                                
                                
                                
     /*#######################################################################################################################################
  /*# 01/04/2019 - Felipe Sedevitiz - Area especifica para Regras NOU
  /*#######################################################################################################################################*/

  Procedure Sp_NOU_EfetivarColeta(pColetaNumero       in t_arm_coleta.arm_coleta_ncompra%type,
                                  pColetaCiclo        in t_arm_coleta.arm_coleta_ciclo%type,
                                  pMensagemEfeticacao out varchar2,
                                  pStatus             out varchar2,
                                  pMessage            out varchar2);


  function Fn_NOU_IsColetaNOU(pColetaRowType in t_arm_coleta%RowType) return boolean;

  function Fn_NOU_RestringeAutoriza(pColetaRowType in t_arm_coleta%RowType,
                                    pUsuarioAutorizador  in t_arm_coleta.usu_usuario_codigoautoriza%type) return boolean;
                                    
                             
  /*#######################################################################################################################################
  /*# 09/FEV/2018 - Gustavo Vocatore, F.Sedevitiz - Area especifica para Regras ALB Grupo = 0612
  /*#######################################################################################################################################*/
          
   function Fn_ALB_RestringeAutoriza(pColetaRowType in t_arm_coleta%RowType,
                                    pUsuarioAutorizador  in t_arm_coleta.usu_usuario_codigoautoriza%type) return boolean;
                       
   Function Fn_ALB_AguardaOuEfetiva(pColeta t_arm_coleta.arm_coleta_ncompra%type,
                                   pCiclo  t_arm_coleta.arm_coleta_ciclo%type) return Boolean;
  
  function Fn_ALB_IsColetaALB(pColetaRowType in t_arm_coleta%rowType) return boolean;

  Procedure Sp_ALB_EfetivarColeta(pColetaNumero       in t_arm_coleta.arm_coleta_ncompra%type,
                                  pColetaCiclo        in t_arm_coleta.arm_coleta_ciclo%type,
                                  pMensagemEfeticacao out varchar2,
                                  pStatus             out varchar2,
                                  pMessage            out varchar2);
                                  
  Function Fn_ALB_ValidaCampos(pColetaRowType in t_arm_coleta%RowType,
                               pStatus        out char,
                               pMessage       out varchar2)return boolean;  
                               
 /*#######################################################################################################################################
 /*# 09/FEV/2018 - F.Sedevitiz - Area especifica para Regras SUZ Grupo = 0541
 /*#######################################################################################################################################*/
          
  function Fn_SUZ_RestringeAutoriza(pColetaRowType in t_arm_coleta%RowType,
                                    pUsuarioAutorizador  in t_arm_coleta.usu_usuario_codigoautoriza%type) return boolean;                                                                       
                                    
  Function Fn_SUZ_AguardaOuEfetiva(pColeta t_arm_coleta.arm_coleta_ncompra%type,
                                   pCiclo  t_arm_coleta.arm_coleta_ciclo%type) return Boolean;
                                                                                               
  function Fn_SUZ_IsColetaSUZ(pColetaRowType in t_arm_coleta%rowType) return boolean;

  Procedure Sp_SUZ_EfetivarColeta(pColetaNumero       in t_arm_coleta.arm_coleta_ncompra%type,
                                  pColetaCiclo        in t_arm_coleta.arm_coleta_ciclo%type,
                                  pMensagemEfeticacao out varchar2,
                                  pStatus             out varchar2,
                                  pMessage            out varchar2);
                                  
  Function Fn_SUZ_ValidaCampos(pColetaRowType in tdvadm.t_arm_coleta%RowType,
                               pStatus        out char,
                               pMessage       out varchar2)return boolean;
                                 
 /*#######################################################################################################################################
 /*# 15/FEV/2018 - F.Sedevitiz + G.Vocatore - Area especifica para Regras RAI Grupo = 0628
 /*#######################################################################################################################################*/
          
  function Fn_RAI_RestringeAutoriza(pColetaRowType in t_arm_coleta%RowType,
                                    pUsuarioAutorizador  in t_arm_coleta.usu_usuario_codigoautoriza%type) return boolean;                                                                       
                                    
  Function Fn_RAI_AguardaOuEfetiva(pColeta t_arm_coleta.arm_coleta_ncompra%type,
                                   pCiclo  t_arm_coleta.arm_coleta_ciclo%type) return Boolean;
                                                                                                                                                               
  function Fn_RAI_IsColetaRAI(pColetaRowType in t_arm_coleta%rowType) return boolean;

  Procedure Sp_RAI_EfetivarColeta(pColetaNumero       in t_arm_coleta.arm_coleta_ncompra%type,
                                  pColetaCiclo        in t_arm_coleta.arm_coleta_ciclo%type,
                                  pMensagemEfeticacao out varchar2,
                                  pStatus             out varchar2,
                                  pMessage            out varchar2);
                            
 Function Fn_RAI_ValidaCamposGeral(pColetaRowType  in t_arm_coleta%rowType,
                                   pStatus        out char,
                                   pMessage       out varchar2)return boolean;  
                                   
 Function Fn_RAI_ValidaItemsColeta(pListColetaItemRowType in tListaItensColeta2,
                                   pColetaNumero  in varchar2,
                                   pColetaCiclo   in varchar2,
                                   pStatus        out char,
                                   pMessage       out varchar2)return boolean;
                                   
 /*#######################################################################################################################################
 /*# 03/set/2019 - Ewerton + G.Vocatore - Area especifica para Regras APE Grupo = 0561
 /*#######################################################################################################################################*/
                                                                                                                                                              
  function Fn_APE_IsColetaAPERAN(pColetaRowType in t_arm_coleta%rowType) return boolean;
  
  /*Function Fn_APE_ValidaCampos(pColetaRowType in t_arm_coleta%RowType,
                               pStatus        out char,
                               pMessage       out varchar2)return boolean;  */
                               
  Procedure Sp_APE_EfetivarColeta(pColetaNumero       in t_arm_coleta.arm_coleta_ncompra%type,
                                  pColetaCiclo        in t_arm_coleta.arm_coleta_ciclo%type,
                                  pMensagemEfeticacao out varchar2,
                                  pStatus             out varchar2,
                                  pMessage            out varchar2);  
 
 /*#######################################################################################################################################
 /*# 28/FEV/2018 - F.Sedevitiz - Area especifica para Regras USI Grupo = 0567
 /*#######################################################################################################################################*/
          
  function Fn_USI_RestringeAutoriza(pColetaRowType in t_arm_coleta%RowType,
                                    pUsuarioAutorizador  in t_arm_coleta.usu_usuario_codigoautoriza%type) return boolean;                                                                       
                                    
  Function Fn_USI_AguardaOuEfetiva(pColeta t_arm_coleta.arm_coleta_ncompra%type,
                                   pCiclo  t_arm_coleta.arm_coleta_ciclo%type) return Boolean;
                                                                                               
  function Fn_USI_IsColetaUSI(pColetaRowType in t_arm_coleta%rowType) return boolean;

  Procedure Sp_USI_EfetivarColeta(pColetaNumero       in t_arm_coleta.arm_coleta_ncompra%type,
                                  pColetaCiclo        in t_arm_coleta.arm_coleta_ciclo%type,
                                  pMensagemEfeticacao out varchar2,
                                  pStatus             out varchar2,
                                  pMessage            out varchar2);
                                  
  Function Fn_USI_ValidaCampos(pColetaRowType in t_arm_coleta%RowType,
                               pStatus        out char,
                               pMessage       out varchar2)return boolean;  

  /*#######################################################################################################################################
  /*# 25/ABR/2018 - F.Sedevitiz - Area especifica para Regras Votorantin Cimentos = 0507
  /*#######################################################################################################################################*/
   Procedure Sp_VTC_EfetivarColeta(pColetaNumero      in t_arm_coleta.arm_coleta_ncompra%type,
                                  pColetaCiclo        in t_arm_coleta.arm_coleta_ciclo%type,
                                  pMensagemEfeticacao out varchar2,
                                  pStatus             out varchar2,
                                  pMessage            out varchar2);   
                         
   function Fn_VTC_IsColetaVTC(pColetaRowType in t_arm_coleta%RowType) return boolean;
                                    
   Function Fn_VTC_ValidaCampos(pColetaRowType in t_arm_coleta%RowType,
                               pStatus        out char,
                               pMessage       out varchar2) return boolean;  
                               
                               
                                 
  /*#######################################################################################################################################
 /*# 03/set/2019 - Ewerton + G.Vocatore - Area especifica para Regras PARANA Grupo = 0684
 /*#######################################################################################################################################*/
                                                                                                                                                              
  function Fn_PARANA_IsColetaPARANA(pColetaRowType in t_arm_coleta%rowType) return boolean;
  
  
  Procedure Sp_PARANA_EfetivarColeta(pColetaNumero       in t_arm_coleta.arm_coleta_ncompra%type,
                                  pColetaCiclo        in t_arm_coleta.arm_coleta_ciclo%type,
                                  pMensagemEfeticacao out varchar2,
                                  pStatus             out varchar2,
                                  pMessage            out varchar2);  
                                  
   function Fn_PARANA_RestringeAutoriza(pColetaRowType in t_arm_coleta%RowType,
                                    pUsuarioAutorizador  in t_arm_coleta.usu_usuario_codigoautoriza%type) return boolean; 
                               
 
  /*#######################################################################################################################################
  /*# 16/08/2017- Klayton / gustavo / Guilherme / Jonatas - Area especifica para Regras HYD Grupo = 0613
  /*#######################################################################################################################################*/
 
  function Fn_HYD_IsColetaHYD(pColetaRowType in t_arm_coleta%rowType) return boolean;
  
  Procedure Sp_HYD_EfetivarColeta(pColetaNumero       in t_arm_coleta.arm_coleta_ncompra%type,
                                  pColetaCiclo        in t_arm_coleta.arm_coleta_ciclo%type,
                                  pMensagemEfeticacao out varchar2,
                                  pStatus             out varchar2,
                                  pMessage            out varchar2); 
                                  
  Function Fn_HYD_AguardaOuEfetiva(pUsuario t_Arm_coleta.Usu_Usuario_Codigo_Cad%type) return boolean;
                                  
  Function Fn_HYD_ValidaCampos(pColetaRowType in t_arm_coleta%RowType,
                               pStatus        out char,
                               pMessage       out varchar2)return boolean;  
                               
    /*#######################################################################################################################################
  /*# 16/08/2017- Klayton / gustavo / Guilherme / Jonatas - Area especifica para Regras HYD Grupo = 0614
  /*#######################################################################################################################################*/
 
  function Fn_PAR_IsColetaPAR(pColetaRowType in t_arm_coleta%rowType) return boolean;
  
  Procedure Sp_PAR_EfetivarColeta(pColetaNumero       in t_arm_coleta.arm_coleta_ncompra%type,
                                  pColetaCiclo        in t_arm_coleta.arm_coleta_ciclo%type,
                                  pMensagemEfeticacao out varchar2,
                                  pStatus             out varchar2,
                                  pMessage            out varchar2); 
                                  
  Function Fn_PAR_ValidaCampos(pColetaRowType in t_arm_coleta%RowType,
                               pStatus        out char,
                               pMessage       out varchar2) return boolean;   
  
   function Fn_PAR_RestringeAutoriza(pColetaRowType in t_arm_coleta%RowType,
                                    pUsuarioAutorizador  in t_arm_coleta.usu_usuario_codigoautoriza%type) return boolean; 
                               
                                          
  /*#######################################################################################################################################
  /*# 16/08/2019 - Jonatas Veloso - Area especifica para Regras PRADA Grupo = 0615
  /*#######################################################################################################################################*/
   
   function Fn_PRA_IsColetaPRA(pColetaRowType in t_arm_coleta%rowType) return boolean;    
   
   
   Procedure Sp_PRA_EfetivarColeta(pColetaNumero       in t_arm_coleta.arm_coleta_ncompra%type,
                                  pColetaCiclo        in t_arm_coleta.arm_coleta_ciclo%type,
                                  pMensagemEfeticacao out varchar2,
                                  pStatus             out varchar2,
                                  pMessage            out varchar2);  
                                  
    Function Fn_PRA_ValidaCampos(pColetaRowType in t_arm_coleta%RowType,
                               pStatus        out char,
                               pMessage       out varchar2) return boolean;
                                  
   function Fn_PRA_RestringeAutoriza(pColetaRowType in t_arm_coleta%RowType,
                                    pUsuarioAutorizador  in t_arm_coleta.usu_usuario_codigoautoriza%type) return boolean;                                                           
   
   /*#######################################################################################################################################
   /*# 06/04/2021 - Tati Lirio - Area especifica para Regras Novelis Grupo = 0639
   /*#######################################################################################################################################*/     
   function Fn_NOV_IsColetaNOVELIS(pColetaRowType in t_arm_coleta%rowType) return boolean;     
   
   Procedure Sp_NOVELIS_EfetivarColeta(pColetaNumero       in t_arm_coleta.arm_coleta_ncompra%type,
                                       pColetaCiclo        in t_arm_coleta.arm_coleta_ciclo%type,
                                       pMensagemEfeticacao out varchar2,
                                       pStatus             out varchar2,
                                       pMessage            out varchar2); 
  
    Function Fn_Novelis_ValidaCampos(pColetaRowType in t_arm_coleta%rowType,
                                     pStatus        out char,
                                     pMessage       out varchar2) return boolean;
                                  
  /*#######################################################################################################################################
  /*# 27/03/2017 - Diego Lirio - Area especifica para Regras Votorantim Zinco Grupo = 0597
  /*#######################################################################################################################################*/  
           
  function Fn_VZI_IsColetaVZI(pColetaRowType in t_arm_coleta%rowType) return boolean;
  
   Procedure Sp_VZI_EfetivarColeta(pColetaNumero       in t_arm_coleta.arm_coleta_ncompra%type,
                                   pColetaCiclo        in t_arm_coleta.arm_coleta_ciclo%type,
                                   pMensagemEfeticacao out varchar2,
                                   pStatus             out varchar2,
                                   pMessage            out varchar2);  
                               
  --------

  Procedure Sp_Get_Item(pColeta    in t_arm_coleta.arm_coleta_ncompra%type,
                        pCiclo     in t_arm_coleta.arm_coleta_ciclo%type,
                        pSequencia in t_arm_coletancompra.arm_coleta_seqitem%type,
                        pCursor    out T_CURSOR,
                        pStatus    out varchar2,
                        pMessage   out varchar2);

  Procedure Sp_Set_IncluiParceiro(pColetaNumero in  t_arm_coleta.arm_coleta_ncompra%type,
                                  pColetaCiclo  in  t_arm_coleta.arm_coleta_ciclo%type,
                                  pCnpj         in  t_glb_cliente.glb_cliente_cgccpfcodigo%type,
                                  pTpEndereco   in  t_glb_cliend.glb_tpcliend_codigo%type,
                                  pTpParceiro   in  t_arm_coletaparceiro.arm_coletatppar_codigo%type,
                                  pStatus       out varchar2,
                                  pMessage      out varchar2);

  Function Fn_Get_TipoEndereco(pCnpj         in  t_glb_cliente.glb_cliente_cgccpfcodigo%type,
                               pTpEndereco   out t_glb_cliend.glb_tpcliend_codigo%type,
                               pStatus       out char,
                               pMessage      out varchar2)return boolean;

  Procedure Sp_Set_InsereParceirosColeta(pColetaRowType  in t_arm_coleta%RowType,
                                         pListaParceiros in tListaParceiros,
                                         pStatus         out char,
                                         pMessage        out varchar2);

  Function Fn_Get_MercadoriaDescPreCol(pPreColetaRowType In t_Edi_Arcelormittal%RowType) return Varchar2;

  Function Fn_Get_PreColetaPorItemCol(pColetaNCompra In t_arm_coletancompra.arm_coletancompra%Type,
                                      pColetaCiclo   In t_arm_coletancompra.arm_coleta_ciclo%Type,
                                      pSequencia     In t_arm_coletancompra.arm_coleta_seqitem%Type) return t_Edi_Arcelormittal%Rowtype;

  Procedure Sp_Get_ColetaPedidos(pColeta  In t_arm_coleta.arm_coleta_ncompra%Type,
                                 pCiclo   In t_arm_coleta.arm_coleta_ciclo%Type,
                                 pCursor  Out types.cursorType,
                                 pStatus  Out Char,
                                 pMessage Out Varchar2) ;

  Procedure Sp_Set_SaveColetaPedido(pColeta In t_arm_coleta.arm_coleta_ncompra%Type,
                                    pCiclo  In t_arm_coleta.arm_coleta_ciclo%Type,
                                    pPedido In Varchar2,
                                    pUsuario in Varchar2,
                                    pStatus       Out Char,
                                    pMessage      Out Varchar2);

  Procedure Sp_DeleteColetaPedido(pColeta In t_arm_coleta.arm_coleta_ncompra%Type,
                                  pCiclo  In t_arm_coleta.arm_coleta_ciclo%Type,
                                  pPedido In Varchar2,
                                  pUsuario in Varchar2,
                                  pStatus       Out Char,
                                  pMessage      Out Varchar2);
             
  
                       

  Procedure Sp_Get_ColetaAcompanhamentos(pColeta  In  t_Arm_Coleta.Arm_Coleta_Ncompra%Type,
                                         pCiclo   In  t_Arm_Coleta.Arm_Coleta_ciclo%Type,
                                         pCursor  Out types.cursorType,
                                         pStatus  Out Char,
                                         pMessage Out Varchar2);                                  

  Function Fn_GetPlaca(pPlacaConj In Varchar2) return varchar2;                                  

  Function Fn_GetPlacaValeFrete(pColetaCodigo In Tdvadm.t_arm_Coleta.Arm_Coleta_Ncompra%Type,
                                pColetaCiclo  In Tdvadm.t_arm_coleta.Arm_Coleta_Ciclo%Type) return varchar2;

  Procedure Sp_Get_ColetaTracking(pColeta In Varchar2,
                                  pCiclo  In Varchar,
                                  pCursor Out Types.cursorType,
                                  pStatus Out Char,
                                  pMessage Out Varchar2);
                                  
  Procedure Sp_Get_NotasPorColeta(pColeta  In T_arm_Coleta.Arm_Coleta_Ncompra%Type,
                                  pCiclo   In T_arm_Coleta.arm_coleta_ciclo%Type,
                                  pCursor  Out Types.cursorType,
                                  pStatus  Out Char,
                                  pMessage Out Varchar2);
                                  
  Procedure Sp_Get_CTRCsPorColeta(pColeta  In T_arm_Coleta.Arm_Coleta_Ncompra%Type,
                                  pCiclo   In T_arm_Coleta.arm_coleta_ciclo%Type,
                                  pCursor  Out Types.cursorType,
                                  pStatus  Out Char,
                                  pMessage Out Varchar2);                                                                    
                                  
  Function Fn_Get_IsUsuarioComercial(pUsuario in tdvadm.t_usu_usuario.usu_usuario_codigo%type,
                                     pCnpj    in  varchar2) return boolean;

  Procedure Sp_Get_TokenLogin(pLogin in  varchar2,
                              pToken out varchar2,
                              pStatus  Out Char,
                              pMessage Out Varchar2);
                              
  Procedure Sp_Get_CicloMax(pNCompra in  varchar2,
                            pCiclo   out varchar2,
                            pStatus  Out Char,
                            pMessage Out Varchar2);
 

  Function Fn_Col_IsUsuarioTDV(pColetaRowType tdvadm.t_Arm_Coleta%RowType,
                               pStatus     out char,
                               pMessage    out varchar2)return boolean;
  
  Procedure Sp_Col_ValidaAsnNimbi(p_idasn    in t_col_asn.col_asn_id%type,
                                  p_coleta   in tdvadm.t_arm_coleta.arm_coleta_ncompra%type,
                                  p_ciclo    in tdvadm.t_arm_coleta.arm_coleta_ciclo%type,
                                  p_status   out char,
                                  p_message  in out varchar2);
  
  Procedure Sp_Xml_InsereRejeicaoNimbi(pIdAsn        in tdvadm.t_col_asn.col_asn_id%type,
                                       pIdRejeicao   in tdvadm.t_col_asntiporej.col_asntiporej_id%type,
                                       pStatus       out char,
                                       pMessage      out varchar2);                           
  
  Function Fnp_Xml_ValidaDataNimbi(p_Data in varchar2) return char;
    
  Function Fn_Xml_FormataDataNimbi(pDataStr in varchar2, pDateRet out date)return boolean;                           

  Function Fn_Xml_PodeAlterarColetaNimbi(p_coleta in tdvadm.t_arm_coleta.arm_coleta_ncompra%type,
                                         p_ciclo  in tdvadm.t_arm_coleta.arm_coleta_ciclo%type) return integer;
  
  Function Fn_Xml_RetornaCnpjFilialNimbi(p_armcoleta      t_arm_coleta.arm_coleta_ncompra%type,
                                         p_armcoletaciclo t_arm_coleta.arm_coleta_ciclo%type)return varchar2;
  
  Function Fn_Xml_RetNumeroNotaNimbi(p_armcoleta      t_arm_coleta.arm_coleta_ncompra%type,
                                     p_armcoletaciclo t_arm_coleta.arm_coleta_ciclo%type) return varchar2;
                                
  Function Fn_Xml_RetPesoRealNotaNimbi(p_armcoleta      t_arm_coleta.arm_coleta_ncompra%type,
                                       p_armcoletaciclo t_arm_coleta.arm_coleta_ciclo%type) return varchar2;    
  
  Procedure Sp_Col_CancelaAsnNimbi(pColetaNumero    in tdvadm.t_arm_coleta.arm_coleta_ncompra%type,
                                   pColetaCiclo     in tdvadm.t_arm_coleta.arm_coleta_ciclo%type,
                                   pObsCancelamento in varchar2,
                                   pUsuario         in tdvadm.t_usu_usuario.usu_usuario_codigo%type,
                                   pStatus          out char,
                                   pMessage         out varchar2);
 
  Procedure Sp_Col_ColetadoAsnNimbi(pColetaNumero     in tdvadm.t_arm_coleta.arm_coleta_ncompra%type,
                                    pColetaCiclo      in tdvadm.t_arm_coleta.arm_coleta_ciclo%type,
                                    pDataRealColetado in varchar2,
                                    pUsuario          in tdvadm.t_usu_usuario.usu_usuario_codigo%type,
                                    pStatus           out char,
                                    pMessage          out varchar2); 
 
  Procedure Sp_Col_InformaAsnQuadrem(pColetaNumero     in tdvadm.t_arm_coleta.arm_coleta_ncompra%type,
                                     pColetaCiclo      in tdvadm.t_arm_coleta.arm_coleta_ciclo%type,
                                     pStatus           out char,
                                     pMessage          out varchar2);
                                      
  Procedure Sp_Col_InformaCliente(pStatus  out char,
                                  pMessage out varchar2);                                     
                                     
  Procedure Sp_Col_ColetaPart(pColetaNumero in tdvadm.t_arm_coleta.arm_coleta_ncompra%type,
                              pCiclo        in tdvadm.t_arm_coleta.arm_coleta_ciclo%type,
                              pIdAsnNimbi   in tdvadm.t_col_asn.col_asn_id%type,
                              pStatus       out char,
                              pMessage      out varchar2);   
                              
 Procedure Sp_SaveImpExp( pXml           In Clob,
                          pStatus        Out Char,
                          pMessage       Out Varchar2);                                                                                                                                                           

  Procedure Sp_SaveImportExport(pAgenciaNaveg  In Varchar2,
                                pDiReserva     In Varchar2,
                                pCodCli        In Varchar2,
                                pCodDesp       In Varchar2,
                                pNavio         In Varchar2,
                                pTerminalCol   In Varchar2,
                                pTerminalEnt   In Varchar2,
                                pPorto         In Varchar2,
                                pContainerCod  In Varchar2,
                                pContainerTam  In Varchar2,
                                pContainerTp   In varchar2,
                                pContainerTara In Varchar2,
                                pNormalImpExp  In Char,
                                pColeta        In Tdvadm.t_arm_coleta.Arm_Coleta_Ncompra%Type,
                                pCiclo         In Tdvadm.t_arm_coleta.Arm_Coleta_Ciclo%Type,
                                pStatus        Out Char,
                                pMessage       Out Varchar2);
                                
  Procedure Sp_Find_ColetaImpExp(pColeta  In T_arm_coleta.Arm_Coleta_Ncompra%Type,
                                 pCiclo   In T_arm_coleta.Arm_Coleta_ciclo%Type,
                                 pCursor  Out Types.cursorType,
                                 pStatus  Out Char,
                                 pMessage Out Varchar2);                                
                                
  Procedure Sp_Get_DadosImpExp(pColeta  In T_arm_coleta.Arm_Coleta_Ncompra%Type,
                               pCiclo   In T_arm_coleta.Arm_Coleta_ciclo%Type,
                               pCursor  Out Types.cursorType,
                               pStatus  Out Char,
                               pMessage Out Varchar2);                                

  Procedure Sp_Set_UpdateFlagDemandaFrota(pNCompra  in  varchar2,
                                          pCiclo    in  varchar2,
                                          pFlag     in  varchar2,
                                          pStatus   Out Char,
                                          pMessage  Out Varchar2);
                                          
  Procedure Sp_Set_UpdateFlagCargaDireta(pNCompra  in  varchar2,
                                         pCiclo    in  varchar2,
                                         pFlag     in  varchar2,
                                         pStatus   Out Char,
                                         pMessage  Out Varchar2);
                                         
  function Fn_Col_IsColetaTransferencia(pNCompra  in  varchar2,
                                          pCiclo   in  varchar2) return char;
  
  Function Fn_Col_GetOperacaoVale(pIdAsn in tdvadm.t_col_asn.col_asn_id%type) return char;
  
   Function Fn_Col_GetOperacaoValeCnpj(pRemetente in tdvadm.t_glb_cliente.glb_cliente_cgccpfcodigo%type,
                                        pDestinatario in tdvadm.t_glb_cliente.glb_cliente_cgccpfcodigo%type) return char;
  
  Function Fn_Col_GetTpValidacao(pTransportationType in varchar2,
                                 pFragileLoad        in varchar2,
                                 pSelfSupportingLoad in varchar2) return varchar2;
  
  Function Fn_Col_GetVeiclo(pVeiculo in tdvadm.t_col_asntipoveiculo.col_asntipoveiculo_codnimbi%type) return number;                               
                                           
end Pkg_Col_Coleta;
/
create or replace package body Pkg_Col_Coleta is
  /*********************************************************************************************
  * Data..: 03/09/2015
  * Autor.: Diego Lirio
  * Versão: 1.0
  * Procedure para converter Xml em T_Arm_Coleta%Rowtype (linha da tabela)
  **********************************************************************************************/
  Function Fn_XmlToColetaRowType(pXml In Clob)
    return T_Arm_Coleta%Rowtype
  As
    vColetaRowType tdvadm.T_Arm_Coleta%Rowtype; 
  Begin

        for p_cursor in( SELECT extractValue(VALUE(TAB2), '/coleta/ajudante')                  ajudante,
                                extractValue(VALUE(TAB2), '/coleta/altura')                    altura,
                                extractValue(VALUE(TAB2), '/coleta/armazem/codigo')            armazem,
                                extractValue(VALUE(TAB2), '/coleta/localColeta/cliente/cnpj')  localColetacnpj,
                                extractValue(VALUE(TAB2), '/coleta/localColeta/tipo')          localColetatipo,
                                extractValue(VALUE(TAB2), '/coleta/localEntrega/cliente/cnpj') localEntregacnpj,
                                extractValue(VALUE(TAB2), '/coleta/localEntrega/tipo')         localEntregatipo,
                                extractValue(VALUE(TAB2), '/coleta/comprimento')               comprimento,
                                extractValue(VALUE(TAB2), '/coleta/cubagem')                   cubagem,
                                extractValue(VALUE(TAB2), '/coleta/centroCusto')               centroCusto,
                                extractValue(VALUE(TAB2), '/coleta/flagCopia')                 flagCopia,
                                extractValue(VALUE(TAB2), '/coleta/flagReImpressao')           flagReImpressao,
                                extractValue(VALUE(TAB2), '/coleta/largura')                   largura,
                                extractValue(VALUE(TAB2), '/coleta/peso')                      peso,
                                extractValue(VALUE(TAB2), '/coleta/pesoBalanca')               pesoBalanca,
                                extractValue(VALUE(TAB2), '/coleta/pesoCobrado')               pesoCobrado,
                                extractValue(VALUE(TAB2), '/coleta/prioridade')                prioridade,
                                extractValue(VALUE(TAB2), '/coleta/quantidadeAudante')         quantidadeAudante,
                                extractValue(VALUE(TAB2), '/coleta/quantidadeNfs')             quantidadeNFs,
                                extractValue(VALUE(TAB2), '/coleta/descricaoNFs')              descricaoNFs,
                                extractValue(VALUE(TAB2), '/coleta/tpColeta')                  tpColeta,
                                extractValue(VALUE(TAB2), '/coleta/valorColeta')               valorColeta,
                                extractValue(VALUE(TAB2), '/coleta/valorMercadoria')           valorMercadoria,
                                extractValue(VALUE(TAB2), '/coleta/valorSeguro')               valorSeguro,
                                extractValue(VALUE(TAB2), '/coleta/volumes')                   volumes,
                                extractValue(VALUE(TAB2), '/coleta/tipoCarga/codigo')          tipoCargaCodigo,
                                extractValue(VALUE(TAB2), '/coleta/tipoVeiculo/codigo')        tipoVeiculoCodigo,
                                --extractValue(VALUE(TAB2), '/coleta/tipoCompra')                TipoCompra,
                                extractValue(VALUE(TAB2), '/coleta/dataProgramacao')           dataProgramacao,
                                extractValue(VALUE(TAB2), '/coleta/horaProgramacao')           horaProgramacao,
                                extractValue(VALUE(TAB2), '/coleta/pedido')                    pedido,
                                extractValue(VALUE(TAB2), '/coleta/ocorrencia/codigo')         ocorrencia,
                                extractValue(VALUE(TAB2), '/coleta/coletaOrigem/codigo')       codorigemcol,
                                extractValue(VALUE(TAB2), '/coleta/contato/login')             Solicitante,
                                extractValue(VALUE(TAB2), '/coleta/usuarioAlterou/codigo')     UsuarioAlterou,
                                extractValue(VALUE(TAB2), '/coleta/contato/nome')              NomeSolicitante,
                                extractValue(VALUE(TAB2), '/coleta/contato/telefone')          TelefoneSolicitante,
                                extractValue(VALUE(TAB2), '/coleta/contato/email')             EmailSolicitante,
                                --extractValue(VALUE(TAB2), '/coleta/contato/cnpj')              CnpjSolicitante,
                                extractValue(VALUE(TAB2), '/coleta/cnpjSolicitante')           CnpjSolicitanteColeta,
                                extractValue(VALUE(TAB2), '/coleta/nCompra')                   nCompra,
                                extractValue(VALUE(TAB2), '/coleta/ciclo')                     ciclo,
                                extractValue(VALUE(TAB2), '/coleta/coletaTpFrete/id')          coletaTpFrete,
                                extractValue(VALUE(TAB2), '/coleta/modalidade')                modalidade,
                                extractValue(VALUE(TAB2), '/coleta/observacao')                observacao,
                                extractValue(VALUE(TAB2), '/coleta/pagadorFrete')              pagadorFrete,
                                extractValue(VALUE(TAB2), '/coleta/cnpjPagadorFrete')          cnpjPagadorFrete,
                                extractValue(VALUE(TAB2), '/coleta/consolidaArmazem')          consolidaArmazem,
                                extractValue(VALUE(TAB2), '/coleta/dadosComplementares/contatoColeta/nome') dadosComplColetaNome,
                                extractValue(VALUE(TAB2), '/coleta/xmlColetaNumero')           xmlColetaNumero,
                                extractValue(VALUE(TAB2), '/coleta/dataSolicitacao')           dataSolicitacao,
                                extractValue(VALUE(TAB2), '/coleta/horaSolicitacao')           horaSolicitacao
                           FROM TABle(XMLSequence(extract(xmltype.createXML(pXml), '/coleta'))) TAB2
                          WHERE 0 = 0)
           loop
               vColetaRowType.Arm_Coleta_Ncompra             := substr(trim(p_cursor.Ncompra),1,6);
               vColetaRowType.Arm_Coleta_Ciclo               := substr(trim(p_cursor.ciclo),1,3);
               vColetaRowType.Arm_Coleta_Pedido              := p_cursor.pedido;
               vColetaRowType.Arm_Coleta_Cnpjsolicitante     := p_cursor.Cnpjsolicitantecoleta;
               vColetaRowType.Arm_Coleta_Ajudante            := p_cursor.ajudante;
               vColetaRowType.Arm_Coleta_Altura              := to_number(p_cursor.altura);
               vColetaRowType.Arm_Armazem_Codigo             := p_cursor.armazem;
               vColetaRowType.Glb_Cliente_Cgccpfcodigocoleta := p_cursor.localcoletacnpj;
               vColetaRowType.Glb_Tpcliend_Codigocoleta      := p_cursor.localcoletatipo;
               vColetaRowType.Glb_Cliente_Cgccpfcodigoentreg := p_cursor.localentregacnpj;
               vColetaRowType.Glb_Tpcliend_Codigoentrega     := p_cursor.localentregatipo;
               vColetaRowType.Arm_Coleta_Comprimento         := to_number(p_cursor.comprimento);
               vColetaRowType.Arm_Coleta_Centrodecusto       := p_cursor.centrocusto;
               vColetaRowType.Arm_Coleta_Flagcopia           := p_cursor.flagcopia;
               vColetaRowType.Arm_Coleta_Flagreempr          := p_cursor.flagreimpressao;
               vColetaRowType.Arm_Coleta_Largura             := to_number(p_cursor.largura);
               vColetaRowType.Arm_Coleta_Pesobalanca         := to_number(p_cursor.pesobalanca);
               vColetaRowType.Arm_Coleta_Pesocobrado         := to_number(p_cursor.pesocobrado);
               vColetaRowType.Arm_Coleta_Prioridade          := p_cursor.prioridade;
               vColetaRowType.Arm_Coleta_Qtdeajudante        := p_cursor.quantidadeaudante;
               vColetaRowType.Arm_Coleta_Qtdenfs             := p_cursor.quantidadeNFs;
               vColetaRowType.Arm_Coleta_Descnfs             := p_cursor.descricaoNFs;
               vColetaRowType.Arm_Coleta_Tpcoleta            := p_cursor.tpcoleta;
               vColetaRowType.Arm_Coleta_Valorcoleta         := to_number(p_cursor.valorcoleta);
               vColetaRowType.Arm_Coleta_Vlmercadoria        := to_number(p_cursor.valormercadoria);
               vColetaRowType.Arm_Coleta_Vlrseg              := to_number(p_cursor.valorseguro);
               vColetaRowType.Arm_Coleta_Volumes             := to_number(p_cursor.volumes);
               vColetaRowType.Fcf_Tpcarga_Codigo             := p_cursor.tipocargacodigo;
               vColetaRowType.Fcf_Tpveiculo_Codigo           := p_cursor.tipoveiculocodigo ;
               vColetaRowType.Usu_Usuario_Codigo_Cad         := p_cursor.solicitante;
               vColetaRowType.Usu_Usuario_Codalterou         := p_cursor.Usuarioalterou;
               vColetaRowType.Arm_Coleta_Fonesolic           := p_cursor.telefonesolicitante;
               vColetaRowType.Arm_Coleta_Emailsolic          := p_cursor.emailsolicitante;
               vColetaRowType.Arm_Coleta_Solicitante         := p_cursor.nomesolicitante;

               vColetaRowType.Arm_Coleta_Tpcompra            := case p_cursor.pagadorfrete
                                                                  when 'R' then 'CIF'
                                                                  when 'S' then 'CIF'
                                                                  when 'D' then 'FOB'
                                                                  else 'FOB'
                                                                end;

               vColetaRowType.Arm_Coleta_Dtprogramacao       := p_cursor.dataProgramacao;
               vColetaRowType.Arm_Coleta_Hrprogramacao       := p_cursor.horaprogramacao;
               vColetaRowType.arm_coletatpfrete_id           := p_cursor.coletatpfrete;

               -- Ocorrencia da Coleta
               if p_cursor.ocorrencia is not null then
                  vColetaRowType.Arm_Coletaocor_Codigo       := lpad(p_cursor.ocorrencia,2,0);
               end if;

               vColetaRowType.Arm_Coletaorigem_Cod           := to_number(p_cursor.codorigemcol);
               vColetaRowType.arm_coleta_entcoleta           := substr(p_cursor.modalidade, 1, 1);
               vColetaRowType.Arm_Coleta_Obs                 := p_cursor.observacao;
               vColetaRowType.Arm_Coleta_Pagadorfrete        := trim(p_cursor.pagadorFrete);
               vColetaRowType.Arm_Coleta_Cnpjpagadorferete   := trim(p_cursor.cnpjPagadorFrete);
               vColetaRowType.Arm_Coleta_Consolidararmazem   := p_cursor.consolidaarmazem;
               vColetaRowType.Xml_Coleta_Numero              := p_cursor.xmlColetaNumero;
               vColetaRowType.Arm_Coleta_Dtsolicitacao       := p_cursor.datasolicitacao;
               vColetaRowType.Arm_Coleta_Hrsolicitacao       := p_cursor.horasolicitacao;

               if p_cursor.dadoscomplcoletanome Is not null then
                  vColetaRowType.Arm_Coleta_Dadoscompl := Fn_ExtraiXmlContent(pXml, '<dadosComplementares>', '</dadosComplementares>');
               end if;
           end loop;
           return vColetaRowType;
  End Fn_XmlToColetaRowType;
  
     Function Fn_XmlToLoteColetaRowType(pXml In Clob)
    return T_Arm_loteColeta%Rowtype
  As
    vLoteColetaRowType tdvadm.T_Arm_LoteColeta%Rowtype; 
    --vErro varchar2(2000);
  Begin
    

        --begin
          
        for p_cursor in( SELECT extractValue(VALUE(TAB2), '/loteColeta/lote')                  lote,
                                extractValue(VALUE(TAB2), '/loteColeta/cnpjOrigem')            cnpjorigem,
                                extractValue(VALUE(TAB2), '/loteColeta/ibgeOrigem')            ibgeorigem,    
                                extractValue(VALUE(TAB2), '/loteColeta/cnpjDestino')           cnpjdestino,
                                extractValue(VALUE(TAB2), '/loteColeta/ibgeDestino')           ibgedestino,
                                extractValue(VALUE(TAB2), '/loteColeta/cnpjPagador')           cnpjpagador,
                                extractValue(VALUE(TAB2), '/loteColeta/ibgePagador')           ibgepagador, 
                                extractValue(VALUE(TAB2), '/loteColeta/cnpjParceiro')          cnpjParceiro,
                                extractValue(VALUE(TAB2), '/loteColeta/ibgeParceiro')          ibgeParceiro, 
                                extractValue(VALUE(TAB2), '/loteColeta/tipoParceiro')          tipoParceiro,   
                                extractValue(VALUE(TAB2), '/loteColeta/armazem')               armazem,
                                extractValue(VALUE(TAB2), '/loteColeta/prioridade')            prioridade,
                                extractValue(VALUE(TAB2), '/loteColeta/modalidade')            modalidade,  
                                extractValue(VALUE(TAB2), '/loteColeta/pagadorFrete')          pagadorfrete,    
                                extractValue(VALUE(TAB2), '/loteColeta/dataProgramacao')       dataprogramacao,  
                                extractValue(VALUE(TAB2), '/loteColeta/valorMercadoria')       valormercadoria, 
                                extractValue(VALUE(TAB2), '/loteColeta/pedido')                pedido,    
                                extractValue(VALUE(TAB2), '/loteColeta/qtdNota')               qtdnota,
                                extractValue(VALUE(TAB2), '/loteColeta/notas')                 notas,   
                                extractValue(VALUE(TAB2), '/loteColeta/tipoCarga')             tipocarga,  
                                extractValue(VALUE(TAB2), '/loteColeta/tipoFrete')             tipofrete,  
                                extractValue(VALUE(TAB2), '/loteColeta/tipoVeiculo')           tipoveiculo,
                                extractValue(VALUE(TAB2), '/loteColeta/observacao')            observacao,
                                extractValue(VALUE(TAB2), '/loteColeta/codigo')                codigo                
                           FROM TABle(XMLSequence(extract(xmltype.createXML(pXml), '/loteColeta'))) TAB2
                          WHERE 0 = 0)
           loop
               vLoteColetaRowType.Arm_Lotecoleta_Id               := tdvadm.seq_arm_lotecoleta.nextval;
               vLoteColetaRowType.Arm_Lotecoleta_Cnpjorigem       := p_cursor.cnpjorigem;
               vLoteColetaRowType.Arm_Lotecoleta_Ibgeorigem       := p_cursor.ibgeorigem;
               vLoteColetaRowType.Arm_Lotecoleta_Cnpjdestino      := p_cursor.cnpjdestino;
               vLoteColetaRowType.Arm_Lotecoleta_Ibgedestino      := p_cursor.ibgedestino;
               vLoteColetaRowType.Arm_Lotecoleta_cnpjpagador      := p_cursor.cnpjpagador;
               vLoteColetaRowType.Arm_Lotecoleta_Ibgepagador      := p_cursor.ibgepagador;
               vLoteColetaRowType.Arm_Lotecoleta_cnpjparceiro     := p_cursor.cnpjParceiro;
               vLoteColetaRowType.Arm_Lotecoleta_ibgeparceiro     := p_cursor.ibgeParceiro;
               vLoteColetaRowType.Arm_Lotecoleta_tipoparceiro     := p_cursor.tipoparceiro;
               vLoteColetaRowType.Arm_Lotecoleta_armazem          := p_cursor.armazem;
               vLoteColetaRowType.Arm_Lotecoleta_prioridade       := p_cursor.prioridade;
               vLoteColetaRowType.Arm_Lotecoleta_modalidade       := p_cursor.modalidade;
               vLoteColetaRowType.Arm_Lotecoleta_pagadorfrete     := p_cursor.pagadorfrete;
               vLoteColetaRowType.Arm_Lotecoleta_dataprogramacao  := to_date(p_cursor.dataprogramacao, 'DD/MM/YYYY HH24:MI:SS');
               vLoteColetaRowType.Arm_Lotecoleta_valormercadoria  := p_cursor.valormercadoria;
               vLoteColetaRowType.Arm_Lotecoleta_pedido           := p_cursor.pedido;
               vLoteColetaRowType.Arm_Lotecoleta_qtdnota          := p_cursor.qtdnota;
               vLoteColetaRowType.Arm_Lotecoleta_notas            := p_cursor.notas;
               vLoteColetaRowType.Arm_Lotecoleta_tipocarga        := p_cursor.tipocarga;
               vLoteColetaRowType.Arm_Lotecoleta_tipofrete        := p_cursor.tipofrete;
               vLoteColetaRowType.Arm_Lotecoleta_tipoveiculo      := p_cursor.tipoveiculo;
               vLoteColetaRowType.Arm_Lotecoleta_observacao       := p_cursor.observacao;
               vLoteColetaRowType.Arm_Lote_Id                     := p_cursor.lote;
               vLoteColetaRowType.Arm_Lotecoleta_codigo           := p_cursor.codigo;
               vLoteColetaRowType.Arm_Lotecoleta_Status           := 'AG';
               vLoteColetaRowType.Arm_Lotecoleta_Retorno          := '';
           end loop;
        
        /*
        exception when others then
          
        vErro := sqlerrm;
        INSERT INTO T_GLB_SQL
          (GLB_SQL_INSTRUCAO, GLB_SQL_PROGRAMA,glb_sql_observacao )
        VALUES
          (pXml, 'COLETAMASSA', vErro);
        
        end;
        */
          
        return vLoteColetaRowType;
        
  End Fn_XmlToLoteColetaRowType;
  
  
  
      Function Fn_XmlToLoteColetaItemRowType(pXml In Clob)
    return T_Arm_loteColetaItem%Rowtype
  As
    vLoteColetaItemRowType tdvadm.T_Arm_LoteColetaItem%Rowtype; 
  Begin

        for p_cursor in( SELECT extractValue(VALUE(TAB2), '/loteColetaItem/coletaLote')          coletalote,
                                extractValue(VALUE(TAB2), '/loteColetaItem/mercadoria')          mercadoria, 
                                extractValue(VALUE(TAB2), '/loteColetaItem/descricaoMercadoria') descricaoMercadoria, 
                                extractValue(VALUE(TAB2), '/loteColetaItem/altura')              altura, 
                                extractValue(VALUE(TAB2), '/loteColetaItem/largura')             largura, 
                                extractValue(VALUE(TAB2), '/loteColetaItem/comprimento')         comprimento, 
                                extractValue(VALUE(TAB2), '/loteColetaItem/peso')                peso,
                                extractValue(VALUE(TAB2), '/loteColetaItem/embalagem')           embalagem,   
                                extractValue(VALUE(TAB2), '/loteColetaItem/qtdVolume')           qtdvolume,  
                                extractValue(VALUE(TAB2), '/loteColetaItem/cargaFragil')         cargafragil,  
                                extractValue(VALUE(TAB2), '/loteColetaItem/onu')                 onu        
                           FROM TABle(XMLSequence(extract(xmltype.createXML(pXml), '/loteColetaItem'))) TAB2
                          WHERE 0 = 0)
           loop
               vLoteColetaItemRowType.Arm_Lotecoletaitem_Id                := tdvadm.seq_arm_lotecoletaitem.nextval;
               vLoteColetaItemRowType.Arm_Lotecoleta_Id                    := p_cursor.coletalote;
               vLoteColetaItemRowType.Arm_Lotecoletaitem_Mercadoria        := p_cursor.mercadoria; 
               vLoteColetaItemRowType.Arm_Lotecoletaitem_Descmerc          := p_cursor.descricaoMercadoria;
               vLoteColetaItemRowType.Arm_Lotecoletaitem_Altura            := p_cursor.altura; 
               vLoteColetaItemRowType.Arm_Lotecoletaitem_Largura           := p_cursor.largura; 
               vLoteColetaItemRowType.Arm_Lotecoletaitem_Comprimento       := p_cursor.comprimento; 
               vLoteColetaItemRowType.Arm_Lotecoletaitem_Peso              := p_cursor.peso; 
               vLoteColetaItemRowType.Arm_Lotecoletaitem_Embalagem         := p_cursor.embalagem; 
               vLoteColetaItemRowType.Arm_Lotecoletaitem_Qtdvolume         := p_cursor.qtdvolume; 
               vLoteColetaItemRowType.Arm_Lotecoletaitem_Cargafragil       := p_cursor.cargafragil; 
               vLoteColetaItemRowType.Arm_Lotecoletaitem_Onu               := p_cursor.onu;       
  
           end loop;
           return vLoteColetaItemRowType;
  End Fn_XmlToLoteColetaItemRowType;

  /*********************************************************************************************
  * Data..: 13/01/2016
  * Autor.: Diego Lirio
  * Versão: 1.0
  * Procedure para extrair conteudo Xml entre abertura e fechamento
  **********************************************************************************************/
  Function Fn_ExtraiXmlContent(pXml Clob,
                               pTagXmlAbertura Varchar2,
                               pTagXmlFechamento Varchar2) return Clob
  As
    posI Integer;
    posF Integer;
    vXmlExtraido Clob;
  Begin
      posI := InStr(pXml, pTagXmlAbertura);
      posF := InStr(pXml, pTagXmlFechamento)+Length(pTagXmlFechamento);
      vXmlExtraido := SubStr(pXml, posI, posf-posI);
      return vXmlExtraido;
  End Fn_ExtraiXmlContent;

  /*********************************************************************************************
  * Data..: 14/10//2015
  * Autor.: Diego Lirio
  * Versão: 1.0
  * Function para converter Xml em tListaParceiros (lista de parceiros)
  **********************************************************************************************/
  Function Fn_XmlToParceiros(pXml In Clob) return tListaParceiros
  As
    vListaParceiros tListaParceiros;
  Begin
        select extractValue(VALUE(TAB2), '/parceiro/clienteEnd/cliente/cnpj') cnpj,
             --extractValue(VALUE(TAB2), '/parceiro/clienteEnd/cliente/razaoSocial') razaoSocial,
             --extractValue(VALUE(TAB2), '/parceiro/clienteEnd/endereco') endereco,
               extractValue(VALUE(TAB2), '/parceiro/clienteEnd/tipo') tipo,
               extractValue(VALUE(TAB2), '/parceiro/tipoParceiro/codigo') altura
             --extractValue(VALUE(TAB2), '/parceiro/tipoParceiro/descricao') altura
          bulk collect into vListaParceiros
          from TABle(XMLSequence(extract(xmltype.createXML(pXml), '/coleta/parceiros/parceiro'))) TAB2;

        return vListaParceiros;

  End Fn_XmlToParceiros;

  /*********************************************************************************************
  * Data..:
  * Autor.: Diego Lirio
  * Versão: 1.0
  * Function para converter Xml em tListaParceiros (lista de parceiros)
  **********************************************************************************************/
  Function Fn_Col_XmlItemsToType(pColetaNumero  in  varchar2,
                                 pColetaCiclo   in  varchar2,
                                 pXml           in  clob,
                                 --pTypeColeta    out TpColetaNova,
                                 pListColetaItemRowType out tListaItensColeta2,
                                 pStatus        out char,
                                 pMessage       out varchar2)return boolean as

  begin

    begin

      pListColetaItemRowType.Delete();

      if (pXml is null) then
         pStatus  := Status_Warning;
         pMessage := 'Coleta.: '||pColetaNumero||' - '||pColetaCiclo||' Sem Item(s)!';
         return false;
      else

         SELECT pColetaNumero,
                nvl(extractValue(VALUE(TAB2), '/coletaItem/mercadoria/codigo'),'71')         m_codigo,
                nvl(extractValue(VALUE(TAB2), '/coletaItem/embalagem/codigo'),'A7')          e_codigo,
                to_number(extractValue(VALUE(TAB2), '/coletaItem/peso'))                     peso,
                to_number(extractValue(VALUE(TAB2), '/coletaItem/largura'))                  largura,
                to_number(extractValue(VALUE(TAB2), '/coletaItem/altura'))                   altura,
                to_number(extractValue(VALUE(TAB2), '/coletaItem/comprimento'))              comprimento,
                to_number(extractValue(VALUE(TAB2), '/coletaItem/cubagem'))                  cubagem,
                to_number(extractValue(VALUE(TAB2), '/coletaItem/volume'))                   volume,
                to_number(extractValue(VALUE(TAB2), '/coletaItem/quantidadeEmp'))            quantidadeEmp,
                extractValue(VALUE(TAB2), '/coletaItem/remont')                              remont,
                subStr(extractValue(VALUE(TAB2), '/coletaItem/mercadoria/descricao'),1,50)   m_descricao,
                pColetaCiclo,
                extractValue(VALUE(TAB2), '/coletaItem/sequencia')                           sequencia,
                extractValue(VALUE(TAB2), '/coletaItem/onuCodigo')                           onu_codigo,
                extractValue(VALUE(TAB2), '/coletaItem/onuGrpEmb')                           onu_grpemb
--              extractValue(VALUE(TAB2), '/coletaItem/numPedidoItem')                       num_pedido_item
           bulk collect into pListColetaItemRowType
           FROM TABle(XMLSequence(extract(xmltype.createXML(pXml),'/coletaItem'))) TAB2;

         pStatus     := Status_Normal;
         pMessage    := 'Processamento normal';
         return true;
      end if;

    exception when others then

       pStatus  := Status_Erro;
       pMessage := 'Erro ao converter Xml dos items da Coleta.: '||pColetaNumero||' - '||pColetaCiclo||' Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
       return false;

    end;

  end Fn_Col_XmlItemsToType;

  /*********************************************************************************************
  * Data..: 03/09/2015
  * Autor.: Diego Lirio | Fabiano Goes
  * Versão: 1.0
  * Procedure que retorna T_Arm_Coleta%Rowtype (linha da tabela)
  **********************************************************************************************/
  Function Fn_Get_ColetaRowType(pNCompra in t_Arm_Coleta.Arm_Coleta_Ncompra%Type,
                                pCiclo   in T_arm_Coleta.Arm_Coleta_Ciclo%Type)
    return t_arm_Coleta%Rowtype
  As
    vColetaRowType t_Arm_Coleta%RowType;
  Begin
      Select c.*
        Into vColetaRowType
        From tdvadm.t_arm_coleta c
        where c.arm_coleta_ncompra = pNCompra
          and c.arm_coleta_ciclo   = pCiclo;
      return vColetaRowType;
  End Fn_Get_ColetaRowType;

  Function Fn_Col_ValidaArmazem(pColetaRowType in T_arm_coleta%RowType,
                                pStatus        out char,
                                pMessage       out varchar2)return boolean as
  begin

    begin

      if (pColetaRowType.Arm_Armazem_Codigo is null) then
         pStatus  := Status_Warning;
         pMessage := 'Armazem é campo obrigatório!'||chr(13);
         return false;
      end if;

      pStatus  := Status_normal;
      pMessage := 'Processamento Normal';
      return true;
    exception when others then
      pStatus  := Status_erro;
      pMessage := 'Erro ao executar Fn_Col_ValidaArmazem Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
      return false;
    end;

  end Fn_Col_ValidaArmazem;

  /*********************************************************************************************
  * Data..: 14/10/2015
  * Autor.: Diego Lirio
  * Versão: 1.0
  * Function que valida campos da coleta, refatorado para tipo da linha da t_arm_coleta
  **********************************************************************************************/
  Function Fn_Col_ValidaTipoColeta(pColetaRowType tdvadm.t_Arm_Coleta%RowType,
                                   pStatus     out char,
                                   pMessage    out varchar2)return boolean as
  vExecVal      boolean := false;
  vStatus       char(1);
  vMessage      varchar2(2000);
  vMessageFull  varchar2(2000);
  vQtdeErro     integer := 0;
  begin

    begin
      
      
      /***********Validação Contato******************/
      if (nvl(pColetaRowType.Arm_Coletaorigem_Cod,0) != 8) then
        vExecVal := Fn_Col_ValidaContatoSol(pColetaRowType,
                                            vStatus    ,
                                            vMessage);
        if not(vExecVal) then
           vMessageFull := vMessageFull||vMessage;
           vQtdeErro := vQtdeErro+1;
        end if;
      end if;

      /***********Validação Remetente****************/
      vExecVal := Fn_Col_ValidaRemetente(pColetaRowType,
                                         vStatus    ,
                                         vMessage);
      if not(vExecVal) then
         vMessageFull := vMessageFull||vMessage;
         vQtdeErro := vQtdeErro+1;
      end if;


      /***********Validação Destinatario************/
      vExecVal := Fn_Col_ValidaDestinatario(pColetaRowType,
                                            vStatus    ,
                                            vMessage);
      if not(vExecVal) then
         vMessageFull := vMessageFull||vMessage;
         vQtdeErro := vQtdeErro+1;
      end if;


      /***********Validação Tipo Frete************/
      vExecVal := Fn_Col_ValidaTipoFrete(pColetaRowType,
                                         vStatus    ,
                                         vMessage);
      if not(vExecVal) then
         vMessageFull := vMessageFull||vMessage;
         vQtdeErro := vQtdeErro+1;
      end if;
    
      
      -- Desabilitado para coleta da nimbi, a pedido da vale.
      -- alterado em 13/09/2016 09:30
      -- alterado por ksouza.   
      if (trim(pColetaRowType.Arm_Coletaorigem_Cod) != '8') then

        /***********Validação Data programação************/
        vExecVal := Fn_Col_ValidaDataProgramacao(pColetaRowType,
                                                 vStatus    ,
                                                 vMessage);
        if not(vExecVal) then
           vMessageFull := vMessageFull||vMessage;
           vQtdeErro := vQtdeErro+1;
        end if;

        /***********Validação Hora programação************/
        vExecVal := Fn_Col_ValidaHoraProgramacao(pColetaRowType,
                                                 vStatus    ,
                                                 vMessage);
                                                 
        if not(vExecVal) then
           vMessageFull := vMessageFull||vMessage;
           vQtdeErro := vQtdeErro+1;
        end if;


        if not(vExecVal) then
           vMessageFull := vMessageFull||vMessage;
           vQtdeErro := vQtdeErro+1;
        end if;
      
      end if;

      /***********Validação Valor Total****************/
      vExecVal := Fn_Col_ValidaValorTotal(pColetaRowType,
                                          vStatus    ,
                                          vMessage);
      if not(vExecVal) then
         vMessageFull := vMessageFull||vMessage;
         vQtdeErro := vQtdeErro+1;
      end if;


      /***********Validação Tipo Veiculo****************/
      vExecVal := Fn_Col_ValidaTipoVeiculo(pColetaRowType,
                                           vStatus    ,
                                           vMessage);
      if not(vExecVal) then
         vMessageFull := vMessageFull||vMessage;
         vQtdeErro := vQtdeErro+1;
      end if;


      /***********Cod de Origem Coleta****************/
      vExecVal := Fn_Col_ValidaCodOrigemColeta(pColetaRowType,
                                               vStatus    ,
                                               vMessage);
      if not(vExecVal) then
         vMessageFull := vMessageFull||vMessage;
         vQtdeErro := vQtdeErro+1;
      end if;


        /***********Validação de CNPJ´s*****************/
      if(not FN_RAI_IsColetaRAI(pColetaRowType))then   
         if(not Fn_VALE_IsColetaVALE(pColetaRowType)) then
              if(not Fn_HYD_IsColetaHYD(pColetaRowType)) then
                 if(not Fn_ENE_IsColetaENE(pColetaRowType)) then
                  if (nvl(pColetaRowType.Arm_Coletaorigem_Cod,0) != 8) and (Fn_Col_IsUsuarioTDV(pColetaRowType, vStatus, vMessage) = false) then
                    vExecVal := Fn_Col_ValidaBloqueiosCnpj(pColetaRowType,
                                                           vStatus    ,
                                                           vMessage);
                    if not(vExecVal) then
                       vMessageFull := vMessageFull||vMessage;
                       vQtdeErro := vQtdeErro+1;
                    end if;
                  end if;
                end if;
             end if;
         end if;     
     end if;


      /***********Validação Numero do Frete*****************/
      vExecVal := Fn_Col_ValidaNumeroFrete(pColetaRowType,
                                           vStatus,
                                           vMessage);
      if not(vExecVal) then
         vMessageFull := vMessageFull||vMessage;
         vQtdeErro := vQtdeErro+1;
      end if;


      /***********Validação Coleta TPFrete*****************/
      vExecVal := Fn_Col_ValidaColetaTpFrete(pColetaRowType,
                                             vStatus,
                                             vMessage);
      if not(vExecVal) then
         vMessageFull := vMessageFull||vMessage;
         vQtdeErro := vQtdeErro+1;
      end if;
      
      

      
      /***********Validação Coleta Dimensões*****************/
      if (nvl(pColetaRowType.Arm_Coletaorigem_Cod,0) != 8) then
      
      vExecVal := Fn_Col_ValidaDimensao(pColetaRowType,
                                        vStatus,
                                        vMessage);
      if not(vExecVal) then
         vMessageFull := vMessageFull||vMessage;
         vQtdeErro := vQtdeErro+1;
      end if;
      
      end if;

      /***********Validação Coleta Dimensões*****************/
      vExecVal := Fn_Col_ValidaArmazem(pColetaRowType,
                                       vStatus,
                                       vMessage);
      if not(vExecVal) then
         vMessageFull := vMessageFull||vMessage;
         vQtdeErro := vQtdeErro+1;
      end if;
      
      /***********Validação Pagador Frete*****************/
      vExecVal := Fn_Col_ValidaPagadorFrete(pColetaRowType,
                                            vStatus,
                                            vMessage);
      if not(vExecVal) then
         vMessageFull := vMessageFull||vMessage;
         vQtdeErro := vQtdeErro+1;
      end if;
      
      /***********Validação Alteração de Coleta com Ocorrencia que Cancela Coleta*****************/
      vExecVal := Fn_Col_ValidaOcorColCancelada(pColetaRowType,
                                                vStatus,
                                                vMessage);
      if not(vExecVal) then
         vMessageFull := vMessageFull||vMessage;
         vQtdeErro := vQtdeErro+1;
      end if;            

      if (vQtdeErro = 0) then

          pStatus     := Status_normal;
          pMessage    := 'Processamento Normal';
          return      true;
      else
           pStatus     := status_warning;
           pMessage    := vMessageFull;
           return      false;
      end if;

    exception when others then
      pStatus     := Status_erro;
      pMessage    := 'Erro ao Valida Coleta Pkg_Col_Coleta.Fn_ColValidaTypoColeta. Erro: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
      return      false;
    end;

  end Fn_Col_ValidaTipoColeta;

  Function Fn_Col_ValidaItemsColeta(pListColetaItemRowType in tListaItensColeta2,
                                    pStatus        out char,
                                    pMessage       out varchar2)return boolean as
  vStatus    char(1);
  vMessage   varchar2(2000);
  begin

    begin

       if (pListColetaItemRowType.count = 0 ) then
         pStatus  := Status_warning;
         pMessage := 'Coletam sem Items'||chr(13);
         return   false;
       else
          --t_arm_coletancompra
          vStatus  := null;
          vMessage := null;

          For i In 1..pListColetaItemRowType.count Loop

               /*****************Mercadoria**********************/
               if (nvl(pListColetaItemRowType(i).ARM_COLETANCOMPRA_MERCADORIA,'null') = 'null') then
                  vStatus  := status_warning;
                  vMessage := vMessage||chr(13)||'Item sem descrição da mercadoria.';
               end if;

               /*****************Volumes*************************/
               if (nvl(pListColetaItemRowType(i).arm_coleta_ncompra_volume ,-1) = -1) then
                  vStatus  := status_warning;
                  vMessage := vMessage||chr(13)||'Item sem quantidade de volumes.';
               end if;

               /*****************Peso****************************/
               if (nvl(pListColetaItemRowType(i).arm_coleta_ncompra_peso ,-1) = -1) then
                  vStatus  := status_warning;
                  vMessage := vMessage||chr(13)||'Item sem peso definido.';
               end if;
               
               /******************Altura**********************/
               if (nvl(pListColetaItemRowType(i).ARM_COLETA_NCOMPRA_ALTURA, 0.0) = 0.0) then
                  vStatus  := status_warning;
                  vMessage := vMessage||chr(13)||'Item sem altura definida.';
               end if;
               
                /******************Largura**********************/
               if (nvl(pListColetaItemRowType(i).ARM_COLETA_NCOMPRA_LARGURA,0.0) = 0.0) then
                  vStatus  := status_warning;
                  vMessage := vMessage||chr(13)||'Item sem largura definida.';
               end if;
               
               /******************Comprimento**********************/
               if (nvl(pListColetaItemRowType(i).ARM_COLETA_NCOMPRA_COMP ,0.0) = 0.0) then
                  vStatus  := status_warning;
                  vMessage := vMessage||chr(13)||'Item sem comprimento definido.';
               end if;

               /******************Embalagem**********************/
               if (nvl(pListColetaItemRowType(i).glb_embalagem_codigo ,'null') = 'null') then
                  vStatus  := status_warning;
                  vMessage := vMessage||chr(13)||'Item sem embalagem definida.';
               end if;

               /*****************remontavel**********************/
               if (nvl(pListColetaItemRowType(i).arm_coleta_ncompra_remont ,'null') = 'null') then
                  vStatus  := status_warning;
                  vMessage := vMessage||chr(13)||'Item sem flag de carga remontavel definida.';
               end if;

          End Loop;

       end if;

       if (nvl(vStatus,status_normal) <> status_normal) then
          pStatus  := vStatus;
          pMessage := vMessage;
          return   false;
       end if;

       pStatus  := Status_normal;
       pMessage := 'Item Validos.';
       return   true;
    exception when others then
      pStatus  := Status_erro;
      pMessage := 'Erro ao validar Items Fn_Col_ValidaItemsColeta';
      return   false;
    end;

  end Fn_Col_ValidaItemsColeta;
  
    Function Fn_RAI_ValidaItemsColeta(pListColetaItemRowType in tListaItensColeta2,
                                      pColetaNumero  in varchar2,
                                      pColetaCiclo   in varchar2,
                                      pStatus        out char,
                                      pMessage       out varchar2)return boolean as
  vStatus    char(1);
  vMessage   varchar2(2000);
  vQuimico   char(1);
  begin

    begin
       if (pListColetaItemRowType.count = 0 ) then
         pStatus  := Status_warning;
         pMessage := 'Coletam sem Items'||chr(13);
         return   false;
       else
          --t_arm_coletancompra
          vStatus  := null;
          vMessage := null;
          
          Select w.glb_tpcarga_quimico 
                 into vQuimico
                       from tdvadm.t_arm_coleta t, tdvadm.t_fcf_tpcarga w
                              where  t.fcf_tpcarga_codigo = w.fcf_tpcarga_codigo and
                                     t.arm_coleta_ncompra = pColetaNumero and
                                     t.arm_coleta_ciclo = pColetaCiclo;     
                                                                                                                                                        
           For i In 1..pListColetaItemRowType.count Loop         
               if (nvl(pListColetaItemRowType(i).arm_coleta_ncompra_altura,0) > 290) then
                      vStatus  := status_warning;
                      vMessage := 'A altura não pode ser mais que 2.9 metros';
               end if;
               
               if (nvl(pListColetaItemRowType(i).arm_coleta_ncompra_largura,0) > 260) then
                      vStatus  := status_warning;
                      vMessage := 'A largura não pode ser mais que 2.6 metros';
               end if;
               
               if (nvl(pListColetaItemRowType(i).arm_coleta_ncompra_comp,0) > 1300) then
                      vStatus  := status_warning;
                      vMessage := 'O comprimento não pode ser mais que 13  metros';
               end if;
               
               if (vQuimico = 'S' AND nvl(pListColetaItemRowType(i).glb_onu_codigo,0) = 0) then
                      vStatus  := status_warning;
                      vMessage := 'Foi selecionado o tipo de carga como PROD.QUÍMICO e para essa categoria é necessário selecionar o número da ONU. ';
                   
               end if;
              if (vQuimico = 'N' AND pListColetaItemRowType(i).glb_onu_codigo <> 0) then
                  vStatus  := status_warning;
                  vMessage := 'Foi selecionado o número de ONU para esse item, é necessário que o tipo de carga na opção Coleta esteja como PROD.QUIMICO';                  
               end if;        
           End Loop;
       end if;

       if (nvl(vStatus,status_normal) <> status_normal) then
          pStatus  := vStatus;
          pMessage := vMessage;
          return   false;
       end if;

       pStatus  := Status_normal;
       pMessage := 'Item Validos.';
       return   true;
    exception when others then
      pStatus  := Status_erro;
      pMessage := 'Erro ao validar Items Fn_RAI_ValidaItemsColeta';
      return   false;
    end;

  end Fn_RAI_ValidaItemsColeta;
  
 
  Function Fn_Col_ValidaContatoSol(pColetaRowType in T_arm_coleta%RowType,
                                   pStatus        out char,
                                   pMessage       out varchar2)return boolean as
  begin

    begin

      if (pColetaRowType.Usu_Usuario_Codigo_Cad is null) or (pColetaRowType.Arm_Coleta_Fonesolic is null) or (pColetaRowType.Arm_Coleta_Emailsolic is null) then
         pStatus  := Status_Warning;
         pMessage := 'Informações do Solicitante: Nome, Telefone e e-mail invalidas.'||chr(13);
         return false;

      end if;

      pStatus  := Status_normal;
      pMessage := 'Processamento Normal';
      return true;
    exception when others then
      pStatus  := Status_erro;
      pMessage := 'Erro ao executar Fn_Col_ValidaContatoSol Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
      return false;
    end;

  end Fn_Col_ValidaContatoSol;

  Function Fn_Col_ValidaRemetente(pColetaRowType in t_arm_coleta%RowType,
                                  pStatus        out char,
                                  pMessage       out varchar2)return boolean as
  vExisteCliente  integer;
  vExisteTpCliend integer;
  vCnpjValido     boolean;
  begin

    begin

      if (pColetaRowType.Glb_Cliente_Cgccpfcodigocoleta is null) or (pColetaRowType.Glb_Tpcliend_Codigocoleta is null) then
         pStatus  := Status_Warning;
         pMessage := 'Informações do Remetente: CNPJ ou Tipo de Endereço Invalido.'||chr(13);
         return false;
      else
          --vCnpjValido:= pkg_glb_common.Fn_CalcCnpj(substr(pColetaRowType.Glb_Cliente_Cgccpfcodigocoleta,1,12)) = substr(pColetaRowType.Glb_Cliente_Cgccpfcodigocoleta,13,2);
          vCnpjValido := True;

         if (vCnpjValido) then

           select count(*)
             into vExisteCliente
             from t_glb_cliente cl
            where cl.glb_cliente_cgccpfcodigo = pColetaRowType.Glb_Cliente_Cgccpfcodigocoleta;

           if (vExisteCliente > 0) then

              select count(*)
                into vExisteTpCliend
                from t_glb_cliend cl
               where cl.glb_cliente_cgccpfcodigo = pColetaRowType.Glb_Cliente_Cgccpfcodigocoleta
                 and cl.glb_tpcliend_codigo       = pColetaRowType.Glb_Tpcliend_Codigocoleta;

              if (vExisteCliente = 0) then
                  pStatus  := Status_Warning;
                  pMessage := 'Informações do Remetente: Tipo do Endereço não existe.';
                  return false;
              end if;

           else
              pStatus  := Status_Warning;
              pMessage := 'Informações do Remetente: CNPJ Não existe.';
              return false;
           end if;

         else
           pStatus  := Status_Warning;
           pMessage := 'Informações do Remetente: Digito verificador do CNPJ invalido.'||chr(13);
           return false;
         end if;

      end if;

      pStatus  := Status_normal;
      pMessage := 'Processamento Normal';
      return true;
    exception when others then
      pStatus  := Status_erro;
      pMessage := 'Erro ao executar Fn_Col_ValidaRemetente Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
      return false;
    end;

  end Fn_Col_ValidaRemetente;

  Function Fn_Col_ValidaDestinatario(pColetaRowType in t_Arm_Coleta%RowType,
                                     pStatus        out char,
                                     pMessage       out varchar2)return boolean as
  vExisteCliente  integer;
  vExisteTpCliend integer;
  vCnpjValido     boolean;
  begin

    begin

      if (pColetaRowType.Glb_Cliente_Cgccpfcodigoentreg is null) or (pColetaRowType.Glb_Tpcliend_Codigoentrega is null) then
         pStatus  := Status_Warning;
         pMessage := 'Informações do Destinatario: CNPJ ou Tipo de Endereço Invalido.'||chr(13);
         return false;
      else
        
         --vCnpjValido := pkg_glb_common.Fn_CalcCnpj(substr(pColetaRowType.Glb_Cliente_Cgccpfcodigoentreg,1,12)) = substr(pColetaRowType.Glb_Cliente_Cgccpfcodigoentreg,13,2);
         vCnpjValido := True;

         if (vCnpjValido) then

             select count(*)
               into vExisteCliente
               from t_glb_cliente cl
              where cl.glb_cliente_cgccpfcodigo = pColetaRowType.Glb_Cliente_Cgccpfcodigoentreg;

             if (vExisteCliente > 0) then

                select count(*)
                  into vExisteTpCliend
                  from t_glb_cliend cl
                 where cl.glb_cliente_cgccpfcodigo = pColetaRowType.Glb_Cliente_Cgccpfcodigoentreg
                   and cl.glb_tpcliend_codigo       = pColetaRowType.Glb_Tpcliend_Codigoentrega;

                if (vExisteCliente = 0) then
                    pStatus  := Status_Warning;
                    pMessage := 'Informações do Destinatario: Tipo do Endereço não existe.';
                    return false;
                end if;

             else
                pStatus  := Status_Warning;
                pMessage := 'Informações do Destinatario: CNPJ Não existe.';
                return false;
             end if;

         else
           pStatus  := Status_Warning;
           pMessage := 'Informações do Destinatario: Digito verificador do CNPJ invalido.'||chr(13);
           return false;
         end if;

      end if;

      pStatus  := Status_normal;
      pMessage := 'Processamento Normal';
      return true;
    exception when others then
      pStatus  := Status_erro;
      pMessage := 'Erro ao executar Fn_Col_ValidaDestinatario Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
      return false;
    end;

  end Fn_Col_ValidaDestinatario;

  Function Fn_Col_ValidaTipoFrete(pColetaRowType in T_arm_coleta%RowType,
                                  pStatus        out char,
                                  pMessage       out varchar2)return boolean as
  begin

    begin

      if (nvl(pColetaRowType.Arm_Coleta_Tpcompra,'P') not in ('FOB','CIF','FCA'))  then

          pStatus  := Status_Warning;
          pMessage := 'Tipo de frete invalida!'||chr(13);
          return false;

      end if;



      pStatus  := Status_normal;
      pMessage := 'Processamento Normal';
      return true;

    exception when others then
      pStatus  := Status_erro;
      pMessage := 'Erro ao executar Fn_Col_ValidaTipoFrete Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
      return false;
    end;

  end Fn_Col_ValidaTipoFrete;

  Function Fn_Col_ValidaDataProgramacao(pColetaRowType in t_arm_coleta%RowType,
                                        pStatus        out char,
                                        pMessage       out varchar2)return boolean as
  begin

    begin

      --if (to_date(pTypeColeta.dataProgramacao,'dd/mm/yyyy hh24:mi:ss') < sysdate) then
      if ( trunc(to_date(pColetaRowType.Arm_Coleta_Dtprogramacao, 'DD/MM/YYYY')) < trunc(sysdate) ) then

         pStatus  := Status_warning;
         pMessage := 'Data de programação invalida.<br/>';
         return false;

      end if;


      pStatus  := Status_normal;
      pMessage := 'Processamento Normal';
      return true;

    exception when others then

      pStatus  := Status_erro;
      pMessage := 'Erro ao executar Fn_Col_ValidaDataProgramacao Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm||' - '||sqlerrm;
      return false;

    end;

  end Fn_Col_ValidaDataProgramacao;

  /*********************************************************************************************
  * Data..: 15/10/2015
  * Autor.: Diego Lirio
  * Versão: 1.0
  * Function para Validar Hora da programação se é menor que AGORA (sysdate)
  **********************************************************************************************/
  Function Fn_Col_ValidaHoraProgramacao(pColetaRowType in t_arm_coleta%RowType,
                                        pStatus        out char,
                                        pMessage       out varchar2)return boolean as
  begin

    begin
      if To_Date(pColetaRowType.Arm_Coleta_Dtprogramacao || ' ' || pColetaRowType.Arm_Coleta_Hrprogramacao, 'dd/MM/yyyy hh24:mi') < sysdate then

         pStatus  := Status_warning;
         pMessage := 'Hora da Programação inválida. Hora permitida somente posterior que a atual</br>';
         return false;

      end if;


      pStatus  := Status_normal;
      pMessage := 'Processamento Normal';
      return true;

    exception when others then

      pStatus  := Status_erro;
      pMessage := 'Erro ao executar Fn_Col_ValidaHoraProgramacao Erro.: ('||pColetaRowType.Arm_Coleta_Dtprogramacao || ' ' || pColetaRowType.Arm_Coleta_Hrprogramacao||') '||dbms_utility.format_error_backtrace||' - '||sqlerrm||' - '||sqlerrm;
      return false;

    end;

  end Fn_Col_ValidaHoraProgramacao;

  Function Fn_Col_ValidaValorTotal(pColetaRowType in tdvadm.t_Arm_Coleta%RowType,
                                   pStatus        out char,
                                   pMessage       out varchar2)return boolean as
  begin
    begin

      if (nvl(pColetaRowType.Arm_Coleta_Vlmercadoria,-1) = -1) then

         pStatus  := Status_warning;
         pMessage := 'Valor total invalido!'||chr(13);
         return false;

      end if;


      pStatus  := Status_normal;
      pMessage := 'Processamento Normal';
      return true;

    exception when others then

      pStatus  := Status_erro;
      pMessage := 'Erro ao executar Fn_Col_ValidaValorTotal Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
      return false;

    end;

  end Fn_Col_ValidaValorTotal;

  Function Fn_Col_ValidaTipoCarga(pColetaRowType in T_arm_coleta%RowType,
                                  pStatus        out char,
                                  pMessage       out varchar2)return boolean as
  vExistetpCarga integer;
  begin

     begin

      if (nvl(pColetaRowType.Fcf_Tpcarga_Codigo,'null') = 'null') then

         pStatus  := Status_warning;
         pMessage := 'Tipo de carga invalido.!'||chr(13);
         return false;
      else

        select count(*)
          into vExistetpCarga
          from t_fcf_tpcarga c
         where c.fcf_tpcarga_codigo = pColetaRowType.Fcf_Tpcarga_Codigo;

        if (vExistetpCarga = 0) then

           pStatus  := Status_warning;
           pMessage := 'Tipo de carga não encontrada!'||chr(13);
           return false;

        end if;

      end if;


      pStatus  := Status_normal;
      pMessage := 'Processamento Normal';
      return true;

    exception when others then

      pStatus  := Status_erro;
      pMessage := 'Erro ao executar Fn_Col_ValidaTipoCarga Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
      return false;

    end;
  end Fn_Col_ValidaTipoCarga;

  Function Fn_Col_ValidaTipoVeiculo(pColetaRowType in T_arm_coleta%RowType,
                                    pStatus        out char,
                                    pMessage       out varchar2)return boolean as
    --vExisteFcfTpVeiculo integer;
  begin

    begin

      if ( trim(nvl(pColetaRowType.Fcf_Tpcarga_Codigo, 'null')) in ('01','11') ) then
          if (nvl(pColetaRowType.Fcf_Tpveiculo_Codigo,'null') = 'null') then
             pStatus  := Status_warning;
             pMessage := 'Para tipo de Carga Lotação o Tipo de Veiculo é obrigatório!'||chr(13);
            return false;
          end if;
      end if;

      pStatus  := Status_normal;
      pMessage := 'Processamento Normal';
      return true;
    exception when others then
      pStatus  := Status_erro;
      pMessage := 'Erro ao executar Fn_Col_ValidaTipoVeiculo Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
      return false;
    end;
  end Fn_Col_ValidaTipoVeiculo;

  Function Fn_Col_ValidaParceirosColeta(pListaParceiros in tListaParceiros,
                                        pStatus        out char,
                                        pMessage       out varchar2)return boolean as
  vStatus    char(1);
  vMessage   varchar2(2000);
  begin


    begin

       if (pListaParceiros.count = 0 ) then
         pStatus  := Status_warning;
         pMessage := 'Coletam sem Parceiros'||chr(13);
         return   false;
       else
          vStatus  := null;
          vMessage := null;

          For i In 1..pListaParceiros.count Loop
               /***************** CNPJ*****************************/
               if (nvl(pListaParceiros(i).cnpj,'null') = 'null') then
                  vStatus  := status_warning;
                  vMessage := vMessage||chr(13)||'Parceiro sem CNPJ informado.';
               end if;

               /***************** DIGITO CNPJ**********************/
               if (pkg_glb_common.Fn_CalcCnpj(substr(pListaParceiros(i).cnpj,1,12))
                   <>
                   substr(pListaParceiros(i).cnpj,13,2)) then
                  vStatus  := status_warning;
                  vMessage := vMessage||chr(13)||'CNPJ do Parceiro Invalido. '||pListaParceiros(i).cnpj;
               end if;
          End Loop;

       end if;

       if (nvl(vStatus,status_normal) <> status_normal) then
          pStatus  := vStatus;
          pMessage := vMessage;
          return   false;
       end if;

       pStatus  := Status_normal;
       pMessage := 'Parceiros Validos.';
       return   true;
    exception when others then
      pStatus  := Status_erro;
      pMessage := 'Erro ao validar Items Fn_Col_ValidaParceirosColeta';
      return   false;
    end;

  end Fn_Col_ValidaParceirosColeta;

  Function Fn_Col_ValidaCodOrigemColeta(pColetaRowType in t_arm_coleta%RowType,
                                        pStatus        out char,
                                        pMessage       out varchar2)return boolean as
  vExisteOrigem  integer;
  begin


    begin

     if (nvl(pColetaRowType.Arm_Coletaorigem_Cod,0) = 0) then

         pStatus  := Status_warning;
         pMessage := 'Indentificador da origem da coleta invalido.!'||chr(13);
         return true;

      else

        select count(*)
          into vExisteOrigem
         from tdvadm.t_arm_coletaorigem v
         where v.arm_coletaorigem_cod = pColetaRowType.Arm_Coletaorigem_Cod;

        if (vExisteOrigem = 0) then

           pStatus  := Status_warning;
           pMessage := 'Cod do indentificador não existe!'||chr(13);
           return false;

        end if;

      end if;


      pStatus  := Status_normal;
      pMessage := 'Processamento Normal';
      return true;

    exception when others then
      pStatus  := Status_erro;
      pMessage := 'Erro ao validar Fn_Col_ValidaCodOrigemColeta';
      return   false;
    end;

  end Fn_Col_ValidaCodOrigemColeta;

  Function Fn_Col_ValidaBloqueiosCnpj(pColetaRowType in t_arm_coleta%RowType,
                                      pStatus        out char,
                                      pMessage       out varchar2)return boolean as
    --vValidaCNPJ   varchar2(20);
    --vUsuarioWeb   coleta.usuario_web.dc_usuario%type;
    vCount Integer := 0;
    vLogin tdvadm.t_Usu_Usuario.usu_usuario_login%type;
  begin


    begin

      begin
        select u.usu_usuario_login
        into vLogin
        from t_usu_usuario u
        where lower(u.usu_usuario_codigo) = RPAD(lower(pColetaRowType.Usu_Usuario_Codigo_Cad),10,' ')
        and nvl(u.usu_usuario_ativo,'S') = 'S';
      exception when no_data_found then
        pStatus := Status_Erro;
        pMessage:= 'Usuário( '||pColetaRowType.Usu_Usuario_Codigo_Cad||' ) não localizado para validação de CNPJ';
      end;
      
            SELECT COUNT(*)
              Into vCount
              from tdvadm.t_usu_usuariocnpj uc
              where lower(uc.usu_usuario_codigo) = RPAD(lower(pColetaRowType.Usu_Usuario_Codigo_Cad),10,' ')
               AND UC.USU_USUARIOCNPJ_CNPJ = '99999999999999';


      
      if(vCount = 0) then
      
              
              SELECT COUNT(*)
                Into vCount
                from tdvadm.t_usu_usuariocnpj uc
                where lower(uc.usu_usuario_codigo) = RPAD(lower(pColetaRowType.Usu_Usuario_Codigo_Cad),10,' ')
                  AND (UC.USU_USUARIOCNPJ_CNPJ = RPAD(pColetaRowType.Glb_Cliente_Cgccpfcodigocoleta,20,' ')
                      or UC.USU_USUARIOCNPJ_CNPJ = RPAD(pColetaRowType.Glb_Cliente_Cgccpfcodigoentreg,20,' '))
                  AND UC.USU_USUARIOCNPJ_ATIVO = 'S' -- S = ATIVO=S
                  AND UC.USU_USUARIOCNPJ_TIPO = 'O'; -- O=OU Permitido estar envolvido como remetente OU destinatario

              if (vCount > 0) then
                 pStatus  := Status_Normal;
                 pMessage := 'Processamento Normal';
                 return true;
              end if;

              -- Verifica se o usuário tem permissão para remetente
              vCount := 0;
              SELECT COUNT(*)
                Into vCount
                from tdvadm.t_usu_usuariocnpj uc
                where lower(uc.usu_usuario_codigo) = RPAD(lower(pColetaRowType.Usu_Usuario_Codigo_Cad),10,' ')
                  AND UC.USU_USUARIOCNPJ_CNPJ      = RPAD(pColetaRowType.Glb_Cliente_Cgccpfcodigocoleta,20,' ')
                  AND UC.USU_USUARIOCNPJ_ATIVO     = 'S' -- S = ATIVO=S
                  AND UC.USU_USUARIOCNPJ_TIPO      IN ('R', 'T'); -- R=REMETENTE, T=TODOS

              if (vCount <= 0) and (trim(pColetaRowType.Arm_Coleta_Cnpjsolicitante) != trim(pColetaRowType.Glb_Cliente_Cgccpfcodigocoleta)) then
                 pStatus  := Status_warning;
                 pMessage := 'O Solicitante: '||TRIM(vLogin)||'('||trim(pColetaRowType.Usu_Usuario_Codigo_Cad)||')'||
                             ' não tem permissão para Solicitar COLETA com o CNPJ: '||TRIM(pColetaRowType.Glb_Cliente_Cgccpfcodigocoleta)||
                             ' como REMETENTE ';
                 return false;
              end if;

              -- Verifica se o usuário tem permissão para Destino
              vCount := 0;
              SELECT COUNT(*)
                Into vCount
                from tdvadm.t_usu_usuariocnpj uc
                where lower(uc.usu_usuario_codigo) = RPAD(lower(pColetaRowType.Usu_Usuario_Codigo_Cad),10,' ')
                  AND UC.USU_USUARIOCNPJ_CNPJ      = RPAD(pColetaRowType.Glb_Cliente_Cgccpfcodigoentreg,20,' ')
                  AND UC.USU_USUARIOCNPJ_ATIVO     = 'S' -- S = ATIVO=S
                  AND UC.USU_USUARIOCNPJ_TIPO      IN ('D', 'T'); -- D=DESTINATARIO, T=TODOS

              --dbms_output.put_line( pTypeColeta.cnpjSolicitante ||' - '||pTypeColeta.clienteEndColetaCnpj );
              if (vCount <= 0) and (trim(pColetaRowType.Arm_Coleta_Cnpjsolicitante) != trim(pColetaRowType.Glb_Cliente_Cgccpfcodigocoleta)) then
                 pStatus  := Status_warning;
                 pMessage := 'O Solicitante: '||TRIM(vLogin)||'('||trim(pColetaRowType.Usu_Usuario_Codigo_Cad)||')'||
                             ' não tem permissão para Solicitar COLETA com o CNPJ: '||TRIM(pColetaRowType.Glb_Cliente_Cgccpfcodigoentreg)||
                             ' como DESTINATARIO ';
                 return false;
              end if;
      end if;

      pStatus  := Status_normal;
      pMessage := 'Processamento Normal';
      return true;

    exception when others then
      pStatus  := Status_erro;
      pMessage := 'Erro ao validar Fn_Col_ValidaCodOrigemColeta Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
      return   false;
    end;

  end Fn_Col_ValidaBloqueiosCnpj;

 /************************************************************************************************
  * PROGRAMA         : ColetaWeb
  * DESENVOLVEDOR    : Diego Lirio
  * DATA DE CRIACAO  : 24/03/2015
  * FUNCINALIDADE    : Valida Numero Frete
  * PARTICULARIDADES :
  * PARAM. OBRIGAT.  : pTypeColeta = TpColetaNova (T_ARM_COLETA)
  *                    pStatus = E=ERRO, N=Normal
  *                    pMessage = Mensagem de ERRO ou mensagem de Normal quando necessário
  ************************************************************************************************
  * 14/10/2015 - Diego - Alterado proc pedindo param pColetaRowType tipo linha da t_arm_Coleta
  ***********************************************************************************************/
  Function Fn_Col_ValidaNumeroFrete(pColetaRowType in T_arm_coleta%RowType,
                                    pStatus        out char,
                                    pMessage       out varchar2)return boolean as
  begin

    Begin
      -----------------------------------------------------------------------------------------
      -- 21/05/2015 - FABIANO / DIEGO
      -- obs: ESSA FUNCTION FICA PARA QUANDO EXISTIR ALGUMA VALIDAÇÃO GLOBAL PARA ESTE CAMPO
      -- O CÓDIGO ABAIXO FOI MOVIDO PARA Fn_col_ValidaNumeroFrete porque PERCEBEMOS
      -- QUE É UMA VALIDAÇÃO EXPECIFICA DA VALE
      -----------------------------------------------------------------------------------------
      dbms_output.put_line( pColetaRowType.Usu_Usuario_Codigo_Cad );

      pStatus  := Status_normal;
      pMessage := 'Processamento Normal';
      return true;

    exception when others then
      pStatus  := Status_erro;
      pMessage := 'Erro ao validar Fn_Col_ValidaNumeroFrete Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
      return   false;
    end;

  end Fn_Col_ValidaNumeroFrete;

/*  Function Fn_Col_ValidaDimensao(pTypeColeta    in TpColetaNova,
                                 pStatus        out char,
                                 pMessage       out varchar2)return boolean
  as
  Begin
    pStatus := Status_Normal;
    pMessage := '';

    if to_number(nvl(pTypeColeta.altura,'0')) > 2.90 Then
       pStatus  := Status_erro;
       pMessage := pMessage || 'Altura excedente maximo 2,90m. <br>';
    End If;

    if to_number(nvl(pTypeColeta.largura,'0')) > 2.40 Then
       pStatus  := Status_erro;
       pMessage := pMessage || 'Largura excedente maximo 2,40m. <br>';
    End If;

    if to_number(nvl(pTypeColeta.comprimento,'0')) > 18.15 Then
       pStatus  := Status_erro;
       pMessage := pMessage || 'Comprimento excedente maximo 18,15m. <br>';
    End If;
    return (pStatus = Status_Normal);

  End Fn_Col_ValidaDimensao;*/
  Function Fn_Col_ValidaDimensao(pColetaRowType in T_arm_coleta%RowType,
                                 pStatus        out char,
                                 pMessage       out varchar2)return boolean
  as
  Begin
    pStatus := Status_Normal;
    pMessage := '';

    if to_number(nvl(pColetaRowType.Arm_Coleta_Altura,'0')) > 2.90 Then
       pStatus  := Status_erro;
       pMessage := pMessage || 'Altura excedente maximo 2,90m. <br>';
    End If;

    if to_number(nvl(pColetaRowType.Arm_Coleta_Largura,'0')) > 2.40 Then
       pStatus  := Status_erro;
       pMessage := pMessage || 'Largura excedente maximo 2,40m. <br>';
    End If;

    if to_number(nvl(pColetaRowType.Arm_Coleta_Comprimento,'0')) > 18.15 Then
       pStatus  := Status_erro;
       pMessage := pMessage || 'Comprimento excedente maximo 18,15m. <br>';
    End If;
    return (pStatus = Status_Normal);

  End Fn_Col_ValidaDimensao;

  Function Fn_Col_ValidaPagadorFrete(pColetaRowType in T_arm_coleta%RowType,
                                     pStatus        out char,
                                     pMessage       out varchar2)return boolean
  is
  begin
    pStatus := Status_Normal;
    pMessage := '';
    
    if upper(nvl(pColetaRowType.Arm_Coleta_Pagadorfrete, 'X')) = 'O' then
      
       if trim(pColetaRowType.Arm_Coleta_Cnpjpagadorferete) in (trim(pColetaRowType.Glb_Cliente_Cgccpfcodigocoleta),
                                                                trim(pColetaRowType.Glb_Cliente_Cgccpfcodigoentreg)) then
         pStatus  := Status_erro;
         pMessage := pMessage || 'Pagador Frete = Outros deve ter o CNPJ diferente de Remetente/Destinatário. <br>';        
       end if;                                                                 
    
    end if;
    return (pStatus = Status_Normal);
  end Fn_Col_ValidaPagadorFrete;      
  
  /*********************************************************************************************
   * Data: 20/03/2017 - Fabiano / Klayton
   * Bloquear Alteração de Coletas que já possuem ocorrencia que cancela Coleta.
   *********************************************************************************************/
  Function Fn_Col_ValidaOcorColCancelada(pColetaRowType in tdvadm.T_arm_coleta%RowType,
                                         pStatus        out char,
                                         pMessage       out varchar2)return boolean
  is
    vColeta              tdvadm.t_arm_coleta.arm_coleta_ncompra%type;
    vCiclo               tdvadm.t_arm_coleta.arm_coleta_ciclo%type;
    vOcorrencia          tdvadm.t_arm_coleta.arm_coletaocor_codigo%type;
    vOcorFinalizaColeta  tdvadm.t_arm_coletaocor.arm_coletaocor_finaliza%type;
    vOCorCancelaColeta   tdvadm.t_arm_coletaocor.arm_coletaocor_cancelacoleta%type;
  begin
    pStatus := Status_Normal;
    pMessage := '';

    begin
       select col.arm_coleta_ncompra,
              col.arm_coleta_ciclo,
              col.arm_coletaocor_codigo,
              oco.arm_coletaocor_finaliza,
              oco.arm_coletaocor_cancelacoleta
         into vColeta,
              vCiclo,
              vOcorrencia,
              vOcorFinalizaColeta,
              vOCorCancelaColeta
         from tdvadm.t_arm_coleta col,
              tdvadm.t_arm_coletaocor oco
        where col.arm_coletaocor_codigo = oco.arm_coletaocor_codigo(+)
          and col.arm_coleta_ncompra = pColetaRowType.Arm_Coleta_Ncompra
          and col.arm_coleta_ciclo   = pColetaRowType.Arm_Coleta_Ciclo;
    exception when no_data_found then
       pStatus := Status_Normal;
       pMessage := '';           
    end;
    
    -- verifico se a Coleta existe já com ocorrencia
    if (nvl(vColeta, 'X')) != 'X' and 
       (nvl(vCiclo, 'X')) != 'X' and 
       (trim(nvl(vOcorrencia, 'X'))) != 'X' and 
       (trim(nvl(vOcorrencia, 'X'))) not in ('64', '65', '68') then
      
       -- Verifico se a ocorrencia já aplicada à Coleta é uma ocorrencia que Finaliza ou Cancela a Coleta
       if (trim(nvl(vOcorFinalizaColeta, 'X'))) = 'S' or (trim(nvl(vOCorCancelaColeta, 'X'))) = 'S' then
         pStatus  := Status_erro;
         pMessage := pMessage || 'A Coleta[ '||vColeta||' - '||vCiclo||' ] já existe em nossa Base de Dados com Ocorrencia que Finaliza/Cancela a Coleta portanto não pode mais ser Alterada. <br>';        
       end if;                                                                 
    
    end if;
    return (pStatus = Status_Normal);
  end Fn_Col_ValidaOcorColCancelada;                                   

  Procedure Sp_Col_Insert(pColetaRowType in t_arm_coleta%RowType,
                          pColetaNumero  out varchar2,
                          pColetaCiclo   out varchar2,
                          pStatus        out char,
                          pMessage       out varchar2)
  as
    vColetaNumero tdvadm.t_arm_coleta.arm_coleta_ncompra%type;
    vColetaCiclo  t_arm_coleta.arm_coleta_ciclo%type;
    vStatus       char(1) ;
    vMessage      varchar2(1000);
    vGlbTpCarga   t_glb_tpcarga.glb_tpcarga_codigo%type;
    vColetaRowType  t_arm_coleta%RowType;
    vIsArmazem   varchar2(2);
  begin

    begin

      --TG_BI_COLETAWEB_ARMAZEM;
      --TG_BIU_COLETA_BEFOREINSERT;
      --TG_AIUC_INFORMA_COLETA;
      --TG_AIUC_INFORMA_COLETA;
      --TG_BI_INTEGRA_COLETAWEB ha

      /***********************************************************/
      /**    Bloco que insere a coleta no bando de dados        **/
      /***********************************************************/

      begin

         /***********************************************************/
         /**    Pegando numero da proxima Coleta                   **/
         /***********************************************************/
         begin

           TDVADM.PKG_ARM_COLETA.SP_GET_NUMCOLETA(vColetaNumero,
                                                  vColetaCiclo ,
                                                  vStatus      ,
                                                  vMessage);
           end;
         /***********************************************************/


         /***********************************************************/
         /** De para do tipo de carga                              **/
         /** conceito antigo >>> t_glb_tpcarga                     **/
         /** conceito novo   >>> t_fcf_tpcarga                     **/
         /***********************************************************/
         begin
           select t.glb_tpcarga_codigo
           into vGlbTpCarga
           from t_fcf_tpcarga t
           where t.fcf_tpcarga_codigo = RPAD(pColetaRowType.Fcf_Tpcarga_Codigo,3,' ');
         exception when no_data_found then
           vGlbTpCarga := 'FF';
         end;
         
          vColetaRowType := pColetaRowType;
             
                 -- RAIZEN
          if ( Fn_RAI_IsColetaRAI(vColetaRowType) = true ) then     
             if(vColetaRowType.ARM_COLETA_ENTCOLETA = 'C') then
                          -- Regra feita para trocar o armazem caso tenha usando a faixacep da raizen
             begin
                 SELECT CEP.CEP_CEPCID_ARMAZEM
                 into vIsArmazem
                 FROM TDVADM.t_Glb_Cliente c,
                      TDVADM.T_GLB_CLIEND CD,
                      TDVADM.T_CEP_CEPCID_0628 CEP
                 WHERE trim(C.GLB_CLIENTE_CGCCPFCODIGO) = trim(vColetaRowType.ARM_COLETA_CNPJPAGADORFERETE)
                 AND trim(CD.GLB_CLIENTE_CGCCPFCODIGO)  = trim(vColetaRowType.GLB_CLIENTE_CGCCPFCODIGOCOLETA)
                 AND CD.GLB_TPCLIEND_CODIGO             = vColetaRowType.GLB_TPCLIEND_CODIGOCOLETA
                 AND C.GLB_GRUPOECONOMICO_CODIGO        = GrupoEconomicoRAI
                 AND CD.GLB_CEP_CODIGO                  BETWEEN CEP.CEP_CEPCID_CEPMIN AND CEP.CEP_CEPCID_CEPMAX;
             exception when no_data_found then
                vIsArmazem := null;
              end;
             
            if(vIsArmazem is not null) then
               vColetaRowType.arm_armazem_codigo := vIsArmazem;        
            end if;                                              
             end if;                  
         end if;
         
         
         -- PETROPOLIS
        if ( Fn_PET_IsColetaPET(vColetaRowType) = true ) then     

                          -- Regra feita para trocar o armazem caso tenha usando a faixacep da petropolis
             begin
                 SELECT CEP_CEPCID_ARMAZEM_CODIGO
                 into vIsArmazem
                 FROM TDVADM.t_Glb_Cliente c,
                      TDVADM.T_GLB_CLIEND CD,
                      TDVADM.T_CEP_CEPCID_0647 CEP
                 WHERE trim(C.GLB_CLIENTE_CGCCPFCODIGO) = trim(vColetaRowType.ARM_COLETA_CNPJPAGADORFERETE)
                 AND trim(CD.GLB_CLIENTE_CGCCPFCODIGO)  = trim(vColetaRowType.GLB_CLIENTE_CGCCPFCODIGOCOLETA)
                 AND CD.GLB_TPCLIEND_CODIGO             = vColetaRowType.GLB_TPCLIEND_CODIGOCOLETA
                 AND C.GLB_GRUPOECONOMICO_CODIGO        = GrupoEconomicoPET
                 AND CD.GLB_CEP_CODIGO                  BETWEEN CEP.CEP_CEPCID_CEPMIN AND CEP.CEP_CEPCID_CEPMAX;
             exception when no_data_found then
                vIsArmazem := null;
              end;
             
            if(vIsArmazem is not null) then
               vColetaRowType.arm_armazem_codigo := vIsArmazem;        
            end if;                                              
                  
         end if;
         
         -- OXITENO
        if ( Fn_OXI_IsColetaOXI(vColetaRowType) = true ) then     

                          -- Regra feita para trocar o armazem caso tenha usando a faixacep da Oxiteno
             begin
                 SELECT CEP. COD
                 into vIsArmazem
                 FROM TDVADM.t_Glb_Cliente c,
                      TDVADM.T_GLB_CLIEND CD,
                      TDVADM.T_CEP_CEPCID_0658 CEP
                 WHERE trim(C.GLB_CLIENTE_CGCCPFCODIGO) = trim(vColetaRowType.ARM_COLETA_CNPJPAGADORFERETE)
                 AND trim(CD.GLB_CLIENTE_CGCCPFCODIGO)  = trim(vColetaRowType.GLB_CLIENTE_CGCCPFCODIGOCOLETA)
                 AND CD.GLB_TPCLIEND_CODIGO             = vColetaRowType.GLB_TPCLIEND_CODIGOCOLETA
                 AND C.GLB_GRUPOECONOMICO_CODIGO        = GrupoEconomicoOXI
                 AND CD.GLB_CEP_CODIGO                  BETWEEN CEP.CEP_CEPCID_CEPMIN AND CEP.CEP_CEPCID_CEPMAX;
             exception when no_data_found then
                vIsArmazem := null;
              end;
             
            if(vIsArmazem is not null) then
               vColetaRowType.arm_armazem_codigo := vIsArmazem;        
            end if;                                              
                  
         end if;
         
           -- Vivix 
        if ( Fn_VIX_IsColetaVIX(vColetaRowType) = true ) then     

             -- Regra feita para trocar o armazem caso tenha usando a faixacep da VIVIX
             begin
                 SELECT CEP. COD
                 into vIsArmazem
                 FROM TDVADM.t_Glb_Cliente c,
                      TDVADM.T_GLB_CLIEND CD,
                      TDVADM.T_CEP_CEPCID_0627 CEP
                 WHERE trim(C.GLB_CLIENTE_CGCCPFCODIGO) = trim(vColetaRowType.ARM_COLETA_CNPJPAGADORFERETE)
                 AND trim(CD.GLB_CLIENTE_CGCCPFCODIGO)  = trim(vColetaRowType.GLB_CLIENTE_CGCCPFCODIGOCOLETA)
                 AND CD.GLB_TPCLIEND_CODIGO             = vColetaRowType.GLB_TPCLIEND_CODIGOCOLETA
                 AND C.GLB_GRUPOECONOMICO_CODIGO        = GrupoEconomicoVIX
                 AND CD.GLB_CEP_CODIGO                  BETWEEN CEP.CEP_CEPCID_CEPMIN AND CEP.CEP_CEPCID_CEPMAX;
             exception when no_data_found then
                vIsArmazem := null;
              end;
             
            if(vIsArmazem is not null) then
               vColetaRowType.arm_armazem_codigo := vIsArmazem;        
            end if;                                              
                  
         end if;    
         
        -- MINERAÇÃO CARAÍBA
        if ( Fn_CAR_IsColetaCAR(vColetaRowType) = true ) then     

                          -- Regra feita para trocar o armazem caso tenha usando a faixacep da MINERAÇÃO CARAIBA
             begin
                 SELECT CEP. COD
                 into vIsArmazem
                 FROM TDVADM.t_Glb_Cliente c,
                      TDVADM.T_GLB_CLIEND CD,
                      TDVADM.T_CEP_CEPCID_0551 CEP
                 WHERE trim(C.GLB_CLIENTE_CGCCPFCODIGO) = trim(vColetaRowType.ARM_COLETA_CNPJPAGADORFERETE)
                 AND trim(CD.GLB_CLIENTE_CGCCPFCODIGO)  = trim(vColetaRowType.GLB_CLIENTE_CGCCPFCODIGOCOLETA)
                 AND CD.GLB_TPCLIEND_CODIGO             = vColetaRowType.GLB_TPCLIEND_CODIGOCOLETA
                 AND C.GLB_GRUPOECONOMICO_CODIGO        = GrupoEconomicoCAR
                 AND CD.GLB_CEP_CODIGO                  BETWEEN CEP.CEP_CEPCID_CEPMIN AND CEP.CEP_CEPCID_CEPMAX;
             exception when no_data_found then
                vIsArmazem := null;
              end;
             
            if(vIsArmazem is not null) then
               vColetaRowType.arm_armazem_codigo := vIsArmazem;        
            end if;                                              
                  
         end if;
         
          -- Anglo American
          if ( Fn_AGL_IsColetaAGL(vColetaRowType) = true ) then     

                          -- Regra feita para trocar o armazem caso tenha usando a faixacep da Anglo American
             begin
                 SELECT DISTINCT CEP. COD
                 into vIsArmazem
                 FROM TDVADM.t_Glb_Cliente c,
                      TDVADM.T_GLB_CLIEND CD,
                      TDVADM.T_CEP_CEPCID_0599 CEP
                 WHERE trim(C.GLB_CLIENTE_CGCCPFCODIGO) = trim(vColetaRowType.ARM_COLETA_CNPJPAGADORFERETE)
                 AND trim(CD.GLB_CLIENTE_CGCCPFCODIGO)  = trim(vColetaRowType.GLB_CLIENTE_CGCCPFCODIGOCOLETA)
                 AND CD.GLB_TPCLIEND_CODIGO             = vColetaRowType.GLB_TPCLIEND_CODIGOCOLETA
                 AND C.GLB_GRUPOECONOMICO_CODIGO        = GrupoEconomicoAGL
                 AND CD.GLB_CEP_CODIGO                  BETWEEN CEP.CEP_CEPCID_CEPMIN AND CEP.CEP_CEPCID_CEPMAX;
             exception when no_data_found then
                vIsArmazem := null;
              end;
             
            if(vIsArmazem is not null) then
               vColetaRowType.arm_armazem_codigo := vIsArmazem;        
            end if;                                              
                  
         end if;
         
               -- Eneva
          if ( Fn_ENE_IsColetaENE(vColetaRowType) = true ) then     

           -- Regra feita para trocar o armazem caso tenha usando a faixacep da Anglo American
             begin
                 SELECT DISTINCT CEP. COD
                 into vIsArmazem
                 FROM TDVADM.t_Glb_Cliente c,
                      TDVADM.T_GLB_CLIEND CD,
                      TDVADM.T_CEP_CEPCID_0697 CEP
                 WHERE trim(C.GLB_CLIENTE_CGCCPFCODIGO) = trim(vColetaRowType.ARM_COLETA_CNPJPAGADORFERETE)
                 AND trim(CD.GLB_CLIENTE_CGCCPFCODIGO)  = trim(vColetaRowType.GLB_CLIENTE_CGCCPFCODIGOCOLETA)
                 AND CD.GLB_TPCLIEND_CODIGO             = vColetaRowType.GLB_TPCLIEND_CODIGOCOLETA
                 AND C.GLB_GRUPOECONOMICO_CODIGO        = GrupoEconomicoENE
                 AND CD.GLB_CEP_CODIGO                  BETWEEN CEP.CEP_CEPCID_CEPMIN AND CEP.CEP_CEPCID_CEPMAX;
             exception when no_data_found then
                vIsArmazem := null;
              end;
             
            if(vIsArmazem is not null) then
               vColetaRowType.arm_armazem_codigo := vIsArmazem;        
            end if;                                              
                  
         end if;
         
                        -- OWENS
          if ( Fn_OWE_IsColetaOWE(vColetaRowType) = true ) then     

           -- Regra feita para trocar o armazem caso tenha usando a faixacep da Anglo American
             begin
                 SELECT DISTINCT CEP. COD
                 into vIsArmazem
                 FROM TDVADM.t_Glb_Cliente c,
                      TDVADM.T_GLB_CLIEND CD,
                      TDVADM.T_CEP_CEPCID_0704 CEP
                 WHERE trim(C.GLB_CLIENTE_CGCCPFCODIGO) = trim(vColetaRowType.ARM_COLETA_CNPJPAGADORFERETE)
                 AND trim(CD.GLB_CLIENTE_CGCCPFCODIGO)  = trim(vColetaRowType.GLB_CLIENTE_CGCCPFCODIGOCOLETA)
                 AND CD.GLB_TPCLIEND_CODIGO             = vColetaRowType.GLB_TPCLIEND_CODIGOCOLETA
                 AND C.GLB_GRUPOECONOMICO_CODIGO        = GrupoEconomicoOWE
                 AND CD.GLB_CEP_CODIGO                  BETWEEN CEP.CEP_CEPCID_CEPMIN AND CEP.CEP_CEPCID_CEPMAX;
             exception when no_data_found then
                vIsArmazem := null;
              end;
             
            if(vIsArmazem is not null) then
               vColetaRowType.arm_armazem_codigo := vIsArmazem;        
            end if;                                              
                  
         end if;
                  -- Suzano
        if ( Fn_SUZ_IsColetaSUZ(vColetaRowType) = true ) then     

           
             begin-- Regra feita para trocar o armazem caso tenha usando a faixacep da suzano
                 SELECT DISTINCT CEP.CEP_CEPCID_ARMAZEM
                 into vIsArmazem
                 FROM TDVADM.t_Glb_Cliente c,
                      TDVADM.T_GLB_CLIEND CD,
                      TDVADM.T_CEP_CEPCID_SUZANO CEP
                 WHERE trim(C.GLB_CLIENTE_CGCCPFCODIGO) = trim(vColetaRowType.ARM_COLETA_CNPJPAGADORFERETE)
                 AND trim(CD.GLB_CLIENTE_CGCCPFCODIGO)  = trim(vColetaRowType.GLB_CLIENTE_CGCCPFCODIGOCOLETA)
                 AND CD.GLB_TPCLIEND_CODIGO             = vColetaRowType.GLB_TPCLIEND_CODIGOCOLETA
                 AND C.GLB_GRUPOECONOMICO_CODIGO        IN (GrupoEconomicoSUZ, GrupoEconomicoSUZ2, GrupoEconomicoSUZ3, GrupoEconomicoSUZ4, 
                                                           GrupoEconomicoSUZ5, GrupoEconomicoSUZ6, GrupoEconomicoSUZ7, GrupoEconomicoSUZ8,
                                                           GrupoEconomicoSUZ9, GrupoEconomicoSUZ10, GrupoEconomicoSUZ11)
                 AND CD.GLB_CEP_CODIGO                  BETWEEN CEP.CEP_CEPCID_CEPMIN AND CEP.CEP_CEPCID_CEPMAX;
             exception when no_data_found then
                vIsArmazem := null;
              end;
             
            if(vIsArmazem is not null) then
               vColetaRowType.arm_armazem_codigo := vIsArmazem;        
            end if;                                              
                  
         end if;
         
          -- Biosev
         if ( Fn_BIO_IsColetaBIO(vColetaRowType) = true ) then     
          if(vColetaRowType.ARM_COLETA_ENTCOLETA = 'C') then
             begin -- Regra feita para trocar o armazem caso tenha usando a faixacep da biosev
                  SELECT CEP.CEP_CEPCID_ARMAZEM
                  into vIsArmazem
                  FROM TDVADM.t_Glb_Cliente c,
                       TDVADM.T_GLB_CLIEND CD,
                       TDVADM.T_CEP_CEPCID_0643 CEP
                  WHERE trim(C.GLB_CLIENTE_CGCCPFCODIGO) = trim(vColetaRowType.ARM_COLETA_CNPJPAGADORFERETE)
                  AND trim(CD.GLB_CLIENTE_CGCCPFCODIGO)  = trim(vColetaRowType.GLB_CLIENTE_CGCCPFCODIGOCOLETA)
                  AND CD.GLB_TPCLIEND_CODIGO             = vColetaRowType.GLB_TPCLIEND_CODIGOCOLETA
                  AND C.GLB_GRUPOECONOMICO_CODIGO        = GrupoEconomicoBIO
                  AND CD.GLB_CEP_CODIGO                  BETWEEN CEP.CEP_CEPCID_CEPMIN AND CEP.CEP_CEPCID_CEPMAX;
             exception when no_data_found then
                 vIsArmazem := null;
             end;
               
             if(vIsArmazem is not null) then
                  vColetaRowType.arm_armazem_codigo := vIsArmazem;        
             end if;          
          end if;
        end if;
        
        -- Paranapanema
        if ( Fn_PARANA_IsColetaPARANA(vColetaRowType) = true ) then     
             begin -- Regra feita para trocar o armazem caso tenha usando a faixacep da paranapanema
                  SELECT CEP.CEP_CEPCID_ARMAZEM
                  into vIsArmazem
                  FROM TDVADM.t_Glb_Cliente c,
                       TDVADM.T_GLB_CLIEND CD,
                       TDVADM.T_CEP_CEPCID_0684 CEP
                  WHERE trim(C.GLB_CLIENTE_CGCCPFCODIGO) = trim(vColetaRowType.ARM_COLETA_CNPJPAGADORFERETE)
                  AND trim(CD.GLB_CLIENTE_CGCCPFCODIGO)  = trim(vColetaRowType.GLB_CLIENTE_CGCCPFCODIGOCOLETA)
                  AND CD.GLB_TPCLIEND_CODIGO             = vColetaRowType.GLB_TPCLIEND_CODIGOCOLETA
                  AND C.GLB_GRUPOECONOMICO_CODIGO        = GrupoEconomicoBIO
                  AND CD.GLB_CEP_CODIGO                  BETWEEN CEP.CEP_CEPCID_CEPMIN AND CEP.CEP_CEPCID_CEPMAX;
             exception when no_data_found then
                 vIsArmazem := null;
             end;
               
             if(vIsArmazem is not null) then
                  vColetaRowType.arm_armazem_codigo := vIsArmazem;        
             end if;          
        end if;

        -- ULTRACARGO
        if (Fn_ULT_IsColetaULT(vColetaRowType) = true ) then     
           if(vColetaRowType.ARM_COLETA_ENTCOLETA = 'C') then
           -- Regra feita para trocar o armazem caso tenha usando a faixacep da ultracargo
           begin
               SELECT CEP.CEP_CEPCID_ARMAZEM_CODIGO
               into vIsArmazem
               FROM TDVADM.t_Glb_Cliente c,
                    TDVADM.T_GLB_CLIEND CD,
                    TDVADM.T_CEP_CEPCID_0714 CEP
               WHERE trim(C.GLB_CLIENTE_CGCCPFCODIGO) = trim(vColetaRowType.ARM_COLETA_CNPJPAGADORFERETE)
               AND trim(CD.GLB_CLIENTE_CGCCPFCODIGO)  = trim(vColetaRowType.GLB_CLIENTE_CGCCPFCODIGOCOLETA)
               AND CD.GLB_TPCLIEND_CODIGO             = vColetaRowType.GLB_TPCLIEND_CODIGOCOLETA
               AND C.GLB_GRUPOECONOMICO_CODIGO        = GrupoEconomicoULT
               AND CD.GLB_CEP_CODIGO                  BETWEEN CEP.CEP_CEPCID_CEPMIN AND CEP.CEP_CEPCID_CEPMAX;
           exception when no_data_found then
              vIsArmazem := null;
            end;
             
          if(vIsArmazem is not null) then
             vColetaRowType.arm_armazem_codigo := vIsArmazem;        
          end if;                                              
           end if;                  
        end if;
       
         /***********************************************************/
         /**   Inserção do Type na tabela t_arm_coleta             **/
         /***********************************************************/
         begin
           vColetaRowType.Arm_Coleta_Ncompra := vColetaNumero;
           vColetaRowType.arm_coleta_Ciclo   := vColetaCiclo;
           vColetaRowType.Arm_Coleta_Dtsolicitacao := case when nvl(pColetaRowType.ARM_COLETAORIGEM_COD,-1) = 8 then trunc(vColetaRowType.Arm_Coleta_Dtsolicitacao)
                                                           else trunc(sysdate) 
                                                      end;
           vColetaRowType.Arm_Coleta_Hrsolicitacao := case when nvl(pColetaRowType.ARM_COLETAORIGEM_COD,-1) = 8 then vColetaRowType.Arm_Coleta_Hrsolicitacao
                                                           else to_char(sysdate, 'HH24:MI')
                                                      end;
           vColetaRowType.Arm_Coleta_Dtgravacao    := sysdate;
           vColetaRowType.Arm_Coleta_Prioridade := case vColetaRowType.Arm_Coleta_Tpcoleta -- Normal | Expresso
                                                     when 'E' then 2
                                                     else 4
                                                     end;
           vColetaRowType.Glb_Tpcarga_Codigo :=  case vColetaRowType.arm_coleta_tpColeta -- Normal | Expresso
                                                   when 'E' then 'EX'
                                                   else vGlbTpCarga
                                                 end;
           vColetaRowType.Arm_Coleta_Tipo :=  case vColetaRowType.Arm_Coleta_Entcoleta -- modalidade
                                                when 'E' then 'ENTREGA'
                                                else 'COLETAR'
                                              end;           
           
            
           insert into tdvadm.t_arm_coleta values vColetaRowType;

         end;

         pColetaNumero := vColetaNumero;
         pColetaCiclo  := vColetaCiclo;

      end;
      commit;

      vStatus  := Status_normal;
      vMessage := 'Processamento Normal';
    exception when others then
      vStatus   := Status_erro;
      vMessage := 'Erro ao Executar Pkg_Col_Coleta.Sp_Col_Insert. Erro.: '||sqlerrm||' - '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;


    pStatus := vStatus;
    pMessage:= vMessage;
  end Sp_Col_Insert;
  
  procedure Sp_Col_InsertLote(pUsuario in t_usu_usuario.usu_usuario_codigo%type,
                             pStatus        out char,
                             pMessage       out varchar2,
                             pLote          out varchar2)
  as
    vStatus       char(1) ;
    vMessage      varchar2(1000);
    vLote         varchar2(19) := tdvadm.seq_arm_lote.nextval;
  begin

    begin
      insert into tdvadm.t_arm_lote values(vLote, pUsuario, sysdate, 'AG');
      commit;

      vStatus  := Status_normal;
      vMessage := 'Processamento Normal';
    exception when others then
      vStatus   := Status_erro;
      vMessage := 'Erro ao Executar Pkg_Col_Coleta.Sp_Col_Insertlote. Erro.: '||sqlerrm||' - '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;


    pStatus := vStatus;
    pMessage:= vMessage;
    pLote := vLote;
  end Sp_Col_InsertLote;
  
  
     procedure Sp_Col_InsertColetaLote(pXmlLoteColeta in clob,
                                      pStatus        out char,
                                      pMessage       out varchar2,
                                      pColetaLote    out varchar2)
  as
    vLoteColetaRowtype  tdvadm.t_arm_loteColeta%Rowtype;
    vStatus             char(1) ;
    vMessage            varchar2(1000); 
    vColetaLote         varchar2(19);
  begin
    
    insert into tdvadm.t_glb_testestr(glb_testestr_1,glb_testeclob_1,glb_testestr_dtgrav) values ('lotecoleta',pXmlLoteColeta, sysdate);
    commit;
    
    vLoteColetaRowtype := Fn_XmlToLoteColetaRowType(pXmlLoteColeta);

    begin
      begin
        SELECT nvl(l.arm_lotecoleta_id,0)  
               into vColetaLote
        FROM tdvadm.t_arm_lotecoleta l
        where l.arm_lote_id = vLoteColetaRowtype.Arm_Lote_Id
        and l.arm_lotecoleta_codigo = vLoteColetaRowtype.arm_lotecoleta_codigo;
      
      exception when no_data_found then
        vColetaLote := 0;
      end;  
      
      if(vColetaLote = 0) THEN
        insert into tdvadm.t_arm_lotecoleta values vLoteColetaRowtype;
        commit;    
        vColetaLote := vLoteColetaRowtype.Arm_Lotecoleta_Id;
      END IF;

      vStatus  := Status_normal;
      vMessage := 'Processamento Normal';
    exception when others then
      vStatus   := Status_erro;
      vMessage := 'Erro ao Executar Pkg_Col_Coleta.Sp_Col_InsertColetaLote. Erro.: '||sqlerrm||' - '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;


    pStatus := vStatus;
    pMessage:= vMessage;
    pcoletaLote:= vColetaLote;
  end Sp_Col_InsertColetaLote;
  
  
   procedure Sp_Col_InsertColetaItemLote(pXmlLoteColetaItem in clob,
                                        pStatus        out char,
                                        pMessage       out varchar2)
  as
    vLoteColetaItemRowtype t_arm_loteColetaItem%Rowtype := Fn_XmlToLoteColetaItemRowType(pXmlLoteColetaItem);
    vStatus       char(1) ;
    vMessage      varchar2(1000); 
  begin

    begin
      insert into tdvadm.t_arm_loteColetaItem values vLoteColetaItemRowtype;
      commit;

      vStatus  := Status_normal;
      vMessage := 'Processamento Normal';
    exception when others then
      vStatus   := Status_erro;
      vMessage := 'Erro ao Executar Pkg_Col_Coleta.Sp_Col_InsertColetaItemLote. Erro.: '||sqlerrm||' - '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;
    pStatus := vStatus;
    pMessage:= vMessage;
  end Sp_Col_InsertColetaItemLote;
                  

  /*********************************************************************************************
  * Data..: 03/12/2014
  * Autor.: Diego Lirio | Fabiano Goes
  * Versão: 1.0
  * Procedure que insere lista de itens da coletas.
  **********************************************************************************************
  *  15/10/2015 - Diego - refatorado lista de itens para tipo linha da T_Arm_Coletancompra%Rowtype (tListaItensColeta2)
  **********************************************************************************************/
  Procedure Sp_Col_InsertItem(pListColetaItemRowType in tListaItensColeta2,
                              pSeqItem      out t_arm_coletancompra.arm_coleta_seqitem%type,
                              pStatus       out varchar2,
                              pMessage      out varchar2)as

  vQuantidadeItem integer;
  vSeqItem        t_arm_coletancompra.arm_coleta_seqitem%type;
  vColetaNCompra  t_arm_coletancompra.arm_coletancompra%Type;
  vColetaCiclo    t_arm_coletancompra.arm_coleta_ciclo%Type;
  vColetaItem     t_arm_coletancompra%rowtype;
  
  begin

       begin
             

         For i In 1..pListColetaItemRowType.count Loop


            select Seq_Col_ItemColeta.Nextval
              into vSeqItem
              from dual;

            /*insert into t_arm_coletancompra values (pColetaNova.nCompra,
                                                     pColetaNova.items(i).codmercadoria,
                                                    pColetaNova.items(i).embalagem  ,
                                                    pColetaNova.items(i).peso,
                                                    pColetaNova.items(i).largura    ,
                                                    pColetaNova.items(i).altura     ,
                                                    pColetaNova.items(i).comprimento,
                                                    pColetaNova.items(i).cubagem    ,
                                                    pColetaNova.items(i).volume     ,
                                                    pColetaNova.items(i).quantidade ,
                                                    pColetaNova.items(i).remontavel ,
                                                    pColetaNova.items(i).mercadoria ,
                                                    pColetaNova.ciclo,
                                                    vSeqItem,
                                                    pColetaNova.items(i).onu_codigo,
                                                    pColetaNova.items(i).onu_grpemb);*/

           if(nvl(pListColetaItemRowType(i).ARM_COLETA_SEQITEM, 0) = 0) then
                vColetaItem := pListColetaItemRowType(i);
                vColetaItem.Arm_Coleta_Seqitem := vSeqItem;
                insert into t_arm_coletancompra values vColetaItem;
            else
                insert into t_arm_coletancompra values pListColetaItemRowType(i);
            end if;
--            insert into t_arm_coletancompra values pListColetaItemRowType(i);

            vColetaNCompra := pListColetaItemRowType(i).arm_coletancompra;
            vColetaCiclo   := pListColetaItemRowType(i).arm_coleta_ciclo;

         End Loop;

         vQuantidadeItem := pListColetaItemRowType.count;

         pSeqItem   := vSeqItem;
         pStatus    := Status_Normal;
         pMessage   := 'Processamento Normal incluido '||vQuantidadeItem||' item(s) na coleta.: '||vColetaNCompra||'-'||vColetaCiclo;

         Commit;
       exception
         when dup_val_on_index then
           begin
             pStatus  := Status_Erro;
             pMessage := 'Items duplicados na coleta.: '||vColetaNCompra||'-'||vColetaCiclo;
           end;

         when others then
           begin
             pStatus  := Status_Erro;
             pMessage := pListColetaItemRowType(1).arm_coleta_ncompra_peso ||'Erro ao Executar Procedure Pkg_Col_Coleta.Sp_Col_InsertItem. '||dbms_utility.format_error_backtrace||SQLERRM;
           end;
       end;

  end Sp_Col_InsertItem;

  /*********************************************************************************************
  * Data..: 03/09/2015
  * Autor.: Diego Lirio
  * Versão: 1.0
  * Procedure para confirmar se salva Coleta Direto
  **********************************************************************************************/
  Procedure Sp_ConfirmPost_Coleta(pXmlColeta in clob,
                                   pStatus out char,
                                   pMessage out varchar2)
  As
    vColetaRowType T_Arm_Coleta%RowType;
  Begin
      Begin
        
      
        insert into tdvadm.t_glb_testestr
          (glb_testestr_1, glb_testeclob_1, glb_testestr_dtgrav)
        values
          ('confirmacol', pXmlColeta, sysdate);
        
        commit;
        
        vColetaRowType := Fn_XmlToColetaRowType(pXmlColeta);
        
        
        -- Thiago teste tirar - 14/04/2021 
       -- if vColetaRowType.Usu_Usuario_Codigo_Cad = '117018417' then
           --insert into tdvadm.t_glb_sql sq values (pXmlColeta,sysdate,'pkg_col_coleta.sp_confirmpost_coleta','tati teste' );
          -- commit;
      --  end if;
        
        Sp_AMT_ConfirmPost(vColetaRowType, pStatus, pMessage);
      Exception
        When Others Then
          pStatus := 'E';
          pMessage := sqlerrm || ' - ' || dbms_utility.format_error_backtrace;
      End;
  End Sp_ConfirmPost_Coleta;

  Procedure Sp_Post_Coleta(pColetaXml    in  CLOB,
                           pColetaNumero out varchar2,
                           pColetaCiclo  out varchar2,
                           pStatus       out varchar2,
                           pMessage      out varchar2)as
    vColetaRowType tdvadm.t_arm_coleta%RowType;
    vCovertOk      boolean;
    vColetaValida  boolean;
    vListaParceiros tListaParceiros;
    vContrato tdvadm.t_Arm_coleta.slf_contrato_codigo%Type;
    vCount Integer;
  begin

    begin

     insert into t_glb_sql(glb_sql_instrucao,glb_sql_dtgravacao,glb_sql_programa)
     values(pColetaXml,sysdate,'Coleta');
     commit;

      -- Bloco de validação do Xml de Envio da Integração Coleta
      vColetaRowType := Fn_XmlToColetaRowType(pColetaXml);
      if not(vCovertOk) then
         if trim(upper(pStatus)) = trim(upper(Status_Warning)) then
            pStatus    := Status_warning;
            pMessage  := 'Xml de envio não formatado. '||pMessage;
         elsif (Trim(pStatus) = Status_Erro) then
            pStatus    := Status_Erro;
            pMessage  := 'Xml de envio não formatado. '||pMessage;
         end if;

         return;
      end if;

      -- Validação do Type Coleta                 
      if nvl(vColetaRowType.ARM_COLETAORIGEM_COD, -1) = 4 then 
      
        vColetaValida := Fn_Col_ValidaTipoColeta(vColetaRowType,-- GERAL
                                                 pStatus,
                                                 pMessage) and
                         Fn_VALE_ValidaCampos(vColetaRowType,   -- VALE
                                              pStatus,
                                              pMessage) and
                         Fn_VLI_ValidaCampos(vColetaRowType,  -- VLI
                                             pStatus,
                                             pMessage) and
                         Fn_ALC_ValidaCampos(vColetaRowType,  -- ALCOA
                                             pStatus,
                                             pMessage) and
                         Fn_AMT_ValidaCampos(vColetaRowType,  -- ARCELOMITAL
                                             pStatus,
                                             pMessage) and
                   /*      Fn_GIL_ValidaCampos(vColetaRowType,  -- GILBARCO
                                             pStatus,
                                             pMessage) and   */   
                         Fn_OXI_ValidaCampos(vColetaRowType,  -- OXITENO
                                             pStatus,
                                             pMessage) and                                  
                                             
                         Fn_THY_ValidaCampos(vColetaRowType, -- ThyssenKrupp
                                             pStatus,
                                             pMessage) and
                         Fn_AMX_ValidaCampos(vColetaRowType,  -- AMX
                                             pStatus,
                                             pMessage) and
                         Fn_ENE_ValidaCampos(vColetaRowType,  -- ENEVA
                                             pStatus,
                                             pMessage) and                    
                         Fn_Novelis_ValidaCampos(vColetaRowType, -- NOVELIS                                             
                                                pStatus,
                                                pMessage) and
                        /*Fn_APE_ValidaCampos(vColetaRowType, -- APERAN
                                             pStatus,
                                             pMessage) and*/
                         Fn_CBA_ValidaCampos(vColetaRowType, -- CBA
                                             pStatus,
                                             pMessage) and                     
                         Fn_HYD_ValidaCampos(vColetaRowType, -- HYDRO
                                             pStatus,
                                             pMessage) and                                        
                         Fn_ALB_ValidaCampos(vColetaRowType, -- ALBRAS
                                             pStatus,
                                             pMessage) and
                         Fn_SUZ_ValidaCampos(vColetaRowType, -- SUZANO
                                             pStatus,
                                             pMessage) and
                         Fn_PAR_ValidaCampos(vColetaRowType, -- BIOSEV                                             
                                             pStatus,
                                             pMessage) and
                         Fn_USI_ValidaCampos(vColetaRowType, -- USI
                                             pStatus,
                                             pMessage) and
                         Fn_VTC_ValidaCampos(vColetaRowType, -- Votorantim Cimentos                                              
                                             pStatus,
                                             pMessage) and
                         Fn_RAI_ValidaCamposGeral(vColetaRowType, -- RAIZEN
                                             pStatus,
                                             pMessage) and 
                         Fn_BIO_ValidaCampos(vColetaRowType, -- BIOSEV                                             
                                             pStatus,
                                             pMessage) and
                         Fn_SOL_ValidaCampos(vColetaRowType, -- SOLTEC                                             
                                             pStatus,
                                             pMessage) and                    
                         Fn_AGL_ValidaCampos(vColetaRowType, -- ANGLO                                             
                                             pStatus,
                                             pMessage) and
                         Fn_AGN_ValidaCampos(vColetaRowType, -- ANGLO NIQUEL                                           
                                             pStatus,
                                             pMessage) and
                         Fn_PRA_ValidaCampos(vColetaRowType, -- PRADA                                             
                                             pStatus,
                                             pMessage) and
                         Fn_PET_ValidaCampos(vColetaRowType, -- PETROPOLIS                                             
                                             pStatus,
                                             pMessage) and   
                         Fn_OWE_ValidaCampos(vColetaRowType, -- OWENS                                            
                                             pStatus,
                                             pMessage) and
                         Fn_ULT_ValidaCampos(vColetaRowType, -- ULTRA CARGO                                             
                                             pStatus,
                                             pMessage) and
                         Fn_ELD_ValidaCampos(vColetaRowType, -- ELDORADO                                             
                                             pStatus,
                                             pMessage) and

                         Fn_CAR_ValidaCampos(vColetaRowType, -- MINERAÇÃO CARAIBA                                             
                                             pStatus,
                                             pMessage); 
                                                          
                                                                                                          
                                             
      end if;
                     
      -- REGRA PARA PEGAR O CONTRATO DE COLETA VALE
       if(Fn_VALE_IsColetaVALE(vColetaRowType)) then
             vContrato := tdvadm.pkg_col_coleta.Fn_VALE_GETCONTRATO(vColetaRowType);
            
             if (vContrato = 'XXX') then
                 pStatus   := Status_warning;
                 pMessage  := 'Coleta Nao Valida. Nenhum contrato encontrado';
                 vColetaValida := false;
             end if;
          
            if (vContrato <> 'XXX') then
                 vColetaRowType.Slf_Contrato_Codigo := vContrato;
             end if;
             
       end if;
       
         -- REGRA PARA PEGAR O CONTRATO DE COLETA SUZANO TATI 02/09/2020
        
       /*if(FN_SUZ_IsColetaSUZ(vColetaRowType)) then
            -- vContrato := tdvadm.pkg_col_coleta.Fn_SUZ_GETCONTRATO(vColetaRowType);
            
             if (vContrato = 'XXX') then
                 pStatus   := Status_warning;
                 pMessage  := 'Coleta Nao Valida. Nenhum contrato encontrado';
                 vColetaValida := false;
             end if;
          
            if (vContrato <> 'XXX') then
                 vColetaRowType.Slf_Contrato_Codigo := vContrato;
             end if;
       end if;*/

      if nvl(vColetaRowType.ARM_COLETAORIGEM_COD, -1) = 8 then
        vColetaValida := Fn_Col_ValidaTipoColeta(vColetaRowType,
                                                 pStatus,
                                                 pMessage);
        dbms_output.put_line( 'Status Antes Nimbi = '||pStatus );
        vColetaValida := Fn_VALE_ValidaCamposNimbi(vColetaRowType,
                                                   pStatus,
                                                   pMessage) and vColetaValida;                                                                                                  
      end if;

      if not(vColetaValida) then

        if trim(upper(trim(pStatus))) = trim(upper(Status_Warning)) then
           pStatus   := Status_warning;
           pMessage  := 'Coleta Nao Valida. '||pMessage;
        elsif (nvl(pStatus, Status_Erro) = Status_Erro) then
           pStatus   := Status_Erro;
           pMessage  := 'Erro ao Valida Coleta. Erro: '||pMessage;
        end if;

        return;

      end if;


      -- Inclusão do Type Oracle na tabela de Coleta 
      if ( (vColetaRowType.Arm_Coleta_Ncompra is null) and (vColetaRowType.Arm_Coleta_Ciclo is null) ) then

        Sp_Col_Insert(vColetaRowType,pColetaNumero, pColetaCiclo, pStatus, pMessage);
        if( trim(upper(pStatus)) !='N' )then
            return;
        end if;
       
      else

        sp_Col_Update(vColetaRowType,pColetaNumero, pColetaCiclo, pStatus, pMessage);
        if( trim(upper(pStatus)) !='N' )then
            return;
        end if;
       
      end if; 

      -- Granvando Xml da solicitação de Coleta             
      begin

            if trim(upper(pStatus)) = trim(upper(Status_normal)) then

               insert into t_arm_coletaarquivo
                  (arm_coleta_ncompra,
                   arm_coleta_ciclo,
                   arm_coleta_arqxml,
                   arm_coleta_dtinclusao)
                values
                  (pColetaNumero,
                   pColetaCiclo,
                   pColetaXml,
                   SYSDATE);

            end if;

      end;

      vColetaRowType.Arm_Coleta_Ncompra := pColetaNumero;
      vColetaRowType.arm_coleta_ciclo   := pColetaCiclo;

      -- coletaPedido -----------------------------------------------------------------------
      -- TODO: extract method, se nao existe pedido na t_arm_coletapedido insere o mesmo
      if nvl(vColetaRowType.Arm_Coleta_pedido,'NULLO') != 'NULLO' then
            select count(*)
              into vCount
              from t_arm_coletapedido cp
              where cp.arm_coleta_ncompra = vColetaRowType.Arm_Coleta_Ncompra
                and cp.arm_coleta_ciclo   = vColetaRowType.Arm_Coleta_ciclo
                and cp.arm_coletapedido_pedido = vColetaRowType.Arm_Coleta_pedido;
            if vCount = 0 then
                Sp_Set_SaveColetaPedido(vColetaRowType.Arm_Coleta_Ncompra,
                                        vColetaRowType.Arm_Coleta_ciclo,
                                        vColetaRowType.Arm_Coleta_pedido,
                                        vColetaRowType.Usu_Usuario_Codigo_Cad,
                                        pStatus,
                                        pMessage);
                commit;
            end if;
      end if;

      vListaParceiros := Fn_XmlToParceiros(pColetaXml);
      sp_set_InsereParceirosColeta(vColetaRowType, vListaParceiros, pStatus, pMessage);
      if trim(upper(pStatus)) != trim(upper(Status_normal)) then
        return;
      end if;

      -- Quando for Integração Nimbi, executamos a Efetivação direto no Post porque ela não tem um segundo momento.
      --if nvl(vColetaRowType.ARM_COLETAORIGEM_COD, -1) = 8 then
      --  sp_vale_EfetivarColetaNimbi( vColetaRowType, pStatus, pMessage );
      --end if;

      commit;
      pStatus  := Status_normal;
      pMessage := 'Coleta salva com sucesso!';
    exception when others then
      pStatus  := Status_Erro;
      pMessage := 'Erro ao executar Pkg_Col_Coleta.Sp_Post_Coleta. Erro: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;

  end Sp_Post_Coleta;

  /*********************************************************************************************
  * Data..: 03/12/2014
  * Autor.: Diego Lirio | Fabiano Goes
  * Versão: 1.0
  * Procedure que insere lista de itens da coletas.
  **********************************************************************************************
  *  15/10/2015 - Diego - refatorado lista de itens para tipo linha da T_Arm_Coletancompra%Rowtype (tListaItensColeta2)
  **********************************************************************************************/
  Procedure Sp_Post_ColetaItem(pColetaXmlItem in  clob,
                               pColetaNumero  in  varchar2,
                               pColetaCiclo   in  varchar2,
                               pSeqItem       out t_arm_coletancompra.arm_coleta_seqitem%type,
                               pStatus        out varchar2,
                               pMessage       out varchar2)as
  vConversao    boolean;
  vValidacao    boolean;
  --vColetaNova   TpColetaNova;
  vListColetaItemRowType tListaItensColeta2;
  vSeqItem      t_arm_coletancompra.arm_coleta_seqitem%type;
  vPreColetaRowType t_Edi_Arcelormittal%RowType;
  vMercadoriaDesc Varchar2(100);
  VPagador CHAR(4);
  begin
   
    begin
      
    insert into t_glb_sql(glb_sql_instrucao,glb_sql_dtgravacao,glb_sql_programa)
     values(pColetaXmlItem,sysdate,'Coleta Item');
     commit;

      SELECT T.GLB_GRUPOECONOMICO_CODIGO
      INTO VPagador
      FROM TDVADM.T_ARM_COLETA L,
           TDVADM.T_GLB_CLIENTE T
      WHERE TRIM(L.Arm_Coleta_Cnpjpagadorferete) = TRIM(T.GLB_CLIENTE_CGCCPFCODIGO)
      AND L.ARM_COLETA_NCOMPRA = pColetaNumero
      AND L.Arm_Coleta_Ciclo = pColetaCiclo;

      /***********************************************/
      /** Conversão do Xml em Type Oracle           **/
      /***********************************************/
      vConversao := Fn_Col_XmlItemsToType(pColetaNumero,
                                          pColetaCiclo,
                                          pColetaXmlItem,
                                          vListColetaItemRowType,
                                          pStatus,
                                          pMessage);
      if vConversao = false then
          return;
      end if;
      
    
      /***********************************************/
      /** Validação do Type Oracle                  **/
      /***********************************************/
      vValidacao := Fn_Col_ValidaItemsColeta(vListColetaItemRowType,
                                             pStatus,
                                             pMessage);
                                             
         if(vValidacao = true and VPagador = GrupoEconomicoRAI) then
               vValidacao := Fn_RAI_ValidaItemsColeta(vListColetaItemRowType,
                                                      pColetaNumero,
                                                      pColetaCiclo,
                                                      pStatus,
                                                      pMessage);
         end if;

      if vValidacao = false then
           return;
      end if;

     if(vListColetaItemRowType(1).arm_coleta_seqitem  <= 0) then
         /***********************************************/
         /** Inserção do Type Oracle na tabela de Itens**/
         /***********************************************/
         Sp_Col_InsertItem(vListColetaItemRowType,
                           vSeqItem,
                           pStatus,
                           pMessage);

         Sp_UpdateColetaPendente(pColetaNumero, pColetaCiclo, pStatus, pMessage);

     else
        For i In 1..vListColetaItemRowType.count Loop

            Begin
               vPreColetaRowType := Fn_Get_PreColetaPorItemCol(pColetaNumero, pColetaCiclo, vListColetaItemRowType(i).arm_coleta_seqitem);
            Exception When No_Data_Found Then
               vPreColetaRowType.Edi_Arcelormittal_Pedido := '-1';
            End;

            vMercadoriaDesc := Case
                                 when Nvl(vPreColetaRowType.Edi_Arcelormittal_Pedido, '-1') != '-1' then Fn_Get_MercadoriaDescPreCol(vPreColetaRowType)
                                 else vListColetaItemRowType(i).arm_coletancompra_mercadoria
                               End;

            Update t_arm_coletancompra n
              set n.glb_mercadoria_codigo   = vListColetaItemRowType(i).glb_mercadoria_codigo ,
                  n.glb_embalagem_codigo    = vListColetaItemRowType(i).glb_embalagem_codigo ,
                  n.arm_coleta_ncompra_peso = vListColetaItemRowType(i).arm_coleta_ncompra_peso ,
                  n.arm_coleta_ncompra_largura = vListColetaItemRowType(i).arm_coleta_ncompra_largura ,
                  n.arm_coleta_ncompra_altura  = vListColetaItemRowType(i).arm_coleta_ncompra_altura ,
                  n.arm_coleta_ncompra_comp    = vListColetaItemRowType(i).arm_coleta_ncompra_comp ,
                  n.arm_coleta_ncompra_cubagem = vListColetaItemRowType(i).arm_coleta_ncompra_cubagem ,
                  n.arm_coleta_ncompra_volume  = vListColetaItemRowType(i).arm_coleta_ncompra_volume ,
                  n.arm_coleta_ncompra_qtdemp  = vListColetaItemRowType(i).arm_coleta_ncompra_qtdemp ,
                  n.arm_coleta_ncompra_remont  = vListColetaItemRowType(i).arm_coleta_ncompra_remont ,
                  n.arm_coletancompra_mercadoria = vMercadoriaDesc,
                  --n.arm_coleta_ciclo             = vColetaNova.ciclo,
                  n.glb_onu_codigo               = vListColetaItemRowType(i).glb_onu_codigo ,
                  n.glb_onu_grpemb               = vListColetaItemRowType(i).glb_onu_grpemb
                  --n.arm_coleta_ncompra_pedido    = vListColetaItemRowType(i).arm_coleta_ncompra_pedido
               where n.arm_coletancompra  = pColetaNumero
                 and n.arm_coleta_ciclo   = pColetaCiclo
                 and n.arm_coleta_seqitem = vListColetaItemRowType(i).arm_coleta_seqitem ;

            vSeqItem := vListColetaItemRowType(i).arm_coleta_seqitem ;
        end loop;
        pStatus := 'N';
        pMessage := 'Alterado com sucesso';
     end if;

     if Trim(pStatus) = 'N' then
         -- atualizo campos calculados na Coleta
         Sp_Get_AtualizaValoresPeso(pColetaNumero, pColetaCiclo, pStatus, pMessage);
         if ( trim(upper(pStatus)) != Status_Normal ) then
           return;
         end if;
     end if;      

    exception when others then
      pStatus  := Status_Erro;
      pMessage := 'Erro ao executar Pkg_Col_Coleta.Sp_Post_ColetaItem Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;

    pSeqItem := vSeqItem;

  end Sp_Post_ColetaItem;

  Procedure Sp_UpdateColetaPendente(pColetaNumero  in  varchar2,
                                    pColetaCiclo   in  varchar2,
                                    pStatus        Out Char,
                                    pMessage       Out Varchar2)
  As
  vCount number;
  vColetaRowType t_arm_Coleta%RowType;
  vOcorrencia t_Arm_Coletaocor.Arm_Coletaocor_Codigo%Type;
  Begin
       Select Count(*)
         into vCount
         from t_arm_coletancompra n
         where n.arm_coletancompra = pColetaNumero
           and n.arm_coleta_ciclo  = pColetaCiclo;

       /**********************************************************************
        * 18/10/2016 - Diego Lirio | Felipe Bispo: Somente altera 
        *               a ocorrencia de estiver pendente, proc reutilizada 
        *               ao cadastrar novo item na tela de Edit da Coleta Web
        **********************************************************************/
       vColetaRowType := Tdvadm.Pkg_Col_Coleta.Fn_Get_ColetaRowType(pColetaNumero, pColetaCiclo);
       if trim(nvl(vColetaRowType.arm_coletaocor_codigo, 'XX')) In('64','68') then
           if vCount > 0 then
             vOcorrencia := '68';
           else
             vOcorrencia := '64';
           end if;
           update t_arm_coleta c
             set c.arm_coletaocor_codigo = vOcorrencia
           where c.arm_coleta_ncompra = pColetaNumero
             and c.arm_coleta_ciclo   = pColetaCiclo;           
        end if;

       pStatus := 'N';
       pMessage := 'OK';

       commit;

  End Sp_UpdateColetaPendente;

  Procedure Sp_Get_CliendPorCNPJ(pCnpj    in  varchar2,
                                 pCursor  out T_CURSOR,
                                 pStatus  out varchar2,
                                 pMessage out varchar2)as
  vExisteCliente integer;
  begin
    begin
      
      /*********************************************************************
       * Autor: Felipe Bispo
       * Data: 19/09/2016
       * Motivo: Foi Solicitado pela a VLI o Bloqueio dos CNPJ's:
       * 12.963.928.0001-50, 12.963.928.0002-31, 12.963.928.0003-12
       * Foi solicitado no dia 03/10/2016  a desativação do Bloqueio
       *********************************************************************/

       
       if(trim(pCnpj) in ('12963928000150', '12963928000231', '12963928000312')) then
          pStatus  := Status_Erro;
          pMessage := 'O CNPJ ' || trim(pCnpj) || ' Foi Bloqueado por solicitação do Cliente.';
          open pCursor for
               select sysdate from dual;
          return;       
       end if;
       
      open pCursor for
            select  e.GLB_CLIENTE_CGCCPFCODIGO ,            
              nvl(e.GLB_TPCLIEND_CODIGO,'NULO') GLB_TPCLIEND_CODIGO,   
              e.GLB_PAIS_CODIGO          ,  
              nvl(e.GLB_ESTADO_CODIGO,'SP') GLB_ESTADO_CODIGO,  
              Replace(nvl(e.GLB_CLIEND_ENDERECO,'NULO'),'-','') GLB_CLIEND_ENDERECO,   
              Replace(nvl(e.GLB_CLIEND_COMPLEMENTO,'NULO'),'-','') GLB_CLIEND_COMPLEMENTO,   
              Replace(nvl(e.GLB_CLIEND_CIDADE,'NULO'),'-','') GLB_CLIEND_CIDADE,   
              Replace(nvl(e.GLB_CEP_CODIGO,'NULO'),'-','') GLB_CEP_CODIGO,   
              e.GLB_LOCALIDADE_CODIGO    ,   
              nvl(e.GLB_CLIEND_CODCLIENTE,'NULO') GLB_CLIEND_CODCLIENTE,   
              e.ARM_REGIAO_CODIGO        ,   
              e.ARM_REGIAO_METROPOLITANA ,   
              e.ARM_SUBREGIAO_CODIGO     ,   
              e.XML_CEP_CVRD             ,   
              e.GLB_CLIEND_EMAIL         ,   
              e.GLB_CLIEND_LATITUDE      ,   
              e.GLB_CLIEND_LONGITUDE     ,   
              e.GLB_CLIEND_LOGO          ,   
              e.GLB_PORTARIA_ID          ,   
              e.GLB_CLIEND_IE            ,   
              e.GLB_CLIEND_IM            ,   
              e.GLB_CLIEND_HIGIENIZADO   ,   
              e.USU_USUARIO_CRIOU        ,   
              e.USU_USUARIO_ALTEROU      ,   
              e.GLB_CLIEND_DTCRIACAO     ,   
              e.GLB_CLIEND_DTALTERACAO   ,   
              e.GLB_LOCALIDADE_CODIGOIE  ,   
              e.GLB_CLIEND_NUMERO        ,   
              e.GLB_CLIENTE_CNPJAUX      ,   
              C.GLB_CLIENTE_RAZAOSOCIAL  ,
              c.glb_grupoeconomico_codigo,
              --Adicionado por Felipe B. - 11/02/2016
              tp.glb_tpcliend_descricao
        from tdvadm.t_glb_cliend e,
             tdvadm.t_glb_cliente c,
             tdvadm.t_glb_tpcliend tp
       where e.glb_cliente_cgccpfcodigo = rpad(trim(pCnpj),20,' ')
         and e.glb_tpcliend_codigo <> 'C'
         and e.glb_cliente_cgccpfcodigo = c.glb_cliente_cgccpfcodigo
         and e.glb_tpcliend_codigo = tp.glb_tpcliend_codigo;

      select count(*)
        into vExisteCliente
        from tdvadm.t_glb_cliente l
       where l.glb_cliente_cgccpfcodigo = rpad(trim(pCnpj),20,' ');


      if (vExisteCliente = 0) then
          pStatus  := Status_warning;
          pMessage := 'CNPJ nao cadastrado na base de dados.';
          return;
      end if;

      select count(*)
        into vExisteCliente
        from tdvadm.t_glb_cliend l
       where l.glb_cliente_cgccpfcodigo = rpad(trim(pCnpj),20,' ');


      if (vExisteCliente = 0) then
          pStatus  := Status_warning;
          pMessage := 'CNPJ Não contém endereço.';
          return;
      end if;

      pStatus  := Status_Normal;
      pMessage := Null;
    exception when others then
      pStatus  := Status_Erro;
      pMessage := 'Erro ao executar Pkg_Col_Coleta.Sp_Get_CliendPorCNPJ Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;
  end Sp_Get_CliendPorCNPJ;

  /**
    * Busca cliente UM por Cnpj
    */
  Procedure Sp_Get_ClientePorCNPJ(pCnpj    in  varchar2,
                                  pCursor  out T_CURSOR,
                                  pStatus  out varchar2,
                                  pMessage out varchar2)as
  begin
      TDVADM.Pkg_Glb_Cliente.Sp_Get_ClientePorCNPJ(pCnpj, pCursor, pStatus, pMessage);
  end Sp_Get_ClientePorCNPJ;
  
  /**
    * Busca cliente UM por Cnpj
    */
  Procedure Sp_Get_ClientePorCNPJEstr(pCnpj    in  varchar2,
                                  pCursor  out T_CURSOR,
                                  pStatus  out varchar2,
                                  pMessage out varchar2)as
    vExisteCliente integer;
  begin
    begin 

      open pCursor for
      select  c.GLB_CLIENTE_CGCCPFCODIGO ,            
              C.GLB_CLIENTE_RAZAOSOCIAL  ,
              c.glb_grupoeconomico_codigo,
              c.glb_cliente_nacional,
              c.glb_cliente_tppessoa,
              c.glb_cliente_ie,
              c.glb_cliente_im,
              c.glb_rota_codigo,
              c.glb_cliente_situacao,
              c.glb_cliente_qtdtitvenc,
              c.glb_cliente_vltotvenc,
              c.glb_cliente_prazomedvenc,
              c.glb_cliente_prazomedpagto,
              c.glb_cliente_dtutlmov,
              c.glb_cliente_dtcadastro,
              c.glb_cliente_obs
        from tdvadm.t_glb_cliente c
       where c.glb_cliente_cgccpfcodigo = rpad(trim(pCnpj),20,' ')
         and c.glb_cliente_nacional = 'I';
      
      
      select count(*)
        into vExisteCliente
        from tdvadm.t_glb_cliente l
       where l.glb_cliente_cgccpfcodigo = rpad(trim(pCnpj),20,' ');
      
      
      if (vExisteCliente = 0) then
          pStatus  := 'W';
          pMessage := 'Cliente com CNPJ ' || pCnpj || ' nao cadastrado na base de dados.';
          return;
      end if;       
      
      pStatus  := Status_Normal;
      pMessage := Null;
    exception when others then
      pStatus  := Status_Erro;
      pMessage := 'Erro ao executar Pkg_Pkg_Cliente.Sp_Get_ClientePorCNPJ Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;
  end Sp_Get_ClientePorCNPJEstr;  
  
  Procedure Sp_Get_EmbalagemLista(pCursor  out T_CURSOR,
                                  pStatus  out varchar2,
                                  pMessage out varchar2)
  as
  begin
    begin

      open pCursor for
      select e.*
      from tdvadm.t_glb_embalagem e
      ORDER BY E.GLB_EMBALAGEM_DESCRICAO;

      pStatus  := Status_Normal;
      pMessage := Null;
    exception when others then
      pStatus  := Status_Erro;
      pMessage := 'Erro ao executar Pkg_Col_Coleta.Sp_Get_EmbalagemLista Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;
  end Sp_Get_EmbalagemLista;

  Procedure Sp_Get_CargaLista(pCursor  out T_CURSOR,
                              pStatus  out varchar2,
                              pMessage out varchar2)
  as
  begin
    begin

      open pCursor for
      select TRIM(e.fcf_tpcarga_codigo) fcf_tpcarga_codigo,
             TRIM(e.fcf_tpcargadescricao) fcf_tpcargadescricao
      from tdvadm.t_fcf_tpcarga e
      order by e.fcf_tpcargadescricao;

      pStatus  := Status_Normal;
      pMessage := Null;
    exception when others then
      pStatus  := Status_Erro;
      pMessage := 'Erro ao executar Pkg_Col_Coleta.Sp_Get_CargaLista Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;
  end Sp_Get_CargaLista;

  Procedure Sp_Get_MercadoriaLista(pCursor  out T_CURSOR,
                                   pStatus  out varchar2,
                                   pMessage out varchar2)
  as
  begin
    begin

      open pCursor for
      select e.*
        from tdvadm.t_glb_mercadoria e
       order by e.glb_mercadoria_descricao;

      pStatus  := Status_Normal;
      pMessage := Null;
    exception when others then
      pStatus  := Status_Erro;
      pMessage := 'Erro ao executar Pkg_Col_Coleta.Sp_Get_MercadoriaLista Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;
  end Sp_Get_MercadoriaLista;

  Procedure Sp_Get_TipoVeiculoLista(pCursor  out T_CURSOR,
                                    pStatus  out varchar2,
                                    pMessage out varchar2)
  as
  begin
    begin

      open pCursor for
      select trim(e.fcf_tpveiculo_codigo)       fcf_tpveiculo_codigo,
             trim(e.fcf_tpveiculo_descricao)    fcf_tpveiculo_descricao,
             trim(e.fcf_tpveiculo_lotacao)      fcf_tpveiculo_lotacao,
             trim(e.fcf_tpveiculo_vlrcoleta)    fcf_tpveiculo_vlrcoleta,
             trim(e.fcf_tpveiculo_percoleta)    fcf_tpveiculo_percoleta,
             trim(e.fcf_tpveiculo_vlrentrega)   fcf_tpveiculo_vlrentrega,
             trim(e.fcf_tpveiculo_perentrega)   fcf_tpveiculo_perentrega,
             trim(e.fcf_tpveiculo_vlrkmcoleta)  fcf_tpveiculo_vlrkmcoleta,
             trim(e.fcf_tpveiculo_vlrkmentrega) fcf_tpveiculo_vlrkmentrega
        from tdvadm.t_fcf_tpveiculo e
       order by e.fcf_tpveiculo_descricao;

      pStatus  := Status_Normal;
      pMessage := Null;
    exception when others then
      pStatus  := Status_Erro;
      pMessage := 'Erro ao executar Pkg_Col_Coleta.Sp_Get_TipoVeiculoLista Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;
  end Sp_Get_TipoVeiculoLista;

  Procedure Sp_Col_ValidaCnpj(pCnpj    in varchar2,
                              pStatus  out varchar2,
                              pMessage out varchar2) as
  vExisteCnpj integer;
  begin

    begin

      select count(*)
        into vExisteCnpj
        from t_glb_cliente c
       where c.glb_cliente_cgccpfcodigo = rpad(trim(pCnpj),20,' ');

     if (vExisteCnpj > 0) then

         pStatus  := Status_Normal;
         pMessage := 'Processamento Normal!';

     else

         pStatus  := Status_warning;
         pMessage := 'Cnpj Não existe!!';

     end if;

    exception when others then

      pStatus  := Status_Erro;
      pMessage := 'Erro ao executar Pkg_Col_Coleta.Sp_Col_ValidaCnpj Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;

    end;

  end Sp_Col_ValidaCnpj;

  Procedure Sp_Get_DadosContato(pUsuario in  varchar2,
                                pCnpj    in  varchar2,
                                pCursor  out t_cursor,
                                pStatus  out varchar2,
                                pMessage out varchar2)as
    vExist    integer;
    vTelefone varchar2(18);
    vEmail    varchar2(50);
    vCpf      varchar2(14);

--    vWebTelefone varchar2(18);
--    vWebEmail    varchar2(50);
    vWebCpf      varchar2(14);

  begin

    begin

          
      Select count(*)
        into vExist
        from tdvadm.t_usu_usuario uu
       where (lower(uu.usu_usuario_codigo) = RPAD(lower(pUsuario),10,' ')
              or lower(trim(uu.usu_usuario_login)) = lower(trim(pUsuario)))
         and uu.usu_usuario_ativo = 'S';
          
      if vExist > 0 then
        /********************************************************************************************
         * Desenvolvedor: Felipe B. 
         * Data: 28/04/2016
         * Tarefa: #720
         * Motivo: Rotina criada temporáriamente para realizar a equiparação da tabela t_usu_usuario 
         * com a tabela coleta.usuario_web
         *********************************************************************************************/
        Select uu.usu_usuario_ramal              telefone,
               uu.usu_usuario_email                 email,
               lpad(trim(uu.usu_usuario_cpf),14,'0') cnpj
          into vTelefone,
               vEmail,
               vCpf
          from tdvadm.t_usu_usuario uu
         where (lower(uu.usu_usuario_codigo) = RPAD(lower(pUsuario),10,' ')
             or upper(uu.usu_usuario_login) = upper(pUsuario))
           and uu.usu_usuario_ativo = 'S'
           and rownum = 1;

         if(nvl(vCpf,'nulo') = 'nulo') then--or (nvl(vTelefone,'nulo') = 'nulo') or (nvl(vEmail,'nulo') = 'nulo') then
            select --l.dc_telefone,
--                   l.dc_email,
                   lpad(trim(l.dc_cnpj),14,'0')
              into --vWebTelefone,
                   --vWebEmail,
                   vWebCpf
              from coleta.usuario_web l,
                   t_usu_usuario uu
             where lower(l.usu_usuario_codigo) = lower(uu.usu_usuario_codigo)
               and (upper(l.dc_usuario) = trim(upper(pUsuario)) or upper(l.usu_usuario_codigo) = RPAD(upper(pUsuario),10,' '))
                and l.dc_cnpj = TRIM(pCnpj);
                
            if (nvl(vCpf,'nulo') = 'nulo') then
              vCpf := vWebCpf;
            end if;

            begin
              Update t_usu_usuario us
                 set us.usu_usuario_cpf    = vCpf--,
--                     us.usu_usuario_ramal  = vTelefone,
--                     us.usu_usuario_email  = vEmail
               where (trim(lower(us.usu_usuario_codigo)) = trim(lower(pUsuario))
                        or upper(us.usu_usuario_login) = upper(pUsuario))
                 and us.usu_usuario_ativo = 'S';
            Exception when others then
              pStatus  := Status_Erro;
              pMessage := 'Erro ao equiparar a tabela t_usu_usuario com a coleta.usuario_web. Pkg_Col_Coleta.Sp_Get_DadosContato Erro.: '|| sqlerrm ||' - '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
            end;
            
            commit;       
         end if;

         /******************************************************************************
         * Desenvolvedor: Felipe B.
         * Data: 26/04/2016
         * Tarefa: #663
         * Motivo: Foi retirado a tabela "usuario_web" do Owner "coleta" e foi mantida 
         * apenas a Tabela "t_usu_usuario" do "TDVADM"
         ********************************************************************************/
          open pCursor for
        Select trim(uu.usu_usuario_codigo)           nome,
               uu.usu_usuario_ramal              telefone,
               uu.usu_usuario_celular             celular,
               uu.usu_usuario_email                 email,
               lpad(trim(uu.usu_usuario_cpf),14,'0') cnpj,
               uu.usu_usuario_nome           nome_completo
          from tdvadm.t_usu_usuario uu
         where (lower(uu.usu_usuario_codigo) = RPAD(lower(pUsuario),10,' ')
            or UPPER(uu.usu_usuario_login) = upper(pUsuario))
           and uu.usu_usuario_ativo = 'S';


      else
         open pCursor for 
         Select sysdate from dual;
         
         pStatus  := Status_Warning;
         pMessage := 'Usuário ' ||pUsuario|| ', CNPJ ' || pCnpj || ' não cadastrado!!!';
         return;
      end if;

      pStatus  := Status_Normal;
      pMessage := Null;
    exception when others then
      pStatus  := Status_Erro;
      pMessage := 'Erro ao executar Pkg_Col_Coleta.Sp_Get_DadosContato Erro.: '|| sqlerrm ||' - '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;

  end Sp_Get_DadosContato;

  Procedure Sp_Get_DadosFilialUf(pUf      in varchar2,
                                 pCursor  out t_cursor,
                                 pStatus  out varchar2,
                                 pMessage out varchar2)
  as
  vCount Integer;
  begin

    begin
      
       -- Estado EX Atualmente libera todos os Armazéns disponíveis
       if pUf = 'EX' then
          Open pCursor for
            Select Distinct
                   a.arm_armazem_codigo,
                   a.arm_armazem_descricao,
                   a.glb_rota_codigo,
                   r.glb_rota_descricao,
                   r.glb_estado_codigo
               From t_arm_armazem a,
                    t_glb_rota r
               where a.glb_rota_codigo = r.glb_rota_codigo
                 and a.arm_armazem_ativo  = 'S';          

           pStatus  := Status_Normal;
           pMessage := 'Processamento Normal!';
           return;      
       end if;    
    
           select Count(*)
             Into vCount
             from t_glb_rota rt,
                  t_arm_armazem ar
             where rt.glb_estado_codigo        = pUf
               and nvl(rt.glb_rota_coleta,'N') = 'S'
               and rt.glb_rota_codigo          = ar.glb_rota_codigo
               and ar.arm_armazem_ativo        = 'S'
               ORDER BY AR.ARM_ARMAZEM_DESCRICAO;

           if vCount > 0 then
               open pCursor for
                 select Distinct
                        ar.arm_armazem_codigo,
                        ar.arm_armazem_descricao,
                        rt.glb_rota_codigo,
                        rt.glb_rota_descricao,
                        rt.glb_estado_codigo
                   from t_glb_rota rt,
                        t_arm_armazem ar
                   where rt.glb_estado_codigo        = pUf
                     and nvl(rt.glb_rota_coleta,'N') = 'S'
                     and rt.glb_rota_codigo          = ar.glb_rota_codigo
                     and ar.arm_armazem_ativo        = 'S'
                     ORDER BY AR.ARM_ARMAZEM_DESCRICAO;
           else

                  open pCursor for
                  Select a.arm_armazem_codigo,
                         a.arm_armazem_descricao,
                         a.glb_rota_codigo,
                         r.glb_rota_descricao,
                         r.glb_estado_codigo
                     From tdvadm.t_arm_armazem a,
                          tdvadm.t_glb_rota r,
                          tdvadm.t_arm_armazemestado ae
                     where a.glb_rota_codigo = r.glb_rota_codigo
                       and a.arm_armazem_ativo = 'S'
                       and ae.arm_armazem_codigo = a.arm_armazem_codigo
                       and ae.glb_estado_codigo = pUf;
           end if;

       pStatus  := Status_Normal;
       pMessage := 'Processamento Normal!';

    exception when others then
      pStatus  := Status_Erro;
      pMessage := 'Erro ao executar Pkg_Col_Coleta.Sp_Get_DadosFilialUf Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;

  end Sp_Get_DadosFilialUf;

  function fn_TrimASCII( pValue varchar2 )
    return varchar2
  as
    vItemTrim varchar2(100) := '';
  begin

    for i in 1 .. length(trim(pValue))
      loop
        if ASCII(substr(pValue,i, 1)) = 160 then -- ASCII 160 é um caracter [Â] que só é visivel por editor configurado como ASC
          exit;
        end if;
        vItemTrim := vItemTrim || substr(pValue,i, 1);
      end loop;
    return vItemTrim;
  end fn_TrimASCII;

  /************************************************************************************************
   * PROGRAMA         : ColetaWeb
   * DESENVOLVEDOR    : Fabiano / Diego Lirio
   * DATA DE CRIACAO  : 06/01/2015
   * FUNCINALIDADE    : Efetivar a Coleta após ser digitados os items
   * PARTICULARIDADES : Após digitar os dados da Coleta a mesma é salva para ser gerado um numero,
   *                    Porém, neste momento a Coleta recebe um ocorrencia[64] - Coleta Pendente,
   *                    Apenas após ser digitados os item a Coleta deve ser Efetivada e neste
   *                    momento é executada regras de efetivação diferentes para alguma Clientes
   * PARAM. OBRIGAT.  : pColetaNumero | pColetaCiclo = Chave da Coleta
   *                    pStatus = E=ERRO, N=Normal
   *                    pMessage = Mensagem de ERRO ou mensagem de Normal quando necessário
   * TODO:
   * 03/09/2015 - Criar um conceito de Factory onde essa procedure que existe hoje faria o papel de Factory
   *              e verificando qual o cliente a coleta pertence construiria um objeto(procedure) para
   *              executar a Efetivação especifica para cada Cliente.
   ************************************************************************************************/
  Procedure Sp_Post_EfetivarColeta(pColetaNumero in t_arm_coleta.arm_coleta_ncompra%type,
                                   pColetaCiclo  in t_arm_coleta.arm_coleta_ciclo%type,
                                   pStatus       out varchar2,
                                   pMessage      out varchar2)
  as
    vMensagemEfeticacao varchar2(2000);
    vColetaRowType t_arm_coleta%RowType;
  begin

    begin
      

      -------------------------------------------------------------------------------------------------------------
      -- Regra para qualquer cliente
      -- Verifico se a coleta de fato existe com Items antes de começar qualquer validação
      -------------------------------------------------------------------------------------------------------------
      if Fn_Get_PodeSerEfetivada( pColetaNumero, pColetaCiclo ) = false then
         pStatus  := Status_warning;
         pMessage := 'Coleta não possue itens.';
         return;
      end if;

      vColetaRowType := Fn_Get_ColetaRowType(pColetaNumero, pColetaCiclo);

      -------------------------------------------------------------------------------------------------------------
      -- Efetivação da Coleta Conforme regra por Cliente
      -------------------------------------------------------------------------------------------------------------
      if nvl(vColetaRowType.ARM_COLETAORIGEM_COD, -1) = 4 then
        
        if Fn_VALE_IsColetaVALE(vColetaRowType) then
           Sp_VALE_EfetivarColeta(pColetaNumero, pColetaCiclo, vMensagemEfeticacao, pStatus, pMessage);
        elsif FN_VLI_IsColetaVLI(vColetaRowType) then
           Sp_VLI_EfetivarColeta(pColetaNumero, pColetaCiclo, vMensagemEfeticacao, pStatus, pMessage);
        elsif FN_ALC_IsColetaALC(vColetaRowType) then
           Sp_ALC_EfetivarColeta(pColetaNumero, pColetaCiclo, vMensagemEfeticacao, pStatus, pMessage);
        elsif FN_AMT_IsColetaAMT(vColetaRowType) then
           Sp_AMT_EfetivarColeta(pColetaNumero, pColetaCiclo, vMensagemEfeticacao, pStatus, pMessage);
        elsif FN_CBA_IsColetaCBA(vColetaRowType) then
           Sp_CBA_EfetivarColeta(pColetaNumero, pColetaCiclo, vMensagemEfeticacao, pStatus, pMessage);
        elsif FN_VZI_IsColetaVZI(vColetaRowType) then
           Sp_VZI_EfetivarColeta(pColetaNumero, pColetaCiclo, vMensagemEfeticacao, pStatus, pMessage);
        elsif FN_THY_IsColetaTHYSSEN(vColetaRowType) then
           Sp_THY_EfetivarColeta(pColetaNumero, pColetaCiclo, vMensagemEfeticacao, pStatus, pMessage);         
        elsif FN_HYD_IsColetaHYD(vColetaRowType) then
           Sp_HYD_EfetivarColeta(pColetaNumero, pColetaCiclo, vMensagemEfeticacao, pStatus, pMessage);
        elsif FN_PAR_IsColetaPAR(vColetaRowType) then
           Sp_PAR_EfetivarColeta(pColetaNumero, pColetaCiclo, vMensagemEfeticacao, pStatus, pMessage);
        elsif FN_ALB_IsColetaALB(vColetaRowType) then
           Sp_ALB_EfetivarColeta(pColetaNumero, pColetaCiclo, vMensagemEfeticacao, pStatus, pMessage);                      
        elsif FN_SUZ_IsColetaSUZ(vColetaRowType) then
           Sp_SUZ_EfetivarColeta(pColetaNumero, pColetaCiclo, vMensagemEfeticacao, pStatus, pMessage);           
        elsif FN_VTC_IsColetaVTC(vColetaRowType) then
           Sp_VTC_EfetivarColeta(pColetaNumero, pColetaCiclo, vMensagemEfeticacao, pStatus, pMessage);
        elsif FN_RAI_IsColetaRAI(vColetaRowType) then
           Sp_RAI_EfetivarColeta(pColetaNumero, pColetaCiclo, vMensagemEfeticacao, pStatus, pMessage);           
        elsif FN_USI_IsColetaUSI(vColetaRowType) then
           Sp_USI_EfetivarColeta(pColetaNumero, pColetaCiclo, vMensagemEfeticacao, pStatus, pMessage);           
        elsif FN_VTE_IsColetaVTE(vColetaRowType) then
           Sp_VTE_EfetivarColeta(pColetaNumero, pColetaCiclo, vMensagemEfeticacao, pStatus, pMessage);           
        elsif Fn_APE_IsColetaAPERAN(vColetaRowType) then
           Sp_APE_EfetivarColeta(pColetaNumero, pColetaCiclo, vMensagemEfeticacao, pStatus, pMessage);
        elsif FN_NOU_IsColetaNOU(vColetaRowType) then
           Sp_NOU_EfetivarColeta(pColetaNumero, pColetaCiclo, vMensagemEfeticacao, pStatus, pMessage); 
        elsif Fn_BIO_IsColetaBIO(vColetaRowType) then
           Sp_BIO_EfetivarColeta(pColetaNumero, pColetaCiclo, vMensagemEfeticacao, pStatus, pMessage);  
        elsif Fn_ULT_IsColetaULT(vColetaRowType) then
           Sp_ULT_EfetivarColeta(pColetaNumero, pColetaCiclo, vMensagemEfeticacao, pStatus, pMessage);
        elsif FN_AGL_IsColetaAGL(vColetaRowType) then
           Sp_AGL_EfetivarColeta(pColetaNumero, pColetaCiclo, vMensagemEfeticacao, pStatus, pMessage);
        elsif FN_AGN_IsColetaAGN(vColetaRowType) then
           Sp_AGN_EfetivarColeta(pColetaNumero, pColetaCiclo, vMensagemEfeticacao, pStatus, pMessage);
        elsif FN_OWE_IsColetaOWE(vColetaRowType) then
           Sp_OWE_EfetivarColeta(pColetaNumero, pColetaCiclo, vMensagemEfeticacao, pStatus, pMessage);
        elsif FN_CAR_IsColetaCAR(vColetaRowType) then
           Sp_CAR_EfetivarColeta(pColetaNumero, pColetaCiclo, vMensagemEfeticacao, pStatus, pMessage);   
        elsif Fn_PRA_IsColetaPRA(vColetaRowType) then
           Sp_PRA_EfetivarColeta(pColetaNumero, pColetaCiclo, vMensagemEfeticacao, pStatus, pMessage);    
        elsif Fn_PARANA_IsColetaPARANA(vColetaRowType) then
           Sp_PARANA_EfetivarColeta(pColetaNumero, pColetaCiclo, vMensagemEfeticacao, pStatus, pMessage);  
        elsif Fn_OXI_IsColetaOXI(vColetaRowType) then
           Sp_OXI_EfetivarColeta(pColetaNumero, pColetaCiclo, vMensagemEfeticacao, pStatus, pMessage); 
        elsif Fn_ENE_IsColetaENE(vColetaRowType) then
           Sp_ENE_EfetivarColeta(pColetaNumero, pColetaCiclo, vMensagemEfeticacao, pStatus, pMessage);  
        else
           sp_Set_EfetivarColetaDefault(pColetaNumero, pColetaCiclo, vMensagemEfeticacao, pStatus, pMessage);
        end if;
        
      end if;
      
      -- Quando for Integração Nimbi, executamos a Efetivação direto no Post porque ela não tem um segundo momento.
      if nvl(vColetaRowType.ARM_COLETAORIGEM_COD, -1) = 8 then
         sp_vale_EfetivarColetaNimbi( vColetaRowType, pStatus, pMessage );         
      end if;

      if pStatus != 'N' then
         return;
      end if;

      -------------------------------------------------------------------------------------------------------------
      -- Updates pós Efetivação
      -------------------------------------------------------------------------------------------------------------
      Sp_Set_UpdatePosEfetivar(pColetaNumero, pColetaCiclo, pStatus, pMessage);
      if pStatus != Status_normal then
        raise_application_error(-20001, pMessage);
      end if;

      pStatus   := Status_normal;
      pMessage := vMensagemEfeticacao;
    exception when others then
      pStatus   := Status_Erro;
      pMessage  := 'Erro ao processar Pkg_Col_Coleta.Sp_Post_EfetivarColeta. Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;

  end Sp_Post_EfetivarColeta;

  Procedure Sp_Get_ColetasPendentes(pUsuario in varchar2,
                                    pCnpj    in varchar2,
                                    pCursor  out T_CURSOR,
                                    pStatus  out varchar2,
                                    pMessage out varchar2)as
  begin

    begin
      dbms_output.put_line('pCnpj: '||pCnpj||' criei esse parametro porque no futuro devem pedir para habilitar por cnpj');

      open pCursor for
      select co.arm_coleta_ncompra,
             co.arm_coleta_ciclo,
             ar.arm_armazem_codigo,
             ar.arm_armazem_descricao,
             rt.glb_rota_codigo,
             rt.glb_estado_codigo,
             rt.glb_rota_descricao,
             o.arm_coletaorigem_cod,
             o.arm_coletaorigem_desc,
             cto.glb_cliente_razaosocial                o_glb_cliente_razaosocial,
             cto.glb_cliente_cgccpfcodigo               o_glb_cliente_cgccpfcodigo,
             cdo.glb_cliend_endereco                    o_glb_cliend_endereco,
             cdo.glb_tpcliend_codigo                    o_glb_tpcliend_codigo,
             cdo.glb_estado_codigo                      o_glb_estado_codigo,
             cdo.glb_cliend_cidade                      o_glb_cliend_cidade,
             nvl(cdo.glb_cliend_codcliente,'nullo')     o_glb_cliend_codcliente,

             ctd.glb_cliente_razaosocial                d_glb_cliente_razaosocial,
             ctd.glb_cliente_cgccpfcodigo               d_glb_cliente_cgccpfcodigo,
             cdd.glb_cliend_endereco                    d_glb_cliend_endereco,
             cdd.glb_tpcliend_codigo                    d_glb_tpcliend_codigo,
             cdd.glb_estado_codigo                      d_glb_estado_codigo,
             cdd.glb_cliend_cidade                      d_glb_cliend_cidade,
             nvl(cdd.glb_cliend_codcliente,'nullo')     d_glb_cliend_codcliente,
             co.arm_coleta_dtgravacao,
             co.usu_usuario_codigo_cad,
             co.arm_coleta_solicitante,
             co.arm_coleta_emailsolic,
             co.arm_coleta_fonesolic,
             cg.fcf_tpcarga_codigo,
             cg.fcf_tpcargadescricao,
             tv.fcf_tpveiculo_codigo,
             tv.fcf_tpveiculo_descricao
        from t_arm_coleta           co,
             t_arm_armazem          ar,
             t_glb_rota             rt,
             t_arm_coletaorigem     o,
             t_glb_cliente          cto,
             t_glb_cliend           cdo,
             t_glb_cliente          ctd,
             t_glb_cliend           cdd,
             t_fcf_tpcarga          cg,
             t_fcf_tpveiculo        tv,
             --coleta.usuario_web     uw
             t_usu_usuario          u
       where co.arm_armazem_codigo             = ar.arm_armazem_codigo
         and ar.glb_rota_codigo                = rt.glb_rota_codigo
         and co.arm_coletaorigem_cod           = o.arm_coletaorigem_cod

         and co.glb_cliente_cgccpfcodigocoleta = cto.glb_cliente_cgccpfcodigo
         and co.glb_cliente_cgccpfcodigocoleta = cdo.glb_cliente_cgccpfcodigo
         and co.glb_tpcliend_codigocoleta      = cdo.glb_tpcliend_codigo

         and co.glb_cliente_cgccpfcodigocoleta = ctd.glb_cliente_cgccpfcodigo
         and co.glb_cliente_cgccpfcodigoentreg = cdd.glb_cliente_cgccpfcodigo
         and co.glb_tpcliend_codigoentrega     = cdd.glb_tpcliend_codigo
         and co.arm_coletaocor_codigo          In('64','68')
         and co.arm_coletaorigem_cod           = 4
         and co.fcf_tpcarga_codigo             = cg.fcf_tpcarga_codigo(+)
         and co.fcf_tpveiculo_codigo           = tv.fcf_tpveiculo_codigo(+)

         --and trim(upper(co.usu_usuario_codigo_cad)) = trim(upper(uw.usu_usuario_codigo))
         --and (UPPER(trim(uw.dc_usuario)) = UPPER(trim(pUsuario)) or upper(trim(uw.usu_usuario_codigo)) = upper(trim(pUsuario)))
         and lower(co.usu_usuario_codigo_cad) = rpad(lower(u.usu_usuario_codigo),10,' ')
         and (UPPER(u.usu_usuario_login) = UPPER(trim(pUsuario)) or upper(u.usu_usuario_codigo) = rpad(upper(pUsuario),10,' '))
         order by 7;
         pStatus  := Status_Normal;
         pMessage := 'Processamento Normal!';

    exception when others then
      pStatus  := Status_Erro;
      pMessage := 'Erro ao executar Pkg_Col_Coleta.Sp_Get_ColetasPendentes Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;

  end Sp_Get_ColetasPendentes;

  Procedure Sp_Post_ExcluirItemColeta(pColetaNumero in t_arm_coleta.arm_coleta_ncompra%type,
                                      pColetaCiclo  in t_arm_coleta.arm_coleta_ciclo%type,
                                      pSeqItem      in t_arm_coletancompra.arm_coleta_seqitem%type,
                                      pStatus       out varchar2,
                                      pMessage      out varchar2)as
  vExisteItem  integer;
  vStatus      char(1);
  vMessage     varchar2(2000);
  begin

    begin

       select count(*)
         into vExisteItem
         from t_arm_coletancompra l
         where l.arm_coletancompra  = pColetaNumero
           and l.arm_coleta_ciclo   = pColetaCiclo
           and l.arm_coleta_seqitem = pSeqItem;

       if (vExisteItem > 0) then

           delete t_arm_coletancompra l
            where l.arm_coletancompra  = pColetaNumero
              and l.arm_coleta_ciclo   = pColetaCiclo
              and l.arm_coleta_seqitem = pSeqItem;

          delete from t_arm_coletapedidoitem c
            where c.arm_coleta_ncompra = pColetaNumero
              and c.arm_coleta_ciclo   = pColetaCiclo
              and c.arm_coleta_seqitem = pSeqItem;

          Sp_UpdateColetaPendente(pColetaNumero, pColetaCiclo, pStatus, pMessage);

          vStatus := Status_Normal;
          vMessage:= 'Processamento Normal!';

       else

          vStatus := Status_warning;
          vMessage:= 'Item da coleta.: '||pColetaNumero||'-'||pColetaCiclo||'-'||pSeqItem||' não existe.';

       end if;

       -- atualizo campos calculados na Coleta
       Sp_Get_AtualizaValoresPeso(pColetaNumero, pColetaCiclo, pStatus, pMessage);
       if ( Trim(pStatus) = Status_Erro ) then
         return;
       end if;

       commit;
       pStatus  := vStatus;
       pMessage := vMessage;

    exception when others then
      pStatus  := Status_Erro;
      pMessage := 'Erro ao executar Pkg_Col_Coleta.Sp_Post_ExcluirItemColeta Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;

  end Sp_Post_ExcluirItemColeta;

  procedure Sp_Get_EmailColeta(pColetaNumero in t_arm_coleta.arm_coleta_ncompra%type,
                               pColetaCiclo  in t_arm_coleta.arm_coleta_ciclo%type,
                               pEmailDestino out varchar2,
                               pEmailsCopia  out varchar2,
                               pStatus       out varchar2,
                               pMessage      out varchar2)
  as
    vUsuarioColeta t_arm_coleta.usu_usuario_codigo_cad%type;
  begin
    begin
      pEmailsCopia := '';
      select c.usu_usuario_codigo_cad
        into vUsuarioColeta--,
        from t_arm_coleta c--,
       where c.arm_coleta_ncompra = pColetaNumero
         and c.arm_coleta_ciclo   = pColetaCiclo;

      begin
        select LOWER(u.usu_usuario_email)
        into pEmailDestino
        from t_usu_usuario u
        where lower(u.usu_usuario_codigo) = RPAD(lower(vUsuarioColeta),10,' ')
        and nvl(u.usu_usuario_ativo,'S') = 'S';
      exception when no_data_found then
        -- TODO: tudo relacionado a usuario deve ser centralizado na t_usu_usuario
        select uw.dc_email
        into pEmailDestino
        from coleta.usuario_web uw
        where lower(uw.dc_usuario) = lower(vUsuarioColeta) or lower(uw.usu_usuario_codigo) = lower(vUsuarioColeta);
      end;
      
      -- Fabiano Góes - 01/08/2016
      -- Regra AMSTED:
      --       > quando 'JOSENILDO' solicitar/autorizar/cancelar Coleta deve ser enviado emails para GUSTAVO e LEONEL alem dele mesmo
      --       > quando 'GUSTAVO' solicitar/autorizar/cancelar Coleta deve ser enviado emails para JOSENILDO e LEONEL alem dele mesmo
      -- deve ser pensado em uma maneira melhor de resolver esta situação.
      -- TODO: até que seja aplicado a nova regra de emails/aplicacao
      pEmailDestino := case when trim(upper(vUsuarioColeta)) = 'JOSENILDO' then pEmailDestino||';thiagol.dellavolpe@amstedmaxion.com.br;gustavo.calca@amstedmaxion.com.br'
                            when trim(upper(vUsuarioColeta)) = 'GUSTAVO'   then pEmailDestino||';thiagol.dellavolpe@amstedmaxion.com.br;josenildo.lamenha@amstedmaxion.com.br'
                            else pEmailDestino
                       end;
                            
      pStatus  := Status_Normal;
      pMessage := null;
    exception when others then
      pStatus  := Status_Erro;
      pMessage := 'Erro ao executar Pkg_Col_Coleta.Sp_Envia_Email Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;
  end;


  /************************************************************************************************
   * Fabiano - 02/09/2015
   * Criei essa Function porque existe dois tipos de emails: ColetaGerada e ColetaCancelada
   *       para cada tipo de email existe um corpo diferente,
   *       se no futuro existir mais tipos já fica preparada
   ************************************************************************************************/
  function Fn_Get_CorpoEmail(pColetaNumero in t_arm_coleta.arm_coleta_ncompra%type,
                             pColetaCiclo  in t_arm_coleta.arm_coleta_ciclo%type,
                             pTipoEmail    in char) return clob
  as
    vEmailMsg            clob;
    vUsuario             varchar2(100);
    vUsuarioCnpj         varchar2(100);
    vUsuarioNome         varchar2(100);
    vUsuarioLogin        varchar2(100);
    vUsuarioTel          varchar2(20);
    vUsuarioCel          varchar2(20);
    vRemetenteCnpj       tdvadm.t_glb_cliend.glb_cliente_cgccpfcodigo%type;
    vRemetenteRazao      tdvadm.t_glb_cliente.glb_cliente_razaosocial%type;
    vRemetenteEnd        tdvadm.t_glb_cliend.glb_cliend_endereco%type;
    vRemetenteUF         tdvadm.t_glb_cliend.glb_estado_codigo%type;
    vRemetenteCidade     tdvadm.t_glb_cliend.glb_cliend_cidade%type;
    vDestinatarioCnpj    tdvadm.t_glb_cliend.glb_cliente_cgccpfcodigo%type;
    vDestinatarioRazao   tdvadm.t_glb_cliente.glb_cliente_razaosocial%type;
    vDestinatarioEnd     tdvadm.t_glb_cliend.glb_cliend_endereco%type;
    vDestinatarioUF      tdvadm.t_glb_cliend.glb_estado_codigo%type;
    vDestinatarioCidade  tdvadm.t_glb_cliend.glb_cliend_cidade%type;
    vFreteDtProgramacao  tdvadm.t_arm_coleta.arm_coleta_dtprogramacao%type;
    vFreteHrProgramacao  tdvadm.t_arm_coleta.arm_coleta_hrprogramacao%type;
    vFretePO             tdvadm.t_arm_coleta.arm_coleta_pedido%type;
    vFreteQtdeNotas      tdvadm.t_arm_coleta.arm_coleta_qtdemp%type;
    vFreteValorTotal     tdvadm.t_arm_coleta.arm_coleta_vlmercadoria%type;
    vFreteObservacao     tdvadm.t_arm_coleta.arm_coleta_obs%type;
    vRowId               varchar2(100);
    vAguardarAutorizacao boolean := false;
    vEmailUsuUsuario     varchar2(1000);
    vEmailUsuarioWeb     varchar2(1000);
    vUsuarioCancelou     varchar2(1000);
    vMotivoCancelou      varchar2(1000);
    vDataCancelou        date;
    vCodigoOcorrencia    tdvadm.t_arm_coletaocor.arm_coletaocor_codigo%type;
    vDescricaoOcorrencia tdvadm.t_arm_coletaocor.arm_coletaocor_descricao%type;
  begin
    begin

      ---------------------------------------------------------------------------------------------------------------
      -- Obtenho dados da Coleta para enviar no corpo do Email
      ---------------------------------------------------------------------------------------------------------------
      select trim(c.usu_usuario_codigo_cad),
             ec.glb_cliente_cgccpfcodigo,
             cc.glb_cliente_razaosocial,
             ec.glb_cliend_endereco,
             ec.glb_estado_codigo,
             ec.glb_cliend_cidade,
             ee.glb_cliente_cgccpfcodigo,
             ce.glb_cliente_razaosocial,
             ee.glb_cliend_endereco,
             ee.glb_estado_codigo,
             ee.glb_cliend_cidade,
             c.arm_coleta_dtprogramacao,
             c.arm_coleta_hrprogramacao,
             c.arm_coleta_pedido,
             c.arm_coleta_qtdemp,
             c.arm_coleta_vlmercadoria,
             c.arm_coleta_obs,
             c.rowid
      into vUsuario,
           vRemetenteCnpj,
           vRemetenteRazao,
           vRemetenteEnd,
           vRemetenteUF,
           vRemetenteCidade,
           vDestinatarioCnpj,
           vDestinatarioRazao,
           vDestinatarioEnd,
           vDestinatarioUF,
           vDestinatarioCidade,
           vFreteDtProgramacao,
           vFreteHrProgramacao,
           vFretePO,
           vFreteQtdeNotas,
           vFreteValorTotal,
           vFreteObservacao,
           vRowId
      from tdvadm.t_arm_coleta c,
           tdvadm.t_glb_cliend ec,  -- endereco coleta
           tdvadm.t_glb_cliend ee,  -- endereco entrega
           tdvadm.t_glb_cliente cc, -- cliente coleta
           tdvadm.t_glb_cliente ce,  -- cliente entrega
           tdvadm.t_arm_armazem arm
      where c.glb_cliente_cgccpfcodigocoleta = ec.glb_cliente_cgccpfcodigo
      and c.glb_tpcliend_codigocoleta      = ec.glb_tpcliend_codigo
      and c.glb_cliente_cgccpfcodigoentreg = ee.glb_cliente_cgccpfcodigo
      and c.glb_tpcliend_codigoentrega     = ee.glb_tpcliend_codigo
      and c.glb_cliente_cgccpfcodigocoleta = cc.glb_cliente_cgccpfcodigo
      and c.glb_cliente_cgccpfcodigoentreg = ce.glb_cliente_cgccpfcodigo
      and c.arm_armazem_codigo = arm.arm_armazem_codigo
      and c.arm_coleta_ncompra = pColetaNumero
      and c.arm_coleta_ciclo   = pColetaCiclo
      and rownum = 1;

      ---------------------------------------------------------------------------------------------------------------
      -- Obtenho os dados do usuário web - TODO: até que seja unificado 100% t_usu_usuário/coleta.usuario_web
      ---------------------------------------------------------------------------------------------------------------
/*      select u.dc_cnpj,
             u.dc_usuario,
             u.dc_telefone,
             u.dc_celular,
             u.dc_email,
             u.dc_nome_usuario
      into vUsuarioCnpj,
           vUsuarioLogin,
           vUsuarioTel,
           vUsuarioCel,
           vEmailUsuarioWeb,
           vUsuarioNome
      from coleta.usuario_web u
      where (upper(u.dc_usuario) = upper(vUsuario) or upper(trim(u.usu_usuario_codigo)) = upper(trim(vUsuario)));*/
      select u.usu_usuario_cpf,
             u.usu_usuario_login,
             u.usu_usuario_ramal,
             u.usu_usuario_celular,
             u.usu_usuario_email,
             u.usu_usuario_nome
       into vUsuarioCnpj,
            vUsuarioLogin,
            vUsuarioTel,
            vUsuarioCel,
            vEmailUsuarioWeb,
            vUsuarioNome
       from t_usu_usuario u
      where lower(u.usu_usuario_codigo) = rpad(lower(vUsuario),10,' ')
       and nvl(u.usu_usuario_ativo,'S') = 'S';

      ---------------------------------------------------------------------------------------------------------------
      -- obtenho o email do usuário da coleta
      ---------------------------------------------------------------------------------------------------------------
      begin
        select u.usu_usuario_email
        into vEmailUsuUsuario
        from t_usu_usuario u
        where lower(u.usu_usuario_codigo) = lower(rpad(vUsuario,10,' '));
      exception when no_data_found then
        vEmailUsuUsuario := vEmailUsuarioWeb;
      end;

      ---------------------------------------------------------------------------------------------------------------
      -- COLETA GERADA COM SUCESSO
      -- Monto do Corpo do Email para o tipo de Coleta Gerada/Efetivada com sucesso
      ---------------------------------------------------------------------------------------------------------------
      if pTipoEmail = TipoEmailColetaGerada then
        vEmailMsg := vEmailMsg || '<div style="font: monospace;">';
        vEmailMsg := vEmailMsg || '<b>Usuario:</b> '||  vUsuarioLogin || ' / ' || vUsuarioCnpj;
        vEmailMsg := vEmailMsg || '<br><br><b>Contato:</b> ' || vUsuarioNome;
        vEmailMsg := vEmailMsg || '<br><b>Telefone:</b> ' || vUsuarioTel;
        vEmailMsg := vEmailMsg || '<br><b>Celular:</b> ' || vUsuarioCel;
        vEmailMsg := vEmailMsg || '<br><b>E-mail:</b> ' || lower(vEmailUsuUsuario);
        vEmailMsg := vEmailMsg || '<br/><hr/><b>REMETENTE</b>';
        vEmailMsg := vEmailMsg || '<br/><b>CNPJ:</b> ' || vRemetenteCnpj;
        vEmailMsg := vEmailMsg || '<br/><b>Razao Social:</b> ' || vRemetenteRazao;
        vEmailMsg := vEmailMsg || '<br/><b>Endereco:</b> ' || vRemetenteEnd;
        vEmailMsg := vEmailMsg || '<br/><b>UF:</b> ' || vRemetenteUF;
        vEmailMsg := vEmailMsg || '<br/><b>Cidade:</b> ' || vRemetenteCidade;
        vEmailMsg := vEmailMsg || '<br/><hr/><b>DESTINATARIO</b>';
        vEmailMsg := vEmailMsg || '<br/><b>CNPJ:</b> ' || vDestinatarioCnpj;
        vEmailMsg := vEmailMsg || '<br/><b>Razao Social:</b> ' || vDestinatarioRazao;
        vEmailMsg := vEmailMsg || '<br/><b>Endereco:</b> ' || vDestinatarioEnd;
        vEmailMsg := vEmailMsg || '<br/><b>UF:</b> ' || vDestinatarioUF;
        vEmailMsg := vEmailMsg || '<br/><b>Cidade:</b> ' || vDestinatarioCidade;
        vEmailMsg := vEmailMsg || '<br/><hr/><b>Frete</b>';
        vEmailMsg := vEmailMsg || '<br><b>Data Programacao:<b> ' || vFreteDtProgramacao;
        vEmailMsg := vEmailMsg || '<br><b>Hora Programacao:<b> ' || vFreteHrProgramacao;
        vEmailMsg := vEmailMsg || '<br><b>P.O.:<b> ' || vFretePO;
        vEmailMsg := vEmailMsg || '<br><b>Valor Total:<b> ' || vFreteValorTotal;
        vEmailMsg := vEmailMsg || '<br>Observacoes: ' || vFreteObservacao;
        vEmailMsg := vEmailMsg || '<br/><hr/><br/>';
        vEmailMsg := vEmailMsg || '<div>';

        vAguardarAutorizacao := Fn_Col_AguardarAutorizacao( pColetaNumero, pColetaCiclo );
        if vAguardarAutorizacao then
          vEmailMsg := vEmailMsg || '<b>ATENÇÃO</b> sua Coleta está aguardando autorização <br/>';
          -- caso seja um usuário com permissão já envio o link de autorização
          vEmailMsg := vEmailMsg || 'PARA AUTORIZAR A COLETA USE O LINK ABAIXO: <br/>';
          -- TODO: Criar o link para autorização
          vEmailMsg := vEmailMsg || 'http://extranet.dellavolpe.com.br:6917/coleta/autorizar/'||pColetaNumero||'/'||pColetaCiclo||'/'||vUsuario;
        else
          vEmailMsg := vEmailMsg || 'PARA FAZER O ACOMPANHAMENTO DA SUA COLETA ATÉ A ENTREGA, USE O LINK ABAIXO: <br/>';
          vEmailMsg := vEmailMsg || 'http://extranet.dellavolpe.com.br:6915/StatusColeta/index.php?coleta='||vRowId;
        end if;

        return vEmailMsg;
      end if;

      ---------------------------------------------------------------------------------------------------------------
      -- COLETA CANCELADA
      -- Monto do Corpo do Email para o tipo de Coleta Cancelada
      ---------------------------------------------------------------------------------------------------------------
      if pTipoEmail = TipoEmailColetaCancelada then

        select u.usu_usuario_login||' - '||u.usu_usuario_nome,
               coh.arm_coletaocorhist_dtinc,
               coh.arm_coletaocorhist_obs,
               co.arm_coletaocor_codigo,
               co.arm_coletaocor_descricao
        into vUsuarioCancelou,
             vDataCancelou,
             vMotivoCancelou,
             vCodigoOcorrencia,
             vDescricaoOcorrencia
        from tdvadm.t_arm_coletaocorhist coh,
             tdvadm.t_arm_coletaocor co,
             tdvadm.t_usu_usuario u
        where coh.arm_coleta_ncompra = pColetaNumero
          and coh.arm_coleta_ciclo   = pColetaCiclo
          and coh.ARM_COLETAOCOR_CODIGO = co.arm_coletaocor_codigo(+)
          and coh.usu_usuario_codigoincl = u.usu_usuario_codigo
          and co.arm_coletaocor_cancelacoleta = 'S'
          and coh.arm_coletaocorhist_dtinc = ( select max(cc.arm_coletaocorhist_dtinc) from t_arm_coletaocorhist cc
                                                where cc.arm_coleta_ncompra = coh.arm_coleta_ncompra
                                                  and cc.arm_coleta_ciclo = coh.arm_coleta_ciclo );

        vEmailMsg := vEmailMsg || '<div style="font: monospace;">';
        vEmailMsg := vEmailMsg || '<b>ATENÇÃO</b> sua Coleta foi <font color="red">CANCELADA</font><br/>';
        vEmailMsg := vEmailMsg || '<hr/>';
        vEmailMsg := vEmailMsg || '<b>Coleta:</b> ' || pColetaNumero||'<br/>';
        vEmailMsg := vEmailMsg || '<b>Ciclo.:</b> ' || pColetaCiclo||'<br/><br/>';
        vEmailMsg := vEmailMsg || '<b>Usuário que Cancelou:</b> ' || vUsuarioCancelou||'<br/>';
        vEmailMsg := vEmailMsg || '<b>Data Cancelamento...:</b> ' || vDataCancelou||'<br/>';
        vEmailMsg := vEmailMsg || '<b>Motivo Cancelamento.:</b> ' || vMotivoCancelou||'( '||vCodigoOcorrencia||' - '||vDescricaoOcorrencia||')'|| '<br/>';
        vEmailMsg := vEmailMsg || '<div>';
        return vEmailMsg;
      end if;

    exception when others then
      dbms_output.put_line('Erro ao tentar montar Email - '||dbms_utility.format_error_backtrace||', '||sqlerrm );
      raise_application_error(-20001, 'Erro ao tentar montar Email - '||dbms_utility.format_error_backtrace||', '||sqlerrm);
    end;

  end Fn_Get_CorpoEmail;

  /************************************************************************************************
   * Fabiano
   * Procedure para Enviar Emails em alguns estagios da coleta:
   *           > Quando a Coleta é Efetivada com sucesso
   *           > Quando a Coleta é Cancelada
   * > Para cada tipo de Email: TipoEmailColetaGerada / TipoEmailColetaCancelada
   *   >> Terá um Corpo e Assunto diferente, por isso a necessidade de uma Function para
   *   >> criar o Corpo do email
   ************************************************************************************************/
/*  procedure Sp_Envia_Email(pColetaNumero in t_arm_coleta.arm_coleta_ncompra%type,
                           pColetaCiclo  in t_arm_coleta.arm_coleta_ciclo%type,
                           pTipoEmail    in char,
                           pStatus       out varchar2,
                           pMessage      out varchar2)
  as
    vEmailOrigem         varchar2(1000) := 'coletaweb@dellavolpe.com.br';
    vAssunto             clob := 'Coleta gerada com sucesso[ '||pColetaNumero||' - '||pColetaCiclo||' ]';
    vEmailUsuario        varchar2(1000);
    vEmailsCopia         varchar2(1000);
    vEmailMsg            varchar2(2000);
    vAguardarAutorizacao boolean := false;
  begin
    begin
      ---------------------------------------------------------------------------------------------------------
      -- obtenho os emails do usuário e os envolvidos na coleta para copia
      ---------------------------------------------------------------------------------------------------------
      -- TODO: apenas para teste
      --vEmailUsuario := 'fgoes@dellavolpe.com.br';
      --vEmailsCopia  := 'ddamaceno@dellavolpe.com.br,fabianogoes@gmail.com,diegolirio.dl@gmail.com';
      Sp_Get_EmailColeta(pColetaNumero, pColetaCiclo, vEmailUsuario, vEmailsCopia, pStatus, pMessage);
      if pStatus != 'N' then
         raise_application_error(-20001, 'Erro ao obter emails, '||pMessage);
         return;
      end if;

      ---------------------------------------------------------------------------------------------------------------
      -- Crio o Assunto do Email
      ---------------------------------------------------------------------------------------------------------------
      vAguardarAutorizacao := Fn_Col_AguardarAutorizacao( pColetaNumero, pColetaCiclo );
      if vAguardarAutorizacao then
        vAssunto  := 'Coleta[ '||pColetaNumero||' - '||pColetaCiclo||' ] gerada AGUARDANDO AUTORIZAÇÃO';
      end if;

      if pTipoEmail = TipoEmailColetaCancelada then
        vAssunto  := 'Coleta[ '||pColetaNumero||' - '||pColetaCiclo||' ] CANCELADA';
      end if;

      ---------------------------------------------------------------------------------------------------------------
      -- Monto o Corpo do Email
      -- pTipoEmail = CG / CC
      --   > CG = Coleta Gerada
      --   > CC = Coleta Cancelada
      ---------------------------------------------------------------------------------------------------------------
      vEmailMsg := Fn_Get_CorpoEmail( pColetaNumero, pColetaCiclo, pTipoEmail );

      ---------------------------------------------------------------------------------------------------------------
      -- Envia o Email
      ---------------------------------------------------------------------------------------------------------------
      --vEmailUsuario := 'fgoes@dellavolpe.com.br';
      --vEmailsCopia := 'ddamaceno@dellavolpe.com.br,diegolirio.dl@gmail.com,fabianogoes@gmail.com';
      wservice.pkg_glb_email.SP_ENVIAEMAIL(vAssunto,
                                           vEmailMsg,
                                           vEmailOrigem,
                                           vEmailUsuario||',fgoes@dellavolpe.com.br,ddamaceno@dellavolpe.com.br',
                                           vEmailsCopia
                                           );

      pStatus  := Status_Normal;
      pMessage := 'Email enviado com sucesso';
    exception when others then
      pStatus  := Status_Erro;
      pMessage := 'Erro ao executar Pkg_Col_Coleta.Sp_Envia_Email Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;
  end Sp_Envia_Email;*/

  function Fn_Get_MessageInfoColeta(pColetaNumero in t_arm_coleta.arm_coleta_ncompra%type,
                                    pColetaCiclo  in t_arm_coleta.arm_coleta_ciclo%type,
                                    pAguardarAutorizacao in Boolean) return Varchar2
  As
  vEmailMsg Varchar2(4000);
  Begin
      for c_info in (      select trim(c.usu_usuario_codigo_cad) usu_usuario_codigo_cad,
                                       c.arm_coleta_cnpjsolicitante,
                                       u.usu_usuario_nome,
                                       u.usu_usuario_ramal usuario_telefone,
                                       u.usu_usuario_celular,
                                       u.usu_usuario_email,
                                       -- coleta/origem/remetente
                                       ec.glb_cliente_cgccpfcodigo remCliCnpj,
                                       cc.glb_cliente_razaosocial  remCliRazaoSocial,
                                       ec.glb_cliend_endereco      remCliEndereco,
                                       ec.glb_estado_codigo        remCliEstado,
                                       ec.glb_cliend_cidade        remCliCidade,
                                       -- destino/entrega
                                       ee.glb_cliente_cgccpfcodigo destCliCnpj,
                                       ce.glb_cliente_razaosocial  destCliRazaoSocial,
                                       ee.glb_cliend_endereco      destCliEndereco,
                                       ee.glb_estado_codigo        destCliEstado,
                                       ee.glb_cliend_cidade        destCliCidade,

                                       c.arm_coleta_dtprogramacao,
                                       c.arm_coleta_hrprogramacao,
                                       c.arm_coleta_pedido,
                                       c.arm_coleta_qtdemp,
                                       c.arm_coleta_vlmercadoria,
                                       c.arm_coleta_obs,
                                       c.arm_coleta_entcoleta,
                                       c.arm_coleta_tipo,
                                       c.rowid coleta_rowId
                                from tdvadm.t_arm_coleta c,
                                     tdvadm.t_glb_cliend ec,  -- endereco coleta
                                     tdvadm.t_glb_cliend ee,  -- endereco entrega
                                     tdvadm.t_glb_cliente cc, -- cliente coleta
                                     tdvadm.t_glb_cliente ce,  -- cliente entrega
                                     tdvadm.t_usu_usuario u,   -- usuario solicitante
                                     tdvadm.t_arm_armazem arm
                                where c.glb_cliente_cgccpfcodigocoleta = ec.glb_cliente_cgccpfcodigo
                                and c.glb_tpcliend_codigocoleta      = ec.glb_tpcliend_codigo

                                and c.glb_cliente_cgccpfcodigoentreg = ee.glb_cliente_cgccpfcodigo
                                and c.glb_tpcliend_codigoentrega     = ee.glb_tpcliend_codigo

                                and c.glb_cliente_cgccpfcodigocoleta = cc.glb_cliente_cgccpfcodigo
                                and c.glb_cliente_cgccpfcodigoentreg = ce.glb_cliente_cgccpfcodigo

                                and c.arm_armazem_codigo = arm.arm_armazem_codigo

                                and c.usu_usuario_codigo_cad = u.usu_usuario_codigo

                                and c.arm_coleta_ncompra = pColetaNumero
                                and c.arm_coleta_ciclo   = pColetaCiclo
                                and rownum = 1)
      Loop
            vEmailMsg := vEmailMsg || '<b>Usuario:</b> '||  c_info.usu_usuario_codigo_cad || ' / ' || c_info.arm_coleta_cnpjsolicitante;
            vEmailMsg := vEmailMsg || '<br><b>Contato:</b> ' || c_info.usu_usuario_nome;
            vEmailMsg := vEmailMsg || '<br><b>Telefone:</b> ' || c_info.usuario_telefone;
            vEmailMsg := vEmailMsg || '<br><b>Celular:</b> ' || c_info.usu_usuario_celular;
            vEmailMsg := vEmailMsg || '<br><b>E-mail:</b> ' || lower(c_info.usu_usuario_email);

            vEmailMsg := vEmailMsg || '<br/><hr/><b>REMETENTE</b>';
            vEmailMsg := vEmailMsg || '<br/><b>CNPJ:</b> ' || c_info.Remclicnpj;
            vEmailMsg := vEmailMsg || '<br/><b>Razao Social:</b> ' || c_info.remclirazaosocial;
            vEmailMsg := vEmailMsg || '<br/><b>Endereco:</b> ' || c_info.remcliendereco;
            vEmailMsg := vEmailMsg || '<br/><b>UF:</b> ' || c_info.remcliestado;
            vEmailMsg := vEmailMsg || '<br/><b>Cidade:</b> ' || c_info.remclicidade;

            vEmailMsg := vEmailMsg || '<br/><hr/><b>DESTINATARIO</b>';
            vEmailMsg := vEmailMsg || '<br/><b>CNPJ:</b> ' || c_info.destCliCnpj;
            vEmailMsg := vEmailMsg || '<br/><b>Razao Social:</b> ' || c_info.destclirazaosocial;
            vEmailMsg := vEmailMsg || '<br/><b>Endereco:</b> ' || c_info.destcliendereco;
            vEmailMsg := vEmailMsg || '<br/><b>UF:</b> ' || c_info.destcliestado;
            vEmailMsg := vEmailMsg || '<br/><b>Cidade:</b> ' || c_info.destclicidade;

            vEmailMsg := vEmailMsg || '<br/><hr/><b>Frete</b>';
            vEmailMsg := vEmailMsg || '<br><b>Data Programacao:</b> ' || c_info.arm_coleta_dtprogramacao;
            vEmailMsg := vEmailMsg || '<br><b>Hora Programacao:</b> ' || c_info.arm_coleta_hrprogramacao;
            vEmailMsg := vEmailMsg || '<br><b>P.O.:</b> ' || c_info.arm_coleta_pedido;
            vEmailMsg := vEmailMsg || '<br><b>Modalidade:</b> ' || c_info.arm_coleta_tipo;
            vEmailMsg := vEmailMsg || '<br><b>Valor Total:</b> ' || c_info.arm_coleta_vlmercadoria;

            vEmailMsg := vEmailMsg || '<br><b>Observacoes:</b> ' || c_info.arm_coleta_obs;
            vEmailMsg := vEmailMsg || '<br/><hr/><br/>';

            if pAguardarAutorizacao then
              vEmailMsg := vEmailMsg || '<b>ATENÇÃO</b> sua Coleta está aguardando autorização <br/>';
              -- case seja um usuário com permissão já envio o link de autorização
              vEmailMsg := vEmailMsg || 'PARA AUTORIZAR A COLETA USE O LINK ABAIXO: <br/>';
              -- TODO: Criar o link para autorização
              vEmailMsg := vEmailMsg || 'http://extranet.dellavolpe.com.br:6917/coleta/autorizar/'||pColetaNumero||'/'||pColetaCiclo||'/'||c_info.usu_usuario_codigo_cad;
            else
              vEmailMsg := vEmailMsg || 'PARA FAZER O ACOMPANHAMENTO DA SUA COLETA ATÉ A ENTREGA, USE O LINK ABAIXO: <br/>';
              vEmailMsg := vEmailMsg || 'http://extranet.dellavolpe.com.br:6915/StatusColeta/index.php?coleta='||c_info.coleta_rowId;
            end if;
      End Loop;
      vEmailMsg := vEmailMsg || '<br/><p style="color:red;">Não responda este E-mail</p>';
      return vEmailMsg;
  End Fn_Get_MessageInfoColeta;

  Procedure Sp_Col_Update(pColetaRowType in T_arm_coleta%RowType,
                          pColetaNumero out varchar2,
                          pColetaCiclo  out varchar2,
                          pStatus       out char,
                          pMessage      out varchar2)
  as
    vStatus       char(1) ;
    vMessage      varchar2(1000);
    vGlbTpCarga   t_glb_tpcarga.glb_tpcarga_codigo%type;
    vOcorrenciaAt tdvadm.t_arm_coleta.arm_coletaocor_codigo%type; 
  begin

    begin
      --TG_BI_COLETAWEB_ARMAZEM;
      --TG_BIU_COLETA_BEFOREINSERT;
      --TG_AIUC_INFORMA_COLETA;
      --TG_AIUC_INFORMA_COLETA;
      --TG_BI_INTEGRA_COLETAWEB ha

      /***********************************************************/
      /** De para do tipo de carga                              **/
      /** conceito antigo >>> t_glb_tpcarga                     **/
      /** conceito novo   >>> t_fcf_tpcarga                     **/
      /***********************************************************/
      begin
           select t.glb_tpcarga_codigo
           into vGlbTpCarga
           from t_fcf_tpcarga t
           where trim(t.fcf_tpcarga_codigo) = trim(pColetaRowType.Fcf_Tpcarga_Codigo);
      exception when no_data_found then
           vGlbTpCarga := 'FF';
      end;
      
      
    
      
      
       -- KLAYTON EM 03/06/2019
       -- Coletas estavam ganhando a ocorrencia 65, pois no java sempre passo 65 e libero na efetiva nimbi.
       -- Origem Nimbi.
       IF (pColetaRowType.Arm_Coletaorigem_Cod = '8') THEN

         begin
           
           select kk.arm_coletaocor_codigo
             into vOcorrenciaAt
             from tdvadm.t_arm_coleta kk
            where kk.arm_coleta_ncompra = pColetaRowType.Arm_Coleta_Ncompra
              and kk.arm_coleta_ciclo   = pColetaRowType.Arm_Coleta_Ciclo;   
              
       update tdvadm.t_arm_coleta c
         set arm_coleta_peso                = pColetaRowType.arm_coleta_peso
       where c.arm_coleta_ncompra           = pColetaRowType.Arm_Coleta_ncompra
         and c.arm_coleta_ciclo             = pColetaRowType.Arm_Coleta_ciclo;
		 
		       commit; 
          
         exception when others then
           vOcorrenciaAt := '';
         end;    
         
      --   pColetaRowType.Arm_Coletaocor_Codigo := vOcorrenciaAt;
         
       END IF;  
      
      
    
      update tdvadm.t_arm_coleta c
         set arm_armazem_codigo             = pColetaRowType.Arm_Armazem_Codigo,
             arm_coleta_obs                 = pColetaRowType.Arm_Coleta_Obs,
             glb_cliente_cgccpfcodigocoleta = pColetaRowType.Glb_Cliente_Cgccpfcodigocoleta,
             glb_tpcliend_codigocoleta      = pColetaRowType.Glb_Tpcliend_Codigocoleta,
             glb_cliente_cgccpfcodigoentreg = pColetaRowType.Glb_Cliente_Cgccpfcodigoentreg,
             glb_tpcliend_codigoentrega     = pColetaRowType.Glb_Tpcliend_Codigoentrega,
             arm_coleta_valorcoleta         = pColetaRowType.Arm_Coleta_Valorcoleta,
             arm_coleta_vlmercadoria        = pColetaRowType.Arm_Coleta_Vlmercadoria,
             arm_coleta_vlrseg              = pColetaRowType.Arm_Coleta_Vlrseg,
             /*Aplicação não envia o peso, Estava Salvando zerado.*/
             --arm_coleta_peso                = arm_coleta_peso, --pColetaRowType.Arm_Coleta_Peso
             arm_coleta_pesobalanca         = pColetaRowType.Arm_Coleta_Pesobalanca,
             arm_coleta_pesocobrado         = pColetaRowType.Arm_Coleta_Pesocobrado,
             arm_coleta_volumes             = pColetaRowType.Arm_Coleta_Volumes,
             arm_coleta_largura             = pColetaRowType.Arm_Coleta_Largura,
             arm_coleta_altura              = pColetaRowType.Arm_Coleta_Altura,
             arm_coleta_cubagem             = pColetaRowType.Arm_Coleta_Cubagem,
             arm_coleta_comprimento         = pColetaRowType.Arm_Coleta_Comprimento,
             arm_coleta_prioridade          = case
                                                when pColetaRowType.Arm_Coleta_Tpcoleta = 'E' then 2
                                                 else 4
                                              end,
             arm_coleta_tpcoleta            = pColetaRowType.Arm_Coleta_Tpcoleta,
             arm_coleta_ajudante            = pColetaRowType.Arm_Coleta_Ajudante,
             arm_coleta_qtdeajudante        = pColetaRowType.Arm_Coleta_Qtdeajudante,
             fcf_tpcarga_codigo             = pColetaRowType.Fcf_Tpcarga_Codigo,
             fcf_tpveiculo_codigo           = pColetaRowType.Fcf_Tpveiculo_Codigo,
             
             --arm_coletaocor_codigo          = pColetaRowType.Arm_Coletaocor_Codigo,
             arm_coletaocor_codigo          = case
                                                when pColetaRowType.Arm_Coletaorigem_Cod = '8' then vOcorrenciaAt
                                                 else pColetaRowType.Arm_Coletaocor_Codigo
                                              end,
             
             arm_coletaorigem_cod           = pColetaRowType.Arm_Coletaorigem_Cod,-- Aplicação Web Java,
             usu_usuario_codigo_cad         = pColetaRowType.Usu_Usuario_Codigo_Cad,
             arm_coleta_solicitante         = pColetaRowType.Arm_Coleta_Solicitante,
             arm_coleta_emailsolic          = pColetaRowType.Arm_Coleta_Emailsolic,
             arm_coleta_fonesolic           = pColetaRowType.Arm_Coleta_Fonesolic,
             arm_coleta_dtprogramacao       = pColetaRowType.Arm_Coleta_Dtprogramacao,
             arm_coleta_hrprogramacao       = pColetaRowType.Arm_Coleta_Hrprogramacao,
             arm_coleta_qtdenfs             = pColetaRowType.Arm_Coleta_Qtdenfs,
             arm_coletatpfrete_id           = pColetaRowType.Arm_Coletatpfrete_Id,
             arm_coleta_pedido              = pColetaRowType.Arm_Coleta_Pedido,
             arm_coleta_descnfs             = pColetaRowType.Arm_Coleta_Descnfs,
             arm_coleta_tpcompra            = pColetaRowType.Arm_Coleta_Tpcompra,
             glb_tpcarga_codigo             = case pColetaRowType.Arm_Coleta_Tpcoleta -- prioridade
                                                when 'E' then 'EX'
                                                else vGlbTpCarga
                                              end,
             arm_coleta_entcoleta           = pColetaRowType.Arm_Coleta_Entcoleta,
             arm_coleta_tipo                = case pColetaRowType.Arm_Coleta_Entcoleta -- modalidade
                                                 when 'E' then 'ENTREGA'
                                                 else 'COLETAR'
                                              end,
             usu_usuario_codalterou         = pColetaRowType.Usu_Usuario_Codalterou,
             arm_coleta_pagadorFrete        = pColetaRowType.Arm_Coleta_Pagadorfrete,
             ARM_COLETA_CNPJPAGADORFERETE   = pColetaRowType.ARM_COLETA_CNPJPAGADORFERETE,
             Arm_Coleta_Consolidararmazem   = pColetaRowType.Arm_Coleta_Consolidararmazem,
             arm_coleta_dadosCompl          = pColetaRowType.Arm_Coleta_Dadoscompl,
             xml_coleta_numero              = pColetaRowType.xml_coleta_numero
       where c.arm_coleta_ncompra           = pColetaRowType.Arm_Coleta_ncompra
         and c.arm_coleta_ciclo             = pColetaRowType.Arm_Coleta_ciclo;

      commit;
      pColetaNumero := pColetaRowType.Arm_Coleta_ncompra;
      pColetaCiclo  := pColetaRowType.Arm_Coleta_ciclo;
      vStatus       := Status_normal;
      vMessage      := 'Processamento Normal';
      
    exception when others then
      vStatus   := Status_erro;
      vMessage := 'Erro ao Executar Pkg_Col_Coleta.Sp_Col_Update. Erro.: '||sqlerrm||' - '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;

    pStatus := vStatus;
    pMessage:= vMessage;
  end Sp_Col_Update;


  Procedure Sp_Post_ExcluiColeta(pColeta  in t_arm_coleta.arm_coleta_ncompra%type,
                                 pCiclo   in t_arm_coleta.arm_coleta_ciclo%type,
                                 pStatus  out varchar2,
                                 pMessage out varchar2) as
  vExisteColeta  integer;
  vCodOcorrencia t_arm_coleta.arm_coletaocor_codigo%type;
  vStatus        char(1);
  vMessage       varchar2(2000);
  begin

    begin

      -- Verifico se Existe Coleta
      select count(*)
        into vExisteColeta
        from t_arm_coleta k
        where k.arm_coleta_ncompra = pColeta
          and k.arm_coleta_ciclo   = pCiclo;

      -- Se Existe
      if (vExisteColeta > 0 ) then

         -- Busco ocorrencia que esta na coleta
         select nvl(l.arm_coletaocor_codigo,'00')
           into vCodOcorrencia
           from t_arm_coleta l
          where l.arm_coleta_ncompra = pColeta
            and l.arm_coleta_ciclo   = pCiclo;

         -- Valido Ocorrencia que esta na coleta, tem que ser 64-- Imcopleta
         if (Trim(vCodOcorrencia) In('64', '68')) then

             delete from t_arm_coletaarquivo t
              where t.arm_coleta_ncompra = pColeta
                and t.arm_coleta_ciclo   = pCiclo;

             delete from t_arm_coletaparceiro t
              where t.arm_coleta_ncompra = pColeta
                and t.arm_coleta_ciclo   = pCiclo;

             delete from t_arm_coletancompra t
              where t.arm_coletancompra = pColeta
                and t.arm_coleta_ciclo   = pCiclo;

             delete from t_arm_coletapedido t
              where t.arm_coleta_ncompra = pColeta
                and t.arm_coleta_ciclo   = pCiclo;

             delete from t_arm_coleta t
              where t.arm_coleta_ncompra = pColeta
                and t.arm_coleta_ciclo   = pCiclo;

             vStatus  := Status_Normal;
             vMessage := 'Procesamento Normal!';

         else

           vStatus  := Status_warning;
           vMessage := 'Coleta.: '||pColeta||'-'||pCiclo||' não esta com a ocorrencia de imcompleta!';

         end if;

      -- Não existe
      else
         vStatus  := Status_warning;
         vMessage := 'Coleta.: '||pColeta||'-'||pCiclo||' não existe.';
      end if;

      pStatus  := vStatus;
      pMessage := vMessage;

      commit;

    exception when others then

      pStatus  := Status_Erro;
      pMessage := 'Erro ao executar Pkg_Col_Coleta.Sp_Post_excluiColeta Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;

    end;

  end Sp_Post_excluiColeta;

  Procedure Sp_Get_XmlColPend(pColeta  in t_arm_coleta.arm_coleta_ncompra%type,
                              pCiclo   in t_arm_coleta.arm_coleta_ciclo%type,
                              pXmlCol  out clob,
                              pStatus  out varchar2,
                              pMessage out varchar2) as
  vXmlCol    Clob;
  vExisteXml integer;
  vStatus    char(1);
  vMessage   varchar2(2000);
  begin

   begin

      select count(*)
        into vExisteXml
        from t_arm_coletaarquivo l
       where l.arm_coleta_ncompra = pColeta
         and l.arm_coleta_ciclo   = pCiclo;

      if (vExisteXml > 0 ) then

         select l.arm_coleta_arqxml
           into vXmlCol
           from t_arm_coletaarquivo l,
                t_arm_coleta c
          where l.arm_coleta_ncompra = pColeta
            and l.arm_coleta_ciclo   = pCiclo
            and l.arm_coleta_ncompra = c.arm_coleta_ncompra
            and l.arm_coleta_ciclo   = c.arm_coleta_ciclo
            and l.arm_coleta_dtinclusao = (select Max(a.arm_coleta_dtinclusao)
                                             from t_arm_coletaarquivo a
                                             where a.arm_coleta_ncompra = l.arm_coleta_ncompra
                                               and a.arm_coleta_ciclo   = l.arm_coleta_ciclo)
            and trim(c.arm_coletaocor_codigo) In('64','68');

         vStatus := Status_Normal;
         vMessage:= 'Processamento Normal!';

      else
         vXmlCol := null;
         vStatus := Status_warning;
         vMessage:= 'Coleta .: '||pColeta||' - '||pCiclo||' não Existe!';
      end if;

      PXmlCol  := vXmlCol;
      pStatus  := vStatus;
      pMessage := vMessage;

   exception when others then

      pStatus  := Status_Erro;
      pMessage := 'Erro ao Executar Pkg_Col_Coleta.Sp_Get_XmlColPend. Erro.: '||sqlerrm||' - '||dbms_utility.format_error_backtrace||' - '||sqlerrm;

   end;

  end Sp_Get_XmlColPend;

  Procedure Sp_Get_ItensColeta(pColeta  in t_arm_coleta.arm_coleta_ncompra%type,
                               pCiclo   in t_arm_coleta.arm_coleta_ciclo%type,
                               pCursor  out T_CURSOR,
                               pStatus  out varchar2,
                               pMessage out varchar2)as
  begin

    begin
      open pCursor for
      select n.*,
             e.glb_embalagem_descricao GLB_EMBALAGEM_DESCRICAO
        from t_arm_coletancompra n,
             t_glb_embalagem e
       where n.arm_coletancompra = pColeta
         and n.arm_coleta_ciclo  = pCiclo
         and n.glb_embalagem_codigo = e.glb_embalagem_codigo;

      pStatus  := Status_normal;
      pMessage := 'Processamento Normal!';

    exception when others then
      pStatus  := Status_Erro;
      pMessage := 'Erro ao Executar Pkg_Col_Coleta.Sp_Get_ItemColeta. Erro.: '||sqlerrm||' - '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;

  end Sp_Get_ItensColeta;

  Procedure Sp_Get_Coleta(pColeta  in t_arm_coleta.arm_coleta_ncompra%type,
                          pCiclo   in t_arm_coleta.arm_coleta_ciclo%type,
                          pCursor  out T_CURSOR,
                          pStatus  out varchar2,
                          pMessage out varchar2)as
  vExisteColeta integer;
  begin

    begin

      -- Se existe a Coleta
      select count(*)
        into vExisteColeta
        from t_arm_coleta ar,
             t_arm_coletaorigem ori
       where ar.arm_coleta_ncompra = pColeta
         and ar.arm_coleta_ciclo   = LPAD(pCiclo,3,000);

      open pCursor for
      select nvl(ar.arm_coleta_tpcoleta, 'C') arm_coleta_tpcoleta,
             ar.*,
             -- ocorrencia
             ocor.arm_coletaocor_codigo,
             ocor.arm_coletaocor_descricao,

             -- origem
             ori.arm_coletaorigem_cod,
             ori.arm_coletaorigem_descmenor,

             -- Peso
            /* (select sum(item.arm_coleta_ncompra_peso)
               from t_arm_coletancompra item
              where item.arm_coletancompra = ar.arm_coleta_ncompra
                and item.arm_coleta_ciclo  = ar.arm_coleta_ciclo) peso,*/

             Case nvl(ar.arm_coleta_peso,0)
               When 0 then (select sum(item.arm_coleta_ncompra_peso)
                               from t_arm_coletancompra item
                               where item.arm_coletancompra = ar.arm_coleta_ncompra
                                 and item.arm_coleta_ciclo  = ar.arm_coleta_ciclo)
               else ar.arm_coleta_peso
             End peso,

             -- carga
             carga.fcf_tpcarga_codigo,
             carga.fcf_tpcargadescricao,
             -- veiculo
             veiculo.fcf_tpveiculo_codigo,
             veiculo.fcf_tpveiculo_descricao,

             -- cliente remetente
             endRem.Glb_Cliend_Cidade cidade_origem,
             cliRem.Glb_Cliente_Cgccpfcodigo remetente_cnpj,
             cliRem.Glb_Cliente_Razaosocial remetente_razao,
             cliRem.Glb_Grupoeconomico_Codigo remetente_grupoEconom_Cod,
             -- destinatario
             endDes.Glb_Cliend_Cidade cidade_destino,
             cliDes.Glb_Cliente_Cgccpfcodigo destinatario_cnpj,
             cliDes.Glb_Cliente_Razaosocial destinatario_razao,
             cliDes.Glb_Grupoeconomico_Codigo destinatario_grupoEconom_Cod,
             -- contato
             ar.arm_coleta_solicitante, -- contato/nome
             ar.usu_usuario_codigo_cad, -- contato/login (solicitante)
             ar.arm_coleta_emailsolic,  -- contato/email
             ar.arm_coleta_fonesolic tel_celular,  -- contato/telefone
                                        -- contato/cnpj
             usuAutorizou.Usu_Usuario_Nome usuario_autorizou_nome,
             usuAutorizou.Usu_Usuario_Email usuario_autorizou_email,
             ar.arm_coleta_entcoleta,
             ar.arm_coleta_flagaut
        from t_arm_coleta ar,
             t_glb_cliend  endRem,
             t_glb_cliente cliRem,
             t_glb_cliend  endDes,
             t_glb_cliente cliDes,
             t_fcf_tpcarga carga,
             t_fcf_tpveiculo veiculo,
             t_arm_coletaocor ocor,
             t_usu_usuario u,
             t_arm_coletaorigem ori,
             t_usu_usuario usuAutorizou
       where ar.arm_coleta_ncompra = pColeta
         and ar.arm_coleta_ciclo   = LPAD(pCiclo,3,000)
         and ar.glb_tpcliend_codigocoleta      = endRem.Glb_Tpcliend_Codigo(+)
         and ar.glb_cliente_cgccpfcodigocoleta = endRem.Glb_Cliente_Cgccpfcodigo(+)
         and endRem.Glb_Cliente_Cgccpfcodigo   = cliRem.Glb_Cliente_Cgccpfcodigo(+)
         and endDes.Glb_Cliente_Cgccpfcodigo   = cliDes.Glb_Cliente_Cgccpfcodigo(+)

         and ar.glb_tpcliend_codigoentrega     = endDes.Glb_Tpcliend_Codigo(+)
         and ar.glb_cliente_cgccpfcodigoentreg = endDes.Glb_Cliente_Cgccpfcodigo(+)

         and nvl(ar.fcf_tpcarga_codigo,'00 ')    = carga.fcf_tpcarga_codigo
         and nvl(ar.fcf_tpveiculo_codigo,'0  ')  = veiculo.fcf_tpveiculo_codigo
         and ar.arm_coletaocor_codigo = ocor.arm_coletaocor_codigo(+)
         and ar.usu_usuario_codigo_cad = u.usu_usuario_codigo(+)
         and ar.arm_coletaorigem_cod = ori.arm_coletaorigem_cod(+)
         and ar.usu_usuario_codigoautoriza = usuAutorizou.Usu_Usuario_Codigo(+);

      if (vExisteColeta > 0 ) then

          pStatus  := Status_normal;
          pMessage := 'Processamento Normal.';

      else
          pStatus  := Status_warning;
          pMessage := 'Coleta não existe';

      end if;

    exception when others then

      pStatus  := Status_Erro;
      pMessage := 'Erro ao Executar Pkg_Col_Coleta.Sp_Get_Coleta. Erro.: '||sqlerrm||' - '||dbms_utility.format_error_backtrace;

    end;

  end Sp_Get_Coleta;

/***********************************************************************************************
* Data..: 10/02/2016
* Autor.: Felipe Bispo
* Versão: 1.0 - GET da tela de Consulta de coleta, Implementada na tarefa #537 - Solution Coleta
************************************************************************************************/
Procedure Sp_Get_ColetaEdit(pColeta         in t_arm_coleta.arm_coleta_ncompra%type,
                            pCiclo          in t_arm_coleta.arm_coleta_ciclo%type,
                            pCursor         out T_CURSOR,
                        --    pHabilitaEdicao out varchar2,
                            pStatus         out varchar2,
                            pMessage        out varchar2) as
  vExisteColeta integer;
begin

  begin
    
    -- Se existe a Coleta
    select count(*)
      into vExisteColeta
      from t_arm_coleta ar
     where ar.arm_coleta_ncompra = pColeta
       and ar.arm_coleta_ciclo = LPAD(pCiclo, 3, 000);

   /* Select decode(count(*),0,'N','S')
      into pHabilitaEdicao
      from t_arm_coleta o
     where nvl(o.arm_coletaocor_codigo,0) in (65,0)
       and o.arm_coleta_ncompra = pColeta
       and o.arm_coleta_ciclo   = LPAD(pCiclo, 3, 000);*/

    open pCursor for
         select nvl(ar.arm_coleta_tpcoleta, 'C') arm_coleta_tpcoleta,
--             ar.*,
             ar.arm_coleta_normalimpexp,
             ar.usu_usuario_codigoautoriza,
             ar.arm_coleta_ncompra,
             ar.arm_coleta_ciclo,
             ar.arm_coleta_pedido,
             ar.arm_coleta_dtgravacao,
             ar.arm_coleta_dtprogramacao,
             ar.arm_coleta_hrprogramacao,
             ar.arm_coleta_flagquimico,
             ar.arm_coleta_dtautoriza,
             ar.arm_coleta_dtimp,
             ar.arm_coleta_dtsolicitacao,
             ar.arm_coleta_hrsolicitacao,
             ar.arm_coleta_pagadorfrete,
             ar.arm_coleta_obs,
             ar.arm_coleta_tpcoleta,
             ar.arm_coleta_vlmercadoria,
             ar.arm_armazem_codigo,
             ar.arm_coleta_tipo,
             ar.xml_coleta_numero,
             ar.glb_cfop_codigo,
             ar.arm_coleta_centrodecusto,
             ar.arm_coleta_nrformulario,
             ar.arm_coleta_placa,
             ar.arm_coleta_placasaque,
             --Felipe 01/08/2016
             tdvadm.FN_NOME_MOTORISTA(ar.arm_coleta_placa) arm_coleta_carreteiro,
             --ar.arm_coleta_carreteiro,
             ar.arm_coleta_volumes,
             ar.arm_coleta_pesocobrado,
             ar.arm_coleta_altura,
             ar.arm_coleta_largura,
             ar.arm_coleta_comprimento,
             ar.arm_coleta_vlmercadoria,
             ar.arm_coleta_cnpjpagadorferete,
             ar.arm_coleta_cnpjsolicitante,
             ar.fcf_tpcarga_codigo,
             ar.arm_coleta_consolidararmazem,
             ar.glb_tpcliend_codigocoleta,
             ar.glb_tpcliend_codigoentrega,
             (select aa.arm_armazem_descricao
                from tdvadm.t_arm_armazem aa
               where aa.arm_armazem_codigo = ar.arm_armazem_codigo) arm_armazem_descricao,
             -- ocorrencia
             ocor.arm_coletaocor_codigo,
             ocor.arm_coletaocor_descricao,

             -- origem
             ori.arm_coletaorigem_cod,
             ori.arm_coletaorigem_descmenor,

             Case nvl(ar.arm_coleta_peso, 0)
               When 0 then
                (select sum(item.arm_coleta_ncompra_peso)
                   from tdvadm.t_arm_coletancompra item
                  where item.arm_coletancompra = ar.arm_coleta_ncompra
                    and item.arm_coleta_ciclo = ar.arm_coleta_ciclo)
               else
                ar.arm_coleta_peso
             End peso,

             -- carga
             carga.fcf_tpcarga_codigo,
             carga.fcf_tpcargadescricao,
             -- veiculo
             veiculo.fcf_tpveiculo_codigo,
             veiculo.fcf_tpveiculo_descricao,

             -- cliente remetente
             endRem.Glb_Cliend_Cidade cidade_origem,

             --Adicionado por Felipe Bispo
             /*----------------------------------------------------------------------------------------------------------------------------*/
             --Remetente
             endRem.Glb_Cliend_Endereco remetente_endereco,
             endRem.Glb_Cliend_Complemento remente_complemento,
             endRem.Glb_Cliend_Cidade remetente_cidade,
             endRem.Glb_Cep_Codigo remetente_cep,
             endRem.Glb_Estado_Codigo remetente_uf,
             endRem.Glb_Cliend_Ie remetente_ie,
             endRem.Glb_Cliend_Codcliente remetente_alx,
             (select en.glb_tpcliend_descricao
                from t_glb_tpcliend en
               where en.glb_tpcliend_codigo = ar.glb_tpcliend_codigocoleta) remetente_tpendereco_descricao,

             --Destinatario
             endDes.Glb_Cliend_Endereco destinatario_endereco,
             endDes.Glb_Cliend_Complemento destinatario_complemento,
             endDes.Glb_Cliend_Cidade destinatario_cidade,
             endDes.Glb_Cep_Codigo destinatario_cep,
             endDes.Glb_Estado_Codigo destinatario_uf,
             endDes.Glb_Cliend_Ie destinatario_ie,
             endDes.Glb_Cliend_Codcliente destinatario_alx,
             (select en.glb_tpcliend_descricao
                from tdvadm.t_glb_tpcliend en
               where en.glb_tpcliend_codigo = ar.glb_tpcliend_codigoentrega) dest_tpendereco_descricao,
             /*----------------------------------------------------------------------------------------------------------------------------*/
             cliRem.Glb_Cliente_Cgccpfcodigo  remetente_cnpj,
             cliRem.Glb_Cliente_Razaosocial   remetente_razao,
             cliRem.Glb_Grupoeconomico_Codigo remetente_grupoEconom_Cod,

             -- destinatario
             endDes.Glb_Cliend_Cidade         cidade_destino,
             cliDes.Glb_Cliente_Cgccpfcodigo  destinatario_cnpj,
             cliDes.Glb_Cliente_Razaosocial   destinatario_razao,
             cliDes.Glb_Grupoeconomico_Codigo destinatario_grupoEconom_Cod,
             -- contato
             nvl( -- Nvl por fora, implementado por Diego porque as coletas criadas pelo gerenciador dava erro ao estar com o solicitante null
             decode(decode(trim(u.usu_usuario_login),'xml',ar.arm_coleta_solicitante,u.usu_usuario_nome),null,u.usu_usuario_nome,ar.arm_coleta_solicitante)
             , ar.usu_usuario_codigo_cad) arm_coleta_solicitante,
--           ar.arm_coleta_solicitante, -- contato/nome
             u.usu_usuario_login usu_usuario_codigo_cad,
--             ar.usu_usuario_codigo_cad, -- contato/login (solicitante)
             decode(decode(trim(u.usu_usuario_login),'xml',ar.arm_coleta_emailsolic,u.usu_usuario_email),null,u.usu_usuario_email,ar.arm_coleta_emailsolic) arm_coleta_emailsolic,
--             ar.arm_coleta_emailsolic, -- contato/email
             u.usu_usuario_cpf arm_coleta_cnpjsolicitante,
--             ar.arm_coleta_cnpjsolicitante,
             ar.arm_coleta_fonesolic tel_celular, -- contato/telefone
             -- contato/cnpj
             usuAutorizou.Usu_Usuario_Nome  usuario_autorizou_nome,
             usuAutorizou.Usu_Usuario_Email usuario_autorizou_email,
             ar.arm_coleta_entcoleta,
             ar.arm_coleta_flagaut,
             ar.arm_coletatpfrete_id,
             ar.arm_coleta_qtdenfs,
             ar.arm_coleta_descnfs,
             ar.arm_coleta_flagdemandafrota,
             ar.arm_coleta_flagcargadireta,
             ca.car_carreteiro_cnhcodigo cnh,
             vv.glb_estadoveiculo_codigo uf
        from tdvadm.t_arm_coleta       ar,
             tdvadm.t_glb_cliend       endRem,
             tdvadm.t_glb_cliente      cliRem,
             tdvadm.t_glb_cliend       endDes,
             tdvadm.t_glb_cliente      cliDes,
             tdvadm.t_fcf_tpcarga      carga,
             tdvadm.t_fcf_tpveiculo    veiculo,
             tdvadm.t_arm_coletaocor   ocor,
             tdvadm.t_usu_usuario      u,
             tdvadm.t_arm_coletaorigem ori,
             tdvadm.t_usu_usuario      usuAutorizou,
             tdvadm.t_Arm_Coleta_Motorista m,
             tdvadm.t_car_carreteiro ca,
             tdvadm.t_car_veiculo vv
       where ar.arm_coleta_ncompra = pColeta
         and ar.arm_coleta_ciclo = LPAD(pCiclo, 3, 000)
         and ar.glb_tpcliend_codigocoleta = endRem.Glb_Tpcliend_Codigo(+)
         and ar.glb_cliente_cgccpfcodigocoleta = endRem.Glb_Cliente_Cgccpfcodigo(+)
         and endRem.Glb_Cliente_Cgccpfcodigo = cliRem.Glb_Cliente_Cgccpfcodigo(+)
         and endDes.Glb_Cliente_Cgccpfcodigo = cliDes.Glb_Cliente_Cgccpfcodigo(+)

         and ar.glb_tpcliend_codigoentrega = endDes.Glb_Tpcliend_Codigo(+)
         and ar.glb_cliente_cgccpfcodigoentreg = endDes.Glb_Cliente_Cgccpfcodigo(+)

         and nvl(ar.fcf_tpcarga_codigo,'00 ') = carga.fcf_tpcarga_codigo
         and nvl(ar.fcf_tpveiculo_codigo,'0  ') = veiculo.fcf_tpveiculo_codigo
         and ar.arm_coletaocor_codigo           = ocor.arm_coletaocor_codigo(+)
         and ar.usu_usuario_codigo_cad = u.usu_usuario_codigo(+)
         and ar.arm_coletaorigem_cod = ori.arm_coletaorigem_cod(+)
         and ar.usu_usuario_codigoautoriza = usuAutorizou.Usu_Usuario_Codigo(+)
         and ar.arm_coleta_ncompra     = m.arm_coleta_ncompra(+)
         and ar.arm_coleta_ciclo       = m.arm_coleta_ciclo(+)
         and m.arm_coleta_carreteiro   = ca.car_carreteiro_cpfcodigo(+)
         and m.arm_coleta_motorista_placa = vv.car_veiculo_placa(+)
         and m.arm_coleta_motorista_placasaqu = vv.car_veiculo_saque(+);

    if (vExisteColeta > 0) then

      pStatus  := Status_normal;
      pMessage := 'Processamento Normal.';

    else
      pStatus  := Status_warning;
      pMessage := 'Coleta não existe';

    end if;

  exception
    when others then

      pStatus  := Status_Erro;
      pMessage := 'Erro ao Executar Pkg_Col_Coleta.Sp_Get_ColetaEdit. Erro.: ' ||
                  sqlerrm || ' - ' || dbms_utility.format_error_backtrace;

  end;

end Sp_Get_ColetaEdit;

/***********************************************************************************************
* Data..: 11/02/2016
* Autor.: Felipe Bispo
* Versão: 1.0 - POST da tela de Consulta de coleta, Implementada na tarefa #537 - Solution Coleta
************************************************************************************************/
Procedure Sp_Post_ColetaEdit(pColetaXml    in  CLOB,
                             pColetaNumero out varchar2,
                             pColetaCiclo  out varchar2,
                             pStatus       out varchar2,
                             pMessage      out varchar2)as

    vColetaRowType tdvadm.t_arm_coleta%RowType;
    vUpdateColeta  char(1);
    vFlagImportacao char(1);
    vDataProgramacao   tdvadm.t_arm_coleta.arm_coleta_dtprogramacao%type;
    vHoraProgramacao   tdvadm.t_arm_coleta.arm_coleta_hrprogramacao%type;
    vEstado            tdvadm.t_glb_cliend.glb_estado_codigo%type;
    vLocalidade        tdvadm.t_glb_cliend.glb_localidade_codigo%type;
    vImpresso       Integer;
    vOrigem        Integer;
    vAprovador     Integer;
begin
    begin
       pStatus := Status_normal;  
    
      /***********************************************************/
      /**Bloco de validação do Xml de Envio da Integração Coleta**/
      /***********************************************************/
      vColetaRowType := Fn_XmlToColetaRowType(pColetaXml);
      
      pColetaNumero := vColetaRowType.Arm_Coleta_ncompra;
      pColetaCiclo  := vColetaRowType.Arm_Coleta_ciclo;
  
      Select decode(nvl(trim(cco.arm_coletaocor_codigo),'65'), '65', 'S', 'N') 
        into vUpdateColeta
        from tdvadm.t_arm_coleta cco
       where cco.arm_coleta_ncompra = vColetaRowType.Arm_Coleta_ncompra
         and cco.arm_coleta_ciclo   = vColetaRowType.Arm_Coleta_ciclo;
       
       select count(*) 
              into vImpresso 
                   from tdvadm.t_arm_coleta c 
                        where c.arm_coleta_ncompra = pColetaNumero and
                              c.arm_coleta_ciclo = pColetaCiclo and
                              c.arm_coleta_dtimp is not null;
                              
            select c.arm_coletaorigem_cod
              into vOrigem 
                   from tdvadm.t_arm_coleta c 
                        where c.arm_coleta_ncompra = pColetaNumero and
                              c.arm_coleta_ciclo = pColetaCiclo;
                                                       
                                                       
      /*************************************************************************************
       * Data..: 10/03/2017                                                                *
       * Autor.: Felipe Bispo                                                              *
       * Verifico se a coleta é de Importação/Exportação, pois essas coletas são liberadas *
      /*************************************************************************************/         
       TdvAdm.Pkg_Col_Coleta.Sp_Col_verificaColetaImport(vColetaRowType.Arm_Coleta_ncompra,
                                                         vColetaRowType.Arm_Coleta_ciclo,
                                                         vFlagImportacao,
                                                         pStatus,
                                                         pMessage);                    
       if(pStatus <> Status_normal) then
          return;
       end if;
       
      /*************************************************************************************
      * Data..: 09/10/2019                                                                 *
      * Autor.: Jonatas Veloso                                                             *
      * Refazer análise de permissão BIOSEV.                                               *
      *************************************************************************************/
      if (Fn_BIO_IsColetaBIO(vColetaRowType)) then
        if (Fn_BIO_AguardaOuEfetiva(vColetaRowType, vColetaRowType.Usu_Usuario_Codalterou)) then
          vUpdateColeta := 'N'; 
        end if;
        if (nvl(vColetaRowType.Arm_Coletaocor_Codigo,'XX') = 'XX') then
          vUpdateColeta := 'N';
        end if;
      end if;
       
       if (vImpresso > 0 and  vFlagImportacao = 'N') then
          pStatus := Status_warning;
          pMessage := 'Coleta já esta impressa e não pode ser alterada';
          return;
       end if;  
       
       if (vOrigem = '8' and vFlagImportacao = 'N') then
          pStatus := Status_warning;
          pMessage := 'Coleta de origem nimbi não pode ser alterada';
          return;
       end if;  
      
      /************************************************************************************
       * Data..: 28/10/2016                                                               *
       * Autor.: Felipe Bispo                                                             *
       * Foi Implementada essa regra para evitar que coletas autorizadas sejam alteradas  *
       * 10/03/2017 - Foi adicionada a liberação de alteração de coletas de I/E para VLI  *
      /************************************************************************************/         
      if (FN_VLI_IsColetaVLI(vColetaRowType) and nvl(vColetaRowType.Arm_Coletaocor_Codigo, 'Nulo') = 'Nulo' and vFlagImportacao = 'N') then
         vUpdateColeta := 'N';        
      end if;

      if(vUpdateColeta = 'S') then
             /****************************************************/
        /**  Atualizando os campos da alterados da coleta  **/
        /****************************************************/
        
        select a.arm_coleta_dtprogramacao,
               a.arm_coleta_hrprogramacao
               into vDataProgramacao,
                    vHoraProgramacao
        from tdvadm.t_arm_coleta a
        where a.arm_coleta_ncompra = vColetaRowType.Arm_Coleta_Ncompra
        and a.arm_coleta_ciclo = vColetaRowType.Arm_Coleta_Ciclo;
        
        SELECT d.glb_estado_codigo,
               d.glb_localidade_codigo
                into vEstado,
                     vLocalidade
        FROM TDVADM.T_arm_coleta l,
             tdvadm.t_glb_cliend d
        where l.glb_cliente_cgccpfcodigocoleta = d.glb_cliente_cgccpfcodigo
        and   l.glb_tpcliend_codigocoleta      = d.glb_tpcliend_codigo
        and   l.arm_coleta_ncompra = vColetaRowType.Arm_Coleta_Ncompra
        and   l.Arm_Coleta_Ciclo = vColetaRowType.Arm_Coleta_Ciclo;
        
        
        select count(*)
           into vAprovador
        from tdvadm.t_arm_permiteautorizar pp
        where pp.usu_usuario_codigo = vColetaRowType.Usu_Usuario_Codalterou;
        
        if(trunc(vDataProgramacao) <> TRUNC(vColetaRowType.Arm_Coleta_Dtprogramacao) or vHoraProgramacao <> vColetaRowType.Arm_Coleta_Hrprogramacao) then
         --if (to_date(pTypeColeta.dataProgramacao,'dd/mm/yyyy hh24:mi:ss') < sysdate) then
          /*if ( trunc(to_date(vColetaRowType.Arm_Coleta_Dtprogramacao, 'DD/MM/YYYY')) < tdvadm.f_diautil_proximo(SYSDATE)
              or tdvadm.f_diautillocal(trunc(to_date(vColetaRowType.Arm_Coleta_Dtprogramacao, 'DD/MM/YYYY')), vEstado,vLocalidade, null ) <> 'S') then
             pStatus  := Status_warning;
             pMessage := 'Data de programação invalida: A data de alteração não pode ser inferior a 2 dias uteis da data atual;  <br/>';
             return;
          end if;*/
          
          if To_Date(vColetaRowType.Arm_Coleta_Dtprogramacao || ' ' || vColetaRowType.Arm_Coleta_Hrprogramacao, 'dd/MM/yyyy hh24:mi') < sysdate then
             pStatus  := Status_warning;
             pMessage := 'Hora da Programação inválida. Hora permitida somente posterior que a atual</br>';
             return;
          end if;
          
          if vAprovador = 0 then
             pStatus  := Status_warning;
             pMessage := 'Apenas usuario aprovador pode alterar a data de programação</br>';
             return;
          end if;
        end if;
        
        
        
        update tdvadm.t_arm_coleta c
           set c.arm_armazem_codigo             = vColetaRowType.Arm_Armazem_Codigo,
               c.arm_coleta_obs                 = vColetaRowType.Arm_Coleta_Obs,
               c.glb_cliente_cgccpfcodigocoleta = vColetaRowType.Glb_Cliente_Cgccpfcodigocoleta,
               c.glb_tpcliend_codigocoleta      = vColetaRowType.Glb_Tpcliend_Codigocoleta,
               c.glb_cliente_cgccpfcodigoentreg = vColetaRowType.Glb_Cliente_Cgccpfcodigoentreg,
               c.glb_tpcliend_codigoentrega     = vColetaRowType.Glb_Tpcliend_Codigoentrega,
               c.fcf_tpcarga_codigo             = vColetaRowType.Fcf_Tpcarga_Codigo,
               c.arm_coleta_centrodecusto       = vColetaRowType.Arm_Coleta_Centrodecusto,
               c.fcf_tpveiculo_codigo           = vColetaRowType.Fcf_Tpveiculo_Codigo,
               c.usu_usuario_codalterou         = vColetaRowType.Usu_Usuario_Codalterou,
               c.arm_coleta_dtprogramacao       = vColetaRowType.Arm_Coleta_Dtprogramacao,
               c.arm_coleta_hrprogramacao       = vColetaRowType.Arm_Coleta_Hrprogramacao
         where c.arm_coleta_ncompra             = vColetaRowType.Arm_Coleta_ncompra
           and c.arm_coleta_ciclo               = vColetaRowType.Arm_Coleta_ciclo;

        /*********************************************************/
        /**  Atualizando o campo TpEnd dos Parceiros da Coleta  **/
        /*********************************************************/
        --Remetente
        Update tdvadm.t_arm_coletaparceiro pa
           set pa.glb_tpcliend_codigopar = vColetaRowType.Glb_Tpcliend_Codigocoleta,
               pa.glb_cliente_cgccpfpar  = vColetaRowType.Glb_Cliente_Cgccpfcodigocoleta
         where pa.arm_coleta_ncompra     = vColetaRowType.Arm_Coleta_ncompra
           and pa.arm_coleta_ciclo       = vColetaRowType.Arm_Coleta_ciclo
           and pa.arm_coletatppar_codigo = 'CR';

        --Destinatário
        Update tdvadm.t_arm_coletaparceiro pa
           set pa.glb_tpcliend_codigopar = vColetaRowType.Glb_Tpcliend_Codigoentrega
         where pa.arm_coleta_ncompra     = vColetaRowType.Arm_Coleta_ncompra
           and pa.arm_coleta_ciclo       = vColetaRowType.Arm_Coleta_ciclo
           and pa.arm_coletatppar_codigo = 'CD';


        /***********************************************************/
        /**   Granvando Xml da solicitação de Coleta              **/
        /***********************************************************/
        begin

              if trim(upper(pStatus)) = trim(upper(Status_normal)) then

                  insert into t_arm_coletaarquivo
                    (arm_coleta_ncompra,
                     arm_coleta_ciclo,
                     arm_coleta_arqxml,
                     arm_coleta_dtinclusao)
                  values
                    (pColetaNumero,
                     pColetaCiclo,
                     pColetaXml,
                     SYSDATE);

              end if;
        end;
        commit;

        pStatus  := Status_normal;
        pMessage := ' Coleta salva com sucesso!';
     else
        pStatus  := Status_normal;
        pMessage := ' Coleta não pode ser alterada';       
     end if;
    Exception 
      when others then 
           pStatus  := Status_Erro;
           pMessage := ' Erro ao executar Pkg_Col_Coleta.Sp_Post_ColetaEdit. Erro: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;

end Sp_Post_ColetaEdit;

/***********************************************************************************************
* Data..: 15/02/2016
* Autor.: Felipe Bispo
* Versão: 1.0 - GET de Parceiros através do Número da coleta e do ciclo
************************************************************************************************/
Procedure Sp_Get_ParceirosByColeta(pColeta  in t_arm_coleta.arm_coleta_ncompra%type,
                                   pCiclo   in t_arm_coleta.arm_coleta_ciclo%type,
                                   pCursor  out T_CURSOR,
                                   pStatus  out varchar2,
                                   pMessage out varchar2) as
  vExisteColeta integer;
begin

  begin
    -- Se existe a Coleta
    select count(*)
      into vExisteColeta
      from t_arm_coleta ar, t_arm_coletaorigem ori
     where ar.arm_coleta_ncompra = pColeta
       and ar.arm_coleta_ciclo = LPAD(pCiclo, 3, 000);

    open pCursor for
         Select pa.*,
                tp.arm_coletapar_descricao,
                cli.glb_cliente_razaosocial,
                en.glb_cliend_cidade,
                en.glb_estado_codigo,
                en.glb_localidade_codigo,
                en.glb_cep_codigo,
                en.glb_cliend_endereco
           from t_arm_coletaparceiro pa,
                t_arm_coletatppar tp,
                t_glb_cliend en,
                t_glb_cliente cli
          where pa.arm_coleta_ncompra = pColeta
            and pa.arm_coleta_ciclo   = pCiclo
            and pa.glb_cliente_cgccpfpar = en.glb_cliente_cgccpfcodigo
            and pa.glb_tpcliend_codigopar = en.glb_tpcliend_codigo
            and pa.glb_cliente_cgccpfpar = cli.glb_cliente_cgccpfcodigo
            and pa.arm_coletatppar_codigo = tp.arm_coletatppar_codigo;

    if (vExisteColeta > 0) then

      pStatus  := Status_normal;
      pMessage := 'Processamento Normal.';

    else
      pStatus  := Status_warning;
      pMessage := 'Coleta não existe';

    end if;

  exception
    when others then

      pStatus  := Status_Erro;
      pMessage := 'Erro ao Executar Pkg_Col_Coleta.Sp_Get_ParceirosByColeta. Erro.: ' ||
                  sqlerrm || ' - ' || dbms_utility.format_error_backtrace;

  end;

end Sp_Get_ParceirosByColeta;

/***********************************************************************************************
* Data..: 16/02/2016
* Autor.: Felipe Bispo
* Versão: 1.0 - Post do Parceiro da coleta 
************************************************************************************************/
Procedure Sp_Post_ParceiroColeta(pNCompra     in varchar2,
                                 pCnpj        in varchar2,
                                 pTpEnd       in varchar2,
                                 pTpParceiro  in varchar2,
                                 pCiclo       in varchar2,
                                 pStatus      out varchar2,
                                 pMessage     out varchar2)
as

vExisteParceiroColeta integer;
vContrato tdvadm.t_Arm_coleta.slf_contrato_codigo%Type;
vColetaRowType t_Arm_Coleta%RowType :=  Fn_Get_ColetaRowType(pNCompra, pCiclo);
 vGrupoEconomicoPagadorFrete t_glb_cliente.glb_grupoeconomico_codigo%Type;

begin
    Begin



      select count(*)
        into vExisteParceiroColeta
          from t_arm_coletaparceiro a
         where a.arm_coleta_ncompra           = rpad(pNCompra,6,0)
           and a.arm_coleta_ciclo             = rpad(pCiclo,3,0)
           and a.arm_coletatppar_codigo       = pTpParceiro;

      
      if (vExisteParceiroColeta > 0) then
          pStatus  := 'W';
          pMessage := 'Esse tipo de parceiro já está vinculado a coleta: ' || pNCompra;
          return;
      else
        insert 
          into t_arm_coletaparceiro(arm_coleta_ncompra,
                                    glb_cliente_cgccpfpar,
                                    glb_tpcliend_codigopar,
                                    arm_coletatppar_codigo,
                                    arm_coleta_ciclo)
        values(rpad(pNCompra,6,0),
               trim(pCnpj),
               substr(pTpEnd,0,1),
               substr(pTpParceiro,0,2),
               rpad(pCiclo,3,0));
        commit;                                    
      end if;       
      
        Select t.glb_grupoeconomico_codigo
               Into vGrupoEconomicoPagadorFrete
               From tdvadm.t_arm_coleta a,
                    tdvadm.t_glb_cliente t
               where trim(t.glb_cliente_cgccpfcodigo) = trim(a.Arm_Coleta_Cnpjpagadorferete)
               and a.arm_coleta_ncompra =  pNCompra
               and a.arm_coleta_ciclo = pCiclo;
               
               
       if(vGrupoEconomicoPagadorFrete = GrupoEconomicoVALE ) then  
                vContrato := tdvadm.pkg_col_coleta.Fn_VALE_GETCONTRATO(vColetaRowType); 
                
                IF(vContrato <> 'XXX') THEN
                  update tdvadm.t_Arm_coleta l
                  set l.Slf_Contrato_Codigo = vContrato
                  where l.arm_coleta_ncompra =  pNCompra
                  and l.Arm_Coleta_Ciclo     =   pCiclo;
                  commit;
                END IF;
       end if;
       
       --TATI
       /*Select t. glb_ramoatividade_codigo
               into vRamoDeAtividade
               From  tdvadm.t_glb_cliente t
               where trim(t.glb_cliente_cgccpfcodigo) = trim(pCnpj);
           
          
       if(pTpParceiro = 'CC' and vRamoDeAtividade = '50' and vGrupoEconomicoPagadorFrete 
           IN (GrupoEconomicoSUZ, GrupoEconomicoSUZ2, GrupoEconomicoSUZ3, GrupoEconomicoSUZ4, 
                                                           GrupoEconomicoSUZ5, GrupoEconomicoSUZ6, GrupoEconomicoSUZ7, GrupoEconomicoSUZ8,
                                                           GrupoEconomicoSUZ9, GrupoEconomicoSUZ10, GrupoEconomicoSUZ11) ) then  

               -- vContrato := tdvadm.pkg_col_coleta.Fn_SUZ_GETCONTRATO(vColetaRowType); 
                
                update tdvadm.t_Arm_coleta l
                set l.Slf_Contrato_Codigo  = 'C2020010117/12'
                where l.arm_coleta_ncompra =  pNCompra
                and l.Arm_Coleta_Ciclo     =   pCiclo;
                commit;
       end if;  */
      
      
      pStatus  := Status_Normal;
      pMessage := 'Parceiro Criado com sucesso!';
    Exception 
      When Others then
           pStatus  := Status_Erro;
           pMessage := 'Erro ao executar Pkg_Col_Coleta.Sp_Post_ParceiroColeta Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;
End Sp_Post_ParceiroColeta;

/***********************************************************************************************
* Data..: 16/02/2016
* Autor.: Felipe Bispo
* Versão: 1.0 - Retorna uma lista de Clientes a partir de uma Razão Soial
************************************************************************************************/
Procedure Sp_Get_ClientePorRazaoSocial(pRazaoSocial    in  varchar2,
                                       pCursor         out T_CURSOR,
                                       pStatus         out varchar2,
                                       pMessage        out varchar2)as                              
  vExisteCliente integer;
  begin
    begin 

      open pCursor for
      select  c.GLB_CLIENTE_CGCCPFCODIGO ,            
              C.GLB_CLIENTE_RAZAOSOCIAL  ,
              c.glb_grupoeconomico_codigo,
              c.glb_cliente_nacional,
              c.glb_cliente_tppessoa,
              c.glb_cliente_ie,
              c.glb_cliente_im,
              c.glb_rota_codigo,
              c.glb_cliente_situacao,
              c.glb_cliente_qtdtitvenc,
              c.glb_cliente_vltotvenc,
              c.glb_cliente_prazomedvenc,
              c.glb_cliente_prazomedpagto,
              c.glb_cliente_dtutlmov,
              c.glb_cliente_dtcadastro,
              c.glb_cliente_obs
        from tdvadm.t_glb_cliente c
       where upper(c.glb_cliente_razaosocial) like ('%'|| upper(pRazaoSocial) || '%')
         and 0 < (select count(*)
                    from tdvadm.t_glb_cliend cld
                   where cld.glb_cliente_cgccpfcodigo = c.glb_cliente_cgccpfcodigo);
      
      
      select count(*)
        into vExisteCliente
        from tdvadm.t_glb_cliente l
       where upper(l.glb_cliente_razaosocial) like ('%'|| upper(pRazaoSocial) || '%');
      
      
      if (vExisteCliente = 0) then
          pStatus  := 'W';
          pMessage := 'Não Foi encontrado nenhum Cliente contendo a Razão Social: ' || pRazaoSocial;
          return;
      end if;       
      
      pStatus  := Status_Normal;
      pMessage := Null;
    exception when others then
      pStatus  := Status_Erro;
      pMessage := 'Erro ao executar Pkg_Col_Coleta.Sp_Get_ClientePorRazaoSocial Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;
end Sp_Get_ClientePorRazaoSocial;  

Procedure Sp_Get_ClientePorRazaoEstr(pRazaoSocial    in  varchar2,
                                       pCursor         out T_CURSOR,
                                       pStatus         out varchar2,
                                       pMessage        out varchar2)as                              
  vExisteCliente integer;
  begin
    begin 

      open pCursor for
      select  c.GLB_CLIENTE_CGCCPFCODIGO ,            
              C.GLB_CLIENTE_RAZAOSOCIAL  ,
              c.glb_grupoeconomico_codigo,
              c.glb_cliente_nacional,
              c.glb_cliente_tppessoa,
              c.glb_cliente_ie,
              c.glb_cliente_im,
              c.glb_rota_codigo,
              c.glb_cliente_situacao,
              c.glb_cliente_qtdtitvenc,
              c.glb_cliente_vltotvenc,
              c.glb_cliente_prazomedvenc,
              c.glb_cliente_prazomedpagto,
              c.glb_cliente_dtutlmov,
              c.glb_cliente_dtcadastro,
              c.glb_cliente_obs
        from tdvadm.t_glb_cliente c
       where upper(c.glb_cliente_razaosocial) like ('%'|| upper(pRazaoSocial) || '%')
         and 0 < (select count(*)
                    from tdvadm.t_glb_cliend cld
                   where cld.glb_cliente_cgccpfcodigo = c.glb_cliente_cgccpfcodigo)
         and c.glb_cliente_nacional = 'I';
      
      
      select count(*)
        into vExisteCliente
        from tdvadm.t_glb_cliente l
       where upper(l.glb_cliente_razaosocial) like ('%'|| upper(pRazaoSocial) || '%');
      
      
      if (vExisteCliente = 0) then
          pStatus  := 'W';
          pMessage := 'Não Foi encontrado nenhum Cliente contendo a Razão Social: ' || pRazaoSocial;
          return;
      end if;       
      
      pStatus  := Status_Normal;
      pMessage := Null;
    exception when others then
      pStatus  := Status_Erro;
      pMessage := 'Erro ao executar Pkg_Col_Coleta.Sp_Get_ClientePorRazaoSocial Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;
end Sp_Get_ClientePorRazaoEstr; 
 
/***********************************************************************************************
* Data..: 07/06/2016
* Autor.: Felipe Bispo
* Versão: 1.0 - Pega o Grupo Econômico do cliente através do CNPJ
************************************************************************************************/
Procedure Sp_Get_GrupoEconomico(pCnpj in varchar2,
                                pGrupoEconomico out varchar2,
                                pStatus out varchar2,
                                pMessage out varchar2)
as
vExiste integer := 0;
Begin
  Begin
    pGrupoEconomico := '0000';
    pStatus := Status_Normal;
    pMessage := 'OK';
    
    Select count(*)
      into vExiste
      from tdvadm.t_glb_cliente cl 
     where trim(cl.glb_cliente_cgccpfcodigo) = trim(pCnpj);
    
    if(vExiste > 0) then
        Select cle.glb_grupoeconomico_codigo
          into pGrupoEconomico
          from tdvadm.t_glb_cliente cle 
         where trim(cle.glb_cliente_cgccpfcodigo) = trim(pCnpj);
    end if;
    
  Exception when others then
    pStatus := Status_Erro;
    pMessage := 'Erro ao executar a Procedure Sp_Get_GrupoEconomico. Erro.: '|| sqlerrm;    
  end;
end Sp_Get_GrupoEconomico;

/***********************************************************************************************
* Data..: 08/06/2016
* Autor.: Felipe Bispo
* Versão: 1.0 - Retornar uma lista com os armazéns liberados para um determinado usuário
************************************************************************************************/
Procedure Sp_Get_ArmazemList(pUsuario   in  varchar2,
                             pAplicacao in  varchar2,
                             pCursor    out T_CURSOR,
                             pStatus    out varchar2,
                             pMessage   out varchar2)
as
Begin
  Begin
      --pAplicacao := 'Não utilizado ainda';
      pStatus := Status_Normal;
      pMessage := 'OK';

      open pCursor for
      Select am.arm_armazem_codigo,
             am.arm_armazem_descricao
        from tdvadm.t_arm_armazem am,
             tdvadm.t_usu_rotaAplUsu us
       where am.glb_rota_codigo            = us.glb_rota_codigo
         and trim(us.usu_aplicacao_codigo) = pAplicacao
         and trim(us.usu_usuario_codigo)   = pUsuario
          and am.arm_armazem_ativo  = 'S'
    order by am.arm_armazem_codigo;

/*      Select am.arm_armazem_codigo,
             am.arm_armazem_descricao
        from tdvadm.t_arm_armazem am,
             tdvadm.t_usu_usuario us
       where am.glb_rota_codigo = us.glb_rota_codigo
         and (trim(us.usu_usuario_login)  = pUsuario or trim(us.usu_usuario_codigo) = pUsuario)
    order by am.arm_armazem_codigo;
*/    
  Exception when others then
      pStatus := Status_Erro;
      pMessage := 'Erro ao executar a Procedure Sp_Get_ArmazemList. Erro: ' || sqlerrm;
  end;
End Sp_Get_ArmazemList;

/***********************************************************************************************
* Data..: 17/02/2016
* Autor.: Felipe Bispo
* Versão: 1.0 - Deleta os parceiros da coleta que não sejam:
* - CD - Destinatário
* - CR - Remetente
* - CS - Pagador
************************************************************************************************/
Procedure Sp_Del_ParceiroColeta(pNCompra        in  varchar2,
                                pCiclo          in  varchar2,
                                pTpParceiro     in  varchar2,
                                pStatus         out varchar2,
                                pMessage        out varchar2)as                              
  vExisteParceiro integer;
  begin
    begin 

      Select count(*)
        into vExisteParceiro
        from tdvadm.t_arm_coletaparceiro pa
       where pa.arm_coleta_ncompra     = pNCompra
         and pa.arm_coleta_ciclo       = pCiclo
         and pa.arm_coletatppar_codigo = pTpParceiro
         and pa.arm_coletatppar_codigo not in('CD','CR','CS');
         
      if(vExisteParceiro = 0) then
          pStatus  := 'W';
          pMessage := 'O parceiro da coleta não existe, ou não pode ser deletado.';
                         
      else
          delete
            from tdvadm.t_arm_coletaparceiro pa
           where pa.arm_coleta_ncompra     = pNCompra
             and pa.arm_coleta_ciclo       = pCiclo
             and pa.arm_coletatppar_codigo = pTpParceiro;
          commit;
      end if;      
      pStatus  := Status_Normal;
      pMessage := 'O Parceiro foi deletado com sucesso';
    exception when others then
      pStatus  := Status_Erro;
      pMessage := 'Erro ao executar Pkg_Col_Coleta.Sp_Del_ParceiroColeta Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;
end Sp_Del_ParceiroColeta;  

/***********************************************************************************************
* Data..: 25/02/2016
* Autor.: Felipe Bispo
* Versão: 1.1 - Verifica se a coleta é de importação
* Regra: Se a coleta for da vale Verifica se o cnpj do remetente ou destinatario esta na tabela 
* T_XML_CLIENTELIB com a flag porto ou aeroporto.
* Se a coleta não for da vale verifica na tabela T_GLB_CLIENTE o campo ramo atividade tem que estar
* com o codigo 50 aquaviario

************************************************************************************************/
Procedure Sp_Col_verificaColetaImport(PNCOMPRA        IN  VARCHAR2,
                                      PCICLO          IN  VARCHAR2,
                                      pFlagImportacao out varchar2,
                                      pStatus         out varchar2,
                                      pMessage        out varchar2) as

VCOLETAASN NUMBER;
VGRUPOECONOMICO INTEGER;
BEGIN
    Begin
      
      begin
        SELECT T.GLB_GRUPOECONOMICO_CODIGO
        INTO VGRUPOECONOMICO       
        FROM TDVADM.T_ARM_COLETA L,
             TDVADM.T_GLB_CLIENTE T
        WHERE L.ARM_COLETA_NCOMPRA = PNCOMPRA
        AND   L.ARM_COLETA_CICLO   = PCICLO
        AND   L.ARM_COLETA_CNPJPAGADORFERETE = T.GLB_CLIENTE_CGCCPFCODIGO;
      exception when no_data_found then
        VGRUPOECONOMICO := 0000;
      end;
      
      pFlagImportacao := 'N';
      SELECT COUNT(*)
        INTO VCOLETAASN
        FROM TDVADM.T_ARM_COLETA CO
       WHERE CO.ARM_COLETA_NCOMPRA = PNCOMPRA
         AND CO.ARM_COLETA_CICLO   = PCICLO;
      
      IF(VCOLETAASN = 0) THEN
          pFlagImportacao := 'N';
          RETURN;
      ELSE      
        IF(VGRUPOECONOMICO = GrupoEconomicoVALE) then
             SELECT COUNT(*)
              INTO VCOLETAASN          
              FROM T_ARM_COLETA CO 
             WHERE CO.ARM_COLETA_NCOMPRA = PNCOMPRA
               AND CO.ARM_COLETA_CICLO   = PCICLO
               AND EXISTS (SELECT 1
                             FROM T_XML_CLIENTELIB L
                            WHERE L.GLB_CLIENTE_CGCCPFCODIGO = CO.GLB_CLIENTE_CGCCPFCODIGOCOLETA
                              AND (L.XML_CLIENTELIB_FLAGPORTO = 'S' OR L.XML_CLIENTELIB_FLAGAEROPORTO = 'S'));                     
                              
            IF(VCOLETAASN > 0)THEN
                pFlagImportacao := 'I';
            END IF; 

            SELECT COUNT(*)
              INTO VCOLETAASN          
              FROM TDVADM.T_ARM_COLETA CO 
             WHERE CO.ARM_COLETA_NCOMPRA = PNCOMPRA
               AND CO.ARM_COLETA_CICLO   = PCICLO
               AND EXISTS (SELECT 1
                             FROM TDVADM.T_XML_CLIENTELIB L
                            WHERE L.GLB_CLIENTE_CGCCPFCODIGO = CO.GLB_CLIENTE_CGCCPFCODIGOENTREG
                              AND (L.XML_CLIENTELIB_FLAGPORTO = 'S' OR L.XML_CLIENTELIB_FLAGAEROPORTO = 'S'));                     

            IF(VCOLETAASN > 0)THEN
                pFlagImportacao := 'E';
            END IF;
         ELSE
           SELECT COUNT(*)
           INTO VCOLETAASN
           FROM TDVADM.T_ARM_COLETA CO,
                TDVADM.T_GLB_CLIENTE T
           WHERE CO.ARM_COLETA_NCOMPRA = PNCOMPRA
           AND   CO.ARM_COLETA_CICLO   = PCICLO
           AND   CO.GLB_CLIENTE_CGCCPFCODIGOCOLETA = T.GLB_CLIENTE_CGCCPFCODIGO
           AND   T.GLB_RAMOATIVIDADE_CODIGO = '50';
           
           IF(VCOLETAASN > 0)THEN
              pFlagImportacao := 'I';
           END IF; 
           
           SELECT COUNT(*)
           INTO VCOLETAASN
           FROM TDVADM.T_ARM_COLETA CO,
                TDVADM.T_GLB_CLIENTE T
           WHERE CO.ARM_COLETA_NCOMPRA = PNCOMPRA
           AND   CO.ARM_COLETA_CICLO   = PCICLO
           AND   CO.GLB_CLIENTE_CGCCPFCODIGOENTREG = T.GLB_CLIENTE_CGCCPFCODIGO
           AND   T.GLB_RAMOATIVIDADE_CODIGO = '50';
           
           IF(VCOLETAASN > 0)THEN
                pFlagImportacao := 'E';
           END IF;
         END IF;        
      END IF;
      pStatus  := 'N';
      pMessage := 'Procedure executada com sucesso!';
    Exception when Others then
       pStatus  := 'W';
       pMessage := 'Erro ao verificar se a Coleta é importação';
    end;
END Sp_Col_verificaColetaImport;

  /*********************************************************************************************
  * Data..: 22/12/2014
  * Autor.: Fabiano Góes
  * Versão: 1.1 - Implementação VLI
  **********************************************************************************************/
  Function Fn_Col_AguardarAutorizacao(pColeta t_arm_coleta.arm_coleta_ncompra%type,
                                      pCiclo  t_arm_coleta.arm_coleta_ciclo%type)
    return Boolean
  as
    vAguardar Boolean := False;
  begin
    /*********************************************************************************
     * Criar uma Function separada para cada Regra de Aguardar Autorização
     *       De inicio criar a regra VLI, mas conforme for aparecer regras master
     *       em Function separada
     * vAguardar := Fn_VLI_AguardarOuEfetivar( pColeta, pCiclo ) or
     *              Fn_AMT_AguardaOuEfetivaEX( pColeta, pCiclo ) or
     *              Fn_Col_AguardarAutorizacaoOutras( pColeta, pCiclo );
     *********************************************************************************/
     vAguardar := Fn_VLI_AguardaOuEfetiva( pColeta, pCiclo ) or
                  Fn_ALC_AguardaOuEfetiva( pColeta, pCiclo ) or
                  Fn_AMT_AguardaOuEfetivaEX( pColeta, pCiclo ) or 
                  Fn_ALB_AguardaOuEfetiva (pColeta, pCiclo) or
                  Fn_SUZ_AguardaOuEfetiva (pColeta, pCiclo) or
                  Fn_RAI_AguardaOuEfetiva (pColeta, pCiclo) or 
                  Fn_USI_AguardaOuEfetiva (pColeta, pCiclo); -- Seta a Coleta como Expressa Aguardando ou autorizada direto
     return vAguardar;
  end Fn_Col_AguardarAutorizacao;

  /*********************************************************************************************
  * Data..: 22/12/2014
  * Autor.: Fabiano Góes
  * Versão: 1.1 - Implementação VLI
  **********************************************************************************************/
  Procedure Sp_Set_ColetaAGAutorizacao(pColeta  in t_arm_coleta.arm_coleta_ncompra%type,
                                       pCiclo   in t_arm_coleta.arm_coleta_ciclo%type,
                                       pStatus  out varchar2,
                                       pMessage out varchar2)
  as
  begin
    begin

      ---------------------------------------------------------------------------------
      -- Seto a Coleta com Ocorrencia 65=Coleta Aguardando Autorização
      -- Para tirar a Coleta do fluxo do Armazem até que seja autorizada
      -- Por um usuário com Permissão.
      ---------------------------------------------------------------------------------
      -- TODO: add usuario alterou no UPDATE
      update t_arm_coleta c
         set c.arm_coletaocor_codigo = '65'
       where c.arm_coleta_ncompra = pColeta
         and c.arm_coleta_ciclo   = pCiclo;
      commit;

      pStatus  := Status_normal;
      pMessage := 'OK';
    exception when others then
      pStatus  := Status_Erro;
      pMessage := sqlerrm||' - '||dbms_utility.format_error_backtrace;
    end;
  end Sp_Set_ColetaAGAutorizacao;

  /*********************************************************************************************
  * Data..: 20/10/2015
  * Autor.: Diego
  * Versão:
  * > executada após autorizar
  **********************************************************************************************/
  Procedure Sp_Pos_Autorizar(pColetaRowType in t_Arm_Coleta%RowType,
                             pStatus out Char,
                             pMessage out Varchar2)
  As
  vFlatAutorizar Char(1);
  Begin
    
      ----------------------------------------------------------------------------------------------------------------------------------
      -- 18/04/2016 - Fabiano / Diego
      -- Regra: Excluir criação de pedido/item quando não existe no arquivo HTML recebido
      -- Email anexo na issue: #659 - http://192.168.9.207/redmine/issues/659
      -- Conforme acordado agora pela manhã com o Márcio, 
      -- excluiremos a regra abaixo para a aprovação automática de coletas quando não recebermos o HTML com o pedido/item.
      ----------------------------------------------------------------------------------------------------------------------------------  
      --if(FN_AMT_IsColetaAMT(pColetaRowType) = true) and
      --  (Not Pkg_Edi_Precoleta.Fn_Existe_PreColeta(pColetaRowType.Arm_Coleta_Pedido)) then
      --    Pkg_Edi_Precoleta.Sp_InsertPreColetaPorColeta(pColetaRowType, pStatus, pMessage);
      --end if;

      begin
        vFlatAutorizar := Case Nvl(pColetaRowType.Arm_Coleta_Flagaut,'NULL')
                            when 'E' then 'E'
                            else 'A'
                          End;
        Update t_Arm_Coleta c
           set c.arm_coleta_flagaut = vFlatAutorizar
         where c.arm_coleta_ncompra = pColetaRowType.Arm_Coleta_Ncompra
           and c.arm_coleta_ciclo   = pColetaRowType.Arm_Coleta_Ciclo;
        Commit;
        
        pStatus  := Status_normal;
        pMessage := 'OK';
      exception when others then
        pStatus  := Status_Erro;
        pMessage := sqlerrm||' - '||dbms_utility.format_error_backtrace;        
      end;

  End Sp_Pos_Autorizar;

  /*********************************************************************************************
  * Data..: 22/12/2014
  * Autor.: Fabiano Góes
  * Versão: 1.1 - Implementação VLI
  **********************************************************************************************/
  Procedure Sp_Set_AutorizaColeta(pColeta   in t_arm_coleta.arm_coleta_ncompra%type,
                                  pCiclo    in t_arm_coleta.arm_coleta_ciclo%type,
                                  pUsuario  in t_arm_coleta.usu_usuario_codigoautoriza%type, -- usuário que está autorizando a Coleta
                                  pIsExpresso in Char,
                                  pXmlOut   out varchar2,
                                  pStatus   out varchar2,
                                  pMessage  out varchar2)
  as
    vColetaExist          integer;
    vEmailOrigem          varchar2(1000) := 'coletaweb@dellavolpe.com.br';
    vUsuarioAutoriza      tdvadm.t_usu_usuario.usu_usuario_nome%type;
    vDataAutoriza         tdvadm.t_arm_coleta.arm_coleta_dtautoriza%type;
    vNomeAutorizou        tdvadm.t_usu_usuario.usu_usuario_nome%type;
    vDataProg             tdvadm.t_arm_coleta.arm_coleta_dtprogramacao%Type;
    vHoraProg             tdvadm.t_arm_coleta.arm_coleta_hrprogramacao%Type;
    vNomeAutorizando      tdvadm.t_usu_usuario.usu_usuario_nome%type;
    vEmailUsuarioAutoriza varchar2(2000);
    vEmailsCopia          varchar2(2000);
    vAssuntoEmail         varchar2(2000);
    vMensagem             varchar2(4000);
    vColetaRowType        t_arm_coleta%RowType;
    vRestringirAutorizar  boolean := false;
    vIsEneva              integer;
  begin
    begin
/*      dbms_output.put_line(pColeta||' - '||pCiclo||' - '||pUsuario);
      insert into t_glb_sql(glb_sql_instrucao,glb_sql_dtgravacao,glb_sql_programa)
      values('usuario = '||pUsuario||' - '||pColeta||' - '||pCiclo, sysdate, 'AutorizaColeta');
      commit;*/

      vColetaRowType := Fn_Get_ColetaRowType(pColeta, pCiclo);
      
      -- pegando a hora da programação da coleta
      vHoraProg := vColetaRowType.arm_coleta_hrprogramacao;

      ------------------------------------------------------------------------------
      -- Regra para saber se a coleta já está autorizada
      ------------------------------------------------------------------------------
      begin
        select u.usu_usuario_nome, c.arm_coleta_dtautoriza, u.usu_usuario_nome, c.arm_coleta_dtprogramacao
        into vUsuarioAutoriza, vDataAutoriza, vNomeAutorizou, vDataProg
        from t_arm_coleta c,
             t_usu_usuario u
        where c.usu_usuario_codigo_cad = u.usu_usuario_codigo
          and c.arm_coleta_ncompra    = pColeta
          and c.arm_coleta_ciclo      = pCiclo
          and c.arm_coletaocor_codigo is null
          and c.arm_coleta_dtautoriza is not null
          and c.usu_usuario_codigoautoriza is not null;
      exception when no_data_found then
        vUsuarioAutoriza := null;
        Select co.arm_coleta_dtprogramacao
          into vDataProg
          from t_arm_coleta co
          where co.arm_coleta_ncompra = pColeta
            and co.arm_coleta_ciclo   = pCiclo;
      end;

      begin
        select u.usu_usuario_nome
        into vNomeAutorizando
        from t_usu_usuario u
        where lower(u.usu_usuario_codigo) = lower(rpad(pUsuario,10, ' '))
         and nvl(u.usu_usuario_ativo,'S') = 'S';
      exception when no_data_found then
        vNomeAutorizando := null;
      end;

      -- maneira de usar quando tiver mais de uma function de restrição:
      -- vRestringirAutorizar := Fn_VLI_RestringeAutoriza( vColetaRowType ) or Fn_VALR_RestringeAutoriza( vColetaRowType ) or Fn_AMT_RestringeAutoriza( vColetaRowType );
      vRestringirAutorizar := Fn_VLI_RestringeAutoriza( vColetaRowType, pUsuario ) or 
                              Fn_ALC_RestringeAutoriza( vColetaRowType, pUsuario ) or 
                              Fn_ALB_RestringeAutoriza( vColetaRowType, pUsuario ) or 
                              Fn_SUZ_RestringeAutoriza( vColetaRowType, pUsuario ) or 
                              Fn_RAI_RestringeAutoriza( vColetaRowType, pUsuario ) or
                              Fn_USI_RestringeAutoriza( vColetaRowType, pUsuario ) Or
                              Fn_VALE_RestringeAutoriza( vColetaRowType, pUsuario )or
                              Fn_VTE_RestringeAutoriza( vColetaRowType, pUsuario ) or
                              Fn_AGL_RestringeAutoriza( vColetaRowType, pUsuario ) or
                              Fn_AGN_RestringeAutoriza( vColetaRowType, pUsuario ) or
                              Fn_PET_RestringeAutoriza( vColetaRowType, pUsuario ) or
                              Fn_PRA_RestringeAutoriza( vColetaRowType, pUsuario ) or
                              Fn_PAR_RestringeAutoriza( vColetaRowType, pUsuario ) or
                              Fn_NOU_RestringeAutoriza( vColetaRowType, pUsuario ) or
                              Fn_ENE_RestringeAutoriza( vColetaRowType, pUsuario ) or
                              Fn_CBA_RestringeAutoriza( vColetaRowType, pUsuario) or
                              Fn_CAR_RestringeAutoriza( vColetaRowType, pUsuario) ;
      if vRestringirAutorizar = true then
         pStatus  := 'W';
         pMessage := 'Usuario: ['||pUsuario||' - '||vNomeAutorizando||'] não tem permissão para autorizar a Coleta: ['||pColeta||' - '||pCiclo||']';
         pXmlOut  := '<coletaResponse>'||
                       '<coletaNumero>'||pColeta||'</coletaNumero>'||
                       '<coletaCiclo>' ||pCiclo ||'</coletaCiclo>'||
                       '<status>' ||pStatus||'</status>'||
                       '<message>'||pMessage||'</message>'||
                       '<usuario>'||
                         '<codigo>'||pUsuario||'</codigo>'||
                         '<nome></nome>'||
                       '</usuario>'||
                     '</coletaResponse>';
         return;
      end if;


      if vUsuarioAutoriza is not null then
         pStatus  := 'W';
         pMessage := 'Coleta['||pColeta||' - '||pCiclo||'] já Autorizada no Sistema em '||vDataAutoriza||', autorizada pelo Usuário: ['||pUsuario||' - '||vNomeAutorizou||']';
         pXmlOut  := '<coletaResponse>'||
                       '<coletaNumero>'||pColeta||'</coletaNumero>'||
                       '<coletaCiclo>' ||pCiclo ||'</coletaCiclo>'||
                       '<status>' ||pStatus||'</status>'||
                       '<message>'||pMessage||'</message>'||
                       '<usuario>'||
                         '<codigo>'||pUsuario||'</codigo>'||
                         '<nome></nome>'||
                       '</usuario>'||
                     '</coletaResponse>';
         return;
      end if;


      ------------------------------------------------------------------------------
      -- Permissão de autorização através de parametros t_usu_perfil
      -- aplicação  = jcoleta
      -- perfil = PERMITEAUTORIZAR
      ------------------------------------------------------------------------------
      --Sp_Get_Habiltar(pUsuario, null, NomeParametroAutorizar, vHabilitaAutorizar, pStatus, pMessage);
      --if vHabilitaAutorizar = 'N' then
      -- OBS: parametro CNPJ é opcional
      if Fn_Get_PodeAutorizarColeta(pUsuario, null) = false then
         pStatus  := 'W';
         pMessage := 'Usuario: ['||pUsuario||' - '||vNomeAutorizando||'] não tem permissão para autorizar a Coleta: ['||pColeta||' - '||pCiclo||']';
         pXmlOut  := '<coletaResponse>'||
                       '<coletaNumero>'||pColeta||'</coletaNumero>'||
                       '<coletaCiclo>' ||pCiclo ||'</coletaCiclo>'||
                       '<status>' ||pStatus||'</status>'||
                       '<message>'||pMessage||'</message>'||
                       '<usuario>'||
                         '<codigo>'||pUsuario||'</codigo>'||
                         '<nome></nome>'||
                       '</usuario>'||
                     '</coletaResponse>';
         return;
      end if;


      ------------------------------------------------------------------------------
      -- Regra para saber se a Coleta está aguardando Autorização
      ------------------------------------------------------------------------------
      select count(*)
      into vColetaExist
      from t_arm_coleta c
      where c.arm_coleta_ncompra    = pColeta
        and c.arm_coleta_ciclo      = pCiclo
        and c.arm_coletaocor_codigo = rpad('65',3,' '); -- 65=aguardando autorização

      if vColetaExist = 0 then
         pStatus  := 'W';
         --pMessage := 'Não Existe nenhuma coleta para ser autorizada com este numero.<br/>'||
         --            '<b>Coleta Numero.:</b> '||pColeta||' - '||pCiclo || '<br/><br/>';
         pMessage := 'Não Existe nenhuma coleta para ser autorizada com este numero: ['||pColeta||' - '||pCiclo||']';
         if pIsExpresso = 'S' then
             pMessage := 'Para transformar a Coleta para Emergencial acesse a aplicacao Pré Coleta e através pedido realize a ação. ' ||
                        pMessage;
         end if;
         pXmlOut  := '<coletaResponse>'||
                       '<coletaNumero>'||pColeta||'</coletaNumero>'||
                       '<coletaCiclo>' ||pCiclo ||'</coletaCiclo>'||
                       '<status>' ||pStatus||'</status>'||
                       '<message>'||pMessage||'</message>'||
                       '<usuario>'||
                         '<codigo>'||pUsuario||'</codigo>'||
                         '<nome></nome>'||
                       '</usuario>'||
                     '</coletaResponse>';
         return;
      end if;

      /**
        * Diego | Sirlano | Fabiano - 07/05/2015
        * Se Data de programacao for menor que a data de amanha Entra na regra reprogramando a data.
        * Ao entrar na regra verifica se passou do meio-dia,
        *     se sim reprograma a data para amanha, se nao para hoje(data da autorizacao).
        */
      /*      
      if trunc(vDataProg) < trunc(sysdate+1) then
           if to_char(sysdate, 'hh24:mi:ss') >= '12:00:00' then
               vDataProg := sysdate+1;
           else
               vDataProg := sysdate;
           end if;
      end if;
      */
      
      
      /*
       * Regra acima anulada, Dia 17/02/2016
       * Regra aplicada acima da Tarefa #553 (redmine)
       */
       -- Se a data da programação for Menor que a daqui 2 dias(depois de amanhã)
       /* 18-MAIO-2018 ALTERADO POR FELIPE SEDEVITIZ E GUSTAVO VOCATORE 
          Alteração: Verificado que a variavel vDataProg esta recebendo o valor 
          data de agora e atualiza uma coluna de data na coleta, porém a data na coleta é separada
          eu uma coluna de data e uma de hora, e essa de hora ficava com o primeiro valor selecionado pelo
          usuario
       */
       
       
    -- klayton em 11/02/2020, a pedido do CHaves, atravez do chamado 190772   
/*      if Fn_VALE_IsColetaVALE(vColetaRowType) = false and Fn_VLI_IsColetaVLI(vColetaRowType) = false and Fn_CBA_IsColetaCBA(vColetaRowType) = false then 
        if trunc(vDataProg) < trunc(sysdate+2) then
            -- Quando for autorizada antes das 12:00hs a Programação deve ser para o dia seguinte as 13:00hs.
            if sysdate < To_Date(trunc(sysdate)||' 12:00:00', 'dd/MM/yyyy hh24:mi:ss') then
                vDataProg := To_Date(trunc(sysdate+1), 'dd/MM/yyyy');
                vHoraProg := '13:00';
            -- Quando for autorizada após as 12:00hs a Programação deve ser para o dia seguinte mantendo a hora da Autorização.
            elsif sysdate > To_Date(trunc(sysdate)||' 12:00:00', 'dd/MM/yyyy hh24:mi:ss') then
                vDataProg := To_Date(trunc(sysdate+1)||' '||to_char(sysdate, 'hh24:mi:ss'), 'dd/MM/yyyy hh24:mi:ss');
                vHoraProg := TO_CHAR(SYSDATE, 'HH24:MI');
            end if;
        end if;
      end if;  */    
      
      
      -- se Eneva, o data de solicitação, continua a mesma
      if ( Fn_ENE_IsColetaENE(vColetaRowType) = true ) then
        
        vIsEneva := 1;
      
      else
        
        vIsEneva := 0;
        
      end if;  

      ------------------------------------------------------------------------------
      -- Se não entrou em nenhuma regra acima, executa a autorização
      ------------------------------------------------------------------------------
      update tdvadm.t_arm_coleta c
         set c.arm_coletaocor_codigo      = null,
             c.usu_usuario_codigoautoriza = pUsuario,
             c.arm_coleta_dtautoriza      = sysdate,
             c.arm_coleta_dtsolicitacao   = decode(vIsEneva, 0, trunc(sysdate)            , c.arm_coleta_dtsolicitacao),
             c.arm_coleta_hrsolicitacao   = decode(vIsEneva, 0, to_char(sysdate,'hh24:mi'), c.arm_coleta_hrsolicitacao),
             c.arm_coleta_dtprogramacao   = vDataProg,
             c.arm_coleta_hrprogramacao   = vHoraProg,
             c.usu_usuario_codalterou     = pUsuario,
             -- 
             c.glb_tpcarga_codigo         = Case pIsExpresso
                                              When 'S' Then 'EX'
                                              Else c.glb_tpcarga_codigo
                                            End,
             c.arm_coleta_prioridade      = Case pIsExpresso
                                              When 'S' Then 2
                                              Else c.arm_coleta_prioridade
                                            End,
             c.arm_coleta_tpcoleta        = Case pIsExpresso
                                              When 'S' Then 'E'
                                              Else c.arm_coleta_tpcoleta
                                            End --> arm_coleta_tpcoleta: Usado na Web (Considerar este, os outros utilizados nos outros sistemas como gercoleta, fifo..)
       where c.arm_coleta_ncompra = pColeta
         and c.arm_coleta_ciclo   = pCiclo;

      --Sp_Envia_Email(pColeta, pCiclo, TipoEmailColetaAutorizada, pStatus, pMessage);
      ---------------------------------------------------------------------------------------------------------
      -- EMAIL AUTORIZAÇÃO
      -- obtenho os emails do usuário e os envolvidos na coleta para copia
      -- Sp_Get_EmailColeta vai popular:
      -- ==> vEmailUsuarioAutoriza com o email do usuário que cadastrou a Coleta
      -- ==> vEmailsCopia com os emails do Armazem
      ---------------------------------------------------------------------------------------------------------
      vEmailUsuarioAutoriza := Fn_Get_EmailUsuario(pUsuario);
      vEmailsCopia          := Fn_Get_EmailsColeta(pColeta, pCiclo);
      --Sp_Get_EmailColeta(pColeta, pCiclo, vEmailUsuarioAutoriza, vEmailsCopia, pStatus, pMessage);

      if pIsExpresso = 'S' then
        vAssuntoEmail  := 'Coleta[ '||pColeta||' - '||pCiclo||' ] AUTORIZADA'|| case
                                                                                  when Fn_AMT_IsColetaAMT(vColetaRowType) = true then ' como Emergencial'
                                                                                  else ' como Expressa'
                                                                                end;
      else
        vAssuntoEmail  := 'Coleta[ '||pColeta||' - '||pCiclo||' ] AUTORIZADA';
      end if;

      vMensagem      := '<h3>'||vAssuntoEmail||'</h3>'||'<BR/>'||vMensagem || Fn_Get_MessageInfoColeta(pColeta, pCiclo, false); -- false=Não está aguardando autorização

      vEmailsCopia := case
                        when length(vEmailsCopia) > 5 then vEmailsCopia -- ||';fgoes@dellavolpe.com.br;ddamaceno@dellavolpe.com.br'
                        --else 'fgoes@dellavolpe.com.br;ddamaceno@dellavolpe.com.br'
                      end;

      begin
        wservice.pkg_glb_email.SP_ENVIAEMAIL(vAssuntoEmail,
                                             vMensagem,
                                             vEmailOrigem,
                                             vEmailUsuarioAutoriza,
                                             vEmailsCopia);
      exception when others then
        vAssuntoEmail := 'ERRO ao tentar enviar Email da Coleta: '||pColeta||' - '||pCiclo;
        vMensagem     := 'ERRO ao tentar enviar Email da Coleta: '||pColeta||' - '||pCiclo||
                         ' - Usuario: '||pUsuario||' - '||sqlerrm;
        wservice.pkg_glb_email.SP_ENVIAEMAIL(vAssuntoEmail,
                                             vMensagem,
                                             vEmailOrigem
                                             --'fgoes@dellavolpe.com.br',
                                             --'ddamaceno@dellavolpe.com.br'
                                            );
      end;

      pStatus   := Status_normal;
      pMessage  := 'Coleta: ['||pColeta||' - '||pCiclo||'] Autorizada/Efetivada com sucesso. ';
      pMessage  := pMessage || 'E-mails enviados para: '|| vEmailUsuarioAutoriza||';'||vEmailsCopia||'<br/>';

      pXmlOut   := '<coletaResponse>'||
                     '<coletaNumero>'||pColeta||'</coletaNumero>'||
                     '<coletaCiclo>' ||pCiclo ||'</coletaCiclo>'||
                     '<status>' ||pStatus||'</status>'||
                     '<message>'||pMessage||'</message>'||
                     '<usuario>'||
                       '<codigo>'||pUsuario||'</codigo>'||
                       '<nome></nome>'||
                     '</usuario>'||
                   '</coletaResponse>';


      pStatus   := Status_normal;
      commit;

      Sp_Pos_Autorizar(vColetaRowType, pStatus, pMessage);

    exception when others then
      rollback;
      pStatus  := Status_Erro;
      pMessage := sqlerrm||' - '||dbms_utility.format_error_backtrace;
      pXmlOut  := '<coletaResponse>'||
                   '<coletaNumero>'||pColeta||'</coletaNumero>'||
                   '<coletaCiclo>' ||pCiclo ||'</coletaCiclo>'||
                   '<status>' ||pStatus||'</status>'||
                   '<message>'||pMessage||'</message>'||
                   '<usuario>'||
                     '<codigo>'||pUsuario||'</codigo>'||
                     '<nome></nome>'||
                   '</usuario>'||
                  '</coletaResponse>';
    end;
  end Sp_Set_AutorizaColeta;

  /*********************************************************************************************
  * Data..: 26/12/2014
  * Autor.: Fabiano Góes
  * Versão: 1.1 - Implementação VLI
  * Essa function é usada apenas para habilitar a Coleta Nova no Menu Extranet
  **********************************************************************************************/
  Function Fn_PermiteColetaNova(pUsuario coleta.usuario_web.dc_usuario%type)
    return char
  as
    vPermitir char(1)  := 'S';
    vDesativar char(1) := 'N';
  begin
    --
    begin

      SELECT nvl(p.USU_PERFIL_PARAT,'N')
      into vDesativar
      FROM T_USU_PERFIL P
      WHERE p.usu_aplicacao_codigo = 'jcoleta'
      and p.usu_perfil_codigo = 'DESATIVAR';

      IF vDesativar = 'S' THEN
        vPermitir := 'N';
        return vPermitir;
      end if;

        select case count(*)
                 when 1 then 'S'
                 else 'N'
               end
          into vPermitir
          from coleta.usuario_web l,
               tdvadm.t_usu_usuario uu
         where l.usu_usuario_codigo = uu.usu_usuario_codigo
           and lower(trim(l.dc_usuario)) = lower(trim(pUsuario))
           and rownum = 1;

    exception when others then
      vPermitir := 'N';
    end;

    return nvl(vPermitir, 'N');
  end Fn_PermiteColetaNova;

  /*********************************************************************************************
  * Data..: 29/12/2014
  * Autor.: Fabiano Góes
  * Versão: 1.1 - Implementação VLI
  * Lista Todas as Coletas Geradas pelo Sistema Novo(arm_coletaorigem_cod = 4),
  *                        Criadas no periodo(limitado no maximo 15 dias) passado por parametro
  * pXmlFilter: Xml com dados para a Consulta filtrada de Coletas.
  * Exemplo do Xml:
  * <filtro>
  *   <coleta></coleta>
  *   <pedido></pedido>
  *   <dataIni>20/08/2015</dataIni>
  *   <dataFim>3/09/2015</dataFim>
  *   <cidadeOrigem></cidadeOrigem>
  *   <cidadeDestino></cidadeDestino>
  *   <remetente></remetente>
  *   <destinatario></destinatario>
  *   <tipoCarga></tipoCarga>
  *   <tipoVeiculo></tipoVeiculo>
  *   <usuario>sdrumond</usuario>
  *   <cnpjLogado>61139432000172</cnpjLogado>
  *   <origem></origem>
  *   <ocorrencia>66</ocorrencia>
  * </filtro>
  *
  * 07/04/2016 - Implementei Filtro por Nota e Conhecimento
  *              Adicionei Coletas geradas pelo FIFO
  **********************************************************************************************/
  Procedure Sp_Get_ConsultaColetas(pXmlFilter in varchar2,
                                   pCursor    out T_CURSOR,
                                   pStatus    out varchar2,
                                   pMessage   out varchar2)
  as
    vDataIni date;
    vDataFim date;
    vUsuario varchar2(10);
    vColeta  varchar2(6);
    vPedido  varchar2(30);
    vCidadeOrigem varchar2(100);
    vCidadeDestino varchar2(100);
    vRemetente varchar2(100);
    vDestinatario varchar2(100);
    vTipoCarga varchar2(30);
    vTipoVeiculo varchar2(30);
--    vlimiteDias integer := 31;
    vOrigem t_Arm_Coletaorigem.Arm_Coletaorigem_Cod%Type;
    vOcorrencia Varchar(2);

    vCnpjLogado Varchar2(20);
    vNota T_arm_Nota.Arm_Nota_Numero%Type;
    vCTRC t_Con_Conhecimento.Con_Conhecimento_Codigo%Type;
  begin
    begin

      --insert into t_glb_sql(glb_sql_instrucao,glb_sql_dtgravacao,glb_sql_programa)
      --values(pXmlFilter,sysdate,'consulta_coleta');
      --commit;

      SELECT nvl(extractValue(VALUE(TAB), '/filtro/dataIni'),sysdate),
             nvl(extractValue(VALUE(TAB), '/filtro/dataFim'), sysdate),
             substr(extractValue(VALUE(TAB), '/filtro/usuario'),0,10),
             substr(extractValue(VALUE(TAB), '/filtro/coleta'),0,6),
             extractValue(VALUE(TAB), '/filtro/cidadeOrigem'),
             extractValue(VALUE(TAB), '/filtro/cidadeDestino'),
             extractValue(VALUE(TAB), '/filtro/remetente'),
             extractValue(VALUE(TAB), '/filtro/destinatario'),
             extractValue(VALUE(TAB), '/filtro/tipoCarga'),
             extractValue(VALUE(TAB), '/filtro/tipoVeiculo'),
             extractValue(VALUE(TAB), '/filtro/pedido'),
             extractValue(VALUE(TAB), '/filtro/origem'),
             trim(extractValue(VALUE(TAB), '/filtro/ocorrencia')),
             extractValue(VALUE(TAB), '/filtro/cnpjLogado'),
             extractValue(VALUE(TAB), '/filtro/nota'),
             extractValue(VALUE(TAB), '/filtro/ctrc')
        into vDataIni,
             vDataFim,
             vUsuario,
             vColeta,
             vCidadeOrigem,
             vCidadeDestino,
             vRemetente,
             vDestinatario,
             vTipoCarga,
             vTipoVeiculo,
             vPedido,
             vOrigem,
             vOcorrencia,
             vCnpjLogado,
             vNota,
             vCTRC
        FROM TABle(XMLSequence(extract(xmltype.createXML(pXmlFilter),'/filtro'))) TAB;

      --insert into t_glb_sql(glb_sql_instrucao,glb_sql_dtgravacao,glb_sql_programa)
      --values(vDataIni||'-'||vDataFim||'-'||vUsuario||'-'||vColeta||'-'||vCidadeOrigem||'-'||
      --       vCidadeDestino||'-'||vRemetente||'-'||vDestinatario||'-'||vTipoCarga||'-'||
      --       vTipoVeiculo, sysdate,'consulta');
      --commit;

      dbms_output.put_line('posso precisar do usuário: '||VUsuario);
      vDataIni := to_date(nvl(vDataIni, sysdate-30), 'DD/MM/YYYY');
      vDataFim := to_date(nvl(vDataFim, sysdate), 'DD/MM/YYYY');

      -- limitar o periodo de consulta em 15 dias
/*      if tdvadm.fn_calcula_tempodecorrido(vDataIni, vDataFim, 'DR') > vlimiteDias then
         --vDataIni := trunc(sysdate-vlimiteDias);
         pStatus := 'E';
         pMessage := 'Não é permitido Periodo muito grande para consulta. No máximo ' || vlimiteDias || ' dias';
         Open pCursor For Select sysdate from dual;
         return;
      end if;*/

      -- TODO só pra teste, deve ser tirado
      --vDataIni := to_date(sysdate-30, 'DD/MM/YYYY');
      --vDataFim := to_date(sysdate, 'DD/MM/YYYY');

      open pCursor for
      select Distinct 
             co.arm_coleta_ncompra,
             co.arm_coleta_ciclo,
             co.arm_coleta_dtgravacao,
             co.arm_armazem_codigo,
             co.arm_coleta_pedido,
             arm.arm_armazem_descricao,
             endRem.Glb_Cliend_Cidade cidade_origem,
             endDes.Glb_Cliend_Cidade cidade_destino,
             cliRem.Glb_Cliente_Cgccpfcodigo remetente_cnpj,
             cliRem.Glb_Cliente_Razaosocial remetente_razao,
             cliRem.Glb_Grupoeconomico_Codigo remetente_grupoEconom_Cod,
             cliDes.Glb_Cliente_Cgccpfcodigo destinatario_cnpj,
             cliDes.Glb_Cliente_Razaosocial destinatario_razao,
             cliDes.Glb_Grupoeconomico_Codigo destinatario_grupoEconom_Cod,
             'TODO' mercadoria,
             Case nvl(co.arm_coleta_peso,0)
               When 0 then (select sum(item.arm_coleta_ncompra_peso)
                               from t_arm_coletancompra item
                               where item.arm_coletancompra = co.arm_coleta_ncompra
                                 and item.arm_coleta_ciclo  = co.arm_coleta_ciclo)
               else co.arm_coleta_peso
             End peso,
             --co.arm_coleta_peso peso,
             carga.fcf_tpcarga_codigo,
             carga.fcf_tpcargadescricao,
             veiculo.fcf_tpveiculo_codigo,
             veiculo.fcf_tpveiculo_descricao,
             ocor.arm_coletaocor_codigo,
             ocor.arm_coletaocor_descricao,
             co.arm_coleta_dtautoriza,
             co.arm_coleta_flagquimico,

             -- Origem
             ori.arm_coletaorigem_cod,
             ori.arm_coletaorigem_descmenor,

             -- Coleta
             co.arm_coleta_tpcompra,
             --substr(nvl(co.glb_tpcarga_codigo, 'C'),1,1) arm_coleta_tpcoleta,
             co.arm_coleta_tpcoleta,
             co.arm_coleta_dtprogramacao,
             co.arm_coleta_hrprogramacao,
             co.arm_coleta_vlmercadoria,
             co.arm_coleta_obs,
             co.usu_usuario_codigoautoriza,

             -- contato
             co.arm_coleta_solicitante, -- contato/nome
             co.usu_usuario_codigo_cad, -- contato/login (solicitante)
             co.arm_coleta_emailsolic,  -- contato/email
             co.arm_coleta_fonesolic || ' / ' || u.usu_usuario_celular tel_celular, -- contato/telefone
                                        -- contato/cnpj
             usuAutorizou.Usu_Usuario_Nome usuario_autorizou_nome,
             usuAutorizou.Usu_Usuario_Email usuario_autorizou_email,
             co.arm_coleta_entcoleta,
             co.arm_coleta_pagadorfrete,
             CO.ARM_COLETA_FLAGAUT
      from tdvadm.t_arm_coleta co,
           tdvadm.t_glb_cliend  endRem,
           tdvadm.t_glb_cliente cliRem,
           tdvadm.t_glb_cliend  endDes,
           tdvadm.t_glb_cliente cliDes,
           --t_glb_mercadoria merc
           tdvadm.t_fcf_tpcarga carga,
           tdvadm.t_fcf_tpveiculo veiculo,
           tdvadm.t_arm_coletaocor ocor,
           tdvadm.t_arm_armazem arm,
           tdvadm.t_usu_usuario u,
           tdvadm.t_arm_coletaorigem ori,
           tdvadm.t_usu_usuario usuAutorizou,
           tdvadm.t_arm_nota n,
           tdvadm.t_con_conhecimento ctrc
      where (
             trunc(co.arm_coleta_dtgravacao) between vDataIni and vDataFim 
             -- Diego: Comentei porque alguns clientes estavam reclamando que existia coleta fora do range do periodo, 
             --          existiam coletas com diferenca entre 10 dias da data de solicitação para a data de gravação.
             --Or 
             --trunc(co.arm_coleta_dtsolicitacao) between vDataIni and vDataFim
            )

      and co.arm_coletaorigem_cod In(4,2,6) -- 4=Coleta Java, 2=Quadrem, 6=Fifo

      -----------------------------------------------------------------------------------------------
      -- Filtra as Coletas por Grupo economico do CNPJ logado, Grupo do Destino ou Grupo de Origem ou  Grupo Solicitante
      and (
           -- Filtra por grupo economico
           (Select case sol.glb_grupoeconomico_codigo
                       when '9999' then 'NULL'
                       else sol.glb_grupoeconomico_codigo
                    end
              from t_glb_cliente sol
              where trim(sol.glb_cliente_cgccpfcodigo) = trim(vCnpjLogado)) In ( (Select dest.glb_grupoeconomico_codigo
                                                                                    from t_glb_cliente dest
                                                                                    where trim(dest.glb_cliente_cgccpfcodigo) = trim(co.glb_cliente_cgccpfcodigoentreg)) ,
                                                                                  (Select dest.glb_grupoeconomico_codigo
                                                                                    from t_glb_cliente dest
                                                                                    where trim(dest.glb_cliente_cgccpfcodigo) = trim(co.glb_cliente_cgccpfcodigocoleta)) ,
                                                                                  (Select dest.glb_grupoeconomico_codigo
                                                                                    from t_glb_cliente dest
                                                                                    where trim(dest.glb_cliente_cgccpfcodigo) = trim(co.arm_coleta_cnpjsolicitante)) )
             -- libera coletas do mesmo armazem do usuario                                                                                    
             or co.arm_armazem_codigo IN ( select a.arm_armazem_codigo
                                              from tdvadm.t_usu_usuario u,
                                                   tdvadm.t_arm_armazem a
                                              where u.glb_rota_codigo = a.glb_rota_codigo
                                                and u.usu_usuario_codigo = vUsuario )  
                                                
             -- liberados todos para os usuario
             or vUsuario In('sdrumond','gmachado','jdonega', 'bbernardo', 'cferreira', 'emesilva')
             -- liberados somente para o usuario de cadastro
             or vUsuario = co.usu_usuario_codigo_cad
             -- liberados por cnpj envolvido
             or trim(vCnpjLogado) In(trim(co.arm_coleta_cnpjsolicitante), trim(co.glb_cliente_cgccpfcodigoentreg), trim(co.glb_cliente_cgccpfcodigocoleta))
           )
      ----------------------------------------------------------------------------------------------

      and co.glb_tpcliend_codigocoleta      = endRem.Glb_Tpcliend_Codigo
      and co.glb_cliente_cgccpfcodigocoleta = endRem.Glb_Cliente_Cgccpfcodigo
      and endRem.Glb_Cliente_Cgccpfcodigo   = cliRem.Glb_Cliente_Cgccpfcodigo

      and co.glb_tpcliend_codigoentrega     = endDes.Glb_Tpcliend_Codigo
      and co.glb_cliente_cgccpfcodigoentreg = endDes.Glb_Cliente_Cgccpfcodigo
      and endDes.Glb_Cliente_Cgccpfcodigo   = cliDes.Glb_Cliente_Cgccpfcodigo

      -- tpcarga não é campo obrigatório no Front-end, então pode ser ou não
      and nvl(co.fcf_tpcarga_codigo,'00 ')    = carga.fcf_tpcarga_codigo

      -- tpveiculo não é campo obrigatório no Front-end, então pode ser ou não
      and nvl(co.fcf_tpveiculo_codigo,'0  ')  = veiculo.fcf_tpveiculo_codigo

      -- ocorrencia pode ter ou não
      and co.arm_coletaocor_codigo = ocor.arm_coletaocor_codigo (+)
      and co.arm_armazem_codigo    = arm.arm_armazem_codigo

      and co.usu_usuario_codigo_cad = u.usu_usuario_codigo(+)

      -- com ou sem usuário que autorizou
      and co.usu_usuario_codigoautoriza = usuAutorizou.Usu_Usuario_Codigo(+)

      -- como nem todos os sistemas estão gravando a origem colocamos OUTER JOIN
      and co.arm_coletaorigem_cod = ori.arm_coletaorigem_cod(+)

      and co.arm_coleta_ncompra = n.arm_coleta_ncompra(+)
      and co.arm_coleta_ciclo   = n.arm_coleta_ciclo(+)
      
      and co.arm_coleta_ncompra = ctrc.arm_coleta_ncompra(+)
      and co.arm_coleta_ciclo   = ctrc.arm_coleta_ciclo(+)
      
      -- Filtro enviado pelo usuário
      and co.arm_coleta_ncompra like '%'||vColeta||'%'
      and trim(nvl(co.arm_coleta_pedido,'x'))  like '%'||vPedido||'%'
      and upper(endRem.Glb_Cliend_Cidade) like '%'||upper(vCidadeOrigem)||'%'
      and upper(endDes.Glb_Cliend_Cidade) like '%'||upper(vCidadeDestino)||'%'
      and upper(cliRem.Glb_Cliente_Razaosocial) like '%'||upper(vRemetente)||'%'
      and upper(cliDes.Glb_Cliente_Razaosocial) like '%'||upper(vDestinatario)||'%'
      and upper(trim(nvl(carga.fcf_tpcargadescricao,'x'))) like '%'||upper(trim(vTipoCarga))||'%'
      and upper(trim(nvl(veiculo.fcf_tpveiculo_descricao,'x'))) like '%'||upper(trim(vTipoVeiculo))||'%'
      and upper(nvl(co.arm_coletaorigem_cod,-1)) like '%'||upper(vOrigem)||'%'

      and ( (nvl(n.arm_nota_numero,'') like '%'||nvl(vNota, '') ||'%') or (nvl(n.arm_nota_numero,'1') like '%'||nvl(vNota, '1') ||'%') )      
      and ( (nvl(ctrc.con_conhecimento_codigo,'') like '%'|| nvl(vCTRC, '') ||'%') or (nvl(ctrc.con_conhecimento_codigo,'1') like '%'|| nvl(vCTRC, '1') ||'%') )      

      -- Ocorrencia
      and ( nvl(co.arm_coletaocor_codigo,'-1') like '%'||vOcorrencia||'%' Or ( vOcorrencia = 'XX' and co.arm_coletaocor_codigo is null and co.arm_coleta_dtautoriza is not null) )

      order by co.arm_coleta_dtgravacao desc;

      pStatus  := Status_Normal;
      pMessage := 'OK';
    exception when others then
      Open pCursor For Select sysdate from dual;
      pStatus  := Status_Erro;
      pMessage := sqlerrm||' - '||dbms_utility.format_error_backtrace;
    end;
  end Sp_Get_ConsultaColetas;
  
  /*********************************************************************************************
  * Data..: 22/04/2016
  * Autor.: Felipe Bispo
  * Versão: 2.0 - Melhoramento de performace do Select de consulta
  * Lista Todas as Coletas Geradas pelo Sistema com os códigos de origem 4,6,2,
  * Foi retirado o limite de data, por causa da paginação implementada
  * pXmlFilter: Xml com dados para a Consulta filtrada de Coletas.
  * Exemplo do Xml:
  * <filtro>
  *   <coleta></coleta>
  *   <pedido></pedido>
  *   <dataIni>20/08/2015</dataIni>
  *   <dataFim>3/09/2015</dataFim>
  *   <cidadeOrigem></cidadeOrigem>
  *   <cidadeDestino></cidadeDestino>
  *   <remetente></remetente>
  *   <destinatario></destinatario>
  *   <tipoCarga></tipoCarga>
  *   <tipoVeiculo></tipoVeiculo>
  *   <usuario>sdrumond</usuario>
  *   <cnpjLogado>61139432000172</cnpjLogado>
  *   <origem></origem>
  *   <ocorrencia>66</ocorrencia>
  *   <pagina>1</pagina>
  *   <qntdeRegistros>10</qntdeRegistros>
  * </filtro>
  **********************************************************************************************/

  Function fn_retornaParametro(pParametro in varchar2) return varchar2
    As
    Begin
       If pParametro = 'vCnpjLogado' Then
          return Pkg_Col_Coleta.vCnpjLogado;
       ElsIf pParametro = 'vDataIni' Then
          return Pkg_Col_Coleta.vDataIni;
       ElsIf pParametro = 'vDataFim' Then
          return Pkg_Col_Coleta.vDataFim;
       ElsIf pParametro = 'vUsuario' Then
          return Pkg_Col_Coleta.vUsuario;
       ElsIf pParametro = 'vColeta' Then
          return Pkg_Col_Coleta.vColeta;
       ElsIf pParametro = 'vPedido' Then
          return Pkg_Col_Coleta.vPedido;
       ElsIf pParametro = 'vArmazem' Then
          return Pkg_Col_Coleta.vArmazem;
       ElsIf pParametro = 'vCidadeOrigem' Then
          return Pkg_Col_Coleta.vCidadeOrigem;
       ElsIf pParametro = 'vCidadeDestino' Then
          return Pkg_Col_Coleta.vCidadeDestino;
       ElsIf pParametro = 'vRemetente' Then
          return Pkg_Col_Coleta.vRemetente;
       ElsIf pParametro = 'vDestinatario' Then
          return Pkg_Col_Coleta.vDestinatario;
       ElsIf pParametro = 'vTipoCarga' Then
          return Pkg_Col_Coleta.vTipoCarga;
       ElsIf pParametro = 'vTipoVeiculo' Then
          return Pkg_Col_Coleta.vTipoVeiculo;
       ElsIf pParametro = 'vOrigem' Then
          return Pkg_Col_Coleta.vOrigem;
       ElsIf pParametro = 'vOcorrencia' Then
          return Pkg_Col_Coleta.vOcorrencia;
       ElsIf pParametro = 'vPagina' Then
          return Pkg_Col_Coleta.vPagina;
       ElsIf pParametro = 'vQntdeRegistros' Then
          return Pkg_Col_Coleta.vQntdeRegistros;
       ElsIf pParametro = 'vCnpjLogado' Then
          return Pkg_Col_Coleta.vCnpjLogado;
       ElsIf pParametro = 'vNota' Then
          return Pkg_Col_Coleta.vNota;
       ElsIf pParametro = 'vCTRC' Then
          return Pkg_Col_Coleta.vCTRC;
       End If;


    End; 
    
    
  Procedure Sp_Get_ConsultaLote(pLote      in varchar,
                                  pUsuario   in varchar, 
                                  pCursor    out T_CURSOR,
                                  pStatus     out varchar2,
                                  pMessage   out varchar2)
  as

  begin
    begin
       open pCursor for
        SELECT *
        FROM TDVADM.T_ARM_LOTE L,
             TDVADM.t_Arm_Lotecoleta LC
        WHERE L.ARM_LOTE_ID = LC.ARM_LOTE_ID
        AND L.ARM_LOTE_ID = pLote
        AND trim(L.ARM_LOTE_USUARIO) = trim(pUsuario)
        order by lc.arm_lotecoleta_codigo;
        
        pStatus  := Status_Normal;
        pMessage := 'consulta lote com sucesso';
      
    exception when others then
      Open pCursor For Select sysdate from dual;
      pStatus  := Status_Erro;
      pMessage := sqlerrm||' - '||dbms_utility.format_error_backtrace;
    end;
  end Sp_Get_ConsultaLote;

  Procedure Sp_Get_ConsultaColetasPaginado(pXmlFilter      in varchar2,
                                   pCursor         out T_CURSOR,
                                   pQntdePaginas   out integer,
                                   pCount          out integer,
                                   pStatus         out varchar2,
                                   pMessage        out varchar2)
  as
/*
    vDataIni date;
    vDataFim date;
    vUsuario varchar2(10);
    vColeta  varchar2(6);
    vPedido  varchar2(30);
    vArmazem varchar2(30);
    vCidadeOrigem varchar2(100);
    vCidadeDestino varchar2(100);
    vRemetente varchar2(100);
    vDestinatario varchar2(100);
    vTipoCarga varchar2(30);
    vTipoVeiculo varchar2(30);
    vOrigem t_Arm_Coletaorigem.Arm_Coletaorigem_Cod%Type;
    vOcorrencia Varchar(2);
    vPagina integer;
    vQntdeRegistros integer; -- Quantidade de registros a serem selecionados de cada vez
    vCnpjLogado Varchar2(20);
    vNota VARCHAR2(100);--T_arm_Nota.Arm_Nota_Numero%Type;
    vCTRC VARCHAR(100);--t_Con_Conhecimento.Con_Conhecimento_Codigo%Type;
*/

    vSelect      varchar2(1350);
    vSelectCount varchar2(100);
    vTabelas     varchar2(400);
    vWhere       clob;
--    vScript      clob;
    vModoNovo    char(1) := 'S';
  begin
    begin
--      vScript := empty_clob; 
      if pStatus is null Then
         vModoNovo := 'S';
      Else
         vModoNovo := 'N';
      End If;
/*
-- Modelo XML      
    <filtro>
       <coleta>xxxx</coleta>
       <pedido>xxxx</pedido>
       <nota>1213</nota>
       <ctrc>104781</ctrc>
       <dataIni>20/03/2018</dataIni>
       <dataFim>20/03/2018</dataFim>
       <armazem>06</armazem>
       <cidadeOrigem>SAO PAULO</cidadeOrigem>
       <cidadeDestino>ITAUNA</cidadeDestino>
       <remetente>CHICO</remetente>
       <destinatario>PAILO</destinatario>
       <tipoCarga>01</tipoCarga>
       <tipoVeiculo>1</tipoVeiculo>
       <usuario>gvocatore</usuario>
       <cnpjLogado>61139432000172</cnpjLogado>
       <origem>1</origem>
       <ocorrencia>69</ocorrencia>
       <pagina>0</pagina>
       <qntdeRegistros>10</qntdeRegistros>
    </filtro>


*/
  
    SELECT nvl(extractValue(VALUE(TAB), '/filtro/dataIni'),sysdate),
             nvl(extractValue(VALUE(TAB), '/filtro/dataFim'), sysdate),
             substr(extractValue(VALUE(TAB), '/filtro/usuario'),0,10),
             substr(extractValue(VALUE(TAB), '/filtro/coleta'),0,6),
             extractValue(VALUE(TAB), '/filtro/armazem'),             
             extractValue(VALUE(TAB), '/filtro/cidadeOrigem'),
             extractValue(VALUE(TAB), '/filtro/cidadeDestino'),
             extractValue(VALUE(TAB), '/filtro/remetente'),
             extractValue(VALUE(TAB), '/filtro/destinatario'),
             extractValue(VALUE(TAB), '/filtro/tipoCarga'),
             extractValue(VALUE(TAB), '/filtro/tipoVeiculo'),
             extractValue(VALUE(TAB), '/filtro/pedido'),
             extractValue(VALUE(TAB), '/filtro/origem'),
             trim(extractValue(VALUE(TAB), '/filtro/ocorrencia')),
             extractValue(VALUE(TAB), '/filtro/cnpjLogado'),
             extractValue(VALUE(TAB), '/filtro/nota'),
             extractValue(VALUE(TAB), '/filtro/ctrc'),
             extractValue(VALUE(TAB), '/filtro/pagina'),
             extractValue(VALUE(TAB), '/filtro/qntdeRegistros')                          
        into Pkg_Col_Coleta.vDataIni,
             Pkg_Col_Coleta.vDataFim,
             Pkg_Col_Coleta.vUsuario,
             Pkg_Col_Coleta.vColeta,
             Pkg_Col_Coleta.vArmazem,
             Pkg_Col_Coleta.vCidadeOrigem,
             Pkg_Col_Coleta.vCidadeDestino,
             Pkg_Col_Coleta.vRemetente,
             Pkg_Col_Coleta.vDestinatario,
             Pkg_Col_Coleta.vTipoCarga,
             Pkg_Col_Coleta.vTipoVeiculo,
             Pkg_Col_Coleta.vPedido,
             Pkg_Col_Coleta.vOrigem,
             Pkg_Col_Coleta.vOcorrencia,
             Pkg_Col_Coleta.vCnpjLogado,
             Pkg_Col_Coleta.vNota,
             Pkg_Col_Coleta.vCTRC,
             Pkg_Col_Coleta.vPagina,
             Pkg_Col_Coleta.vQntdeRegistros
        FROM TABle(XMLSequence(extract(xmltype.createXML(pXmlFilter),'/filtro'))) TAB;

      dbms_output.put_line('posso precisar do usuário: '||VUsuario);
      vDataIni := to_date(nvl(vDataIni, sysdate-30), 'DD/MM/YYYY');
      vDataFim := to_date(nvl(vDataFim, sysdate), 'DD/MM/YYYY');

      -- limitar o periodo de consulta em 15 dias
--       insert INTO tdvadm.t_glb_sql values(pXmlFilter,SYSDATE,'FILTRO_COLETA','TESTE DA PERFORMANCE DO FILTRO DA COLETA');

    vSelectCount := 'select count(Distinct co.arm_coleta_ncompra || co.arm_coleta_ciclo) ' ||  chr(10);
    vSelect      := 'Select *  ' ||
                    'from( Select /*+ FIRST_ROWS(20) */ ' || chr(10) ||
                                 'topn.*,  ' || chr(10) ||
                                 'ROWNUM rnum  ' || chr(10) ||
                          'from(select  ' || chr(10) ||
                           
                           
                                      'Distinct  ' || chr(10) ||
                                      --Coleta 
                                      'co.arm_coleta_ncompra, ' || chr(10) ||
                                      'co.arm_coleta_ciclo, ' || chr(10) ||
                                      'to_char(co.arm_coleta_dtgravacao,''dd/mm/yyyy hh24:mi'') arm_coleta_dtgravacao, ' || chr(10) ||
                                      'co.arm_coleta_dtgravacao orderData, ' || chr(10) ||
                                      'to_char(co.arm_coleta_dtautoriza,''dd/mm/yyyy hh24:mi'') arm_coleta_dtautoriza, ' || chr(10) ||
                                      'co.arm_coleta_pedido, ' || chr(10) ||
                                      'co.arm_coleta_entcoleta, ' || chr(10) ||
                                      'co.arm_coleta_flagquimico, ' || chr(10) ||
                                      'co.arm_coleta_tpcoleta, ' || chr(10) ||
                                      'co.arm_coleta_vlmercadoria, ' || chr(10) ||
                                      --Cliente Remetente 
                                      'cliRem.Glb_Cliente_Razaosocial remetente_razao, ' || chr(10) ||
                                      'endRem.Glb_Cliend_Cidade cidade_origem, ' || chr(10) ||
                                      'cliRem.Glb_Grupoeconomico_Codigo remetente_grupoeconomico,  ' || chr(10) ||
                                      --Cliente Destinatário 
                                      'cliDes.Glb_Cliente_Razaosocial destinatario_razao, ' || chr(10) ||
                                      'endDes.Glb_Cliend_Cidade cidade_destino, ' || chr(10) ||
                                      'cliDes.Glb_Grupoeconomico_Codigo destinatario_grupoeconomico, ' || chr(10) ||
                                      --Peso
                                      'Case nvl(co.arm_coleta_peso,0) ' || chr(10) ||
                                      '  When 0 then (select sum(item.arm_coleta_ncompra_peso) ' || chr(10) ||
                                      '               from tdvadm.t_arm_coletancompra item ' || chr(10) ||
                                      '               where item.arm_coletancompra = co.arm_coleta_ncompra ' || chr(10) ||
                                      '                 and item.arm_coleta_ciclo  = co.arm_coleta_ciclo) ' || chr(10) ||
                                      'else co.arm_coleta_peso ' || chr(10) ||
                                      'End peso, ' || chr(10) ||
                                      --Carga
                                      'carga.fcf_tpcargadescricao, ' || chr(10) ||
                                      --Veiculo
                                      'veiculo.fcf_tpveiculo_descricao, ' || chr(10) ||
                                      --Ocorrência 
                                      'ocor.arm_coletaocor_codigo, ' || chr(10) ||
                                      'ocor.arm_coletaocor_descricao, ' || chr(10) ||
                                      -- Origem 
                                      'ori.arm_coletaorigem_cod, ' || chr(10) ||
                                      'ori.arm_coletaorigem_descmenor ' || chr(10);
                               

    vTabelas     := 'from tdvadm.t_arm_coleta co, ' || chr(10) ||
                         'tdvadm.t_glb_cliend  endRem, ' || chr(10) ||
                         'tdvadm.t_glb_cliente cliRem, ' || chr(10) ||
                         'tdvadm.t_glb_cliend  endDes, ' || chr(10) ||
                         'tdvadm.t_glb_cliente cliDes, ' || chr(10) ||
                         'tdvadm.t_fcf_tpcarga carga, ' || chr(10) ||
                         'tdvadm.t_fcf_tpveiculo veiculo, ' || chr(10) ||
                         'tdvadm.t_arm_coletaocor ocor, ' || chr(10) ||
                         'tdvadm.t_arm_coletaorigem ori, ' || chr(10) ||
                         'tdvadm.t_arm_nota n, ' || chr(10) ||
                         'tdvadm.t_con_conhecimento ctrc, ' || chr(10) ||
                         'tdvadm.t_con_controlectrce conctrc ' || chr(10);

 

     vWhere := '';
     vWhere  :=  vWhere || 'where ( trunc(co.arm_coleta_dtgravacao) between to_date(pkg_col_coleta.fn_retornaParametro(''vDataIni''),''DD/MM/YYYY'') and to_date(Pkg_Col_Coleta.fn_retornaParametro(''vDataFim''),''DD/MM/YYYY'')) ';
     vWhere  :=  vWhere || chr(10)  || '  and co.arm_coletaorigem_cod In(4,2,6,8,9) '; -- 4=Coleta Java, 2=Quadrem, 6=FIFO
        -----------------------------------------------------------------------------------------------
        -- Filtra as Coletas por Grupo economico do CNPJ logado, Grupo do Destino ou Grupo de Origem ou  Grupo Solicitante
     vWhere  :=  vWhere || chr(10)  || ' and ( ';
             -- Filtra por grupo economico
     vWhere  :=  vWhere || chr(10)  || '             (Select case sol.glb_grupoeconomico_codigo ';
     vWhere  :=  vWhere || chr(10)  || '                     when ''9999'' then ''NULL'' ' ;
     vWhere  :=  vWhere || chr(10)  || '                     else sol.glb_grupoeconomico_codigo ';
     vWhere  :=  vWhere || chr(10)  || '                     end ';
     vWhere  :=  vWhere || chr(10)  || '              from tdvadm.t_glb_cliente sol ';
     vWhere  :=  vWhere || chr(10)  || '              where trim(sol.glb_cliente_cgccpfcodigo) = trim(pkg_col_coleta.fn_retornaParametro(''vCnpjLogado''))) In ( (Select dest.glb_grupoeconomico_codigo ';
     vWhere  :=  vWhere || chr(10)  || '                                                                                                 from tdvadm.t_glb_cliente dest ';
     vWhere  :=  vWhere || chr(10)  || '                                                                                                 where trim(dest.glb_cliente_cgccpfcodigo) = trim(co.glb_cliente_cgccpfcodigoentreg)), ';
     vWhere  :=  vWhere || chr(10)  || '                                                                                                (Select dest.glb_grupoeconomico_codigo ';
     vWhere  :=  vWhere || chr(10)  || '                                                                                                 from tdvadm.t_glb_cliente dest ';
     vWhere  :=  vWhere || chr(10)  || '                                                                                                 where trim(dest.glb_cliente_cgccpfcodigo) = trim(co.glb_cliente_cgccpfcodigocoleta)) , ';
     vWhere  :=  vWhere || chr(10)  || '                                                                                                (Select dest.glb_grupoeconomico_codigo ';
     vWhere  :=  vWhere || chr(10)  || '                                                                                                 from tdvadm.t_glb_cliente dest ';
     vWhere  :=  vWhere || chr(10)  || '                                                                                                 where trim(dest.glb_cliente_cgccpfcodigo) = trim(co.arm_coleta_cnpjsolicitante)) ) ';
               -- libera coletas do mesmo armazem do usuario 
             /****************************************************************************
              * Foi Adicionado a opção consulta por armazém no dia 13/06/2016 - Felipe B.
              ****************************************************************************/                                                                                      
/*              or vArmazem = co.arm_armazem_codigo
              -- liberados todos para os usuario
              or vUsuario In('sdrumond','gmachado','jdonega', 'bbernardo', 'cferreira', 'emesilva')
*/
     vWhere  :=  vWhere || chr(10)  || '              or ''000'' <> (Select usuario.glb_rota_codigo ';
     vWhere  :=  vWhere || chr(10)  || '                           from tdvadm.t_usu_usuario usuario  ';
     vWhere  :=  vWhere || chr(10)  || '                           where usuario.usu_usuario_codigo = rpad(Pkg_Col_Coleta.fn_retornaParametro(''vUsuario''),10)) ';
              -- liberados somente para o usuario de cadastro
     vWhere  :=  vWhere || chr(10)  || '              or Pkg_Col_Coleta.fn_retornaParametro(''vUsuario'') = trim(co.usu_usuario_codigo_cad) ';
              -- liberados por cnpj envolvido
     vWhere  :=  vWhere || chr(10)  || '              or trim(Pkg_Col_Coleta.fn_retornaParametro(''vCnpjLogado'')) In(trim(co.arm_coleta_cnpjsolicitante), trim(co.glb_cliente_cgccpfcodigoentreg), trim(co.glb_cliente_cgccpfcodigocoleta)) ';
     vWhere  :=  vWhere || chr(10)  || '             ) ';
        ----------------------------------------------------------------------------------------------
     vWhere  :=  vWhere || chr(10)  || '      and co.glb_tpcliend_codigocoleta      = endRem.Glb_Tpcliend_Codigo ';
     vWhere  :=  vWhere || chr(10)  || '      and co.glb_cliente_cgccpfcodigocoleta = endRem.Glb_Cliente_Cgccpfcodigo ';
     vWhere  :=  vWhere || chr(10)  || '      and endRem.Glb_Cliente_Cgccpfcodigo   = cliRem.Glb_Cliente_Cgccpfcodigo ';
     vWhere  :=  vWhere || chr(10)  || '      and co.glb_tpcliend_codigoentrega     = endDes.Glb_Tpcliend_Codigo ';
     vWhere  :=  vWhere || chr(10)  || '      and co.glb_cliente_cgccpfcodigoentreg = endDes.Glb_Cliente_Cgccpfcodigo ';
     vWhere  :=  vWhere || chr(10)  || '      and endDes.Glb_Cliente_Cgccpfcodigo   = cliDes.Glb_Cliente_Cgccpfcodigo ';
        -- tpcarga não é campo obrigatório no Front-end, então pode ser ou não
     vWhere  :=  vWhere || chr(10)  || '      and nvl(co.fcf_tpcarga_codigo,''00 '')    = carga.fcf_tpcarga_codigo ';
        -- tpveiculo não é campo obrigatório no Front-end, então pode ser ou não
     vWhere  :=  vWhere || chr(10)  || '      and nvl(co.fcf_tpveiculo_codigo,''0  '')  = veiculo.fcf_tpveiculo_codigo ';
        -- ocorrencia pode ter ou não
     vWhere  :=  vWhere || chr(10)  || '      and co.arm_coletaocor_codigo = ocor.arm_coletaocor_codigo(+) ';
        -- como nem todos os sistemas estão gravando a origem colocamos OUTER JOIN
     vWhere  :=  vWhere || chr(10)  || '      and nvl(co.arm_coletaorigem_cod,4) = ori.arm_coletaorigem_cod ';
     vWhere  :=  vWhere || chr(10)  || '      and co.arm_coleta_ncompra = n.arm_coleta_ncompra(+) ';
     vWhere  :=  vWhere || chr(10)  || '      and co.arm_coleta_ciclo   = n.arm_coleta_ciclo(+) ';
     vWhere  :=  vWhere || chr(10)  || '      and co.arm_coleta_ncompra = ctrc.arm_coleta_ncompra(+) ';
     vWhere  :=  vWhere || chr(10)  || '      and co.arm_coleta_ciclo   = ctrc.arm_coleta_ciclo(+) ';
     vWhere  :=  vWhere || chr(10)  || '      and ctrc.con_conhecimento_codigo = conctrc.con_conhecimento_codigo(+) ';
     vWhere  :=  vWhere || chr(10)  || '      and ctrc.con_conhecimento_serie  = conctrc.con_conhecimento_serie(+) ';
     vWhere  :=  vWhere || chr(10)  || '      and ctrc.glb_rota_codigo         = conctrc.glb_rota_codigo(+) ';
        -- Foi adicionado como filtro no dia 28/06/2016
     If Pkg_Col_Coleta.vArmazem is not null Then
        vWhere  :=  vWhere || chr(10)  || '      and instr(co.arm_armazem_codigo,Pkg_Col_Coleta.fn_retornaParametro(''vArmazem'')) > 0 ';
     End If;     
        -- Filtro enviado pelo usuário

     If Pkg_Col_Coleta.vColeta is not null Then
        vWhere  :=  vWhere || chr(10)  || '      and instr(co.arm_coleta_ncompra,Pkg_Col_Coleta.fn_retornaParametro(''vColeta'')) > 0 ';
     End If;
     
     If Pkg_Col_Coleta.vPedido is not null Then

        vWhere  :=  vWhere || chr(10)  || '      and ( ';
        vWhere  :=  vWhere || chr(10)  || '           instr(trim(nvl(co.arm_coleta_pedido,''x'')),Pkg_Col_Coleta.fn_retornaParametro(''vPedido'')) > 0 ';
        vWhere  :=  vWhere || chr(10)  || '           or ';
        vWhere  :=  vWhere || chr(10)  || '           instr(trim(nvl(co.xml_coleta_numero,''x'')),Pkg_Col_Coleta.fn_retornaParametro(''vPedido'')) > 0 ';
        vWhere  :=  vWhere || chr(10)  || '          ) ';
     End If;
     
     If Pkg_Col_Coleta.vCidadeOrigem is not null Then 
        vWhere  :=  vWhere || chr(10)  || '      and instr(upper(endRem.Glb_Cliend_Cidade),Pkg_Col_Coleta.fn_retornaParametro(''vCidadeOrigem'')) > 0 ';
     End If;
     
     If Pkg_Col_Coleta.vCidadeDestino is not null Then
        vWhere  :=  vWhere || chr(10)  || '      and instr(upper(endDes.Glb_Cliend_Cidade),Pkg_Col_Coleta.fn_retornaParametro(''vCidadeDestino'')) > 0 ';
     End If;
     
     If Pkg_Col_Coleta.vRemetente is not null Then
        vWhere  :=  vWhere || chr(10)  || '      and ( instr(upper(cliRem.Glb_Cliente_Razaosocial),Pkg_Col_Coleta.fn_retornaParametro(''vRemetente'')) > 0 '; 
        vWhere  :=  vWhere || chr(10)  || '        or instr(cliRem.Glb_Cliente_Cgccpfcodigo,Pkg_Col_Coleta.fn_retornaParametro(''vRemetente'')) > 0 )';
     End If;

     If Pkg_Col_Coleta.vDestinatario is not null Then
        vWhere  :=  vWhere || chr(10)  || '      and ( instr(upper(cliDes.Glb_Cliente_Razaosocial),Pkg_Col_Coleta.fn_retornaParametro(''vDestinatario'')) > 0 '; 
        vWhere  :=  vWhere || chr(10)  || '        or instr(cliDes.Glb_Cliente_Cgccpfcodigo,Pkg_Col_Coleta.fn_retornaParametro(''vDestinatario'')) > 0 )';                        
     End If;
     
     If Pkg_Col_Coleta.vTipoCarga is not null Then
        vWhere  :=  vWhere || chr(10)  || '      and instr(upper(trim(nvl(carga.fcf_tpcargadescricao,''x''))),Pkg_Col_Coleta.fn_retornaParametro(''vTipoCarga'')) > 0 ';
     End If;

     If Pkg_Col_Coleta.vTipoVeiculo is not null Then
        vWhere  :=  vWhere || chr(10)  || '      and instr(upper(trim(nvl(veiculo.fcf_tpveiculo_descricao,''x''))),Pkg_Col_Coleta.fn_retornaParametro(''vTipoVeiculo'')) > 0 ';
     End If;

     If Pkg_Col_Coleta.vOrigem is not null Then
        vWhere  :=  vWhere || chr(10)  || '      and instr(upper(nvl(co.arm_coletaorigem_cod,-1)),Pkg_Col_Coleta.fn_retornaParametro(''vOrigem'')) > 0 ';
     End If; 

/*        and ( (nvl(n.arm_nota_numero,'') like '%'||nvl(vNota, '') ||'%') or (nvl(n.arm_nota_numero,'1') like '%'||nvl(vNota, '1') ||'%') or
              (nvl(n.arm_nota_chavenfe,'') like '%'||nvl(vNota, '') ||'%') or (nvl(n.arm_nota_chavenfe,'1') like '%'||nvl(vNota, '1') ||'%') )      
*/

     If Pkg_Col_Coleta.vNota is not null Then
        vWhere  :=  vWhere || chr(10)  || '      and ( (instr(nvl(n.arm_nota_numero,''1''),Pkg_Col_Coleta.fn_retornaParametro(''vNota'')) > 0)'; 
        vWhere  :=  vWhere || chr(10)  || '       or ( instr(nvl(n.arm_nota_chavenfe,''1''),Pkg_Col_Coleta.fn_retornaParametro(''vNota'')) > 0 ) ) ';
     End If;

     If Pkg_Col_Coleta.vCTRC is not null Then
        vWhere  :=  vWhere || chr(10)  || '      and ( ( instr(nvl(ctrc.con_conhecimento_codigo,''1''),Pkg_Col_Coleta.fn_retornaParametro(''vCTRC'')) > 0 )'; 
        vWhere  :=  vWhere || chr(10)  || '       or ( instr(nvl(conctrc.con_controlectrce_chavesefaz,''1''),Pkg_Col_Coleta.fn_retornaParametro(''vCTRC'')) > 0 ))';      
     End If; 
        -- Ocorrencia
     If Pkg_Col_Coleta.vOcorrencia is not null Then
        vWhere  :=  vWhere || chr(10)  || '      and ( instr(nvl(co.arm_coletaocor_codigo,''-1''),Pkg_Col_Coleta.fn_retornaParametro(''vOcorrencia'')) > 0 '; 
        vWhere  :=  vWhere || chr(10)  || '       Or ( Pkg_Col_Coleta.fn_retornaParametro(''vOcorrencia'')  = ''XX'' and co.arm_coletaocor_codigo is null and co.arm_coleta_dtautoriza is not null) ';
        vWhere  :=  vWhere || chr(10)  || '       Or ( Pkg_Col_Coleta.fn_retornaParametro(''vOcorrencia'')  = ''OU'' and co.arm_coletaocor_codigo not in (''65 '', ''64 '', ''55 '', ''66 ''))) ';
      End If;

--        vWhere  :=  vWhere || chr(10)  || '      )  ';
       
      
     
     If vModoNovo = 'S' Then
        execute immediate (vSelectCount || vTabelas || vWhere) into pCount;
        -- Depopis de Contar complementa o Script 
        vWhere  :=  vWhere || chr(10)  || '  order by orderData ) topn';
        vWhere  :=  vWhere || chr(10)  || '  where rownum <= (( ' || vPagina || ' + 1) * ' || vQntdeRegistros || ')) ';
        vWhere  :=  vWhere || chr(10)  || '  where rnum > ((' || vPagina || ') * ' || vQntdeRegistros || ') ';
        insert into tdvadm.t_glb_sql values (vSelect || vTabelas || vWhere, sysdate, 'SIRLANO COLETA','Select');
     Else
          select count(Distinct co.arm_coleta_ncompra || co.arm_coleta_ciclo)
            into pCount
            from t_arm_coleta co,
                 t_glb_cliend  endRem,
                 t_glb_cliente cliRem,
                 t_glb_cliend  endDes,
                 t_glb_cliente cliDes,
                 t_fcf_tpcarga carga,
                 t_fcf_tpveiculo veiculo,
                 t_arm_coletaocor ocor,
                 t_arm_coletaorigem ori,
                 t_arm_nota n,
                 t_con_conhecimento ctrc,
                 tdvadm.t_con_controlectrce conctrc
            where 
            ( trunc(co.arm_coleta_dtgravacao) between vDataIni and vDataFim )
            --( trunc(co.arm_coleta_dtsolicitacao) between vDataIni and vDataFim )
            and co.arm_coletaorigem_cod In(4,2,6,8,9) -- 4=Coleta Java, 2=Quadrem, 6=FIFO

            -----------------------------------------------------------------------------------------------
            -- Filtra as Coletas por Grupo economico do CNPJ logado, Grupo do Destino ou Grupo de Origem ou  Grupo Solicitante
            and (
                 -- Filtra por grupo economico
                 (Select case sol.glb_grupoeconomico_codigo
                             when '9999' then 'NULL'
                             else sol.glb_grupoeconomico_codigo
                          end
                    from t_glb_cliente sol
                    where trim(sol.glb_cliente_cgccpfcodigo) = trim(vCnpjLogado)) In ( (Select dest.glb_grupoeconomico_codigo
                                                                                          from t_glb_cliente dest
                                                                                          where trim(dest.glb_cliente_cgccpfcodigo) = trim(co.glb_cliente_cgccpfcodigoentreg)) ,
                                                                                        (Select dest.glb_grupoeconomico_codigo
                                                                                          from t_glb_cliente dest
                                                                                          where trim(dest.glb_cliente_cgccpfcodigo) = trim(co.glb_cliente_cgccpfcodigocoleta)) ,
                                                                                        (Select dest.glb_grupoeconomico_codigo
                                                                                          from t_glb_cliente dest
                                                                                        where trim(dest.glb_cliente_cgccpfcodigo) = trim(co.arm_coleta_cnpjsolicitante)) )
                   -- libera coletas do mesmo armazem do usuario 
                 /****************************************************************************
                  * Foi Adicionado a opção consulta por armazém no dia 13/06/2016 - Felipe B.
                  ****************************************************************************/                                                                                      
    /*              or vArmazem = co.arm_armazem_codigo
                  -- liberados todos para os usuario
                  or vUsuario In('sdrumond','gmachado','jdonega', 'bbernardo', 'cferreira', 'emesilva')
    */
                  or '000' <> (Select usuario.glb_rota_codigo
                                 from tdvadm.t_usu_usuario usuario 
                                where usuario.usu_usuario_codigo = rpad(vUsuario,10,' '))
                  -- liberados somente para o usuario de cadastro
                  or vUsuario = trim(co.usu_usuario_codigo_cad)
                  -- liberados por cnpj envolvido
                  or trim(vCnpjLogado) In(trim(co.arm_coleta_cnpjsolicitante), trim(co.glb_cliente_cgccpfcodigoentreg), trim(co.glb_cliente_cgccpfcodigocoleta))
                 )
            ----------------------------------------------------------------------------------------------

            and co.glb_tpcliend_codigocoleta      = endRem.Glb_Tpcliend_Codigo
            and co.glb_cliente_cgccpfcodigocoleta = endRem.Glb_Cliente_Cgccpfcodigo
            and endRem.Glb_Cliente_Cgccpfcodigo   = cliRem.Glb_Cliente_Cgccpfcodigo

            and co.glb_tpcliend_codigoentrega     = endDes.Glb_Tpcliend_Codigo
            and co.glb_cliente_cgccpfcodigoentreg = endDes.Glb_Cliente_Cgccpfcodigo
            and endDes.Glb_Cliente_Cgccpfcodigo   = cliDes.Glb_Cliente_Cgccpfcodigo

            -- tpcarga não é campo obrigatório no Front-end, então pode ser ou não
            and nvl(co.fcf_tpcarga_codigo,'00 ')    = carga.fcf_tpcarga_codigo

            -- tpveiculo não é campo obrigatório no Front-end, então pode ser ou não
            and nvl(co.fcf_tpveiculo_codigo,'0  ')  = veiculo.fcf_tpveiculo_codigo

            -- ocorrencia pode ter ou não
            and co.arm_coletaocor_codigo            = ocor.arm_coletaocor_codigo(+)

            -- como nem todos os sistemas estão gravando a origem colocamos OUTER JOIN
            and nvl(co.arm_coletaorigem_cod,4) = ori.arm_coletaorigem_cod

            and co.arm_coleta_ncompra = n.arm_coleta_ncompra(+)
            and co.arm_coleta_ciclo   = n.arm_coleta_ciclo(+)
                            
            and co.arm_coleta_ncompra = ctrc.arm_coleta_ncompra(+)
            and co.arm_coleta_ciclo   = ctrc.arm_coleta_ciclo(+)
            and ctrc.con_conhecimento_codigo = conctrc.con_conhecimento_codigo(+)
            and ctrc.con_conhecimento_serie  = conctrc.con_conhecimento_serie(+)
            and ctrc.glb_rota_codigo         = conctrc.glb_rota_codigo(+)                        
            
            -- Foi adicionado como filtro no dia 28/06/2016
            and co.arm_armazem_codigo like '%'|| vArmazem ||'%'
            
            
            -- Filtro enviado pelo usuário
            and co.arm_coleta_ncompra like '%'||vColeta||'%'
    --        and trim(nvl(co.arm_coleta_pedido,'x'))  like '%'||vPedido||'%'
            and (
                 trim(nvl(co.arm_coleta_pedido,'x'))  like '%'||vPedido||'%'
                 or 
                 trim(nvl(co.xml_coleta_numero,'x'))  like '%'||vPedido||'%'
                )

            and upper(endRem.Glb_Cliend_Cidade) like '%'||upper(vCidadeOrigem)||'%'
            and upper(endDes.Glb_Cliend_Cidade) like '%'||upper(vCidadeDestino)||'%'

            and (upper(cliRem.Glb_Cliente_Razaosocial) like '%'||upper(vRemetente)||'%' or cliRem.Glb_Cliente_Cgccpfcodigo like '%'||trim(vRemetente)||'%')
            and (upper(cliDes.Glb_Cliente_Razaosocial) like '%'||upper(vDestinatario)||'%' or cliDes.Glb_Cliente_Cgccpfcodigo like '%'||trim(vDestinatario)||'%')                        

            and upper(trim(nvl(carga.fcf_tpcargadescricao,'x'))) like '%'||upper(trim(vTipoCarga))||'%'
            and upper(trim(nvl(veiculo.fcf_tpveiculo_descricao,'x'))) like '%'||upper(trim(vTipoVeiculo))||'%'
            and upper(nvl(co.arm_coletaorigem_cod,-1)) like '%'||upper(vOrigem)||'%'


    /*        and ( (nvl(n.arm_nota_numero,'') like '%'||nvl(vNota, '') ||'%') or (nvl(n.arm_nota_numero,'1') like '%'||nvl(vNota, '1') ||'%') or
                  (nvl(n.arm_nota_chavenfe,'') like '%'||nvl(vNota, '') ||'%') or (nvl(n.arm_nota_chavenfe,'1') like '%'||nvl(vNota, '1') ||'%') )      
    */        and ( (nvl(n.arm_nota_numero,'') like '%'||nvl(vNota, '') ||'%') or (nvl(n.arm_nota_numero,'1') like '%'||nvl(vNota, '1') ||'%') or
                  (nvl(n.arm_nota_chavenfe,'') = nvl(vNota, '') ) or (nvl(n.arm_nota_chavenfe,'1') = nvl(vNota, '1') ) )      

            and ( (nvl(ctrc.con_conhecimento_codigo,'') like '%'|| nvl(vCTRC, '') ||'%') or (nvl(ctrc.con_conhecimento_codigo,'1') like '%'|| nvl(vCTRC, '1') ||'%') or
                  (nvl(conctrc.con_controlectrce_chavesefaz,'') like '%'|| nvl(vCTRC, '') ||'%') or (nvl(conctrc.con_controlectrce_chavesefaz,'1') like '%'|| nvl(vCTRC, '1') ||'%'))      

            -- Ocorrencia
            and ( nvl(co.arm_coletaocor_codigo,'-1') like '%'||vOcorrencia||'%' Or
                ( vOcorrencia = 'XX' and co.arm_coletaocor_codigo is null and co.arm_coleta_dtautoriza is not null) or
                ( vOcorrencia = 'OU' and co.arm_coletaocor_codigo not in ('65 ', '64 ', '55 ', '66 '))) ;
      End If;
      
      if (pCount > 0) then
         If vModoNovo = 'S' Then
            open pCursor for vSelect || vTabelas || vWhere;
      Else
        open pCursor for
        Select * 
          from(
               Select /*+ FIRST_ROWS(20) */
                      topn.*, 
                      ROWNUM rnum 
                 from( 
                       select  Distinct 
                               --Coleta
                               co.arm_coleta_ncompra,
                               co.arm_coleta_ciclo,
                               to_char(co.arm_coleta_dtgravacao,'dd/mm/yyyy hh24:mi') arm_coleta_dtgravacao,
                               co.arm_coleta_dtgravacao orderData,
                               to_char(co.arm_coleta_dtautoriza,'dd/mm/yyyy hh24:mi') arm_coleta_dtautoriza,
                               co.arm_coleta_pedido,
                               co.arm_coleta_entcoleta,
                               co.arm_coleta_flagquimico,
                               co.arm_coleta_tpcoleta,                               
                               
                               --Cliente Remetente                          
                               cliRem.Glb_Cliente_Razaosocial remetente_razao,                               
                               endRem.Glb_Cliend_Cidade cidade_origem,
                               cliRem.Glb_Grupoeconomico_Codigo remetente_grupoeconomico, 

                               --Cliente Destinatário
                               cliDes.Glb_Cliente_Razaosocial destinatario_razao,
                               endDes.Glb_Cliend_Cidade cidade_destino,
                               cliDes.Glb_Grupoeconomico_Codigo destinatario_grupoeconomico,

                               --Peso
                               Case nvl(co.arm_coleta_peso,0)
                                 When 0 then (select sum(item.arm_coleta_ncompra_peso)
                                                 from t_arm_coletancompra item
                                                 where item.arm_coletancompra = co.arm_coleta_ncompra
                                                   and item.arm_coleta_ciclo  = co.arm_coleta_ciclo)
                                 else co.arm_coleta_peso
                               End peso,

                               --Carga
                               carga.fcf_tpcargadescricao,
                               --Veiculo
                               veiculo.fcf_tpveiculo_descricao,
                               --Ocorrência
                               ocor.arm_coletaocor_codigo,
                               ocor.arm_coletaocor_descricao,

                               -- Origem
                               ori.arm_coletaorigem_cod,
                               ori.arm_coletaorigem_descmenor
                        from tdvadm.t_arm_coleta co,
                             tdvadm.t_glb_cliend  endRem,
                             tdvadm.t_glb_cliente cliRem,
                             tdvadm.t_glb_cliend  endDes,
                             tdvadm.t_glb_cliente cliDes,
                             tdvadm.t_fcf_tpcarga carga,
                             tdvadm.t_fcf_tpveiculo veiculo,
                             tdvadm.t_arm_coletaocor ocor,
                             tdvadm.t_arm_coletaorigem ori,
                             tdvadm.t_arm_nota n,
                             tdvadm.t_con_conhecimento ctrc,
                             tdvadm.t_con_controlectrce conctrc
                        where 
                        ( trunc(co.arm_coleta_dtgravacao) between vDataIni and vDataFim )
                        --( trunc(co.arm_coleta_dtsolicitacao) between vDataIni and vDataFim )
                        and co.arm_coletaorigem_cod In(4,2,6,8,9) -- 4=Coleta Java, 2=Quadrem, 6=FIFO

                        -----------------------------------------------------------------------------------------------
                        -- Filtra as Coletas por Grupo economico do CNPJ logado, Grupo do Destino ou Grupo de Origem ou  Grupo Solicitante
                        and (
                             -- Filtra por grupo economico
                             ((Select case sol.glb_grupoeconomico_codigo
                                         when '9999' then 'NULL'
                                         else sol.glb_grupoeconomico_codigo
                                      end
                                from t_glb_cliente sol
                                where trim(sol.glb_cliente_cgccpfcodigo) = trim(vCnpjLogado)) In ( (Select dest.glb_grupoeconomico_codigo
                                                                                                      from t_glb_cliente dest
                                                                                                      where trim(dest.glb_cliente_cgccpfcodigo) = trim(co.glb_cliente_cgccpfcodigoentreg)) ,
                                                                                                    (Select dest.glb_grupoeconomico_codigo
                                                                                                      from t_glb_cliente dest
                                                                                                      where trim(dest.glb_cliente_cgccpfcodigo) = trim(co.glb_cliente_cgccpfcodigocoleta)) ,
                                                                                                    (Select dest.glb_grupoeconomico_codigo
                                                                                                      from t_glb_cliente dest
                                                                                                      where trim(dest.glb_cliente_cgccpfcodigo) = trim(co.arm_coleta_cnpjsolicitante)) )
                               )
                             /****************************************************************************
                              * Foi Adicionado a opção consulta por armazém no dia 13/06/2016 - Felipe B.
                              ****************************************************************************/                                                                                      
                /*              or vArmazem = co.arm_armazem_codigo
                              -- liberados todos para os usuario
                              or vUsuario In('sdrumond','gmachado','jdonega', 'bbernardo', 'cferreira', 'emesilva')
                */
                              or '000' <> (Select usuario.glb_rota_codigo
                                             from tdvadm.t_usu_usuario usuario 
                                            where trim(usuario.usu_usuario_codigo) = vUsuario)
                              -- liberados somente para o usuario de cadastro
                              or vUsuario = trim(co.usu_usuario_codigo_cad)
                              -- liberados por cnpj envolvido
                              or trim(vCnpjLogado) In(trim(co.arm_coleta_cnpjsolicitante), trim(co.glb_cliente_cgccpfcodigoentreg), trim(co.glb_cliente_cgccpfcodigocoleta))
                             )
                        ----------------------------------------------------------------------------------------------

                        and co.glb_tpcliend_codigocoleta      = endRem.Glb_Tpcliend_Codigo
                        and co.glb_cliente_cgccpfcodigocoleta = endRem.Glb_Cliente_Cgccpfcodigo
                        and endRem.Glb_Cliente_Cgccpfcodigo   = cliRem.Glb_Cliente_Cgccpfcodigo

                        and co.glb_tpcliend_codigoentrega     = endDes.Glb_Tpcliend_Codigo
                        and co.glb_cliente_cgccpfcodigoentreg = endDes.Glb_Cliente_Cgccpfcodigo
                        and endDes.Glb_Cliente_Cgccpfcodigo   = cliDes.Glb_Cliente_Cgccpfcodigo

                        -- tpcarga não é campo obrigatório no Front-end, então pode ser ou não
                        and nvl(co.fcf_tpcarga_codigo,'00 ')    = carga.fcf_tpcarga_codigo

                        -- tpveiculo não é campo obrigatório no Front-end, então pode ser ou não
                        and nvl(co.fcf_tpveiculo_codigo,'0  ')  = veiculo.fcf_tpveiculo_codigo

                        -- ocorrencia pode ter ou não
                        and co.arm_coletaocor_codigo= ocor.arm_coletaocor_codigo(+)

                        -- como nem todos os sistemas estão gravando a origem colocamos OUTER JOIN
                        and nvl(co.arm_coletaorigem_cod,4) = ori.arm_coletaorigem_cod

                        and co.arm_coleta_ncompra = n.arm_coleta_ncompra(+)
                        and co.arm_coleta_ciclo   = n.arm_coleta_ciclo(+)
                        
                        and co.arm_coleta_ncompra = ctrc.arm_coleta_ncompra(+)
                        and co.arm_coleta_ciclo   = ctrc.arm_coleta_ciclo(+)
                        and ctrc.con_conhecimento_codigo = conctrc.con_conhecimento_codigo(+)
                        and ctrc.con_conhecimento_serie  = conctrc.con_conhecimento_serie(+)
                        and ctrc.glb_rota_codigo         = conctrc.glb_rota_codigo(+)                        
                        
                        -- Filtro enviado pelo usuário
                        and co.arm_coleta_ncompra like '%'||vColeta||'%'
--                        and trim(nvl(co.arm_coleta_pedido,'x'))  like '%'||vPedido||'%'
                        and (
                             trim(nvl(co.arm_coleta_pedido,'x'))  like '%'||vPedido||'%'
                             or 
                             trim(nvl(co.xml_coleta_numero,'x'))  like '%'||vPedido||'%'
                            )
                        and upper(endRem.Glb_Cliend_Cidade) like '%'||upper(vCidadeOrigem)||'%'
                        and upper(endDes.Glb_Cliend_Cidade) like '%'||upper(vCidadeDestino)||'%'

                        and (upper(cliRem.Glb_Cliente_Razaosocial) like '%'||upper(vRemetente)||'%' or cliRem.Glb_Cliente_Cgccpfcodigo like '%'||vRemetente||'%')
                        and (upper(cliDes.Glb_Cliente_Razaosocial) like '%'||upper(vDestinatario)||'%' or cliDes.Glb_Cliente_Cgccpfcodigo like '%'||vDestinatario||'%')                        
                        
                        and upper(trim(nvl(carga.fcf_tpcargadescricao,'x'))) like '%'||upper(trim(vTipoCarga))||'%'
                        and upper(trim(nvl(veiculo.fcf_tpveiculo_descricao,'x'))) like '%'||upper(trim(vTipoVeiculo))||'%'
                        and upper(nvl(co.arm_coletaorigem_cod,-1)) like '%'||upper(vOrigem)||'%'

/*                        and ( (nvl(n.arm_nota_numero,'') like '%'||nvl(vNota, '') ||'%') or (nvl(n.arm_nota_numero,'1') like '%'||nvl(vNota, '1') ||'%') or
                              (nvl(n.arm_nota_chavenfe,'') like '%'||nvl(vNota, '') ||'%') or (nvl(n.arm_nota_chavenfe,'1') like '%'||nvl(vNota, '1') ||'%') )      
*/
                        and ( (nvl(n.arm_nota_numero,'') like '%'||nvl(vNota, '') ||'%') or (nvl(n.arm_nota_numero,'1') like '%'||nvl(vNota, '1') ||'%') or
                              (nvl(n.arm_nota_chavenfe,'') = nvl(vNota, '') ) or (nvl(n.arm_nota_chavenfe,'1') = nvl(vNota, '1') ) )      

                        and ( (nvl(ctrc.con_conhecimento_codigo,'') like '%'|| nvl(vCTRC, '') ||'%') or (nvl(ctrc.con_conhecimento_codigo,'1') like '%'|| nvl(vCTRC, '1') ||'%') or
                              (nvl(conctrc.con_controlectrce_chavesefaz,'') like '%'|| nvl(vCTRC, '') ||'%') or (nvl(conctrc.con_controlectrce_chavesefaz,'1') like '%'|| nvl(vCTRC, '1') ||'%'))      

                        -- Ocorrencia
                        and ( nvl(co.arm_coletaocor_codigo,'-1') like '%'||vOcorrencia||'%' Or
                            ( vOcorrencia = 'XX' and co.arm_coletaocor_codigo is null and co.arm_coleta_dtautoriza is not null) or
                            ( vOcorrencia = 'OU' and co.arm_coletaocor_codigo not in ('65 ', '64 ', '55 ', '66 ')))

                        order by orderData--, ROWID
                        ) topn
                  where rownum <= ((vPagina + 1) * vQntdeRegistros)
                  )
            where rnum > ((vPagina) * vQntdeRegistros);
        End If;
        
      insert INTO tdvadm.t_glb_sql values(vSelect || vTabelas || vWhere,SYSDATE,'DATA','TESTE');
            
        pQntdePaginas := trunc(pCount / vQntdeRegistros);
        if(mod(pCount / vQntdeRegistros, 1) > 0) then
            pQntdePaginas := pQntdePaginas + 1;
        End if;
        
        pStatus  := Status_Normal;
        pMessage := 'OK';
      else
        open pCursor for
        select sysdate from dual;
        pStatus  := Status_Warning;
        pMessage := 'Não retornaram Linhas';
      end if;      
      
    exception when others then
      Open pCursor For Select sysdate from dual;
      pStatus  := Status_Erro;
      pMessage := sqlerrm||' - '||dbms_utility.format_error_backtrace;
    end;
  end Sp_Get_ConsultaColetasPaginado;


  Procedure Sp_Get_ConsultaColetasPaginad2(pXmlFilter      in varchar2,
                                   pCursor         out T_CURSOR,
                                   pQntdePaginas   out integer,
                                   pCount          out integer,
                                   pStatus         out varchar2,
                                   pMessage        out varchar2)
  as
    vDataIni date;
    vDataFim date;
    vUsuario varchar2(10);
    vColeta  varchar2(6);
    vPedido  varchar2(30);
    vArmazem varchar2(30);
    vCidadeOrigem varchar2(100);
    vCidadeDestino varchar2(100);
    vRemetente varchar2(100);
    vDestinatario varchar2(100);
    vTipoCarga varchar2(30);
    vTipoVeiculo varchar2(30);
    vOrigem t_Arm_Coletaorigem.Arm_Coletaorigem_Cod%Type;
    vOcorrencia Varchar(2);
    vPagina integer;
    vQntdeRegistros integer; -- Quantidade de registros a serem selecionados de cada vez

    vCnpjLogado Varchar2(20);
    vNota VARCHAR2(100);--T_arm_Nota.Arm_Nota_Numero%Type;
    vCTRC VARCHAR(100);--t_Con_Conhecimento.Con_Conhecimento_Codigo%Type;
    vSelect      varchar2(1350);
    vSelectCount varchar2(100);
    vTabelas     varchar2(400);
    vWhere       clob;
--    vScript      clob;
    vModoNovo    char(1) := 'S';
  begin
    begin
--      vScript := empty_clob; 
      if pStatus is null Then
         vModoNovo := 'S';
      Else
         vModoNovo := 'N';
      End If;
/*
-- Modelo XML      
    <filtro>
       <coleta>xxxx</coleta>
       <pedido>xxxx</pedido>
       <nota>1213</nota>
       <ctrc>104781</ctrc>
       <dataIni>20/03/2018</dataIni>
       <dataFim>20/03/2018</dataFim>
       <armazem>06</armazem>
       <cidadeOrigem>SAO PAULO</cidadeOrigem>
       <cidadeDestino>ITAUNA</cidadeDestino>
       <remetente>CHICO</remetente>
       <destinatario>PAILO</destinatario>
       <tipoCarga>01</tipoCarga>
       <tipoVeiculo>1</tipoVeiculo>
       <usuario>gvocatore</usuario>
       <cnpjLogado>61139432000172</cnpjLogado>
       <origem>1</origem>
       <ocorrencia>69</ocorrencia>
       <pagina>0</pagina>
       <qntdeRegistros>10</qntdeRegistros>
    </filtro>


*/
  
    SELECT nvl(extractValue(VALUE(TAB), '/filtro/dataIni'),sysdate),
             nvl(extractValue(VALUE(TAB), '/filtro/dataFim'), sysdate),
             substr(extractValue(VALUE(TAB), '/filtro/usuario'),0,10),
             substr(extractValue(VALUE(TAB), '/filtro/coleta'),0,6),
             extractValue(VALUE(TAB), '/filtro/armazem'),             
             extractValue(VALUE(TAB), '/filtro/cidadeOrigem'),
             extractValue(VALUE(TAB), '/filtro/cidadeDestino'),
             extractValue(VALUE(TAB), '/filtro/remetente'),
             extractValue(VALUE(TAB), '/filtro/destinatario'),
             extractValue(VALUE(TAB), '/filtro/tipoCarga'),
             extractValue(VALUE(TAB), '/filtro/tipoVeiculo'),
             extractValue(VALUE(TAB), '/filtro/pedido'),
             extractValue(VALUE(TAB), '/filtro/origem'),
             trim(extractValue(VALUE(TAB), '/filtro/ocorrencia')),
             extractValue(VALUE(TAB), '/filtro/cnpjLogado'),
             extractValue(VALUE(TAB), '/filtro/nota'),
             extractValue(VALUE(TAB), '/filtro/ctrc'),
             extractValue(VALUE(TAB), '/filtro/pagina'),
             extractValue(VALUE(TAB), '/filtro/qntdeRegistros')                          
        into vDataIni,
             vDataFim,
             vUsuario,
             vColeta,
             vArmazem,
             vCidadeOrigem,
             vCidadeDestino,
             vRemetente,
             vDestinatario,
             vTipoCarga,
             vTipoVeiculo,
             vPedido,
             vOrigem,
             vOcorrencia,
             vCnpjLogado,
             vNota,
             vCTRC,
             vPagina,
             vQntdeRegistros
        FROM TABle(XMLSequence(extract(xmltype.createXML(pXmlFilter),'/filtro'))) TAB;

      dbms_output.put_line('posso precisar do usuário: '||VUsuario);
      vDataIni := to_date(nvl(vDataIni, sysdate-30), 'DD/MM/YYYY');
      vDataFim := to_date(nvl(vDataFim, sysdate), 'DD/MM/YYYY');

      -- limitar o periodo de consulta em 15 dias
--       insert INTO tdvadm.t_glb_sql values(pXmlFilter,SYSDATE,'FILTRO_COLETA','TESTE DA PERFORMANCE DO FILTRO DA COLETA');

    vSelectCount := 'select count(Distinct co.arm_coleta_ncompra || co.arm_coleta_ciclo) ' ||  chr(10);
    vSelect      := 'Select *  ' ||
                    'from( Select /*+ FIRST_ROWS(20) */ ' || chr(10) ||
                                 'topn.*,  ' || chr(10) ||
                                 'ROWNUM rnum  ' || chr(10) ||
                          'from(select   ' || chr(10) ||
                           
                           
                                      'Distinct  ' || chr(10) ||
                                      --Coleta 
                                      'co.arm_coleta_ncompra, ' || chr(10) ||
                                      'co.arm_coleta_ciclo, ' || chr(10) ||
                                      'to_char(co.arm_coleta_dtgravacao,''dd/mm/yyyy hh24:mi'') arm_coleta_dtgravacao, ' || chr(10) ||
                                      'co.arm_coleta_dtgravacao orderData, ' || chr(10) ||
                                      'to_char(co.arm_coleta_dtautoriza,''dd/mm/yyyy hh24:mi'') arm_coleta_dtautoriza, ' || chr(10) ||
                                      'co.arm_coleta_pedido, ' || chr(10) ||
                                      'co.arm_coleta_entcoleta, ' || chr(10) ||
                                      'co.arm_coleta_flagquimico, ' || chr(10) ||
                                      'co.arm_coleta_tpcoleta, ' || chr(10) ||
                                      --Cliente Remetente 
                                      'cliRem.Glb_Cliente_Razaosocial remetente_razao, ' || chr(10) ||
                                      'endRem.Glb_Cliend_Cidade cidade_origem, ' || chr(10) ||
                                      'cliRem.Glb_Grupoeconomico_Codigo remetente_grupoeconomico,  ' || chr(10) ||
                                      --Cliente Destinatário 
                                      'cliDes.Glb_Cliente_Razaosocial destinatario_razao, ' || chr(10) ||
                                      'endDes.Glb_Cliend_Cidade cidade_destino, ' || chr(10) ||
                                      'cliDes.Glb_Grupoeconomico_Codigo destinatario_grupoeconomico, ' || chr(10) ||
                                      --Peso
                                      'Case nvl(co.arm_coleta_peso,0) ' || chr(10) ||
                                      '  When 0 then (select sum(item.arm_coleta_ncompra_peso) ' || chr(10) ||
                                      '               from tdvadm.t_arm_coletancompra item ' || chr(10) ||
                                      '               where item.arm_coletancompra = co.arm_coleta_ncompra ' || chr(10) ||
                                      '                 and item.arm_coleta_ciclo  = co.arm_coleta_ciclo) ' || chr(10) ||
                                      'else co.arm_coleta_peso ' || chr(10) ||
                                      'End peso, ' || chr(10) ||
                                      --Carga
                                      'carga.fcf_tpcargadescricao, ' || chr(10) ||
                                      --Veiculo
                                      'veiculo.fcf_tpveiculo_descricao, ' || chr(10) ||
                                      --Ocorrência 
                                      'ocor.arm_coletaocor_codigo, ' || chr(10) ||
                                      'ocor.arm_coletaocor_descricao, ' || chr(10) ||
                                      -- Origem 
                                      'ori.arm_coletaorigem_cod, ' || chr(10) ||
                                      'ori.arm_coletaorigem_descmenor ' || chr(10);
                               

    vTabelas     := 'from tdvadm.t_arm_coleta co, ' || chr(10) ||
                         'tdvadm.t_glb_cliend  endRem, ' || chr(10) ||
                         'tdvadm.t_glb_cliente cliRem, ' || chr(10) ||
                         'tdvadm.t_glb_cliend  endDes, ' || chr(10) ||
                         'tdvadm.t_glb_cliente cliDes, ' || chr(10) ||
                         'tdvadm.t_fcf_tpcarga carga, ' || chr(10) ||
                         'tdvadm.t_fcf_tpveiculo veiculo, ' || chr(10) ||
                         'tdvadm.t_arm_coletaocor ocor, ' || chr(10) ||
                         'tdvadm.t_arm_coletaorigem ori, ' || chr(10) ||
                         'tdvadm.t_arm_nota n, ' || chr(10) ||
                         'tdvadm.t_con_conhecimento ctrc, ' || chr(10) ||
                         'tdvadm.t_con_controlectrce conctrc ' || chr(10);

 

     vWhere := '';
     vWhere  :=  vWhere || 'where ( trunc(co.arm_coleta_dtgravacao) between to_date(''' || vDataIni || ''',''DD/MM/YYYY'') and to_date(''' ||  vDataFim  || ''',''DD/MM/YYYY'')) ';
     vWhere  :=  vWhere || chr(10)  || '  and co.arm_coletaorigem_cod In(4,2,6,8,9) '; -- 4=Coleta Java, 2=Quadrem, 6=FIFO
        -----------------------------------------------------------------------------------------------
        -- Filtra as Coletas por Grupo economico do CNPJ logado, Grupo do Destino ou Grupo de Origem ou  Grupo Solicitante
     vWhere  :=  vWhere || chr(10)  || ' and ( ';
             -- Filtra por grupo economico
     vWhere  :=  vWhere || chr(10)  || '             (Select case sol.glb_grupoeconomico_codigo ';
     vWhere  :=  vWhere || chr(10)  || '                     when ''9999'' then ''NULL'' ' ;
     vWhere  :=  vWhere || chr(10)  || '                     else sol.glb_grupoeconomico_codigo ';
     vWhere  :=  vWhere || chr(10)  || '                     end ';
     vWhere  :=  vWhere || chr(10)  || '              from tdvadm.t_glb_cliente sol ';
     vWhere  :=  vWhere || chr(10)  || '              where trim(sol.glb_cliente_cgccpfcodigo) = trim( ''' || vCnpjLogado || ''')) In ( (Select dest.glb_grupoeconomico_codigo ';
     vWhere  :=  vWhere || chr(10)  || '                                                                                                 from tdvadm.t_glb_cliente dest ';
     vWhere  :=  vWhere || chr(10)  || '                                                                                                 where trim(dest.glb_cliente_cgccpfcodigo) = trim(co.glb_cliente_cgccpfcodigoentreg)), ';
     vWhere  :=  vWhere || chr(10)  || '                                                                                                 (Select dest.glb_grupoeconomico_codigo ';
     vWhere  :=  vWhere || chr(10)  || '                                                                                                  from tdvadm.t_glb_cliente dest ';
     vWhere  :=  vWhere || chr(10)  || '                                                                                                  where trim(dest.glb_cliente_cgccpfcodigo) = trim(co.glb_cliente_cgccpfcodigocoleta)) , ';
     vWhere  :=  vWhere || chr(10)  || '                                                                                                 (Select dest.glb_grupoeconomico_codigo ';
     vWhere  :=  vWhere || chr(10)  || '                                                                                                  from tdvadm.t_glb_cliente dest ';
     vWhere  :=  vWhere || chr(10)  || '                                                                                                  where trim(dest.glb_cliente_cgccpfcodigo) = trim(co.arm_coleta_cnpjsolicitante)) ) ';
               -- libera coletas do mesmo armazem do usuario 
             /****************************************************************************
              * Foi Adicionado a opção consulta por armazém no dia 13/06/2016 - Felipe B.
              ****************************************************************************/                                                                                      
/*              or vArmazem = co.arm_armazem_codigo
              -- liberados todos para os usuario
              or vUsuario In('sdrumond','gmachado','jdonega', 'bbernardo', 'cferreira', 'emesilva')
*/
     vWhere  :=  vWhere || chr(10)  || '              or ''000'' <> (Select usuario.glb_rota_codigo ';
     vWhere  :=  vWhere || chr(10)  || '                           from tdvadm.t_usu_usuario usuario  ';
     vWhere  :=  vWhere || chr(10)  || '                           where usuario.usu_usuario_codigo = rpad( ''' || vUsuario || ''',10)) ';
              -- liberados somente para o usuario de cadastro
     vWhere  :=  vWhere || chr(10)  || '              or ''' || vUsuario || ''' = trim(co.usu_usuario_codigo_cad) ';
              -- liberados por cnpj envolvido
     vWhere  :=  vWhere || chr(10)  || '              or trim( ''' || vCnpjLogado || ''') In(trim(co.arm_coleta_cnpjsolicitante), trim(co.glb_cliente_cgccpfcodigoentreg), trim(co.glb_cliente_cgccpfcodigocoleta)) ';
     vWhere  :=  vWhere || chr(10)  || '             ) ';
        ----------------------------------------------------------------------------------------------
     vWhere  :=  vWhere || chr(10)  || '      and co.glb_tpcliend_codigocoleta      = endRem.Glb_Tpcliend_Codigo ';
     vWhere  :=  vWhere || chr(10)  || '      and co.glb_cliente_cgccpfcodigocoleta = endRem.Glb_Cliente_Cgccpfcodigo ';
     vWhere  :=  vWhere || chr(10)  || '      and endRem.Glb_Cliente_Cgccpfcodigo   = cliRem.Glb_Cliente_Cgccpfcodigo ';
     vWhere  :=  vWhere || chr(10)  || '      and co.glb_tpcliend_codigoentrega     = endDes.Glb_Tpcliend_Codigo ';
     vWhere  :=  vWhere || chr(10)  || '      and co.glb_cliente_cgccpfcodigoentreg = endDes.Glb_Cliente_Cgccpfcodigo ';
     vWhere  :=  vWhere || chr(10)  || '      and endDes.Glb_Cliente_Cgccpfcodigo   = cliDes.Glb_Cliente_Cgccpfcodigo ';
        -- tpcarga não é campo obrigatório no Front-end, então pode ser ou não
     vWhere  :=  vWhere || chr(10)  || '      and nvl(co.fcf_tpcarga_codigo,''00 '')    = carga.fcf_tpcarga_codigo ';
        -- tpveiculo não é campo obrigatório no Front-end, então pode ser ou não
     vWhere  :=  vWhere || chr(10)  || '      and nvl(co.fcf_tpveiculo_codigo,''0   '')  = veiculo.fcf_tpveiculo_codigo ';
        -- ocorrencia pode ter ou não
     vWhere  :=  vWhere || chr(10)  || '      and co.arm_coletaocor_codigo = ocor.arm_coletaocor_codigo(+) ';
        -- como nem todos os sistemas estão gravando a origem colocamos OUTER JOIN
     vWhere  :=  vWhere || chr(10)  || '      and nvl(co.arm_coletaorigem_cod,4) = ori.arm_coletaorigem_cod ';
     vWhere  :=  vWhere || chr(10)  || '      and co.arm_coleta_ncompra = n.arm_coleta_ncompra(+) ';
     vWhere  :=  vWhere || chr(10)  || '      and co.arm_coleta_ciclo   = n.arm_coleta_ciclo(+) ';
     vWhere  :=  vWhere || chr(10)  || '      and co.arm_coleta_ncompra = ctrc.arm_coleta_ncompra(+) ';
     vWhere  :=  vWhere || chr(10)  || '      and co.arm_coleta_ciclo   = ctrc.arm_coleta_ciclo(+) ';
     vWhere  :=  vWhere || chr(10)  || '      and ctrc.con_conhecimento_codigo = conctrc.con_conhecimento_codigo(+) ';
     vWhere  :=  vWhere || chr(10)  || '      and ctrc.con_conhecimento_serie  = conctrc.con_conhecimento_serie(+) ';
     vWhere  :=  vWhere || chr(10)  || '      and ctrc.glb_rota_codigo         = conctrc.glb_rota_codigo(+) ';
        -- Foi adicionado como filtro no dia 28/06/2016
     If vArmazem is not null Then
        vWhere  :=  vWhere || chr(10)  || '      and co.arm_armazem_codigo like ''%' || vArmazem || '%''';
     End If;     
        -- Filtro enviado pelo usuário

     If vColeta is not null Then
        vWhere  :=  vWhere || chr(10)  || '      and co.arm_coleta_ncompra like ''%' || vColeta || '%''';
     End If;
     
     If vPedido is not null Then

        vWhere  :=  vWhere || chr(10)  || '      and ( ';
        vWhere  :=  vWhere || chr(10)  || '           trim(nvl(co.arm_coleta_pedido,''x'')) like ''%' || vPedido || '%''';
        vWhere  :=  vWhere || chr(10)  || '           or ';
        vWhere  :=  vWhere || chr(10)  || '           trim(nvl(co.xml_coleta_numero,''x'')) like ''%' || vPedido || '%''';
        vWhere  :=  vWhere || chr(10)  || '          ) ';
     End If;
     
     If vCidadeOrigem is not null Then 
        vWhere  :=  vWhere || chr(10)  || '      and upper(endRem.Glb_Cliend_Cidade) like ''%' || vCidadeOrigem || '%''';
     End If;
     
     If vCidadeDestino is not null Then
        vWhere  :=  vWhere || chr(10)  || '      and upper(endDes.Glb_Cliend_Cidade) like ''%' || vCidadeDestino || '%''';
     End If;
     
     If vRemetente is not null Then
        vWhere  :=  vWhere || chr(10)  || '      and (upper(cliRem.Glb_Cliente_Razaosocial) like ''%' || vRemetente || '%'''; 
        vWhere  :=  vWhere || chr(10)  || '        or cliRem.Glb_Cliente_Cgccpfcodigo like ''%' || vRemetente || '%'')';
     End If;

     If vDestinatario is not null Then
        vWhere  :=  vWhere || chr(10)  || '      and (upper(cliDes.Glb_Cliente_Razaosocial) like ''%' || vDestinatario || '%'''; 
        vWhere  :=  vWhere || chr(10)  || '        or cliDes.Glb_Cliente_Cgccpfcodigo like ''%' || vDestinatario || '%'')';                        
     End If;
     
     If vTipoCarga is not null Then
        vWhere  :=  vWhere || chr(10)  || '      and upper(trim(nvl(carga.fcf_tpcargadescricao,''x''))) like ''%' || vTipoCarga || '%''';
     End If;

     If vTipoVeiculo is not null Then
        vWhere  :=  vWhere || chr(10)  || '      and upper(trim(nvl(veiculo.fcf_tpveiculo_descricao,''x''))) like ''%' || vTipoVeiculo || '%''';
     End If;

     If vOrigem is not null Then
        vWhere  :=  vWhere || chr(10)  || '      and upper(nvl(co.arm_coletaorigem_cod,-1)) like ''%' || vOrigem || '%''';
     End If; 

/*        and ( (nvl(n.arm_nota_numero,'') like '%'||nvl(vNota, '') ||'%') or (nvl(n.arm_nota_numero,'1') like '%'||nvl(vNota, '1') ||'%') or
              (nvl(n.arm_nota_chavenfe,'') like '%'||nvl(vNota, '') ||'%') or (nvl(n.arm_nota_chavenfe,'1') like '%'||nvl(vNota, '1') ||'%') )      
*/

     If vNota is not null Then
        vWhere  :=  vWhere || chr(10)  || '      and ( (nvl(n.arm_nota_numero,''1'') like ''%' || vOrigem || '%'')'; 
        vWhere  :=  vWhere || chr(10)  || '       or (nvl(n.arm_nota_chavenfe,''1'') = ' || vNota || ' ) ) ';
     End If;

     If vCTRC is not null Then
        vWhere  :=  vWhere || chr(10)  || '      and ( (nvl(ctrc.con_conhecimento_codigo,''1'') like ''%' || vCTRC || '%'')'; 
        vWhere  :=  vWhere || chr(10)  || '       or (nvl(conctrc.con_controlectrce_chavesefaz,''1'') like ''%' || vCTRC || '%''))';      
     End If; 
        -- Ocorrencia
     If vOcorrencia is not null Then
        vWhere  :=  vWhere || chr(10)  || '      and ( nvl(co.arm_coletaocor_codigo,''-1'') like ''%' || vOcorrencia || '%'''; 
        vWhere  :=  vWhere || chr(10)  || '       Or ( ''' ||  vOcorrencia || ''' = ''XX'' and co.arm_coletaocor_codigo is null and co.arm_coleta_dtautoriza is not null) ';
        vWhere  :=  vWhere || chr(10)  || '       Or ( ''' ||  vOcorrencia || ''' = ''OU'' and co.arm_coletaocor_codigo not in (''65 '', ''64 '', ''55 '', ''66 ''))) ';
      End If;

--        vWhere  :=  vWhere || chr(10)  || '      )  ';
       
      
--     delete tdvadm.t_glb_sql s
--     where s.glb_sql_programa = 'SIRLANO COLETA';
     
     insert into tdvadm.t_glb_sql values (vSelectCount || vTabelas || vWhere, sysdate, 'SIRLANO COLETA','Select count(*)');

     
     If vModoNovo = 'S' Then
        execute immediate (vSelectCount || vTabelas || vWhere) into pCount;
        -- Depopis de Contar complementa o Script 
        vWhere  :=  vWhere || chr(10)  || '  order by orderData ) topn';
        vWhere  :=  vWhere || chr(10)  || '  where rownum <= (( ' || vPagina || ' + 1) * ' || vQntdeRegistros || ')) ';
        vWhere  :=  vWhere || chr(10)  || '  where rnum > ((' || vPagina || ') * ' || vQntdeRegistros || ') ';
        insert into tdvadm.t_glb_sql values (vSelect || vTabelas || vWhere, sysdate, 'SIRLANO COLETA','Select');
     Else
          select  count(Distinct co.arm_coleta_ncompra || co.arm_coleta_ciclo)
            into pCount
            from t_arm_coleta co,
                 t_glb_cliend  endRem,
                 t_glb_cliente cliRem,
                 t_glb_cliend  endDes,
                 t_glb_cliente cliDes,
                 t_fcf_tpcarga carga,
                 t_fcf_tpveiculo veiculo,
                 t_arm_coletaocor ocor,
                 t_arm_coletaorigem ori,
                 t_arm_nota n,
                 t_con_conhecimento ctrc,
                 tdvadm.t_con_controlectrce conctrc
            where 
            ( trunc(co.arm_coleta_dtgravacao) between vDataIni and vDataFim )
            --( trunc(co.arm_coleta_dtsolicitacao) between vDataIni and vDataFim )
            and co.arm_coletaorigem_cod In(4,2,6,8,9) -- 4=Coleta Java, 2=Quadrem, 6=FIFO

            -----------------------------------------------------------------------------------------------
            -- Filtra as Coletas por Grupo economico do CNPJ logado, Grupo do Destino ou Grupo de Origem ou  Grupo Solicitante
            and (
                 -- Filtra por grupo economico
                 (Select case sol.glb_grupoeconomico_codigo
                             when '9999' then 'NULL'
                             else sol.glb_grupoeconomico_codigo
                          end
                    from t_glb_cliente sol
                    where trim(sol.glb_cliente_cgccpfcodigo) = trim(vCnpjLogado)) In ( (Select dest.glb_grupoeconomico_codigo
                                                                                          from t_glb_cliente dest
                                                                                          where trim(dest.glb_cliente_cgccpfcodigo) = trim(co.glb_cliente_cgccpfcodigoentreg)) ,
                                                                                        (Select dest.glb_grupoeconomico_codigo
                                                                                          from t_glb_cliente dest
                                                                                          where trim(dest.glb_cliente_cgccpfcodigo) = trim(co.glb_cliente_cgccpfcodigocoleta)) ,
                                                                                        (Select dest.glb_grupoeconomico_codigo
                                                                                          from t_glb_cliente dest
                                                                                        where trim(dest.glb_cliente_cgccpfcodigo) = trim(co.arm_coleta_cnpjsolicitante)) )
                   -- libera coletas do mesmo armazem do usuario 
                 /****************************************************************************
                  * Foi Adicionado a opção consulta por armazém no dia 13/06/2016 - Felipe B.
                  ****************************************************************************/                                                                                      
    /*              or vArmazem = co.arm_armazem_codigo
                  -- liberados todos para os usuario
                  or vUsuario In('sdrumond','gmachado','jdonega', 'bbernardo', 'cferreira', 'emesilva')
    */
                  or '000' <> (Select usuario.glb_rota_codigo
                                 from tdvadm.t_usu_usuario usuario 
                                where usuario.usu_usuario_codigo = rpad(vUsuario,10,' '))
                  -- liberados somente para o usuario de cadastro
                  or vUsuario = trim(co.usu_usuario_codigo_cad)
                  -- liberados por cnpj envolvido
                  or trim(vCnpjLogado) In(trim(co.arm_coleta_cnpjsolicitante), trim(co.glb_cliente_cgccpfcodigoentreg), trim(co.glb_cliente_cgccpfcodigocoleta))
                 )
            ----------------------------------------------------------------------------------------------

            and co.glb_tpcliend_codigocoleta      = endRem.Glb_Tpcliend_Codigo
            and co.glb_cliente_cgccpfcodigocoleta = endRem.Glb_Cliente_Cgccpfcodigo
            and endRem.Glb_Cliente_Cgccpfcodigo   = cliRem.Glb_Cliente_Cgccpfcodigo

            and co.glb_tpcliend_codigoentrega     = endDes.Glb_Tpcliend_Codigo
            and co.glb_cliente_cgccpfcodigoentreg = endDes.Glb_Cliente_Cgccpfcodigo
            and endDes.Glb_Cliente_Cgccpfcodigo   = cliDes.Glb_Cliente_Cgccpfcodigo

            -- tpcarga não é campo obrigatório no Front-end, então pode ser ou não
            and nvl(co.fcf_tpcarga_codigo,'00 ')    = carga.fcf_tpcarga_codigo

            -- tpveiculo não é campo obrigatório no Front-end, então pode ser ou não
            and nvl(co.fcf_tpveiculo_codigo,'0  ')  = veiculo.fcf_tpveiculo_codigo

            -- ocorrencia pode ter ou não
            and co.arm_coletaocor_codigo = ocor.arm_coletaocor_codigo (+)

            -- como nem todos os sistemas estão gravando a origem colocamos OUTER JOIN
            and nvl(co.arm_coletaorigem_cod,4) = ori.arm_coletaorigem_cod

            and co.arm_coleta_ncompra = n.arm_coleta_ncompra(+)
            and co.arm_coleta_ciclo   = n.arm_coleta_ciclo(+)
                            
            and co.arm_coleta_ncompra = ctrc.arm_coleta_ncompra(+)
            and co.arm_coleta_ciclo   = ctrc.arm_coleta_ciclo(+)
            and ctrc.con_conhecimento_codigo = conctrc.con_conhecimento_codigo(+)
            and ctrc.con_conhecimento_serie  = conctrc.con_conhecimento_serie(+)
            and ctrc.glb_rota_codigo         = conctrc.glb_rota_codigo(+)                        
            
            -- Foi adicionado como filtro no dia 28/06/2016
            and co.arm_armazem_codigo like '%'|| vArmazem ||'%'
            
            
            -- Filtro enviado pelo usuário
            and co.arm_coleta_ncompra like '%'||vColeta||'%'
    --        and trim(nvl(co.arm_coleta_pedido,'x'))  like '%'||vPedido||'%'
            and (
                 trim(nvl(co.arm_coleta_pedido,'x'))  like '%'||vPedido||'%'
                 or 
                 trim(nvl(co.xml_coleta_numero,'x'))  like '%'||vPedido||'%'
                )

            and upper(endRem.Glb_Cliend_Cidade) like '%'||upper(vCidadeOrigem)||'%'
            and upper(endDes.Glb_Cliend_Cidade) like '%'||upper(vCidadeDestino)||'%'

            and (upper(cliRem.Glb_Cliente_Razaosocial) like '%'||upper(vRemetente)||'%' or cliRem.Glb_Cliente_Cgccpfcodigo like '%'||trim(vRemetente)||'%')
            and (upper(cliDes.Glb_Cliente_Razaosocial) like '%'||upper(vDestinatario)||'%' or cliDes.Glb_Cliente_Cgccpfcodigo like '%'||trim(vDestinatario)||'%')                        

            and upper(trim(nvl(carga.fcf_tpcargadescricao,'x'))) like '%'||upper(trim(vTipoCarga))||'%'
            and upper(trim(nvl(veiculo.fcf_tpveiculo_descricao,'x'))) like '%'||upper(trim(vTipoVeiculo))||'%'
            and upper(nvl(co.arm_coletaorigem_cod,-1)) like '%'||upper(vOrigem)||'%'


    /*        and ( (nvl(n.arm_nota_numero,'') like '%'||nvl(vNota, '') ||'%') or (nvl(n.arm_nota_numero,'1') like '%'||nvl(vNota, '1') ||'%') or
                  (nvl(n.arm_nota_chavenfe,'') like '%'||nvl(vNota, '') ||'%') or (nvl(n.arm_nota_chavenfe,'1') like '%'||nvl(vNota, '1') ||'%') )      
    */        and ( (nvl(n.arm_nota_numero,'') like '%'||nvl(vNota, '') ||'%') or (nvl(n.arm_nota_numero,'1') like '%'||nvl(vNota, '1') ||'%') or
                  (nvl(n.arm_nota_chavenfe,'') = nvl(vNota, '') ) or (nvl(n.arm_nota_chavenfe,'1') = nvl(vNota, '1') ) )      

            and ( (nvl(ctrc.con_conhecimento_codigo,'') like '%'|| nvl(vCTRC, '') ||'%') or (nvl(ctrc.con_conhecimento_codigo,'1') like '%'|| nvl(vCTRC, '1') ||'%') or
                  (nvl(conctrc.con_controlectrce_chavesefaz,'') like '%'|| nvl(vCTRC, '') ||'%') or (nvl(conctrc.con_controlectrce_chavesefaz,'1') like '%'|| nvl(vCTRC, '1') ||'%'))      

            -- Ocorrencia
            and ( nvl(co.arm_coletaocor_codigo,'-1') like '%'||vOcorrencia||'%' Or
                ( vOcorrencia = 'XX' and co.arm_coletaocor_codigo is null and co.arm_coleta_dtautoriza is not null) or
                ( vOcorrencia = 'OU' and co.arm_coletaocor_codigo not in ('65 ', '64 ', '55 ', '66 '))) ;
      End If;
      
      if (pCount > 0) then
         If vModoNovo = 'S' Then
            open pCursor for vSelect || vTabelas || vWhere;
      Else
        open pCursor for
        Select * 
          from(
               Select /*+ FIRST_ROWS(20) */
                      topn.*, 
                      ROWNUM rnum 
                 from( 
                       select  Distinct 
                               --Coleta
                               co.arm_coleta_ncompra,
                               co.arm_coleta_ciclo,
                               to_char(co.arm_coleta_dtgravacao,'dd/mm/yyyy hh24:mi') arm_coleta_dtgravacao,
                               co.arm_coleta_dtgravacao orderData,
                               to_char(co.arm_coleta_dtautoriza,'dd/mm/yyyy hh24:mi') arm_coleta_dtautoriza,
                               co.arm_coleta_pedido,
                               co.arm_coleta_entcoleta,
                               co.arm_coleta_flagquimico,
                               co.arm_coleta_tpcoleta,                               
                               
                               --Cliente Remetente                          
                               cliRem.Glb_Cliente_Razaosocial remetente_razao,                               
                               endRem.Glb_Cliend_Cidade cidade_origem,
                               cliRem.Glb_Grupoeconomico_Codigo remetente_grupoeconomico, 

                               --Cliente Destinatário
                               cliDes.Glb_Cliente_Razaosocial destinatario_razao,
                               endDes.Glb_Cliend_Cidade cidade_destino,
                               cliDes.Glb_Grupoeconomico_Codigo destinatario_grupoeconomico,

                               --Peso
                               Case nvl(co.arm_coleta_peso,0)
                                 When 0 then (select sum(item.arm_coleta_ncompra_peso)
                                                 from t_arm_coletancompra item
                                                 where item.arm_coletancompra = co.arm_coleta_ncompra
                                                   and item.arm_coleta_ciclo  = co.arm_coleta_ciclo)
                                 else co.arm_coleta_peso
                               End peso,

                               --Carga
                               carga.fcf_tpcargadescricao,
                               --Veiculo
                               veiculo.fcf_tpveiculo_descricao,
                               --Ocorrência
                               ocor.arm_coletaocor_codigo,
                               ocor.arm_coletaocor_descricao,

                               -- Origem
                               ori.arm_coletaorigem_cod,
                               ori.arm_coletaorigem_descmenor
                        from tdvadm.t_arm_coleta co,
                             tdvadm.t_glb_cliend  endRem,
                             tdvadm.t_glb_cliente cliRem,
                             tdvadm.t_glb_cliend  endDes,
                             tdvadm.t_glb_cliente cliDes,
                             tdvadm.t_fcf_tpcarga carga,
                             tdvadm.t_fcf_tpveiculo veiculo,
                             tdvadm.t_arm_coletaocor ocor,
                             tdvadm.t_arm_coletaorigem ori,
                             tdvadm.t_arm_nota n,
                             tdvadm.t_con_conhecimento ctrc,
                             tdvadm.t_con_controlectrce conctrc
                        where 
                        ( trunc(co.arm_coleta_dtgravacao) between vDataIni and vDataFim )
                        --( trunc(co.arm_coleta_dtsolicitacao) between vDataIni and vDataFim )
                        and co.arm_coletaorigem_cod In(4,2,6,8,9) -- 4=Coleta Java, 2=Quadrem, 6=FIFO

                        -----------------------------------------------------------------------------------------------
                        -- Filtra as Coletas por Grupo economico do CNPJ logado, Grupo do Destino ou Grupo de Origem ou  Grupo Solicitante
                        and (
                             -- Filtra por grupo economico
                             ((Select case sol.glb_grupoeconomico_codigo
                                         when '9999' then 'NULL'
                                         else sol.glb_grupoeconomico_codigo
                                      end
                                from t_glb_cliente sol
                                where trim(sol.glb_cliente_cgccpfcodigo) = trim(vCnpjLogado)) In ( (Select dest.glb_grupoeconomico_codigo
                                                                                                      from t_glb_cliente dest
                                                                                                      where trim(dest.glb_cliente_cgccpfcodigo) = trim(co.glb_cliente_cgccpfcodigoentreg)) ,
                                                                                                    (Select dest.glb_grupoeconomico_codigo
                                                                                                      from t_glb_cliente dest
                                                                                                      where trim(dest.glb_cliente_cgccpfcodigo) = trim(co.glb_cliente_cgccpfcodigocoleta)) ,
                                                                                                    (Select dest.glb_grupoeconomico_codigo
                                                                                                      from t_glb_cliente dest
                                                                                                      where trim(dest.glb_cliente_cgccpfcodigo) = trim(co.arm_coleta_cnpjsolicitante)) )
                               )
                             /****************************************************************************
                              * Foi Adicionado a opção consulta por armazém no dia 13/06/2016 - Felipe B.
                              ****************************************************************************/                                                                                      
                /*              or vArmazem = co.arm_armazem_codigo
                              -- liberados todos para os usuario
                              or vUsuario In('sdrumond','gmachado','jdonega', 'bbernardo', 'cferreira', 'emesilva')
                */
                              or '000' <> (Select usuario.glb_rota_codigo
                                             from tdvadm.t_usu_usuario usuario 
                                            where trim(usuario.usu_usuario_codigo) = vUsuario)
                              -- liberados somente para o usuario de cadastro
                              or vUsuario = trim(co.usu_usuario_codigo_cad)
                              -- liberados por cnpj envolvido
                              or trim(vCnpjLogado) In(trim(co.arm_coleta_cnpjsolicitante), trim(co.glb_cliente_cgccpfcodigoentreg), trim(co.glb_cliente_cgccpfcodigocoleta))
                             )
                        ----------------------------------------------------------------------------------------------

                        and co.glb_tpcliend_codigocoleta      = endRem.Glb_Tpcliend_Codigo
                        and co.glb_cliente_cgccpfcodigocoleta = endRem.Glb_Cliente_Cgccpfcodigo
                        and endRem.Glb_Cliente_Cgccpfcodigo   = cliRem.Glb_Cliente_Cgccpfcodigo

                        and co.glb_tpcliend_codigoentrega     = endDes.Glb_Tpcliend_Codigo
                        and co.glb_cliente_cgccpfcodigoentreg = endDes.Glb_Cliente_Cgccpfcodigo
                        and endDes.Glb_Cliente_Cgccpfcodigo   = cliDes.Glb_Cliente_Cgccpfcodigo

                        -- tpcarga não é campo obrigatório no Front-end, então pode ser ou não
                        and nvl(co.fcf_tpcarga_codigo,'00 ')    = carga.fcf_tpcarga_codigo

                        -- tpveiculo não é campo obrigatório no Front-end, então pode ser ou não
                        and nvl(co.fcf_tpveiculo_codigo,'0  ')  = veiculo.fcf_tpveiculo_codigo

                        -- ocorrencia pode ter ou não
                        and co.arm_coletaocor_codigo = ocor.arm_coletaocor_codigo(+)

                        -- como nem todos os sistemas estão gravando a origem colocamos OUTER JOIN
                        and nvl(co.arm_coletaorigem_cod,4) = ori.arm_coletaorigem_cod

                        and co.arm_coleta_ncompra = n.arm_coleta_ncompra(+)
                        and co.arm_coleta_ciclo   = n.arm_coleta_ciclo(+)
                        
                        and co.arm_coleta_ncompra = ctrc.arm_coleta_ncompra(+)
                        and co.arm_coleta_ciclo   = ctrc.arm_coleta_ciclo(+)
                        and ctrc.con_conhecimento_codigo = conctrc.con_conhecimento_codigo(+)
                        and ctrc.con_conhecimento_serie  = conctrc.con_conhecimento_serie(+)
                        and ctrc.glb_rota_codigo         = conctrc.glb_rota_codigo(+)                        
                        
                        -- Filtro enviado pelo usuário
                        and co.arm_coleta_ncompra like '%'||vColeta||'%'
--                        and trim(nvl(co.arm_coleta_pedido,'x'))  like '%'||vPedido||'%'
                        and (
                             trim(nvl(co.arm_coleta_pedido,'x'))  like '%'||vPedido||'%'
                             or 
                             trim(nvl(co.xml_coleta_numero,'x'))  like '%'||vPedido||'%'
                            )
                        and upper(endRem.Glb_Cliend_Cidade) like '%'||upper(vCidadeOrigem)||'%'
                        and upper(endDes.Glb_Cliend_Cidade) like '%'||upper(vCidadeDestino)||'%'

                        and (upper(cliRem.Glb_Cliente_Razaosocial) like '%'||upper(vRemetente)||'%' or cliRem.Glb_Cliente_Cgccpfcodigo like '%'||vRemetente||'%')
                        and (upper(cliDes.Glb_Cliente_Razaosocial) like '%'||upper(vDestinatario)||'%' or cliDes.Glb_Cliente_Cgccpfcodigo like '%'||vDestinatario||'%')                        
                        
                        and upper(trim(nvl(carga.fcf_tpcargadescricao,'x'))) like '%'||upper(trim(vTipoCarga))||'%'
                        and upper(trim(nvl(veiculo.fcf_tpveiculo_descricao,'x'))) like '%'||upper(trim(vTipoVeiculo))||'%'
                        and upper(nvl(co.arm_coletaorigem_cod,-1)) like '%'||upper(vOrigem)||'%'

/*                        and ( (nvl(n.arm_nota_numero,'') like '%'||nvl(vNota, '') ||'%') or (nvl(n.arm_nota_numero,'1') like '%'||nvl(vNota, '1') ||'%') or
                              (nvl(n.arm_nota_chavenfe,'') like '%'||nvl(vNota, '') ||'%') or (nvl(n.arm_nota_chavenfe,'1') like '%'||nvl(vNota, '1') ||'%') )      
*/
                        and ( (nvl(n.arm_nota_numero,'') like '%'||nvl(vNota, '') ||'%') or (nvl(n.arm_nota_numero,'1') like '%'||nvl(vNota, '1') ||'%') or
                              (nvl(n.arm_nota_chavenfe,'') = nvl(vNota, '') ) or (nvl(n.arm_nota_chavenfe,'1') = nvl(vNota, '1') ) )      

                        and ( (nvl(ctrc.con_conhecimento_codigo,'') like '%'|| nvl(vCTRC, '') ||'%') or (nvl(ctrc.con_conhecimento_codigo,'1') like '%'|| nvl(vCTRC, '1') ||'%') or
                              (nvl(conctrc.con_controlectrce_chavesefaz,'') like '%'|| nvl(vCTRC, '') ||'%') or (nvl(conctrc.con_controlectrce_chavesefaz,'1') like '%'|| nvl(vCTRC, '1') ||'%'))      

                        -- Ocorrencia
                        and ( nvl(co.arm_coletaocor_codigo,'-1') like '%'||vOcorrencia||'%' Or
                            ( vOcorrencia = 'XX' and co.arm_coletaocor_codigo is null and co.arm_coleta_dtautoriza is not null) or
                            ( vOcorrencia = 'OU' and co.arm_coletaocor_codigo not in ('65 ', '64 ', '55 ', '66 ')))

                        order by orderData--, ROWID
                        ) topn
                  where rownum <= ((vPagina + 1) * vQntdeRegistros)
                  )
            where rnum > ((vPagina) * vQntdeRegistros);
        End If;
            
        pQntdePaginas := trunc(pCount / vQntdeRegistros);
        if(mod(pCount / vQntdeRegistros, 1) > 0) then
            pQntdePaginas := pQntdePaginas + 1;
        End if;
        
        pStatus  := Status_Normal;
        pMessage := 'OK';
      else
        open pCursor for
        select sysdate from dual;
        pStatus  := Status_Warning;
        pMessage := 'Não retornaram Linhas';
      end if;      
      
    exception when others then
      Open pCursor For Select sysdate from dual;
      pStatus  := Status_Erro;
      pMessage := sqlerrm||' - '||dbms_utility.format_error_backtrace;
    end;
  end Sp_Get_ConsultaColetasPaginad2;

  /*********************************************************************************************
  * Data..: 05/01/2015
  * Autor.: Fabiano Góes
  * Versão: 1.1 - Implementação VLI
  * 1. Recebe N Coletas através de um xml
  * 2. Executa a regra para autorizar as coletas uma a uma
  * 3. Retorna um xml com todos os resultas das coletas uma a uma
  **********************************************************************************************/
  Procedure Sp_Set_AutorizaColetaXml(pXmlColetas  in  clob,
                                     pXmlOut      out varchar2,
                                     pStatus      out varchar2,
                                     pMessage     out varchar2)
  as
    vXmlTemp    varchar2(2000);
    /*
      <list>
         <coleta>
            <nCompra>792708</nCompra>
            <ciclo>001</ciclo>
            <usuarioAutoriza>
               <codigo>jsantos</codigo>
            </usuarioAutoriza>
            <isExpresso>S</isExpresso>
         </coleta>
      </list>
    */
  begin
    begin
/*      dbms_output.put_line(pXmlColetas);
      insert into t_glb_sql(glb_sql_instrucao,glb_sql_dtgravacao,glb_sql_programa)
      values(pXmlColetas, sysdate, 'AutorizaColeta');
      commit;*/

      pXmlOut   := '<list>';
      for itens in(SELECT extractvalue(VALUE(coleta), 'coleta/nCompra') nCompra,
                          extractvalue(VALUE(coleta), 'coleta/ciclo') ciclo,
                          extractvalue(VALUE(coleta), 'coleta/usuarioAutoriza/codigo') usuarioAutoriza,
                          extractvalue(VALUE(coleta), 'coleta/isExpresso') isExpresso
                   FROM TABLE(XMLSequence(Extract(xmltype(pXmlColetas), '/list/coleta'))) coleta)
      loop
        vXmlTemp := Empty_Clob;
        Sp_Set_AutorizaColeta( itens.ncompra, itens.ciclo, itens.usuarioautoriza, nvl(itens.isexpresso, 'N'), vXmlTemp, pStatus, pMessage );
        pXmlOut := pXmlOut||vXmlTemp;
      end loop;
      pXmlOut := pXmlOut||'</list>';

      pStatus  := Status_Normal;
      pMessage := 'Processamento Normal';
    exception when others then
      pStatus  := Status_Erro;
      pMessage := sqlerrm||' - '||dbms_utility.format_error_backtrace;
    end;
  end Sp_Set_AutorizaColetaXml;

  /*********************************************************************************************
  * Data..: 06/01/2015
  * Autor.: Fabiano Góes
  * Versão: 1.1 - Implementação VLI
  * Recebe o Usuário, Cnpj e o nome do parametro
  * Retorna pHabilitar com S/N habilitando ou não o parametro passado
  * 13/06/2016 - Fabiano: Tirei o vinculo com a procedure de parametros
  **********************************************************************************************/
  Procedure Sp_Get_Habiltar(pUsuario   in  varchar2,
                            pCnpj      in  varchar2,
                            pParametro in  varchar2,
                            pHabiltar  out varchar2, -- S/N
                            pStatus    out varchar2,
                            pMessage   out varchar2)
  as
    --vUsuarios        varchar2(2000);
    --vTpParametros    tdvadm.pkg_col_coleta.TpParametros;
    --vCURSOR          TYPES.cursorType;
    vLoginUsuario    t_usu_usuario.usu_usuario_login%type;
    vUsuParametroTxt tdvadm.t_usu_perfil.usu_perfil_parat%type;
  begin
    begin
      dbms_output.put_line(pCnpj||' criei esse parametro porque no futuro devem pedir para habilitar por cnpj');

      begin
        select u.usu_usuario_login
          into vLoginUsuario
          from t_usu_usuario u
          where lower(u.usu_usuario_codigo) = rpad(lower(pUsuario),10,' ')
           and nvl(u.usu_usuario_ativo,'S') = 'S';
      exception when others then
          vLoginUsuario := null;
      end;

      /**
      tdvadm.sp_usu_parametros('jcoleta', pUsuario, null, vCursor);
      LOOP
        FETCH vCURSOR
          INTO vTpParametros;
        EXIT WHEN vCURSOR%NOtFOUND;
       BEGIN
          if vTpParametros.PERFIL = pParametro then
             vUsuarios := vTpParametros.TEXTO;
             exit;
          end if;
        EXCEPTION WHEN OTHERS THEN
           RAISE_APPLICATION_ERROR(-20001, sqlerrm||dbms_utility.format_error_backtrace);
        END;
      END LOOP;
      CLOSE vCURSOR;

      if (instr(lower(trim(vUsuarios)), lower(trim(pUsuario))) > 0) or (instr(lower(trim(vUsuarios)), lower(trim(vLoginUsuario))) > 0) then
        pHabiltar := 'S';
      end if;
      **/
      pHabiltar := 'N'; -- sem permissão até que se prove o contrario      
      begin
        select p.usu_perfil_parat
        into vUsuParametroTxt
        from tdvadm.t_usu_perfil p
        where p.usu_aplicacao_codigo = rpad('jcoleta',10,' ')
          and p.usu_perfil_codigo = upper(trim(pParametro));  
      exception when no_data_found then
        vUsuParametroTxt := '';  
      end;        

      if ( instr(lower(vUsuParametroTxt), lower(trim(pUsuario))) > 0 ) or  
         ( instr(lower(vUsuParametroTxt), lower(trim(vLoginUsuario))) > 0 ) then
        pHabiltar := 'S';    
      end if;
      
      -- Fabiano Góes - 11/07/2016
      if ( nvl(pHabiltar, 'N') = 'N' ) then
        begin
          select upper(trim(nvl(ap.usu_aplicacaoperfil_parat,'N')))
            into pHabiltar
            from tdvadm.t_usu_aplicacaoperfil ap
           where ap.usu_aplicacao_codigo = rpad('jcoleta',10,' ')  
             and ap.usu_perfil_codigo    = upper(trim(pParametro))
             and lower(ap.usu_usuario_codigo)   = rpad(lower(pUsuario),10,' ')
             and ap.usu_aplicacaoperfil_ativo = 'S';
        exception when others then
          pHabiltar := 'N';  
        end;  
      end if;

      pStatus   := Status_Normal;
      pMessage  := 'Processamento Normal';
    exception when others then
      pStatus  := Status_Erro;
      pMessage := sqlerrm||' - '||dbms_utility.format_error_backtrace;
    end;
  end Sp_Get_Habiltar;

  Procedure Sp_Get_SimulaValorColeta(pColeta  in tdvadm.t_arm_coleta.arm_coleta_ncompra%type,
                                     pCiclo   in tdvadm.t_arm_coleta.arm_coleta_ciclo%type,
                                     pUsuario in tdvadm.t_usu_usuario.usu_usuario_codigo%type,
                                     pCnpj    in  varchar2,
                                     pXml     out clob,
                                     pStatus  out varchar2,
                                     pMessage out varchar2)

  as
  begin
    begin
      dbms_output.put_line(pUsuario||pCnpj||pColeta||pCiclo||' criei esse parametro porque no futuro devem pedir para habilitar por cnpj');


      -- passando as variaveis ou lista de coletas
      pXml := pXml || '<Parametros> ';
      pXml := pXml || '   <Inputs> ';
      pXml := pXml || '      <Input> ';
      pXml := pXml || '         <usuario>' || pUsuario || '</usuario>'; /*obrigatorio*/
      pXml := pXml || '         <cnpj>' || pCnpj || '</cnpj>';
      pXml := pXml || '         <grupo>0074</grupo>';
      pXml := pXml || '         <contrato>82795</contrato>';
      pXml := pXml || '         <origem>35500</origem>';
      pXml := pXml || '         <destino>30000</destino>';
      pXml := pXml || '         <veiculo>3</veiculo>';
      pXml := pXml || '         <peso>1000</peso>';
      pXml := pXml || '      </Input> ';
      pXml := pXml || '      <Tables>';
      pXml := pXml || '         <table name="listaColetas" tipo="P">';
      pXml := pXml || '            <Rowset>';
      pXml := pXml || '               <row num="1">';
      pXml := pXml || '                  <arm_coleta_ncompra>' || pColeta || '</arm_coleta_ncompra>';
      pXml := pXml || '                  <arm_coleta_ciclo>' || pCiclo || '</arm_coleta_ciclo>';
      pXml := pXml || '               </row>';
      pXml := pXml || '            </Rowset>';
      pXml := pXml || '         </table>';
      pXml := pXml || '      </Tables>';
      pXml := pXml || '   </Inputs> ';
      pXml := pXml || '</Parametros> ';


--      tdvadm.PKG_FIFO_CARREGCTRC.SP_SIMULADOR(pXMLin,
--                                             pXML,
--                                             pStatus,
--                                             pMessage);

/******** Exemplo de XML usado ****************************************************
      pXml:= '<simulador>
                <cabecalhos>
                  <cabecalho>
                    <titulo>LOCALIDADE</titulo>
                    <codigoOrigem>01000</codigoOrigem>
                    <descricaoOrigem>SAO PAULO-SP</descricaoOrigem>
                    <codigoDestino>68517</codigoDestino>
                    <descricaoDestino>SALOBO-PA</descricaoDestino>
                    <km>2000</km>
                    <peso>1540</peso>
                  </cabecalho>
                  <cabecalho>
                    <titulo>CODIGO IBGE</titulo>
                    <codigoOrigem>3550308</codigoOrigem>
                    <descricaoOrigem>SAO PAULO-SP</descricaoOrigem>
                    <codigoDestino>1504208</codigoDestino>
                    <descricaoDestino>PA-MARABA</descricaoDestino>
                    <km>2000</km>
                    <peso>1540</peso>
                    </cabecalho>
                  <cabecalho>
                    <titulo>MESO REGIAO</titulo>
                    <codigoOrigem>3515</codigoOrigem>
                    <descricaoOrigem>SAO PAULO-SP</descricaoOrigem>
                    <codigoDestino>1506</codigoDestino>
                    <descricaoDestino>SUDESTE PARAENSE</descricaoDestino>
                    <km></km>
                    <peso></peso>
                    </cabecalho>
                  <cabecalho>
                    <titulo>MICRO REGIAO</titulo>
                    <codigoOrigem>35061</codigoOrigem>
                    <descricaoOrigem>SAO PAULO-SP</descricaoOrigem>
                    <codigoDestino>15020</codigoDestino>
                    <descricaoDestino>MARABA</descricaoDestino>
                    <km></km>
                    <peso></peso>
                  </cabecalho>
                  <cabecalho>
                    <titulo>KM: 1010101</titulo>
                    <codigoOrigem>PESO: 101010</codigoOrigem>
                    <descricaoOrigem></descricaoOrigem>
                    <codigoDestino></codigoDestino>
                    <descricaoDestino></descricaoDestino>
                    <km></km>
                    <peso></peso>
                  </cabecalho>
                </cabecalhos>
                <simulados>
                  <simulado>
                    <titulo>IBGE</titulo>
                    <kmDe>1000</kmDe>
                    <kmAte>1000</kmAte>
                    <pesoDe>1000</pesoDe>
                    <pesoAte>1000</pesoAte>
                    <tabTdv>02100016</tabTdv>
                    <saqTdv>0008</saqTdv>
                    <tipo>CIF</tipo>
                    <veiculo>SEM VEICUL</veiculo>
                    <tipoCarga>FRACIONA</tipoCarga>
                    <valor>   903,93-TX</valor>
                    <limite>0,00</limite>
                    <valorExcedente>0,00</valorExcedente>
                    <valorFixo>0,00</valorFixo>
                    <valorCalculado>60000,00</valorCalculado>
                    <codigoCliente>CODIGO-CLIENTE</codigoCliente>
                    <perctEx>1000</perctEx>
                    <perctQM>1000</perctQM>
                    <perctOutb>1000</perctOutb>
                    <perctTrans>1000</perctTrans>
                    <soTransf>1000</soTransf>
                  </simulado>
                  <simulado>
                    <titulo>IBGE</titulo>
                    <kmDe>2000</kmDe>
                    <kmAte>2000</kmAte>
                    <pesoDe>1000</pesoDe>
                    <pesoAte>1000</pesoAte>
                    <tabTdv>02100016</tabTdv>
                    <saqTdv>0008</saqTdv>
                    <tipo>CIF</tipo>
                    <veiculo>SEM VEICUL</veiculo>
                    <tipoCarga>FRACIONA</tipoCarga>
                    <valor>   903,93-TX</valor>
                    <limite>0,00</limite>
                    <valorExcedente>0,00</valorExcedente>
                    <valorFixo>0,00</valorFixo>
                    <valorCalculado>30000,00</valorCalculado>
                    <codigoCliente>CODIGO-CLIENTE</codigoCliente>
                    <perctEx>1000</perctEx>
                    <perctQM>1000</perctQM>
                    <perctOutb>1000</perctOutb>
                    <perctTrans>1000</perctTrans>
                    <soTransf>1000</soTransf>
                  </simulado>
                  <simulado>
                    <titulo>MESO REGIAO</titulo>
                    <kmDe>3000</kmDe>
                    <kmAte>3000</kmAte>
                    <pesoDe>1000</pesoDe>
                    <pesoAte>1000</pesoAte>
                    <tabTdv>02100016</tabTdv>
                    <saqTdv>0008</saqTdv>
                    <tipo>CIF</tipo>
                    <veiculo>SEM VEICUL</veiculo>
                    <tipoCarga>FRACIONA</tipoCarga>
                    <valor>   903,93-TX</valor>
                    <limite>0,00</limite>
                    <valorExcedente>0,00</valorExcedente>
                    <valorFixo>0,00</valorFixo>
                    <valorCalculado>20000,00</valorCalculado>
                    <codigoCliente>CODIGO-CLIENTE</codigoCliente>
                    <perctEx>1000</perctEx>
                    <perctQM>1000</perctQM>
                    <perctOutb>1000</perctOutb>
                    <perctTrans>1000</perctTrans>
                    <soTransf>1000</soTransf>
                  </simulado>
                  <simulado>
                    <titulo>MESO</titulo>
                    <kmDe>4000</kmDe>
                    <kmAte>4000</kmAte>
                    <pesoDe>1000</pesoDe>
                    <pesoAte>1000</pesoAte>
                    <tabTdv>02100016</tabTdv>
                    <saqTdv>0008</saqTdv>
                    <tipo>CIF</tipo>
                    <veiculo>SEM VEICUL</veiculo>
                    <tipoCarga>FRACIONA</tipoCarga>
                    <valor>   903,93-TX</valor>
                    <limite>0,00</limite>
                    <valorExcedente>0,00</valorExcedente>
                    <valorFixo>0,00</valorFixo>
                    <valorCalculado>1000,00</valorCalculado>
                    <codigoCliente>CODIGO-CLIENTE</codigoCliente>
                    <perctEx>1000</perctEx>
                    <perctQM>1000</perctQM>
                    <perctOutb>1000</perctOutb>
                    <perctTrans>1000</perctTrans>
                    <soTransf>1000</soTransf>
                  </simulado>
                </simulados>
              </simulador>';

*/

      pStatus   := Status_Normal;
      pMessage  := 'Processamento Normal';
    exception when others then
      pStatus  := Status_Erro;
      pMessage := sqlerrm||' - '||dbms_utility.format_error_backtrace;
    end;
  end;

  Procedure Sp_Get_SimulaValorColetaXML(pXmlIn   in Varchar2,
                                        pUsuario in Varchar2,
                                        pCnpj    in varchar2,
                                        pStatus  out varchar2,
                                        pMessage out varchar2)

  as
  begin
    begin
      dbms_output.put_line(pUsuario||pCnpj||pXmlIn||' criei esse parametro porque no futuro devem pedir para habilitar por cnpj');
--      PKG_FIFO_CARREGCTRC.SP_SIMULADOR(pXmlIn,
--                                             pXmlOut,
--                                             pStatus,
--                                             pMessage);

      pStatus   := Status_Normal;
      pMessage  := 'Processamento Normal';
    exception when others then
      pStatus  := Status_Erro;
      pMessage := 'Erro na simulacao: PKG_FIFO_CARREGCTRC201504.SP_SIMULADOR - ' || sqlerrm||' - '||dbms_utility.format_error_backtrace;
    end;
  end Sp_Get_SimulaValorColetaXML;

  Procedure Sp_Get_OnuLista(pCursor  out T_CURSOR,
                            pStatus  out varchar2,
                            pMessage out varchar2)
  as
  begin
    begin

      open pCursor for
      select o.glb_onu_codigo,
             o.glb_onu_produto,
             o.glb_onu_grpemb,
             o.glb_onu_kgisenta
      from t_glb_onu o
      order by o.glb_onu_codigo;

      pStatus  := Status_Normal;
      pMessage := Null;
    exception when others then
      pStatus  := Status_Erro;
      pMessage := 'Erro ao executar Pkg_Col_Coleta.Sp_Get_OnuLista Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;
  end Sp_Get_OnuLista;

 Procedure Sp_Get_Ocorrencias(pCursor  out T_CURSOR,
                              pStatus  out varchar2,
                              pMessage out varchar2)
  As
  begin

    begin

      open pCursor for
      select o.arm_coletaocor_codigo,
             o.arm_coletaocor_descricao,
             o.arm_coletaocor_finaliza
        from t_arm_coletaocor o
        where o.arm_coletaocor_flagativo = 'S'
        order by o.arm_coletaocor_descricao;

      pStatus  := Status_Normal;
      pMessage := 'Processamento Normal!';
    exception when others then
      pStatus  := Status_Erro;
      pMessage := sqlerrm;
    end;

  end Sp_Get_Ocorrencias;

  Procedure Sp_Set_UpdateColetaSetOcorr(pNCompra In t_Arm_Coleta.Arm_Coleta_Ncompra%Type,
                                        pCiclo   In t_Arm_Coleta.Arm_Coleta_Ciclo%Type,
                                        pOcorrencia In t_arm_coleta.arm_coletaocor_codigo%Type,
                                        pObservacao In Varchar2,
                                        pUsuario In Varchar2,
                                        pStatus  out char,
                                        pMessage out varchar2)
  as
  vRowColeta T_Arm_Coleta%RowType;
  begin
    begin
       select c.*
         into vRowColeta
         from t_arm_coleta c
        where c.arm_coleta_ncompra = trim(pNCompra)
          and c.arm_coleta_ciclo           = LPAD(pCiclo,3,000);


       Sp_Set_UpdateColetaSetOcorr2(vRowColeta.Arm_Coleta_Ncompra,
                                    vRowColeta.Arm_Coleta_Ciclo,
                                    pOcorrencia,
                                    pObservacao,
                                    vRowColeta.arm_coleta_datachegadacli,
                                    vRowColeta.arm_coleta_datasaidacli,
                                    vRowColeta.arm_coleta_horachegadacli,
                                    vRowColeta.arm_coleta_horasaidacli,
                                    pUsuario,
                                    'N', -- N = não é executado por usuário e sim pelo sistema
                                    pStatus,
                                    pMessage);


    exception when others then
      pStatus   := Status_erro;
      pMessage := 'Erro ao Executar Pkg_Col_Coleta.Sp_Col_Update. Erro.: '||sqlerrm||' - '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
      Rollback;
    end;

  end Sp_Set_UpdateColetaSetOcorr;


  Procedure Sp_Set_UpdateColetaSetOcorr2(pNCompra        In t_Arm_Coleta.Arm_Coleta_Ncompra%Type,
                                         pCiclo          In t_Arm_Coleta.Arm_Coleta_Ciclo%Type,
                                         pOcorrencia     In t_arm_coleta.arm_coletaocor_codigo%Type,
                                         pObs            In Varchar2,
                                         pDataChegada    In Varchar2,
                                         pDataSaida      In Varchar2,
                                         pHoraChegada    In Varchar2,
                                         pHoraSaida      In Varchar2,
                                         pUsuario        In Varchar2,
                                         pExecPorUsuario in char default 'S',
                                         pStatus         out char,
                                         pMessage        out varchar2)
  as
    vOcor                 t_arm_coleta.arm_coletaocor_codigo%Type;
    vOcorCancel           t_arm_coletaocor.arm_coletaocor_cancelacoleta%type;
    vOcorSobre            t_arm_coletaocor.arm_coletaocor_sobreposta%type;
    vOcorUsu              t_arm_coletaocor.arm_coletaocor_flagusu%type;
    vDescOcor             t_arm_coletaocor.arm_coletaocor_descricao%type;
    vColetaOrigem         t_arm_coleta.arm_coletaorigem_cod%type;
    vEmailOrigem          varchar2(1000) := 'coletaweb@dellavolpe.com.br';
    vEmailUsuarioAutoriza VARCHAR2(2000);
    vEmailsCopia          VARCHAR2(2000);
    vAssuntoEmail         VARCHAR2(2000);
    vCorpoEmail           CLOB;
    vStatus               char(1);
    vMessage              varchar2(2000);
    --vOcorNova             t_arm_coleta.arm_coletaocor_codigo%Type;
    vOcorCancelNova       t_arm_coletaocor.arm_coletaocor_cancelacoleta%type;
    vOcorSobreNova        t_arm_coletaocor.arm_coletaocor_sobreposta%type;
    vOcorUsuNova          t_arm_coletaocor.arm_coletaocor_flagusu%type;
    vDescOcorNova         t_arm_coletaocor.arm_coletaocor_descricao%type;
    vExisteDocumento      Integer;
    VImpresso             Integer;
    VNotas                Integer;
    VConhecimento         Integer;
  begin
    begin
      
        select c.arm_coletaocor_codigo,
             c.arm_coletaorigem_cod
        into vOcor,
             vColetaOrigem
        from t_arm_coleta c
       where c.arm_coleta_ncompra = trim(pNCompra)
         and c.arm_coleta_ciclo   = LPAD(pCiclo,3,000);
    
      if (vOcor is not null) then

        select l.arm_coletaocor_cancelacoleta,
               l.arm_coletaocor_sobreposta,
               nvl(l.arm_coletaocor_flagusu,'S'),
               l.arm_coletaocor_descricao
          into vOcorCancel,
               vOcorSobre,
               vOcorUsu,
               vDescOcor
          from t_arm_coletaocor l
         where l.arm_coletaocor_codigo = vOcor;

      end if;

      if (pOcorrencia is not null) then

        select l.arm_coletaocor_cancelacoleta,
               l.arm_coletaocor_sobreposta,
               nvl(l.arm_coletaocor_flagusu,'S'),
               l.arm_coletaocor_descricao
          into vOcorCancelNova,
               vOcorSobreNova,
               vOcorUsuNova,
               vDescOcorNova
          from t_arm_coletaocor l
         where l.arm_coletaocor_codigo = pOcorrencia;

        if (vOcorUsuNova = 'N' AND nvl(pExecPorUsuario,'S') = 'S') then
          pStatus  := Status_erro;
          pMessage := 'A Ocorrência '||pOcorrencia||' - '||vDescOcorNova||', não pode ser atribuida a uma coleta por um usuario!';
          return;
        end if;
      end if;

      if vOcor = pOcorrencia then
          pStatus  := Status_erro;
          pMessage := 'Coleta.: '||pNCompra||' - '||pCiclo||' já encontra-se com está ocorrência';
          return;
      else

          if (NVL(vOcorCancel,'N') = 'S') then
             pStatus  := Status_erro;
             pMessage := 'Coleta.: '||pNCompra||' - '||pCiclo||' já encontra-se com uma Ocorrência que cancela a mesma. '||vOcor||' - '||upper(trim(vDescOcor));
            return;
          end if;
          
           if (VImpresso > 0 OR VNotas > 0 OR VConhecimento > 0) then
             pStatus  := Status_erro;
             pMessage := 'Coleta.: '||pNCompra||' - '||pCiclo|| ' não pode ser cancelada pois esta impressa , ou tem nota gerada ou cte gerado';
            return;
          end if;

          if (NVL(vOcorUsu,'S') = 'N') and (nvl(pExecPorUsuario,'S') = 'S') then
             pStatus  := Status_erro;
             pMessage := 'Coleta.: '||pNCompra||' - '||pCiclo||' encontra-se com uma Ocorrência de sistema '||vOcor||' - '||upper(trim(vDescOcor))||', não pode ser alterada.';
             return;
          end if;

          if (NVL(vOcorSobre,'S') = 'N') then
             pStatus  := Status_erro;
             pMessage := 'Coleta.: '||pNCompra||' - '||pCiclo||' já encontra-se com uma Ocorrência que não pode ser sobreposta.';
             return;
          end if;

          if (pOcorrencia is not null) then
            select l.arm_coletaocor_cancelacoleta
              into vOcorCancel
              from t_arm_coletaocor l
             where l.arm_coletaocor_codigo = pOcorrencia;

            if (NVL(vOcorCancel,'N') = 'S') then

               pkg_arm_gercoleta.Sp_Get_PodeLiberarColeta(trim(pNCompra),
                                                          nvl(pCiclo,'001'),
                                                          vStatus,
                                                          vMessage);
               if (vStatus <> pkg_glb_common.Status_Nomal) then

                 pStatus  := Status_erro;
                 pMessage := 'Coleta.: '||pNCompra||' - '||pCiclo||' não pode receber uma ocorrência de Cancelamento: '||vMessage;
                 return;

               end if;

            end if;

          end if; -- if (pOcorrencia is not null) then

          -- Verifica se a Ocorrencia e 55 - Documento Emitido
          -- Procura se realmente tem Documento Emitido
          If pOcorrencia = '55' Then
          
             select count(*)
               into vExisteDocumento
             From t_con_conhecimento c
             where c.arm_coleta_ncompra = trim(pNCompra)
               and c.arm_coleta_ciclo = LPAD(pCiclo,3,'0');
               
             If vExisteDocumento = 0 Then
               pStatus   := pkg_glb_common.Status_Erro;
               pMessage  := 'Coleta sem CTE/NFSe Emitido. Procure o KPI para verificar.';      
               return;
             End If;
             
          End If; 
          
          If pOcorrencia = '66' Then
                SELECT COUNT(*)
                INTO VImpresso
                FROM TDVADM.T_ARM_COLETA L
                WHERE L.ARM_COLETA_NCOMPRA = pNCompra
                AND L.ARM_COLETA_CICLO = pCiclo
                AND L.ARM_COLETA_DTIMP IS NOT NULL;
          
                SELECT COUNT(*)
                  INTO VNotas
                  FROM TDVADM.T_ARM_NOTA N
                  WHERE N.ARM_COLETA_NCOMPRA = pNCompra
                  AND N.ARM_COLETA_CICLO = pCiclo;
          
              SELECT COUNT(*)
                INTO VConhecimento
                 FROM TDVADM.T_CON_CONHECIMENTO CO
                 WHERE CO.ARM_COLETA_NCOMPRA = pNCompra
                   AND CO.ARM_COLETA_CICLO = pCiclo
                   AND NVL(CO.CON_CONHECIMENTO_FLAGCANCELADO,'N') = 'N';
                    
                 if (VImpresso > 0 OR VNotas > 0 OR VConhecimento > 0) then
                     pStatus  := Status_erro;
                     pMessage := 'Coleta.: '||pNCompra||' - '||pCiclo|| ' não pode ser cancelada pois esta impressa , ou tem nota gerada ou cte gerado';
                    return;
                  end if;        
         End If;           


          update t_arm_coleta c
             set arm_coletaocor_codigo          = pOcorrencia,
                 arm_coleta_obs                 = arm_coleta_obs || ' - ' || pObs,
                 arm_coleta_datachegadacli      = pDataChegada,
                 arm_coleta_horachegadacli      = pHoraChegada,
                 arm_coleta_datasaidacli        = pDataSaida,
                 arm_coleta_horasaidacli        = pHoraSaida,
                 usu_usuario_codigofecha        = pUsuario,
                 arm_coleta_dtcoleta            = sysdate,
                 arm_coleta_hrcoleta            = to_char(sysdate, 'HH24:MI'),
                 usu_usuario_codalterou         = pUsuario
           where c.arm_coleta_ncompra           = trim(pNCompra)
             and c.arm_coleta_ciclo             = LPAD(pCiclo,3,'0');


          ---------------------------------------------------------------------------------------------------------------
          -- Fabiano / Klayton - 02/09/2015
          -- Controle de Histório de Ocorrencias de Coleta
          ---------------------------------------------------------------------------------------------------------------
          begin
            INSERT INTO T_ARM_COLETAOCORHIST(ARM_COLETA_NCOMPRA,
                                             ARM_COLETA_CICLO,
                                             USU_USUARIO_CODIGOINCL,
                                             ARM_COLETAOCOR_CODIGO,
                                             ARM_COLETAOCORHIST_OBS)
            VALUES(pNCompra, pCiclo, pUsuario, pOcorrencia, pObs);
          exception when others then
            raise_application_error(-20001, 'Erro ao gerar histórico de ocorrencias da Coleta, '||dbms_utility.format_error_backtrace);
          end;


          if trim(nvl(pOcorrencia,'-1')) In('65','63') then
            update t_arm_coleta c
               set arm_coleta_dtautoriza    = null,
                   usu_usuario_codalterou   = pUsuario
             where c.arm_coleta_ncompra     = trim(pNCompra)
               and c.arm_coleta_ciclo       = LPAD(pCiclo,3,000);
          end if;

          commit;

          ---------------------------------------------------------------------------------------------------------
          -- EMAIL CANCELAMENTO
          -- obtenho os emails do usuário e os envolvidos na coleta para copia
          -- Sp_Get_EmailColeta vai popular:
          -- ==> vEmailUsuarioAutoriza com o email do usuário que cadastrou a Coleta
          -- ==> vEmailsCopia com os emails do Armazem
          ---------------------------------------------------------------------------------------------------------
          if (NVL(vOcorCancel,'N') = 'S') then
              vEmailUsuarioAutoriza := Fn_Get_EmailUsuario(pUsuario); -- email de quem está cancelando a coleta
              vEmailsCopia          := Fn_Get_EmailsColeta(pNCompra, pCiclo); -- email do solicitante da coleta
              vAssuntoEmail         := 'Coleta[ '||pNCompra||' - '||pCiclo||' ] CANCELADA';
              vCorpoEmail           := Fn_Get_CorpoEmail(pNCompra, pCiclo, TipoEmailColetaCancelada); -- false=Não está aguardando autorização

              vEmailsCopia := case
                                when length(vEmailsCopia) > 5 then vEmailsCopia -- ||';fgoes@dellavolpe.com.br;ddamaceno@dellavolpe.com.br'
                                else ''
                              end;
              --vEmailsCopia := vEmailsCopia || ';gmachado@dellavolpe.com.br';

              begin
                wservice.pkg_glb_email.SP_ENVIAEMAIL(vAssuntoEmail,
                                                     vCorpoEmail,
                                                     vEmailOrigem,
                                                     vEmailUsuarioAutoriza,
                                                     vEmailsCopia);
              exception when others then
                vAssuntoEmail  := 'ERRO ao tentar enviar Email da Coleta: '||pNCompra||' - '||pCiclo;
                vCorpoEmail    := 'ERRO ao tentar enviar Email da Coleta: '||pNCompra||' - '||pCiclo||
                                 ' - Usuario: '||pUsuario||' - '||sqlerrm;
                wservice.pkg_glb_email.SP_ENVIAEMAIL(vAssuntoEmail,
                                                     vCorpoEmail,
                                                     vEmailOrigem
                                                     --'fgoes@dellavolpe.com.br',
                                                     --'ddamaceno@dellavolpe.com.br'
                                                    );
              end;

          end if;

      end if; -- else if vOcor = pOcorrencia then

      pStatus  := Status_normal;
      pMessage := 'Processamento Normal';
    exception when others then
      pStatus   := Status_erro;
      pMessage := 'Erro ao Executar Pkg_Col_Coleta.Sp_Col_Update. Erro.: '||sqlerrm||' - '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
      Rollback;
    end;

  end Sp_Set_UpdateColetaSetOcorr2;

  /*********************************************************************************************
  * Data..: 13/11/2015
  * Autor.: Diego
  * Versão:
  * Cancela a Coleta
  **********************************************************************************************/
  Procedure Sp_Set_CancelarColetaPendente(pNCompra        In t_Arm_Coleta.Arm_Coleta_Ncompra%Type,
                                          pCiclo          In t_Arm_Coleta.Arm_Coleta_Ciclo%Type,
                                          pObservacao     In Varchar2,
                                          pUsuario        In Varchar2,
                                          pStatus         out Char,
                                          pMessage        Out Varchar2)
  As
  Begin

         update t_arm_coleta c
             set arm_coletaocor_codigo          = '66',
                 arm_coleta_obs                 = arm_coleta_obs || ' - ' || pObservacao,
                 usu_usuario_codigofecha        = pUsuario,
                 arm_coleta_dtcoleta            = sysdate,
                 arm_coleta_hrcoleta            = to_char(sysdate, 'HH24:MI'),
                 usu_usuario_codalterou         = pUsuario
           where c.arm_coleta_ncompra           = trim(pNCompra)
             and c.arm_coleta_ciclo             = LPAD(pCiclo,3,000);

         pStatus := 'N';
         pMessage := 'OK';

  End Sp_Set_CancelarColetaPendente;


  Procedure Sp_Get_ColetaTpFreteLista(pCnpjSolicitante in t_glb_cliente.glb_cliente_cgccpfcodigo%type,
                                      pCursor  out T_CURSOR,
                                      pStatus  out varchar2,
                                      pMessage out varchar2)
  as
    vGrupoEconomino tdvadm.t_glb_grupoeconomico.glb_grupoeconomico_codigo%type;
    vExistRegra integer;
  begin
    begin

      begin
        select cl.glb_grupoeconomico_codigo
        into vGrupoEconomino
        from t_glb_cliente cl
        where cl.glb_cliente_cgccpfcodigo = rpad(pCnpjSolicitante, 20, ' ');
      exception when no_data_found then
        vGrupoEconomino := '0000';
      end;

      begin
        select count(*)
        into vExistRegra
        from t_arm_coletatpfrete tf
        where tf.glb_cliente_cgccpfcodigo = RPAD(pCnpjSolicitante, 20, ' ') or tf.glb_grupoeconomico_codigo = LPAD(vGrupoEconomino, 4, '0');
      exception when others then
        vExistRegra := 0;
      end;

      if vExistRegra > 0 then
        open pCursor for
        select tf.*
        from tdvadm.t_arm_coletatpfrete tf
        where tf.glb_grupoeconomico_codigo = LPAD(vGrupoEconomino,4,'0') or tf.glb_cliente_cgccpfcodigo = RPAD(pCnpjSolicitante,20,' ')
        ORDER BY tf.arm_coletatpfrete_descricao;
      else
        open pCursor for
        select tf.*
        from tdvadm.t_arm_coletatpfrete tf
        where tf.glb_grupoeconomico_codigo = LPAD('0000',4,'0') and tf.glb_cliente_cgccpfcodigo = RPAD('00000000000000',20,' ')
        ORDER BY tf.arm_coletatpfrete_descricao;
      end if;

      pStatus  := Status_Normal;
      pMessage := Null;
    exception when others then
      pStatus  := Status_Erro;
      pMessage := 'Erro ao executar Pkg_Col_Coleta.Sp_Get_ColetaTpFreteLista Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;
  end Sp_Get_ColetaTpFreteLista;

  Function Fn_Col_ValidaColetaTpFrete(pColetaRowType in T_arm_coleta%RowType,
                                      pStatus        out char,
                                      pMessage       out varchar2)return boolean as
  begin

    begin

      if (nvl(pColetaRowType.Arm_Coletatpfrete_Id,0) < 1)  then

          pStatus  := Status_Warning;
          pMessage := 'Tipo Coleta Frete Obrigatório!'||chr(13);
          return false;

      end if;



      pStatus  := Status_normal;
      pMessage := 'Processamento Normal';
      return true;

    exception when others then
      pStatus  := Status_erro;
      pMessage := 'Erro ao executar Fn_Col_ValidaTipoFrete Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
      return false;
    end;

  end Fn_Col_ValidaColetaTpFrete;

  Procedure Sp_Get_AtualizaValoresPeso(pColeta  in tdvadm.t_arm_coleta.arm_coleta_ncompra%type,
                                       pCiclo   in tdvadm.t_arm_coleta.arm_coleta_ciclo%type,
                                       pStatus  out varchar2,
                                       pMessage out varchar2)
  as
  begin
    begin
       -- TODO: add usuario alterou no UPDATE
       update t_arm_coleta c
       set c.arm_coleta_peso = (select sum(i.arm_coleta_ncompra_peso)
                                from t_arm_coletancompra i
                                where i.arm_coletancompra = c.arm_coleta_ncompra
                                  and i.arm_coleta_ciclo  = c.arm_coleta_ciclo),
           c.arm_coleta_pesocobrado = (select sum(i.arm_coleta_ncompra_cubagem)
                                       from t_arm_coletancompra i
                                       where i.arm_coletancompra = c.arm_coleta_ncompra
                                       and i.arm_coleta_ciclo  = c.arm_coleta_ciclo),
           c.arm_coleta_volumes = (select sum(i.arm_coleta_ncompra_volume)
                                   from t_arm_coletancompra i
                                   where i.arm_coletancompra = c.arm_coleta_ncompra
                                     and i.arm_coleta_ciclo  = c.arm_coleta_ciclo)
       where c.arm_coleta_ncompra = pColeta
         and c.arm_coleta_ciclo   = pCiclo;

       commit;

      pStatus  := Status_normal;
      pMessage := 'Processamento Normal';
    exception when others then
      pStatus := Status_erro;
      pMessage:= 'Erro ao executar Sp_Get_AtualizaValoresPeso Erro.: '||sqlerrm;
    end;
  end Sp_Get_AtualizaValoresPeso;

  Procedure Sp_Get_Localidade(pCursor  Out Types.cursorType,
                              pStatus  Out Char,
                              pMessage Out Varchar)
  As
  Begin
     Open pCursor For
      Select l.glb_localidade_codigo,
             l.glb_estado_codigo,
             l.glb_localidade_descricao,
             l.glb_localidade_codigoibge
        from t_glb_localidade l
        Order by l.glb_localidade_descricao,
                 l.glb_estado_codigo;
     pStatus := 'N';
     pMessage := 'OK';

  End Sp_Get_Localidade;

  Procedure Sp_Search_Localidade(pTexto In Varchar2,
                                 pCursor  Out Types.cursorType,
                                 pStatus  Out Char,
                                 pMessage Out Varchar)
  As
  Begin
     Open pCursor For
      Select l.glb_localidade_codigo,
             l.glb_estado_codigo,
             l.glb_localidade_descricao,
             l.glb_localidade_codigoibge
        from t_glb_localidade l
        where fn_limpa_campo3( upper( l.glb_localidade_descricao ) ) like '%' || upper( fn_limpa_campo3( pTexto ) ) || '%'
           or fn_limpa_campo3( upper( l.glb_estado_codigo ) )        like '%' || upper( fn_limpa_campo3( pTexto ) ) || '%'
           or fn_limpa_campo3((upper( l.glb_localidade_descricao ) || ' - ' || upper( l.glb_estado_codigo ))) like '%' || upper( fn_limpa_campo3( pTexto ) ) || '%'
        Order by l.glb_localidade_descricao,
                 l.glb_estado_codigo;
     pStatus := 'N';
     pMessage := 'OK';

  End Sp_Search_Localidade;

  Procedure Sp_Get_SistemasOrigens(pCursor  Out Types.cursorType,
                                   pStatus  Out Char,
                                   pMessage Out Varchar)
  As
  Begin
     Open pCursor For
      Select *
        from t_Arm_Coletaorigem o
        where o.arm_coletaorigem_cod In(2,4);
     pStatus := 'N';
     pMessage := 'OK';

  End Sp_Get_SistemasOrigens;

  Procedure Sp_Get_CargaVeiculos(pCNPJSolicitante  in  tdvadm.t_glb_cliente.glb_cliente_cgccpfcodigo%type,
                                 pCNPJRemetente    in  tdvadm.t_glb_cliente.glb_cliente_cgccpfcodigo%type,
                                 pCNPJDestinatario in  tdvadm.t_glb_cliente.glb_cliente_cgccpfcodigo%type,
                                 pPagadorFrete     in  char,
                                 pCursor           out T_CURSOR,
                                 pStatus           out varchar2,
                                 pMessage          out varchar2)
  As
    vCnpjSacado Varchar2(20);
    vCount number;
  Begin

    begin
     Dbms_Output.put_line( pCNPJSolicitante || ' - ' || pCNPJRemetente || ' - ' || pCNPJDestinatario || ' - ' || pPagadorFrete || ' - ' || vCnpjSacado);
/*     open pCursor for
       select Distinct
              c.fcf_tpcarga_codigo,
              c.fcf_tpcargadescricao
        from t_fcf_tpcarga c,
             t_fcf_tpveiculo v
        order by c.fcf_tpcargadescricao;
*/

      vCnpjSacado := case pPagadorFrete
                       when 'R' then pCNPJRemetente
                       when 'D' then pCNPJDestinatario
                       when 'S' then pCNPJSolicitante
                     end;

/*      Sp_Get_CargaVeiculosR(vCnpjSacado,
                               null, -- grupo
                               null, -- tipo carga
                               pCursor,
                               pStatus,
                               pMessage);  */

      select count(*)
      into vCount
      from T_ARM_COLETACARGAVEICULO c,
           t_glb_cliente cl
      where c.glb_grupoeconomico_codigo = cl.glb_grupoeconomico_codigo
        and cl.glb_cliente_cgccpfcodigo = rpad(vCnpjSacado,20,' ')
        ORDER BY C.FCF_TPCARGADESCRICAO;

      if vCount > 0 then
        open pCursor for
        select distinct c.fcf_tpcarga_codigo,
               c.fcf_tpcargadescricao
        from T_ARM_COLETACARGAVEICULO c,
             t_glb_cliente cl
        where c.glb_grupoeconomico_codigo = cl.glb_grupoeconomico_codigo
          and cl.glb_cliente_cgccpfcodigo = rpad(vCnpjSacado,20,' ')
          ORDER BY C.FCF_TPCARGADESCRICAO;
      else
        open pCursor for
        select Distinct
               c.fcf_tpcarga_codigo,
               c.fcf_tpcargadescricao
         from t_fcf_tpcarga c,
              t_fcf_tpveiculo v
         order by c.fcf_tpcargadescricao;
      end if;

      pStatus  := Status_Normal;
      pMessage := 'ok';
    exception when others then
      pStatus  := Status_Erro;
      pMessage := 'Erro ao executar Pkg_Col_Coleta.Sp_Get_CargaVeiculos Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;

  End;

  Procedure Sp_Get_TpCargaPorCnpj(pCNPJPagador in tdvadm.t_glb_cliente.glb_cliente_cgccpfcodigo%type,
                                  pTipoColeta  in tdvadm.t_arm_coleta.arm_coleta_tpcoleta%type,
                                  pCursor      out T_CURSOR,
                                  pStatus      out varchar2,
                                  pMessage     out varchar2)
  As
    vCount integer;
    vGrupoEconomico  tdvadm.t_glb_cliente.glb_grupoeconomico_codigo%type;
  Begin

    begin

       select count(*)
          into vCount
          from T_ARM_COLETACARGAVEICULO c,
               t_glb_cliente cl
          where c.glb_grupoeconomico_codigo = cl.glb_grupoeconomico_codigo
            and cl.glb_cliente_cgccpfcodigo = rpad(pCNPJPagador,20,' ');


      SELECT T.GLB_GRUPOECONOMICO_CODIGO
      INTO vGrupoEconomico
      FROM TDVADM.T_GLB_CLIENTE T
      WHERE T.GLB_CLIENTE_CGCCPFCODIGO = rpad(pCNPJPagador,20,' ');

/*    Se o pagador for Raizen e o tipo da coleta for expresso so vai trazer os tipos de carga expressos ,
      caso o tipo da coleta seja normal so vai trazer os tipos de carga normal*/
      if(vGrupoEconomico = GrupoEconomicoRAI or vGrupoEconomico =  GrupoEconomicoBIO) then       
          if (nvl(pTipoColeta,'X') = 'E') then
                open pCursor for
                select distinct c.fcf_tpcarga_codigo,
                                c.fcf_tpcargadescricao
                from tdvadm.T_ARM_COLETACARGAVEICULO c,
                     tdvadm.t_glb_cliente cl,
                     tdvadm.t_fcf_tpcarga f
                where c.glb_grupoeconomico_codigo = cl.glb_grupoeconomico_codigo
                  and cl.glb_cliente_cgccpfcodigo = rpad(pCNPJPagador,20,' ')
                  and c.fcf_tpcarga_codigo        = f.fcf_tpcarga_codigo
                  and f.glb_tpcarga_expresso      = 'S' 
                  order by  C.FCF_TPCARGADESCRICAO desc;
          else
               open pCursor for
                select distinct c.fcf_tpcarga_codigo,
                                c.fcf_tpcargadescricao
                from tdvadm.T_ARM_COLETACARGAVEICULO c,
                     tdvadm.t_glb_cliente cl,
                     tdvadm.t_fcf_tpcarga f
                where c.glb_grupoeconomico_codigo = cl.glb_grupoeconomico_codigo
                  and cl.glb_cliente_cgccpfcodigo = rpad(pCNPJPagador,20,' ')
                  and c.fcf_tpcarga_codigo        = f.fcf_tpcarga_codigo
                  and f.glb_tpcarga_expresso      = 'N' 
                  order by  C.FCF_TPCARGADESCRICAO desc;
          end if;             
      else
/*        SE o pagador não for Raizen tras todos os tipos de carga para aquele grupo economico*/        
          if vCount > 0 then
                open pCursor for
                select distinct c.fcf_tpcarga_codigo,
                                c.fcf_tpcargadescricao
                from T_ARM_COLETACARGAVEICULO c,
                     t_glb_cliente cl
                where c.glb_grupoeconomico_codigo = cl.glb_grupoeconomico_codigo
                  and cl.glb_cliente_cgccpfcodigo = rpad(pCNPJPagador,20,' ')
                  order by  C.FCF_TPCARGADESCRICAO desc;
          else
                open pCursor for
                select Distinct
                       c.fcf_tpcarga_codigo,
                       c.fcf_tpcargadescricao
                 from t_fcf_tpcarga c,
                      t_fcf_tpveiculo v
                 order by c.fcf_tpcargadescricao desc;
          end if;
      end if;
      pStatus  := Status_Normal;
      pMessage := 'ok';
    exception when others then
      pStatus  := Status_Erro;
      pMessage := 'Erro ao executar Pkg_Col_Coleta.Sp_Get_CargaVeiculos Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;

  End;

  Procedure Sp_Get_TpVeiculos(pCNPJSolicitante  in  tdvadm.t_glb_cliente.glb_cliente_cgccpfcodigo%type,
                              pCNPJRemetente    in  tdvadm.t_glb_cliente.glb_cliente_cgccpfcodigo%type,
                              pCNPJDestinatario in  tdvadm.t_glb_cliente.glb_cliente_cgccpfcodigo%type,
                              pCNPJOutros in  tdvadm.t_glb_cliente.glb_cliente_cgccpfcodigo%type,
                              pPagadorFrete     in  char,
                              pTpCargaCodigo    in  tdvadm.t_arm_coleta.fcf_tpcarga_codigo%Type,
                              pCursor           out T_CURSOR,
                              pStatus           out varchar2,
                              pMessage          out varchar2)
  As
    vCnpjSacado Varchar2(20);
    vCount number;
  Begin

    begin
      vCnpjSacado := case pPagadorFrete
                       when 'R' then pCNPJRemetente
                       when 'D' then pCNPJDestinatario
                       when 'S' then pCNPJSolicitante
                       when 'O' then pCNPJOutros
                     end;

      select count(*)
      into vCount
      from T_ARM_COLETACARGAVEICULO c,
           t_glb_cliente cl
      where c.glb_grupoeconomico_codigo = cl.glb_grupoeconomico_codigo
        and cl.glb_cliente_cgccpfcodigo = rpad(vCnpjSacado,20,' ');

      if vCount > 0 then
        open pCursor for
        select distinct c.fcf_tpveiculo_codigo,
               c.fcf_tpveiculo_descricao,
               c.fcf_tpveiculo_lotacao
        from T_ARM_COLETACARGAVEICULO c,
             t_glb_cliente cl
        where c.glb_grupoeconomico_codigo = cl.glb_grupoeconomico_codigo
           and c.fcf_tpcarga_codigo = pTpCargaCodigo
          and cl.glb_cliente_cgccpfcodigo = rpad(vCnpjSacado,20,' ')
          and c.fcf_tpveiculo_codigo is not null
          ORDER BY c.fcf_tpveiculo_lotacao ;
      else
        open pCursor for
        select v.fcf_tpveiculo_codigo,
               v.fcf_tpveiculo_descricao,
               v.fcf_tpveiculo_lotacao
        from t_fcf_tpcarga c,
             t_fcf_tpveiculo v
        where c.fcf_tpcarga_codigo = pTpCargaCodigo
        order by v.fcf_tpveiculo_descricao DESC;
      end if;

    exception when others then
      pStatus  := Status_Erro;
      pMessage := 'Erro ao executar Pkg_Col_Coleta.Sp_Get_TpVeiculos Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;

  End Sp_Get_TpVeiculos;

  /*********************************************************************************************
  * Data..: 21/08/2015
  * Autor.: Fabiano Góes | Diego Lirio
  * Versão: 1.0 - ArcelorMittal Sem Pedido
  * Validações de Campos: Remetente ArcelorMittal nao pode ter Pedido
  --* 09/09/2015 - Segunda Chaves essa regra de quando o usuario e Remetente
  --*   for Arcelomittal liberava sem validação de pedido não deve existir mais essa regra
  **********************************************************************************************/
/*  Function Fn_Col_ValidaArcMittalSemPed(pColetaCliRemetCNPJ in T_glb_cliente.Glb_Cliente_Cgccpfcodigo%Type,
                                        pCnpjSolicitanteCNPJ in T_glb_cliente.Glb_Cliente_Cgccpfcodigo%Type) return Boolean
  As
    vIsRemetenteArcelorMittal integer := 0;
    vIsUsuarioArcelorMittal integer := 0;
  Begin
        select count(*)
        into vIsRemetenteArcelorMittal
        from t_glb_cliente c
        where trim(c.glb_cliente_cgccpfcodigo) = trim(pColetaCliRemetCNPJ)
          and c.glb_grupoeconomico_codigo = GrupoEconomicoAMT;

        select count(*)
        into vIsUsuarioArcelorMittal
        from t_glb_cliente c
        where trim(c.glb_cliente_cgccpfcodigo) = trim(pCnpjSolicitanteCNPJ)
          and c.glb_grupoeconomico_codigo = GrupoEconomicoAMT;

        -- maior que ZERO nao valida Pedido, ZERO valida pedido
        return (vIsRemetenteArcelorMittal > 0) and (vIsUsuarioArcelorMittal > 0);

  End Fn_Col_ValidaArcMittalSemPed;   */

  /*********************************************************************************************
  * Data..: 25/09/2015
  * Autor.: Fabiano Góes
  * Versão: 1.2
  * Procedure para setar uma coleta como Expressa
  **********************************************************************************************/
  Procedure Sp_Set_ColetaExpressa(pColeta  in tdvadm.t_arm_coleta.arm_coleta_ncompra%type,
                                  pCiclo   in tdvadm.t_arm_coleta.arm_coleta_ciclo%type,
                                  pUsuario in tdvadm.t_arm_coleta.usu_usuario_autorizatpcarga%type, -- usuario que autorizou como empressa
                                  pStatus  out varchar2,
                                  pMessage out varchar2)
  as
  begin
    begin

      update t_arm_coleta c
         set c.arm_coleta_prioridade      = 2,
             c.glb_tpcarga_codigo         = 'EX',
             c.arm_coleta_tpcoleta        = 'E',
             c.arm_coleta_entcoleta       = 'C',
             c.arm_coleta_tipo            = 'COLETAR',
             c.usu_usuario_autorizacompra = pUsuario,
             c.usu_usuario_codalterou     = pUsuario
       where trim(c.arm_coleta_ncompra)   = pColeta
         and trim(c.arm_coleta_ciclo)     = pCiclo;
       commit;

      pStatus  := Status_Normal;
      pMessage := 'OK';
    Exception When Others Then
      pStatus := Status_Erro;
      pMessage := sqlerrm || ' - ' || dbms_utility.format_error_backtrace;
    End;
  end Sp_Set_ColetaExpressa;

  /*********************************************************************************************
  * Data..: 02/09/2015
  * Autor.: Diego Lirio
  * Versão: 1.0
  * Procedure para pegar as Ocorrencias de Filtro (consulta)
  **********************************************************************************************/
 Procedure Sp_Get_OcorrenciasFilter(pCursor  out T_CURSOR,
                                    pStatus  out varchar2,
                                    pMessage out varchar2)
  As
  begin

    begin

      open pCursor for
      select o.arm_coletaocor_codigo,
             o.arm_coletaocor_descricao
        from t_arm_coletaocor o
        where o.arm_coletaocor_flagativo = 'S'
          and o.arm_coletaocor_codigo In('55','66', '65', '64')
      union
      select 'XX' arm_coletaocor_codigo,
             'Autorizado' arm_coletaocor_descricao
        from Dual
      order by arm_coletaocor_descricao;

      pStatus  := Status_Normal;
      pMessage := 'Processamento Normal!';

    exception when others then
      pStatus  := Status_Erro;
      pMessage := sqlerrm;
    end;

  end Sp_Get_OcorrenciasFilter;

  /*********************************************************************************************
  * Data..: 03/09/2015
  * Autor.: Fabiano Góes
  * Versão: 1.1
  * Function para validar se a Coleta pode ser Efetivada
  * Hoje a unica regra é que a Coleta deve ter pelo menos 1 item
  **********************************************************************************************/
  Function Fn_Get_PodeSerEfetivada(pColeta in tdvadm.t_arm_coleta.arm_coleta_ncompra%type,
                                   pCiclo  in tdvadm.t_arm_coleta.arm_coleta_ciclo%type)
    return boolean
  as
    vExisteItem integer := 0;
  begin
    begin
      select count(*)
        into vExisteItem
        from tdvadm.t_arm_coletancompra N
       where n.arm_coletancompra = pColeta
         and n.arm_coleta_ciclo  = pCiclo;
    exception when others then
      raise_application_error(-20001, 'Coleta não pode ser efetivada, '||sqlerrm);
    end;
    return vExisteItem > 0;
  end Fn_Get_PodeSerEfetivada;

  /*********************************************************************************************
  * Data..: 03/09/2015
  * Autor.: Fabiano Góes
  * Function para verificar se o Usuario é um usuário que pode autorizar Coleta
  **********************************************************************************************/
  Function Fn_Get_PodeAutorizarColeta(pUsuario in tdvadm.t_usu_usuario.usu_usuario_codigo%type,
                                      pCnpj    in varchar2)
    return boolean
  as
    vHabilitar char(1) := 'N';
    vStatus    char(1) := 'N';
    vMessage   varchar2(1000);
  begin
    Sp_Get_Habiltar( pUsuario, pCnpj, NomeParametroAutorizar, vHabilitar, vStatus, vMessage );
    return (vHabilitar = 'S') and (vStatus = 'N'); -- status = N/Normal
  end Fn_Get_PodeAutorizarColeta;

  /*********************************************************************************************
  * Data..: 03/09/2015
  * Autor.: Fabiano Góes
  * Regra para saber se deve abrir o Modal de Items/Pedido da PreColeta.
  * > Criado para Arcelomittal,
  * > quando foi digitado apenas o pedido e o pedido existe em nossa base
  * > deve abrir um Modal com os items(PreColeta) do pedido digitado
  * > o usuário vai selecionar os items/Precoleta que ele deveja adicionar a colela
  **********************************************************************************************/
  Procedure Sp_Get_AbrirModalPreColeta(pColeta  in  tdvadm.t_arm_coleta.arm_coleta_ncompra%type,
                                       pCiclo   in  tdvadm.t_arm_coleta.arm_coleta_ciclo%type,
                                       pAbrir   out char, -- S/N
                                       pStatus  out varchar2,
                                       pMessage out varchar2)
  as
    vColetaRowType t_arm_coleta%rowtype;
    vIsOpen boolean;
  begin
    begin
      vColetaRowType := Fn_Get_ColetaRowType(pColeta,pCiclo);
      /***************************************************************************************************************
       * Regra para abrir o Modal:
       * > é uma Coleta Arcelormittal E
       * > pedido tem 10 caracteres E
       * > pedido existe na base t_edi_arcerlomittal
       ***************************************************************************************************************/
      vIsOpen := (Fn_AMT_IsColetaAMT(vColetaRowType) = True) and
                 (Length(vColetaRowType.Arm_Coleta_Pedido) >= 10) and
                 (pkg_edi_precoleta.Fn_Existe_Pedido(substr(vColetaRowType.Arm_Coleta_Pedido, 1, 10)) = True);

      if vIsOpen then
        -- TODO: Fabiano 09/09/2015
        -- comentei só até desenvolvermos a tela de itens com os inputs qtde e peso
        --pAbrir := 'S';
        pAbrir := 'S';
      end if;

      pStatus  := Status_Normal;
      pMessage := 'Abrir Modal PreColeta';
    exception when others then
      pStatus  := Status_Erro;
      pMessage := sqlerrm;
    end;
  end Sp_Get_AbrirModalPreColeta;

  /*********************************************************************************************
  * Data..: 03/09/2015
  * Autor.: Fabiano Góes | Diego
  * Versão: 1.0
  * > Procedure para listar todos os items de um pedido
  **********************************************************************************************/
  procedure Sp_Get_ItemsPedido(pPedido  in tdvadm.t_edi_arcelormittal.edi_arcelormittal_pedido%type,
                               pCursor      out types.cursorType,
                               pStatus      out varchar2,
                               pMessage     out varchar2)
  as
  begin
    begin
      open pCursor for
      select *
        from t_edi_arcelormittal a
        where a.edi_arcelormittal_pedido = pPedido;

      pStatus  := Status_Normal;
      pMessage := 'OK';
    exception when others then
      pStatus := Status_Erro;
      pMessage := sqlerrm || ' - ' || dbms_utility.format_error_backtrace;
    end;
  end Sp_Get_ItemsPedido;

  /*********************************************************************************************
  * Data..: 08/09/2015
  * Autor.: Diego
  * Versão: 1.0
  * > Procedure Gravar items da coleta atraves dos items do pedido(precoleta)
  **********************************************************************************************/
  Procedure Sp_Post_ListColetaItemXml(pPreColetaXmlItem In Varchar2,
                                      pColetaNumero     In Varchar2,
                                      pColetaCiclo      In Varchar2,
                                      pStatus           out varchar2,
                                      pMessage          out varchar2)
  As
    /*
      <list>
         <preColeta>
            <pedido>5200877438</pedido>
            <itemPedido>10</itemPedido>
            <quantidade>1</quantidade>
            <peso>10</peso>
         </preColeta>
      </list>
    */
    vPreColetaRowType t_Edi_Arcelormittal%RowType;
    vColetaRowType t_arm_coleta%RowType;
    i                Integer := 0;
    vItem            integer;
    vDescrItemColeta Varchar2(50);
    vPedido          Varchar2(50);
  Begin
     Begin
        --insert into dropme(a,x) values('COLETA_ITEM', pPreColetaXmlItem);commit;

        vColetaRowType := Fn_Get_ColetaRowType(pColetaNumero, pColetaCiclo);

        Select Count(*)
          Into i
          From t_arm_coletancompra n
          where n.arm_coletancompra = pColetaNumero
            and n.arm_coleta_ciclo  = pColetaCiclo;

        for p_cursor in(SELECT extractValue(VALUE(TAB2), '/preColeta/pedido')    pedido,
                                extractValue(VALUE(TAB2), '/preColeta/itemPedido')itemPedido,
                                extractValue(VALUE(TAB2), '/preColeta/quantidade')quantidade,
                                extractValue(VALUE(TAB2), '/preColeta/peso')peso
                           FROM TABle(XMLSequence(extract(xmltype.createXML(pPreColetaXmlItem), '/list/preColeta'))) TAB2
                          WHERE 0 = 0)
           loop
              vPreColetaRowType := Pkg_Edi_Precoleta.Fn_Get_PreColetaRowType(p_cursor.pedido, p_cursor.itempedido);
              -- Descricao do item da coleta - com pedido/item
              vDescrItemColeta := Fn_Get_MercadoriaDescPreCol(vPreColetaRowType);
              i := i + 1;
              insert into t_arm_coletancompra ( arm_coletancompra,
                                                glb_mercadoria_codigo,
                                                glb_embalagem_codigo,
                                                arm_coleta_ncompra_peso,
                                                arm_coleta_ncompra_largura,
                                                arm_coleta_ncompra_altura,
                                                arm_coleta_ncompra_comp,
                                                arm_coleta_ncompra_cubagem,
                                                arm_coleta_ncompra_volume,
                                                arm_coleta_ncompra_qtdemp,
                                                arm_coleta_ncompra_remont,
                                                arm_coletancompra_mercadoria,
                                                arm_coleta_ciclo,
                                                arm_coleta_seqitem,
                                                glb_onu_codigo,
                                                glb_onu_grpemb )
                      values ( trim(pColetaNumero),
                               '71', -- Mercadoria
                               '11', -- embalagem
                               p_cursor.peso,  -- peso
                               '0',  -- largura
                               '0',  -- altura
                               '0',  -- comprimento
                               '0',  -- cubagem
                               p_cursor.quantidade,  -- volume
                               '0',  --quantidade
                               'N',  -- remontavel
                               vDescrItemColeta, -- mercadoria
                               pColetaCiclo,
                               i, -- sequencia
                               '0', -- onu_codigo
                               'SE' -- onu_grpemb
                             );

              if vItem is null then
                vItem := to_number(p_cursor.itempedido);
              end if;

             --------------------------------------------------------------------------------------------------
             -- 18/09/2015 - Fabiano
             -- Alimento a tabela(Criada nesta data) de ligação entre:
             -- T_ARM_COLETANCOMPRA(Itens da Colata) com T_EDI_ARCELORMITTAL(PreColeta)
             --------------------------------------------------------------------------------------------------
             insert into T_ARM_COLETAPEDIDOITEM(arm_coleta_ncompra,
                                                arm_coleta_ciclo,
                                                arm_coleta_seqitem,
                                                edi_arcelormittal_pedido,
                                                edi_arcelormittal_itempedido)
             values(pColetaNumero, -- arm_coleta_ncompra
                    pColetaCiclo, -- arm_coleta_ciclo
                    i, -- arm_coleta_seqitem
                    p_cursor.pedido, -- edi_arcelormittal_pedido
                    p_cursor.itempedido); -- edi_arcelormittal_itempedido

           end loop;

           Sp_UpdateColetaPendente(pColetaNumero, pColetaCiclo, pStatus, pMessage);

           --------------------------------------------------------------------------------------------------
           -- Atualiza quantidade de volumes e peso
           --------------------------------------------------------------------------------------------------
           Sp_Get_AtualizaValoresPeso(pColetaNumero, pColetaCiclo, pStatus, pMessage);
           if pStatus != 'N' then
              return;
           end if;

           --------------------------------------------------------------------------------------------------
           -- atualiza o compo P.O/Pedido da Coleta com o Pedido dos Itens
           --------------------------------------------------------------------------------------------------
           vPedido := substr(trim(vColetaRowType.Arm_Coleta_Pedido),1,10)||vItem;
           Update t_arm_coleta c
              set c.arm_coleta_pedido = vPedido
            where trim(c.arm_coleta_ncompra) = trim(pColetaNumero)
              and trim(c.arm_coleta_ciclo)   = trim(pColetaCiclo);

           Update t_arm_coletaarquivo ca
              set ca.arm_coleta_arqxml = Replace(ca.arm_coleta_arqxml,
                                                 '<pedido>'||vColetaRowType.Arm_Coleta_Pedido||'</pedido>',
                                                 '<pedido>'||vPedido||'</pedido>')
            where trim(ca.arm_coleta_ncompra) = trim(pColetaNumero)
              and trim(ca.arm_coleta_ciclo)   = trim(pColetaCiclo);

           Commit;
           pStatus := 'N';
           pMessage := 'OK';

     Exception When Others Then
         Rollback;
         pStatus := 'E';
         pMessage := sqlerrm || ' - ' || dbms_utility.format_error_backtrace;
     End;
  End Sp_Post_ListColetaItemXml;

  /*********************************************************************************************
  * Data..: 08/09/2015
  * Autor.: Fabiano
  * Versão: 2.0 - Refactor
  * > Function para obter o email do Usuário através do Código
  **********************************************************************************************/
  Function Fn_Get_EmailUsuario(pUsuarioCodigo in t_usu_usuario.usu_usuario_codigo%type)
    return varchar2
  as
    vEmailUsuario  varchar2(2000);
    vUsuarioCodigo tdvadm.t_usu_usuario.usu_usuario_codigo%type;
  begin
      begin
        select LOWER(u.usu_usuario_email), u.usu_usuario_codigo
          into vEmailusuario,
               vUsuarioCodigo
          from t_usu_usuario u
         where lower(u.usu_usuario_codigo) = RPAD(lower(pUsuarioCodigo),10,' ')
          and nvl(u.usu_usuario_ativo,'S') = 'S';

        -- até que não se use mais a tabela de usuário erb
        if nvl(vEmailUsuario, '-1') = '-1' then
          begin
            select LOWER(uw.dc_email)
            into vEmailusuario
            from coleta.usuario_web uw
            where lower(uw.usu_usuario_codigo) = RPAD(lower(pUsuarioCodigo),10, ' ');
          exception when no_data_found then
            vEmailusuario := 'coletaweb@dellavolpe.com.br';
          end;
        end if;

      -- Fabiano Góes - 01/08/2016
      -- Regra AMSTED:
      --       > quando 'JOSENILDO' solicitar/autorizar/cancelar Coleta deve ser enviado emails para GUSTAVO e LEONEL alem dele mesmo
      --       > quando 'GUSTAVO' solicitar/autorizar/cancelar Coleta deve ser enviado emails para JOSENILDO e LEONEL alem dele mesmo
      -- deve ser pensado em uma maneira melhor de resolver esta situação.
      -- TODO: até que seja aplicado a nova regra de emails/aplicacao
      vEmailusuario := case when trim(upper(vUsuarioCodigo)) = 'JOSENILDO' then vEmailusuario||';thiagol.dellavolpe@amstedmaxion.com.br;gustavo.calca@amstedmaxion.com.br'
                            when trim(upper(vUsuarioCodigo)) = 'GUSTAVO'   then vEmailusuario||';thiagol.dellavolpe@amstedmaxion.com.br;josenildo.lamenha@amstedmaxion.com.br'
                            else vEmailusuario
                       end;

        return vEmailusuario;
      exception when others then
        raise_application_error(-20001, 'Erro ao tentar obter Email do Usuário[ '||pUsuarioCodigo||' ]. '||sqlerrm);
      end;
  end Fn_Get_EmailUsuario;

  /*********************************************************************************************
  * Data..: 08/09/2015
  * Autor.: Fabiano
  * Versão: 2.0 - Refactor
  * ==> Function para obter o emails de todos envolvidos na Coleta:
  * ==> Email Usuário que Cadastrou a Coleta
  * ==> Emails do Armazem
  **********************************************************************************************/
  Function Fn_Get_EmailsColeta(pColeta  in  tdvadm.t_arm_coleta.arm_coleta_ncompra%type,
                               pCiclo   in  tdvadm.t_arm_coleta.arm_coleta_ciclo%type)
    return varchar2
  as
    vEmailUsuarioColeta varchar2(1000);
    vUsuarioCodigo tdvadm.t_usu_usuario.usu_usuario_codigo%type;
  begin
      begin

        -- Emails do Armazem vinculado na Coleta
        select 
               -- Fabiano 13/03/207
               -- estou pegando o email da propria tabela de Coleta o email do solicitante
               -- isso porque em Coletas de Integração Nimbi/Quadrem o usuário de cadastro é um  usuario que não verifica emails
               --LOWER(u.usu_usuario_email), u.usu_usuario_codigo
               LOWER(c.arm_coleta_emailsolic), 
               u.usu_usuario_codigo
          into vEmailUsuarioColeta,
               vUsuarioCodigo
          from tdvadm.t_arm_coleta c,
               tdvadm.t_usu_usuario u
         where c.usu_usuario_codigo_cad = u.usu_usuario_codigo -- ligação de Coleta com Usuario
           and c.arm_coleta_ncompra     = pColeta
           and c.arm_coleta_ciclo       = pCiclo
            and nvl(u.usu_usuario_ativo,'S') = 'S';

      -- Fabiano Góes - 01/08/2016
      -- Regra AMSTED:
      --       > quando 'JOSENILDO' solicitar/autorizar/cancelar Coleta deve ser enviado emails para GUSTAVO e LEONEL alem dele mesmo
      --       > quando 'GUSTAVO' solicitar/autorizar/cancelar Coleta deve ser enviado emails para JOSENILDO e LEONEL alem dele mesmo
      -- deve ser pensado em uma maneira melhor de resolver esta situação.
      -- TODO: até que seja aplicado a nova regra de emails/aplicacao
      vEmailUsuarioColeta := case when trim(upper(vUsuarioCodigo)) = 'JOSENILDO' then vEmailUsuarioColeta||';thiagol.dellavolpe@amstedmaxion.com.br;gustavo.calca@amstedmaxion.com.br'
                                  when trim(upper(vUsuarioCodigo)) = 'GUSTAVO'   then vEmailUsuarioColeta||';thiagol.dellavolpe@amstedmaxion.com.br;josenildo.lamenha@amstedmaxion.com.br'
                                  else vEmailUsuarioColeta
                             end;

        return vEmailUsuarioColeta;--||','||vEmailsArmazem;
      exception when others then
        raise_application_error(-20001, 'Erro ao tentar obter Email do Usuário Coleta e Emails Armazem.'||sqlerrm);
      end;
  end Fn_Get_EmailsColeta;

  /************************************************************************************************
   * PROGRAMA         : ColetaWeb
   * DESENVOLVEDOR    : Fabiano
   * DATA DE CRIACAO  : 14/09/2015
   * Versão           : 2.0 - Refactor
   * FUNCINALIDADE    : Executar Updates pós efetivar
   * PARTICULARIDADES :
   * OBS..............:
   * PARAM. OBRIGAT.  : pColetaNumero | pColetaCiclo = Chave da Coleta
   *                    pStatus = E=ERRO, N=Normal
   *                    pMessage = Mensagem de ERRO ou mensagem de Normal quando necessário
   ************************************************************************************************/
   Procedure Sp_Set_UpdatePosEfetivar(pColetaNumero in t_arm_coleta.arm_coleta_ncompra%type,
                                      pColetaCiclo  in t_arm_coleta.arm_coleta_ciclo%type,
                                      pStatus       out varchar2,
                                      pMessage      out varchar2)
   as
     vCount integer := 0;
     vColetaRowType T_arm_Coleta%RowType;
     vFlatAutorizar Char(1) := null;
   begin
     begin
       vColetaRowType := Fn_Get_ColetaRowType(pColetaNumero, pColetaCiclo);

       vFlatAutorizar := Case nvl(trim(vColetaRowType.Arm_Coletaocor_Codigo),'NULL')
                           when '65' then null
                           else 'E'
                         End;

       ---------------------------------------------------------------------------------------------------------
       -- Consistencia para produto quimico
       ---------------------------------------------------------------------------------------------------------
       select count(*)
         Into vCount
         From t_arm_coletancompra cn
        where cn.arm_coletancompra = pColetaNumero
          and cn.arm_coleta_ciclo  = LPAD(pColetaCiclo,3,000)
          and nvl(cn.glb_onu_codigo,'9999') != '9999'
          and cn.glb_onu_codigo != '0';

       ---------------------------------------------------------------------------------------------------------
       -- se contem produto quimico
       ---------------------------------------------------------------------------------------------------------
       -- TODO: add usuario alterou no UPDATE
       update t_arm_coleta k
          set k.arm_coleta_flagquimico = case vCount
                                           when 0 then 'N'
                                           else 'S'
                                         end,
              k.arm_coleta_flagaut = vFlatAutorizar
        where k.arm_coleta_ncompra    = pColetaNumero
          and k.arm_coleta_ciclo      = LPAD(pColetaCiclo,3,000);

       ---------------------------------------------------------------------------------------------------------
       -- Diego | Fabiano - 15/10/2015
       -- Alteração a pedido do Sirlano, se for coleta Expressa/Emergencial insere uma linha t_arm_coletaformexp
       ---------------------------------------------------------------------------------------------------------
       if(vColetaRowType.Arm_Coleta_Tpcoleta = 'E') or (vColetaRowType.Glb_Tpcarga_Codigo = 'EX') then
          -- insere form Exp
          insert into t_arm_coletaformexp(arm_coleta_ncompra,
                                          arm_coleta_ciclo,
                                          arm_coletaformexp_tipo,
                                          arm_coletaex_soap_codigo,
                                          arm_coleta_nrformulario )
                                     values (vColetaRowType.Arm_Coleta_Ncompra,
                                             vColetaRowType.Arm_Coleta_Ciclo,
                                             'E',   -- E=Expressa | S=Spot
                                             '000', -- Exclusivo VALE, '000' igual Default
                                             vColetaRowType.Usu_Usuario_Codigo_Cad);

       else
       ---------------------------------------------------------------------------------------------------------
       -- Klayton - 24/10/2016
       -- Se não for expresso, excluo da t_arm_coletaformexp caso exista, pois uma coleta pode ser expresso, depois um fracionado
       ---------------------------------------------------------------------------------------------------------  
         
         delete tdvadm.t_arm_coletaformexp ll
          where ll.arm_coleta_ncompra = vColetaRowType.Arm_Coleta_Ncompra
            and ll.arm_coleta_ciclo   = vColetaRowType.Arm_Coleta_Ciclo;
           
       end if;

       commit;
       pStatus  := Status_Normal;
       pMessage := 'OK';
     exception when others then
       pStatus  := Status_Erro;
       pMessage := 'Erro ao atualizar Coleta pós efetivar, '||sqlerrm||' - '||dbms_utility.format_error_backtrace;
     end;
   end Sp_Set_UpdatePosEfetivar;

  /*********************************************************************************************
  * Data..: 10/09/2015
  * Autor.: Fabiano Góes
  * Versão: 2.0 - Refactor
  * Procedure para efetivar coleta de modo Default sem regra especifica de Cliente
  **********************************************************************************************/
  Procedure Sp_Set_EfetivarColetaDefault(pColetaNumero       in t_arm_coleta.arm_coleta_ncompra%type,
                                         pColetaCiclo        in t_arm_coleta.arm_coleta_ciclo%type,
                                         pMensagemEfeticacao out varchar2,
                                         pStatus             out varchar2,
                                         pMessage            out varchar2)
  as
    vEmailUsuario       varchar2(1000);
    vEmailsCopia        varchar2(2000);
    vMensagemEfeticacao varchar2(2000);
    vCorpoEmail         varchar2(2000);
    vAssunto            varchar2(1000) := 'Coleta gerada/efetivada com sucesso[ '||pColetaNumero||' - '||pColetaCiclo||' ]';
    vEmailOrigem        varchar2(1000) := 'coletaweb@dellavolpe.com.br';
    vColetaRowType      t_arm_coleta%rowtype;
  begin
    begin
        ----------------------------------------------------------------------------------------------------------------------------------
        -- ********** EFETIVAR DEFAULT SEM REGRA ESPECIFICA PARA CLIENTE *********
        -- Obtenho a linha da Coleta que deve ser Efetivada
        ----------------------------------------------------------------------------------------------------------------------------------
        vColetaRowType := Fn_Get_ColetaRowType(pColetaNumero, pColetaCiclo);

    -- TODO: add usuario alterou no UPDATE
        update t_arm_coleta col
        set col.arm_coletaocor_codigo      = null,
            col.arm_coleta_dtautoriza      = sysdate,
            col.usu_usuario_codigoautoriza = vColetaRowType.usu_usuario_codigo_cad -- TODO: Diego | usuario nao passa na efetiva, usa o usuario cadastro
        where col.arm_coleta_ncompra    = pColetaNumero
          and col.arm_coleta_ciclo      = LPAD(pColetaCiclo,3,000)
          and col.arm_coletaorigem_cod  = 4;
        commit;

        ----------------------------------------------------------------------------------------------------------------------------------
        -- Monta Mensagem do Email de Efeticação
        -- a mesma mensagem de Email será exibida no front-end no momento da Efetivação
        ----------------------------------------------------------------------------------------------------------------------------------
        vMensagemEfeticacao := vMensagemEfeticacao || '<h3>Coleta Efetivada com sucesso</h3>';
        vMensagemEfeticacao := vMensagemEfeticacao || 'Coleta Numero.: ' || pColetaNumero || ' - ' || pColetaCiclo || '<hr/>';

        ---------------------------------------------------------------------------------------------------------
        -- obtenho os emails do usuário e os envolvidos na coleta para copia
        -- ==> vEmailUsuario com o email do usuário que cadastrou a Coleta
        -- ==> vEmailsCopia com os emails do Armazem
        ---------------------------------------------------------------------------------------------------------
        Sp_Get_EmailColeta(pColetaNumero, pColetaCiclo, vEmailUsuario, vEmailsCopia, pStatus, pMessage);

        pMensagemEfeticacao  := pMensagemEfeticacao || '<br/><b>E-mails enviados para:</b>'|| vEmailUsuario||';'||vEmailsCopia||'<br/>';

        vCorpoEmail  := vMensagemEfeticacao || Fn_Get_MessageInfoColeta(pColetaNumero, pColetaCiclo, false); -- false = não aguardar autorização
        vEmailsCopia := case
                          when length(vEmailsCopia) > 5 then vEmailsCopia --||';fgoes@dellavolpe.com.br;ddamaceno@dellavolpe.com.br'
                          --else 'fgoes@dellavolpe.com.br;ddamaceno@dellavolpe.com.br'
                        end;

        begin
          wservice.pkg_glb_email.SP_ENVIAEMAIL(vAssunto,
                                               vCorpoEmail,
                                               vEmailOrigem,
                                               vEmailUsuario,
                                               vEmailsCopia);
        exception when others then
          vAssunto    := 'ERRO ao tentar enviar Email da Coleta: '||pColetaNumero||' - '||pColetaCiclo;
          vCorpoEmail := 'ERRO ao tentar enviar Email da Coleta: '||pColetaNumero||' - '||pColetaCiclo||
                       ' - Usuario: '||vColetaRowType.Usu_Usuario_Codigo_Cad||' - '||sqlerrm;
         wservice.pkg_glb_email.SP_ENVIAEMAIL(vAssunto,
                                               vCorpoEmail,
                                               vEmailOrigem
                                               --'fgoes@dellavolpe.com.br',
                                               --'ddamaceno@dellavolpe.com.br'
                                              );
        end;

      pStatus  := Status_Normal;
      pMessage := 'Coleta Efetivada com sucesso!';
    exception when others then
      pStatus  := Status_Erro;
      pMessage := 'Erro ao Efetivar, '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;
  end Sp_Set_EfetivarColetaDefault;

  Procedure Sp_Set_UpdateModalidade(pColetaNumero       in t_arm_coleta.arm_coleta_ncompra%type,
                                    pColetaCiclo        in t_arm_coleta.arm_coleta_ciclo%type,
                                    pUsuario            in t_usu_usuario.usu_usuario_codigo%type,
                                    pStatus             out varchar2,
                                    pMessage            out varchar2)
  as
    vColetaType t_arm_coleta%rowtype;
    vHabilitar Char(1) := 'N';
  begin
    begin
     
      -- arm_coleta_tpcompra - FOB/FCA/CIF,
      -- arm_coleta_tipo - ENTREGA/COLETAR,
      -- arm_coleta_entcoleta - E/C,
      dbms_output.put_line('pUsuario = '||pUsuario||' - deve ser usado para logar quem alterou a modalidade');
      vColetaType := Fn_Get_ColetaRowType(pColetaNumero, pColetaCiclo);

      /*
       * Se a coleta estiver impressa bloqueia a alteração 
       * Gustavo Vocatore 
       * Data: 29/03/2017
       */
      if(trim(vColetaType.arm_coleta_dtimp) is not null) then -- Pendente
         pStatus  := Status_Warning;
         pMessage := 'Não é alterar a modalidade de uma coleta já impressa';
         return;
      end if;

      /*
       * Se Coelta estiver pendente bloqueia alteracao
       * Diego Lirio
       * Data: 11/11/2015
       */
      if(trim(vColetaType.Arm_Coletaocor_Codigo) = '64') then -- Pendente
         pStatus  := Status_Warning;
         pMessage := 'Não é possivel alterar a Modalidade desta Coleta, Coleta com ocorrencia [64] Pendente!';
         return;
      end if;


      /*
       * Se for usuario KPI nao valida a Ocorrencia da Coleta
       * Analista: Diego | Fabiano
       * Data: 29/09/2015
       */
      vHabilitar := Fn_Get_AlterarModalidadKpi(pUsuario);
      if(vHabilitar = 'N') then -- Usuario KPI vHabilitar sera 'S'
          if trim(nvl(vColetaType.Arm_Coletaocor_Codigo,'-1')) != '65' then
             pStatus  := Status_Warning;
             pMessage := 'Não é possivel alterar a Modalidade desta Coleta, apenas Coleta com ocorrencia [Aguardando] pode ser alterada!';
             return;
          end if;
      end if;

      update t_arm_coleta c
      set
          -- se está como C=COLETAR inverte [arm_coleta_entcoleta] para E=ENTREGA ou vice-versa para 'C'
          c.arm_coleta_entcoleta = case when c.arm_coleta_entcoleta = 'C' then 'E'
                                        when c.arm_coleta_entcoleta = 'E' then 'C'
                                   end,
          -- se está como C=COLETAR inverte [arm_coleta_tipo] para 'ENTREGA' ou vice-versa para 'COLETAR'
          c.arm_coleta_tipo = case when c.arm_coleta_entcoleta = 'C' then 'ENTREGA'
                                   when c.arm_coleta_entcoleta = 'E' then 'COLETAR'
                              end,
          -- se está como C=COLETAR inverte [arm_coleta_tpcompra] para 'FCA' ou vice-versa para 'FOB'
          c.arm_coleta_tpcompra = case when c.arm_coleta_entcoleta = 'C' then 'FCA'
                                       when c.arm_coleta_entcoleta = 'E' then 'FOB'
                                  end,
          c.usu_usuario_codalterou = pUsuario
      where c.arm_coleta_ncompra = pColetaNumero
        and c.arm_coleta_ciclo   = pColetaCiclo;
      commit;
      pStatus  := Status_Normal;
      pMessage := 'Modalidade Alterada com sucesso!';
    exception when others then
      pStatus  := Status_Erro;
      pMessage := 'Erro ao Alterar Modalidade, '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;
  end Sp_Set_UpdateModalidade;

  /*********************************************************************************************
  * Data..: 29/09/2015
  * Autor.: Diego | Fabiano
  * Versão: 1.0
  * Fn_Get_AlterarModalidadKpi: Se for usuario KPI nao valida a Ocorrencia da Coleta
  **********************************************************************************************/
  Function Fn_Get_AlterarModalidadKpi(pUsuario In t_Usu_Usuario.Usu_Usuario_Codigo%Type) return Char
    As
    vHabilitar Char(1);
    vStatus Char(1);
    vMessage Varchar2(2000);
  Begin
      Sp_Get_Habiltar(pUsuario, '61139432000172', 'ALTERAR_MODALIDAD_KPI',vHabilitar,vStatus,vMessage);
      if (vStatus != 'N') then
        Raise_application_error(-20001, vMessage);
      end if;
      return vHabilitar;
  end Fn_Get_AlterarModalidadKpi;

  /*********************************************************************************************
  * Data..: 10/09/2015
  * Autor.: Fabiano Góes
  * Versão: 2.0 - Refactor
  * Regra para saber se a coleta é da VALE
  * >> recebendo por parametro um TpColetaNova
  **********************************************************************************************/
  function Fn_VALE_IsColetaVALE(pColetaRowType In t_Arm_Coleta%RowType)
    return boolean
  as
    vGrupoPagador       t_glb_grupoeconomico.glb_grupoeconomico_codigo%type;
    vIsVALE             boolean := false;
  begin
      --------------------------------------------------------------
      -- Obtem o Grupo economico do cliente destinatario da Coleta.
      --------------------------------------------------------------
      begin
        Select c.glb_grupoeconomico_codigo
           Into vGrupoPagador
           From t_glb_cliente c
           where c.glb_cliente_cgccpfcodigo = pColetaRowType.ARM_COLETA_CNPJPAGADORFERETE;
      exception when no_data_found then
        return false;
      end;

    vIsVALE := (vGrupoPagador = GrupoEconomicoVALE);
    return vIsVALE;
  end Fn_VALE_IsColetaVALE;
  
  /*
  função para verificar se os cnpjs estao liberados de acordo com a regra passada pela vale no dia 14/03/2018
  */
  function Fn_VALE_LiberaItabrasco(pColetaRowType in tdvadm.t_arm_coleta%RowType,
                                   pStatus        in out char,
                                   pMessage       in out varchar2)
    return boolean
  as
    vIsVALE             boolean := false;
  begin
    if (rpad(trim(pColetaRowType.Arm_Coleta_Cnpjpagadorferete), 8,0) IN ('27063874')) then  
       vIsVALE := true;
       pStatus := 'N';
       pMessage := 'Usuario CNPJ liberado Itabrasco';
    end if;
    return vIsVALE;
  end Fn_VALE_LiberaItabrasco;
  
  function Fn_VALE_LiberaHispanobras(pColetaRowType in tdvadm.t_arm_coleta%RowType,
                                     pStatus        in out char,
                                     pMessage       in out varchar2)
    return boolean
  as
    vIsVALE             boolean := false;
  begin
    if (rpad(trim(pColetaRowType.Arm_Coleta_Cnpjpagadorferete), 8,0) IN ('27240092')) then  
       vIsVALE := true;
       pStatus := 'N';
       pMessage := 'Usuario CNPJ liberado Hispanobras';
    end if;
    return vIsVALE;
  end Fn_VALE_LiberaHispanobras;
  
  function Fn_VALE_LiberaNipoBrasileira(pColetaRowType in tdvadm.t_arm_coleta%RowType,
                                     pStatus        in out char,
                                     pMessage       in out varchar2)
    return boolean
  as
    vIsVALE             boolean := false;
  begin
    if (rpad(trim(pColetaRowType.Arm_Coleta_Cnpjpagadorferete), 8,0) IN ('27251842')) then  
       vIsVALE := true;
       pStatus := 'N';
       pMessage := 'Usuario CNPJ liberado CIA. NIPO BRASILEIRA';
    end if;
    return vIsVALE;
  end Fn_VALE_LiberaNipoBrasileira;
  
  function Fn_VALE_LiberaMineracoesBR(pColetaRowType in tdvadm.t_arm_coleta%RowType,
                                     pStatus        in out char,
                                     pMessage       in out varchar2)
    return boolean
  as
    vIsVALE             boolean := false;
  begin
    if (rpad(trim(pColetaRowType.Arm_Coleta_Cnpjpagadorferete), 8,0) IN ('33417445')) then  
       vIsVALE := true;
       pStatus := 'N';
       pMessage := 'Usuario CNPJ liberado Mineracoes Brasileiras';
    end if;
    return vIsVALE;
  end Fn_VALE_LiberaMineracoesBR;
  
  function Fn_VALE_LiberaAcos(pColetaRowType in tdvadm.t_arm_coleta%RowType,
                                     pStatus        in out char,
                                     pMessage       in out varchar2)
    return boolean
  as
    vIsVALE             boolean := false;
  begin
    if (rpad(trim(pColetaRowType.Arm_Coleta_Cnpjpagadorferete), 8,0) IN ('10335963')) then  
       vIsVALE := true;
       pStatus := 'N';
       pMessage := 'Usuario CNPJ liberado Acos';
    end if;
    return vIsVALE;
  end Fn_VALE_LiberaAcos;
  
 function Fn_VALE_baovale(pColetaRowType in tdvadm.t_arm_coleta%RowType,
                                     pStatus        in out char,
                                     pMessage       in out varchar2)
    return boolean
  as
    vIsVALE             boolean := false;
  begin
    if (rpad(trim(pColetaRowType.Arm_Coleta_Cnpjpagadorferete), 8,0) IN ('04660182')) then  
       vIsVALE := true;
       pStatus := 'N';
       pMessage := 'Usuario CNPJ liberado BAO VALE';
    end if;
    return vIsVALE;
  end Fn_VALE_baovale;
  
   function Fn_VALE_cnpjbaovale(pColetaRowType in tdvadm.t_arm_coleta%RowType)
    return boolean
  as
    vIsVALE             boolean := false;
  begin
    if (rpad(trim(pColetaRowType.Arm_Coleta_Cnpjpagadorferete), 8,0) IN ('04660182')) then  
       vIsVALE := true;
    end if;
    return vIsVALE;
  end Fn_VALE_cnpjbaovale;
  
  function Fn_VALE_LiberaVale(pColetaRowType in tdvadm.t_arm_coleta%RowType,
                                     pStatus        in out char,
                                     pMessage       in out varchar2)
    return boolean
  as
    vIsVALE             boolean := false;
  begin
    if (rpad(trim(pColetaRowType.Arm_Coleta_Cnpjpagadorferete), 8,0) IN ('33592510')) then  
       vIsVALE := true;
       pStatus := 'N';
       pMessage := 'Usuario CNPJ liberado  Vale';
    end if;
    return vIsVALE;
  end Fn_VALE_LiberaVale;
  
   function Fn_VALE_cnpjvale(pColetaRowType in tdvadm.t_arm_coleta%RowType)
    return boolean
  as
    vIsVALE             boolean := false;
  begin
    if (rpad(trim(pColetaRowType.Arm_Coleta_Cnpjpagadorferete), 8,0) IN ('33592510')) then  
       vIsVALE := true;
    end if;
    return vIsVALE;
  end Fn_VALE_cnpjvale;
  
   function Fn_VALE_LiberaMosaic(pColetaRowType in tdvadm.t_arm_coleta%RowType,
                                     pStatus        in out char,
                                     pMessage       in out varchar2)
    return boolean
  as
    vIsVALE             boolean := false;
  begin
    if (rpad(trim(pColetaRowType.Arm_Coleta_Cnpjpagadorferete), 8,0) IN ('33931486')) then  
       vIsVALE := true;
       pStatus := 'N';
       pMessage := 'Usuario CNPJ liberado Mosaic';
    end if;
    return vIsVALE;
  end Fn_VALE_LiberaMosaic;
  
   function Fn_VALE_LiberaValeMaraba(pColetaRowType in tdvadm.t_arm_coleta%RowType,
                                     pStatus        in out char,
                                     pMessage       in out varchar2)
    return boolean
  as
    vIsVALE             boolean := false;
  begin
    if (rpad(trim(pColetaRowType.Arm_Coleta_Cnpjpagadorferete), 8,0) IN ('33592510')) then  
       vIsVALE := true;
       pStatus := 'N';
       pMessage := 'Usuario CNPJ liberado Vale Maraba';
    end if;
    return vIsVALE;
  end Fn_VALE_LiberaValeMaraba;
  
  function Fn_VALE_LiberaValeSalobo(pColetaRowType in tdvadm.t_arm_coleta%RowType,
                                     pStatus        in out char,
                                     pMessage       in out varchar2)
    return boolean
  as
    vIsVALE             boolean := false;
  begin
    if (rpad(trim(pColetaRowType.Arm_Coleta_Cnpjpagadorferete), 8,0) IN ('33931478')) then  
       vIsVALE := true;
       pStatus := 'N';
       pMessage := 'Usuario CNPJ liberado Vale Salobo';
    end if;
    return vIsVALE;
  end Fn_VALE_LiberaValeSalobo;
  
   function Fn_VALE_LiberaFertilizantes(pColetaRowType in tdvadm.t_arm_coleta%RowType,
                                     pStatus        in out char,
                                     pMessage       in out varchar2)
    return boolean
  as
    vIsVALE             boolean := false;
  begin
    if (rpad(trim(pColetaRowType.Arm_Coleta_Cnpjpagadorferete), 8,0) IN ('92660604')) then  
       vIsVALE := true;
       pStatus := 'N';
       pMessage := 'Usuario CNPJ liberado Vale Fertilizantes';
    end if;
    return vIsVALE;
  end Fn_VALE_LiberaFertilizantes;
  
  function Fn_VALE_LiberaKobrasco(pColetaRowType in tdvadm.t_arm_coleta%RowType,
                                     pStatus        in out char,
                                     pMessage       in out varchar2)
    return boolean
  as
    vIsVALE             boolean := false;
  begin
    if (rpad(trim(pColetaRowType.Arm_Coleta_Cnpjpagadorferete), 8,0) IN ('33931494')) then  
       vIsVALE := true;
       pStatus := 'N';
       pMessage := 'Usuario CNPJ liberado Vale Kobrasco';
    end if;
    return vIsVALE;
  end Fn_VALE_LiberaKobrasco;
  
  function Fn_VALE_LiberaSepetiba(pColetaRowType in tdvadm.t_arm_coleta%RowType,
                                     pStatus        in out char,
                                     pMessage       in out varchar2)
    return boolean
  as
    vIsVALE             boolean := false;
  begin
    if (rpad(trim(pColetaRowType.Arm_Coleta_Cnpjpagadorferete), 8,0) IN ('72372998')) then  
       vIsVALE := true;
       pStatus := 'N';
       pMessage := 'Usuario CNPJ liberado Sepetiba';
    end if;
    return vIsVALE;
  end Fn_VALE_LiberaSepetiba;
  
  function Fn_VALE_LiberaMinCorumbaense(pColetaRowType in tdvadm.t_arm_coleta%RowType,
                                              pStatus        in out char,
                                              pMessage       in out varchar2)
    return boolean
  as
    vIsVALE             boolean := false;
  begin
    if (rpad(trim(pColetaRowType.Arm_Coleta_Cnpjpagadorferete), 8,0) IN ('03327988')) then  
       vIsVALE := true;
       pStatus := 'N';
       pMessage := 'Usuario CNPJ liberado Mineracao Corumbaense';
    end if;
    return vIsVALE;
  end Fn_VALE_LiberaMinCorumbaense;
  

   function Fn_VALE_LiberaAssociacaoVale(pColetaRowType in tdvadm.t_arm_coleta%RowType,
                                              pStatus        in out char,
                                              pMessage       in out varchar2)
    return boolean
  as
    vIsVALE             boolean := false;
  begin
    if (rpad(trim(pColetaRowType.Arm_Coleta_Cnpjpagadorferete), 8,0) IN ('12308301')) then  
       vIsVALE := true;
       pStatus := 'N';
       pMessage := 'Usuario CNPJ liberado Associação Instituto';
    end if;
    return vIsVALE;
  end Fn_VALE_LiberaAssociacaoVale;
  
  
  function Fn_VALE_LiberaValeManganes(pColetaRowType in tdvadm.t_arm_coleta%RowType,
                                              pStatus        in out char,
                                              pMessage       in out varchar2)
    return boolean
  as
    vIsVALE             boolean := false;
  begin
    if (rpad(trim(pColetaRowType.Arm_Coleta_Cnpjpagadorferete), 8,0) IN ('15144306')) then  
       vIsVALE := true;
       pStatus := 'N';
       pMessage := 'Usuario CNPJ liberado Vale Manganes';
    end if;
    return vIsVALE;
  end Fn_VALE_LiberaValeManganes;
  
  Function Fn_VALE_Usuarios_Autorizados(pColetaRowType in t_arm_coleta%RowType)
    return Boolean
  as
    vIsVale integer;
  begin
     -------------------------------------------------------------------------------------------
     -- Regra se o usuario/cnpj solicitante da coleta não for VLI testo o Destino
     -- Se o Cliente/Entrega da Coleta for do Grupo Economico 0074=VLI
     -- a coleta entra como aguardando(ocorrencia=65)
     -------------------------------------------------------------------------------------------

     select count(*)
     into vIsVale
     from coleta.usuario_web uw
     where lower(uw.dc_email) = lower(pColetaRowType.Arm_Coleta_Emailsolic)
     and 'dellavolpe.com.br' <> lower(substr(to_char(pColetaRowType.Arm_Coleta_Emailsolic), instr(to_char(pColetaRowType.Arm_Coleta_Emailsolic), '@') + 1));

     return vIsVale > 0;
  end Fn_VALE_Usuarios_Autorizados;
  
  Function Fn_VALE_Usuarios_Fornecedor(pColetaRowType in t_arm_coleta%RowType)
    return Boolean
  as
    vIsVale integer;
  begin
     -------------------------------------------------------------------------------------------
     -- Regra se o usuario/cnpj solicitante da coleta não for VLI testo o Destino
     -- Se o Cliente/Entrega da Coleta for do Grupo Economico 0074=VLI
     -- a coleta entra como aguardando(ocorrencia=65)
     -------------------------------------------------------------------------------------------

     select count(*)
     into vIsVale
     from tdvadm.t_usu_usuario uw
     where lower(uw.usu_usuario_email) = lower(pColetaRowType.Arm_Coleta_Emailsolic)
     and 'dellavolpe.com.br' <> lower(substr(to_char(pColetaRowType.Arm_Coleta_Emailsolic), instr(to_char(pColetaRowType.Arm_Coleta_Emailsolic), '@') + 1))
     and 'vale.com' <> lower(substr(to_char(pColetaRowType.Arm_Coleta_Emailsolic), instr(to_char(pColetaRowType.Arm_Coleta_Emailsolic), '@') + 1))
     and 'itv.com' <> lower(substr(to_char(pColetaRowType.Arm_Coleta_Emailsolic), instr(to_char(pColetaRowType.Arm_Coleta_Emailsolic), '@') + 1));

     return vIsVale > 0;
  end Fn_VALE_Usuarios_Fornecedor;
  
    /*********************************************************************************************
  * Data..: 30/03/2019 
  * Autor.: Gustavo 
  * Versão: 1.0 - Refactor
  * Regra para pegar o contrato da coleta
  * 
  * Regra de solicitação 
  **********************************************************************************************/
Function Fn_VALE_GETCONTRATO(pColetaRowType in t_arm_coleta%RowType) return tdvadm.t_Arm_coleta.slf_contrato_codigo%type
  as
    vGrupoEconomicoPagadorFrete t_glb_cliente.glb_grupoeconomico_codigo%Type;
    vIbgeOrigem                 tdvadm.t_glb_localidade.glb_localidade_codigoibge%Type;
    vIbgeDestino                tdvadm.t_glb_localidade.glb_localidade_codigoibge%Type; 
    vufOrigem                   tdvadm.t_glb_cliend.glb_estado_codigo%Type;
    vufDestino                  tdvadm.t_glb_cliend.glb_estado_codigo%Type; 
    vContrato                   tdvadm.t_Arm_coleta.slf_contrato_codigo%type := 'XXX';
    vCountDiferente             integer;
    vCnpjDiferente              tdvadm.t_arm_coletaparceiro.glb_cliente_cgccpfpar%type;
    vTipoenderecoDiferente      tdvadm.t_arm_coletaparceiro.glb_tpcliend_codigopar%type;
    vOperacao char(1) :=        tdvadm.pkg_col_coleta.Fn_Col_GetOperacaoValeCnpj(pColetaRowType.Glb_Cliente_Cgccpfcodigocoleta,pColetaRowType.Glb_Cliente_Cgccpfcodigoentreg);
  begin
    Begin
          begin
            Select c.glb_grupoeconomico_codigo
               Into vGrupoEconomicoPagadorFrete
               From t_glb_cliente c
               where trim(c.glb_cliente_cgccpfcodigo) = trim(pColetaRowType.Arm_Coleta_Cnpjpagadorferete);
          exception when no_data_found then
            return 'XXX';
          end;
          
      if(vGrupoEconomicoPagadorFrete = GrupoEconomicoVALE ) then  
     
             -- EXCESSÃO NITRATO    
        
              BEGIN
                 SELECT NVL(NIT.ARM_NITCONTRATO_NROCONTRATO,'XXX')
                    INTO vContrato
                 FROM TDVADM.t_Arm_Nitcontrato NIT  
                 WHERE TRIM(NIT.ARM_NITCONTRATO_REMETENTE)   = TRIM(pColetaRowType.Glb_Cliente_Cgccpfcodigocoleta)
                 AND   TRIM(NIT.ARM_NITCONTRATO_DESTINATARIO)= TRIM(pColetaRowType.Glb_Cliente_Cgccpfcodigoentreg);
             exception when no_data_found then
                 vContrato := 'XXX';
             end; 
             
            SELECT nvl(L.GLB_LOCALIDADE_CODIGOIBGE,'0'),
                   D.GLB_ESTADO_CODIGO
                INTO vIbgeOrigem,
                     vufOrigem
            FROM  TDVADM.T_GLB_CLIEND D,
                  TDVADM.T_GLB_LOCALIDADE L
            WHERE D.GLB_CLIENTE_CGCCPFCODIGO = pColetaRowType.Glb_Cliente_Cgccpfcodigocoleta
            AND   D.GLB_TPCLIEND_CODIGO      = pColetaRowType.Glb_Tpcliend_Codigocoleta
            AND   D.GLB_LOCALIDADE_CODIGO    = L.GLB_LOCALIDADE_CODIGO;
            
           SELECT nvl(L.GLB_LOCALIDADE_CODIGOIBGE,'0'),
                   D.GLB_ESTADO_CODIGO
                INTO vIbgeDestino,
                     VufDestino
            FROM TDVADM.T_GLB_CLIEND D,
                  TDVADM.T_GLB_LOCALIDADE L
            WHERE D.GLB_CLIENTE_CGCCPFCODIGO = pColetaRowType.Glb_Cliente_Cgccpfcodigoentreg
            AND   D.GLB_TPCLIEND_CODIGO      = pColetaRowType.Glb_Tpcliend_Codigoentrega
            AND   D.GLB_LOCALIDADE_CODIGO    = L.GLB_LOCALIDADE_CODIGO;
            
           SELECT COUNT(*)
                   INTO vCountDiferente
            FROM TDVADM.T_ARM_COLETAPARCEIRO P
            WHERE P.ARM_COLETA_NCOMPRA = pColetaRowType.Arm_Coleta_Ncompra
            AND P.Arm_Coleta_Ciclo = pColetaRowType.Arm_Coleta_Ciclo
            and P.ARM_COLETATPPAR_CODIGO  = 'CC';
            
            IF(vCountDiferente > 0) THEN
                  SELECT P.GLB_CLIENTE_CGCCPFPAR,
                         P.GLB_TPCLIEND_CODIGOPAR
                       INTO vCnpjDiferente,
                            vTipoenderecoDiferente
                  FROM TDVADM.T_ARM_COLETAPARCEIRO P
                  WHERE P.ARM_COLETA_NCOMPRA = pColetaRowType.Arm_Coleta_Ncompra
                  AND P.Arm_Coleta_Ciclo = pColetaRowType.Arm_Coleta_Ciclo
                  and P.ARM_COLETATPPAR_CODIGO  = 'CC';
                      
                   SELECT nvl(L.GLB_LOCALIDADE_CODIGOIBGE,'0'),
                         D.GLB_ESTADO_CODIGO
                      INTO vIbgeOrigem,
                           vufOrigem
                  FROM  TDVADM.T_GLB_CLIEND D,
                        TDVADM.T_GLB_LOCALIDADE L
                  WHERE D.GLB_CLIENTE_CGCCPFCODIGO = vCnpjDiferente
                  AND   D.GLB_TPCLIEND_CODIGO      = vTipoenderecoDiferente
                  AND   D.GLB_LOCALIDADE_CODIGO    = L.GLB_LOCALIDADE_CODIGO;
                END IF;
            
          SELECT COUNT(*)
                   INTO vCountDiferente
            FROM TDVADM.T_ARM_COLETAPARCEIRO P
            WHERE P.ARM_COLETA_NCOMPRA = pColetaRowType.Arm_Coleta_Ncompra
            AND P.Arm_Coleta_Ciclo = pColetaRowType.Arm_Coleta_Ciclo
            and P.ARM_COLETATPPAR_CODIGO  = 'CE';
            
            IF(vCountDiferente > 0) THEN
                  SELECT P.GLB_CLIENTE_CGCCPFPAR,
                         P.GLB_TPCLIEND_CODIGOPAR
                       INTO vCnpjDiferente,
                            vTipoenderecoDiferente
                  FROM TDVADM.T_ARM_COLETAPARCEIRO P
                  WHERE P.ARM_COLETA_NCOMPRA = pColetaRowType.Arm_Coleta_Ncompra
                  AND P.Arm_Coleta_Ciclo = pColetaRowType.Arm_Coleta_Ciclo
                  and P.ARM_COLETATPPAR_CODIGO  = 'CE';
                      
                   SELECT nvl(L.GLB_LOCALIDADE_CODIGOIBGE,'0'),
                         D.GLB_ESTADO_CODIGO
                      INTO vIbgeDestino,
                           VufDestino
                  FROM  TDVADM.T_GLB_CLIEND D,
                        TDVADM.T_GLB_LOCALIDADE L
                  WHERE D.GLB_CLIENTE_CGCCPFCODIGO = vCnpjDiferente
                  AND   D.GLB_TPCLIEND_CODIGO      = vTipoenderecoDiferente
                  AND   D.GLB_LOCALIDADE_CODIGO    = L.GLB_LOCALIDADE_CODIGO;
              END IF;
        
        if(vContrato = 'XXX') then
           if(trim(nvl(pColetaRowType.Fcf_Tpcarga_Codigo,'XX')) = '12' OR trim(nvl(pColetaRowType.Fcf_Tpcarga_Codigo,'XX')) = '02')  then
             BEGIN
                 SELECT NVL(T.ARM_COLFRACIRT_NROCONTRATO,'XXX') 
                      INTO vContrato
                 FROM TDVADM.T_ARM_COLFRACIRT T
                 WHERE TRIM(T.ARM_COLFRACIRT_CNPJ) = TRIM(pColetaRowType.Arm_Coleta_Cnpjpagadorferete)
                 AND T.ARM_COLFRACIRT_IBGEORIG     = vIbgeOrigem
                 AND T.ARM_COLFRACIRT_IBGEDEST     = vIbgeDestino
                 AND T.ARM_COLFRACIRT_OPERACAO     = vOperacao
                 AND T.ARM_COLFRACIRT_TPTRANSP     = nvl(pColetaRowType.Arm_Coleta_Tpcoleta,'N');
              exception when no_data_found then
                    vContrato := 'XXX';
               end;
               
               if(vContrato = 'XXX') then
                  BEGIN
                    SELECT NVL(G.ARM_COLFRACIRTKM_NROCONTRATO,'XXX')
                        INTO vContrato
                    FROM TDVADM.T_ARM_COLFRACIRTKM G
                    WHERE TRIM(G.ARM_COLFRACIRTKM_CNPJ) = TRIM(pColetaRowType.Arm_Coleta_Cnpjpagadorferete)
                    AND   G.ARM_COLFRACIRTKM_UFORIG      = vufOrigem
                    AND   G.ARM_COLFRACIRTKM_UFDEST      = vufDestino
                    AND   G.ARM_COLFRACIRTKM_OPERACAO    = vOperacao
                    AND   G.ARM_COLFRACIRTKM_TPTRANSP    = nvl(pColetaRowType.Arm_Coleta_Tpcoleta,'N'); 
                  exception when no_data_found then
                      vContrato := 'XXX';
                  end;     
               end if;
           end if; 
        
            if(trim(nvl(pColetaRowType.Fcf_Tpcarga_Codigo,'XX')) = '11' OR trim(nvl(pColetaRowType.Fcf_Tpcarga_Codigo,'XX')) = '01')  then
              BEGIN
                  SELECT NVL(F.ARM_COLLOTACRKM_NROCONTRATO,'XXX')
                      INTO vContrato
                  FROM TDVADM.T_ARM_COLLOTACRKM F  
                  WHERE TRIM(F.ARM_COLLOTACRKM_CNPJ) = TRIM(pColetaRowType.Arm_Coleta_Cnpjpagadorferete) 
                  AND F.ARM_COLLOTACRKM_UFORIG        = vufOrigem
                  AND F.ARM_COLLOTACRKM_UFDEST        = vufDestino
                  AND TRIM(F.ARM_COLLOTACRKM_TPVEICULO) = TRIM(pColetaRowType.Fcf_Tpveiculo_Codigo)
                  AND F.ARM_COLLOTACRKM_TPTRANSP      = nvl(pColetaRowType.Arm_Coleta_Tpcoleta,'N'); 
                  exception when no_data_found then
                      vContrato := 'XXX';
                  end;   
            end if;
        
   
            if((trim(nvl(pColetaRowType.Fcf_Tpcarga_Codigo,'XX')) = '02' 
                 OR trim(nvl(pColetaRowType.Fcf_Tpcarga_Codigo,'XX')) = '12') 
                 and Fn_VALE_cnpjvale(pColetaRowType) = true)  then
                BEGIN
                   SELECT NVL(T.ARM_COLFRACIRT_NROCONTRATO,'XXX') 
                        INTO vContrato
                   FROM TDVADM.T_ARM_COLFRACIRT T
                   WHERE TRIM(T.ARM_COLFRACIRT_CNPJ) = TRIM('33592510037074')
                   AND T.ARM_COLFRACIRT_IBGEORIG     = vIbgeOrigem
                   AND T.ARM_COLFRACIRT_IBGEDEST     = vIbgeDestino
                   AND T.ARM_COLFRACIRT_OPERACAO     = vOperacao
                   AND T.ARM_COLFRACIRT_TPTRANSP     = nvl(pColetaRowType.Arm_Coleta_Tpcoleta,'N');
                 exception when no_data_found then
                    vContrato := 'XXX';
                 end;
                 
                 if(vContrato = 'XXX') then
                    BEGIN
                      SELECT NVL(G.ARM_COLFRACIRTKM_NROCONTRATO,'XXX')
                          INTO vContrato
                      FROM TDVADM.T_ARM_COLFRACIRTKM G
                      WHERE TRIM(G.ARM_COLFRACIRTKM_CNPJ) = TRIM('33592510037074')
                      AND   G.ARM_COLFRACIRTKM_UFORIG      = vufOrigem
                      AND   G.ARM_COLFRACIRTKM_UFDEST      = vufDestino
                      AND   G.ARM_COLFRACIRTKM_OPERACAO    = vOperacao
                      AND   G.ARM_COLFRACIRTKM_TPTRANSP    = nvl(pColetaRowType.Arm_Coleta_Tpcoleta,'N');  
                    exception when no_data_found then
                       vContrato := 'XXX';
                    end;     
                 end if;
            end if; 
        
            if((trim(nvl(pColetaRowType.Fcf_Tpcarga_Codigo,'XX')) = '01'
               OR trim(nvl(pColetaRowType.Fcf_Tpcarga_Codigo,'XX')) = '11') and Fn_VALE_cnpjvale(pColetaRowType) = true)  then
                BEGIN
                  SELECT NVL(F.ARM_COLLOTACRKM_NROCONTRATO,'XXX')
                      INTO vContrato
                  FROM TDVADM.T_ARM_COLLOTACRKM F  
                  WHERE TRIM(F.ARM_COLLOTACRKM_CNPJ) = TRIM('33592510037074') 
                  AND F.ARM_COLLOTACRKM_UFORIG        = vufOrigem
                  AND F.ARM_COLLOTACRKM_UFDEST        = vufDestino
                  AND TRIM(F.ARM_COLLOTACRKM_TPVEICULO) = TRIM(pColetaRowType.Fcf_Tpveiculo_Codigo)
                  AND F.ARM_COLLOTACRKM_TPTRANSP      = nvl(pColetaRowType.Arm_Coleta_Tpcoleta,'N');
                exception when no_data_found then
                   vContrato := 'XXX';
                end;  
            end if;
        
        end if;
           
                  
     end if;
     return vContrato;
             
    exception when others then
      return   vContrato;
    end;
  end Fn_VALE_GETCONTRATO;
  
    /*********************************************************************************************
  * Data..: 22/07/2020 
  * Autor.:Rafael Noberto 
  * Versão: 1.0 - Refactor
  * Regra para pegar o contrato da Suzano
  * 
  * Regra de solicitação 
  **********************************************************************************************/
  -- TATI
/*Function Fn_SUZ_GETCONTRATO(pColetaRowType in t_arm_coleta%RowType) return tdvadm.t_Arm_coleta.slf_contrato_codigo%type
  as
    vGrupoEconomicoPagadorFrete t_glb_cliente.glb_grupoeconomico_codigo%Type;
    vIbgeOrigem                 tdvadm.t_glb_cliend.glb_localidade_codigoie%Type;
    vIbgeDestino                tdvadm.t_glb_cliend.glb_localidade_codigoie%Type;
    vIbgeOrigemIBGE             tdvadm.t_glb_localidade.glb_localidade_codigoibge%Type;
    vIbgeDestinoIBGE            tdvadm.t_glb_localidade.glb_localidade_codigoibge%Type;  
    vContratoSuzano             tdvadm.t_Arm_coleta.slf_contrato_codigo%type := 'XXX';
    vOperacao char(1) :=        tdvadm.pkg_col_coleta.Fn_Col_GetOperacaoSUZ_cnpj(pColetaRowType.Glb_Cliente_Cgccpfcodigocoleta,pColetaRowType.Glb_Cliente_Cgccpfcodigoentreg);
  begin
    Begin
          begin
            Select c.glb_grupoeconomico_codigo
               Into vGrupoEconomicoPagadorFrete
            From t_glb_cliente c
            where trim(c.glb_cliente_cgccpfcodigo) = trim(pColetaRowType.Arm_Coleta_Cnpjpagadorferete);
          exception when no_data_found then
            return 'XXX';
          end;
          
      if(vGrupoEconomicoPagadorFrete IN (GrupoEconomicoSUZ, GrupoEconomicoSUZ2, GrupoEconomicoSUZ3, GrupoEconomicoSUZ4, 
                                                           GrupoEconomicoSUZ5, GrupoEconomicoSUZ6, GrupoEconomicoSUZ7, GrupoEconomicoSUZ8,
                                                           GrupoEconomicoSUZ9, GrupoEconomicoSUZ10, GrupoEconomicoSUZ11) ) then  
           
           select ed. glb_localidade_codigo 
               into vIbgeOrigem
           from
                tdvadm. t_glb_cliend ed
              where ed.glb_cliente_cgccpfcodigo = pColetaRowType.Glb_Cliente_Cgccpfcodigocoleta
              and ed. glb_tpcliend_codigo = pColetaRowType.Glb_Tpcliend_Codigocoleta; 
              
           select ent.glb_localidade_codigo
                into vIbgeDestino
           from
               tdvadm.t_glb_cliend ent
               where ent.glb_cliente_cgccpfcodigo = pColetaRowType.Glb_Cliente_Cgccpfcodigoentreg
               and ent.glb_tpcliend_codigo = pColetaRowType.Glb_Tpcliend_Codigoentrega;
               
               
                select h.glb_localidade_codigoibge
                into vIbgeOrigemIBGE 
                from tdvadm.t_glb_localidade h 
                where h. glb_localidade_codigo = vIbgeOrigem;
                
                  select h.glb_localidade_codigoibge
                into vIbgeDestinoIBGE 
                from tdvadm.t_glb_localidade h 
                where h. glb_localidade_codigo = vIbgeDestino;
                
           -- ARA CRUZ
          if(  vContratoSuzano = 'XXX') then

            begin
                  select t.ARM_CONSUZANOARACRUZ_contrato
                         into vContratoSuzano
                    from tdvadm.T_ARM_CONSUZANOARACRUZ t 
                 where T.ARM_CONSUZANOARACRUZ_GRUPO         = vGrupoEconomicoPagadorFrete
                 AND t.ARM_CONSUZANOARACRUZ_tpcarga         = pColetaRowType.Fcf_Tpcarga_Codigo
                 AND T.ARM_CONSUZANOARACRUZ_VEICULO         = NVL(pColetaRowType.Fcf_Tpveiculo_Codigo,'0  ')
                 and t.arm_CONSUZANOARACRUZ_prioridade      = nvl(pColetaRowType.Arm_Coleta_Tpcoleta,'N')
                 and t.ARM_CONSUZANOARACRUZ_operacao        = vOperacao
                 and t.ARM_CONSUZANOARACRUZ_origem          = vIbgeOrigemIBGE
                 and t.ARM_CONSUZANOARACRUZ_destino         = vIbgeDestinoIBGE;
             
              exception when no_data_found then
               vContratoSuzano := 'XXX';
            end;     
          end if;
          
         -- TRES LAGOAS
          if(  vContratoSuzano = 'XXX') then

            begin
                  select t.ARM_CONSUZANOTRESLAGOAS_contrato
                         into vContratoSuzano
                    from tdvadm.T_ARM_CONSUZANOTRESLAGOAS t 
                 where T.ARM_CONSUZANOTRESLAGOAS_GRUPO         = vGrupoEconomicoPagadorFrete
                 AND t.ARM_CONSUZANOTRESLAGOAS_tpcarga         = pColetaRowType.Fcf_Tpcarga_Codigo
                 AND T.ARM_CONSUZANOTRESLAGOAS_VEICULO         = NVL(pColetaRowType.Fcf_Tpveiculo_Codigo,'0  ')
                 and t.arm_CONSUZANOTRESLAGOAS_prioridade      = nvl(pColetaRowType.Arm_Coleta_Tpcoleta,'N')
                 and t.ARM_CONSUZANOTRESLAGOAS_operacao        = vOperacao
                 and t.ARM_CONSUZANOTRESLAGOAS_origem          = vIbgeOrigemIBGE
                 and t.ARM_CONSUZANOTRESLAGOAS_destino         = vIbgeDestinoIBGE;
             
              exception when no_data_found then
               vContratoSuzano := 'XXX';
            end;     
          end if;
                             
           -- CAPAO BONITO
          if(  vContratoSuzano = 'XXX') then

            begin
                  select t.ARM_CONSUZANOCAPAOBONITO_contrato
                         into vContratoSuzano
                    from tdvadm.T_ARM_CONSUZANOCAPAOBONITO t 
                 where T.ARM_CONSUZANOCAPAOBONITO_GRUPO         = vGrupoEconomicoPagadorFrete
                 AND t.ARM_CONSUZANOCAPAOBONITO_tpcarga         = pColetaRowType.Fcf_Tpcarga_Codigo
                 AND T.ARM_CONSUZANOCAPAOBONITO_VEICULO         = NVL(pColetaRowType.Fcf_Tpveiculo_Codigo,'0  ')
                 and t.arm_CONSUZANOCAPAOBONITO_prioridade      = nvl(pColetaRowType.Arm_Coleta_Tpcoleta,'N')
                 and t.ARM_CONSUZANOCAPAOBONITO_operacao        = vOperacao
                 and t.ARM_CONSUZANOCAPAOBONITO_origem          = vIbgeOrigemIBGE
                 and t.ARM_CONSUZANOCAPAOBONITO_destino         = vIbgeDestinoIBGE;
             
              exception when no_data_found then
               vContratoSuzano := 'XXX';
            end;     
          end if;
          
         -- CONCEICAO BARRA
          if(  vContratoSuzano = 'XXX') then

            begin
                  select t.ARM_CONSUZANOCONCEICAOBARRA_contrato
                         into vContratoSuzano
                    from tdvadm.T_ARM_CONSUZANOCONCEICAOBARRA t 
                 where T.ARM_CONSUZANOCONCEICAOBARRA_GRUPO         = vGrupoEconomicoPagadorFrete
                 AND t.ARM_CONSUZANOCONCEICAOBARRA_tpcarga         = pColetaRowType.Fcf_Tpcarga_Codigo
                 AND T.ARM_CONSUZANOCONCEICAOBARRA_VEICULO         = NVL(pColetaRowType.Fcf_Tpveiculo_Codigo,'0  ')
                 and t.arm_CONSUZANOCONCEICAOBARRA_prioridade      = nvl(pColetaRowType.Arm_Coleta_Tpcoleta,'N')
                 and t.ARM_CONSUZANOCONCEICAOBARRA_operacao        = vOperacao
                 and t.ARM_CONSUZANOCONCEICAOBARRA_origem          = vIbgeOrigemIBGE
                 and t.ARM_CONSUZANOCONCEICAOBARRA_destino         = vIbgeDestinoIBGE;
             
              exception when no_data_found then
               vContratoSuzano := 'XXX';
            end;     
          end if;
          
          
      
      -- LIMEIRA
          if(  vContratoSuzano = 'XXX') then

            begin
                  select t.ARM_CONSUZANOLIMEIRA_contrato
                         into vContratoSuzano
                    from tdvadm.T_ARM_CONSUZANOLIMEIRA t 
                 where T.ARM_CONSUZANOLIMEIRA_GRUPO         = vGrupoEconomicoPagadorFrete
                 AND t.ARM_CONSUZANOLIMEIRA_tpcarga         = pColetaRowType.Fcf_Tpcarga_Codigo
                 AND T.ARM_CONSUZANOLIMEIRA_VEICULO         = NVL(pColetaRowType.Fcf_Tpveiculo_Codigo,'0  ')
                 and t.arm_consuzanolimeira_prioridade      = nvl(pColetaRowType.Arm_Coleta_Tpcoleta,'N')
                 and t.ARM_CONSUZANOLIMEIRA_operacao        = vOperacao
                 and t.ARM_CONSUZANOLIMEIRA_origem          = vIbgeOrigemIBGE
                 and t.ARM_CONSUZANOLIMEIRA_destino         = vIbgeDestinoIBGE;
             
              exception when no_data_found then
               vContratoSuzano := 'XXX';
            end;     
          end if;
          
        -- SERRA
          if(  vContratoSuzano = 'XXX') then

            begin
                  select t.ARM_CONSUZANOSERRA_contrato
                         into vContratoSuzano
                    from tdvadm.T_ARM_CONSUZANOSERRA t 
                 where T.ARM_CONSUZANOSERRA_GRUPO         = vGrupoEconomicoPagadorFrete
                 AND t.ARM_CONSUZANOSERRA_tpcarga         = pColetaRowType.Fcf_Tpcarga_Codigo
                 AND T.ARM_CONSUZANOSERRA_VEICULO         = NVL(pColetaRowType.Fcf_Tpveiculo_Codigo,'0  ')
                 and t.arm_CONSUZANOSERRA_prioridade      = nvl(pColetaRowType.Arm_Coleta_Tpcoleta,'N')
                 and t.ARM_CONSUZANOSERRA_operacao        = vOperacao
                 and t.ARM_CONSUZANOSERRA_origem          = vIbgeOrigemIBGE
                 and t.ARM_CONSUZANOSERRA_destino         = vIbgeDestinoIBGE;
             
              exception when no_data_found then
               vContratoSuzano := 'XXX';
            end;     
          end if;
          
        -- MUCURI
         if(  vContratoSuzano = 'XXX') then
          
            begin
                  select t. ARM_CONSUZANOMUCURI_contrato
                         into vContratoSuzano
                    from tdvadm.T_ARM_CONSUZANOMUCURI t 
                 where t.arm_consuzanomucuri_grupo       = vGrupoEconomicoPagadorFrete
                 and t.ARM_CONSUZANOMUCURI_tpcarga       = pColetaRowType.Fcf_Tpcarga_Codigo
                 and t.arm_consuzanomucuri_veiculo       = NVL(pColetaRowType.Fcf_Tpveiculo_Codigo,'0  ')
                 and t.arm_consuzanomucuri_prioridade    = nvl(pColetaRowType.Arm_Coleta_Tpcoleta,'N')
                 and t.ARM_CONSUZANOMUCURI_operacao      = vOperacao
                 and t.ARM_CONSUZANOMUCURI_origem        = vIbgeOrigemIBGE
                 and t.ARM_CONSUZANOMUCURI_destino       = vIbgeDestinoIBGE;
             
              exception when no_data_found then
               vContratoSuzano := 'XXX';
            end;     
          end if;
          
          -- SP
            if(  vContratoSuzano = 'XXX') then
          
            begin
                  select t.ARM_CONSUZANOSP_contrato
                         into vContratoSuzano
                    from tdvadm.T_ARM_CONSUZANOSP t 
                 where t.arm_consuzanosp_grupo             = vGrupoEconomicoPagadorFrete
                 and t.ARM_CONSUZANOSP_tpcarga             = pColetaRowType.Fcf_Tpcarga_Codigo
                 and t.arm_consuzanosp_veiculo             = NVL(pColetaRowType.Fcf_Tpveiculo_Codigo,'0  ')
                 and t.arm_consuzanosp_prioridade          = nvl(pColetaRowType.Arm_Coleta_Tpcoleta,'N')
                 and t.ARM_CONSUZANOSP_operacao            = vOperacao
                 and t.ARM_CONSUZANOSP_origem              = vIbgeOrigemIBGE
                 and t.ARM_CONSUZANOSP_destino             = vIbgeDestinoIBGE;
             
              exception when no_data_found then
               vContratoSuzano := 'XXX';
            end;     
          end if;
          
          -- IMPORTAÇÃO
           if(  vContratoSuzano = 'XXX') then
          
            begin
                  select t.arm_consuzanoimp_contrato
                         into vContratoSuzano
                    from tdvadm.t_arm_consuzanoimp t 
                 where T.ARM_CONSUZANOIMP_GRUPO              = vGrupoEconomicoPagadorFrete
                 AND   t.arm_consuzanoimp_tpcarga            = pColetaRowType.Fcf_Tpcarga_Codigo
                 AND   T.ARM_CONSUZANOIMP_VEICULO            = NVL(pColetaRowType.Fcf_Tpveiculo_Codigo,'0  ')
                 AND   T.ARM_CONSUZANOIMP_PRIORIDADE         = nvl(pColetaRowType.Arm_Coleta_Tpcoleta,'N')
                 and   t.arm_consuzanoimp_operacao           = vOperacao
                 and   t.arm_consuzanoimp_origem             = vIbgeOrigemIBGE
                 and   t.arm_consuzanoimp_destino            = vIbgeDestinoIBGE;
             
              exception when no_data_found then
               vContratoSuzano := 'XXX';
            end;     
          end if;
          
         -- POSTO MATA
           if(  vContratoSuzano = 'XXX') then
          
            begin
                  select t.arm_consuzanopostomata_contrato
                         into vContratoSuzano
                    from tdvadm.t_arm_consuzanopostomata t 
                 where T.ARM_consuzanopostomata_GRUPO              = vGrupoEconomicoPagadorFrete
                 AND   t.arm_consuzanopostomata_tpcarga            = pColetaRowType.Fcf_Tpcarga_Codigo
                 AND   T.ARM_consuzanopostomata_VEICULO            = NVL(pColetaRowType.Fcf_Tpveiculo_Codigo,'0  ')
                 AND   T.ARM_consuzanopostomata_PRIORIDADE         = nvl(pColetaRowType.Arm_Coleta_Tpcoleta,'N')
                 and   t.arm_consuzanopostomata_operacao           = vOperacao
                 and   t.arm_consuzanopostomata_origem             = vIbgeOrigemIBGE
                 and   t.arm_consuzanopostomata_destino            = vIbgeDestinoIBGE;
             
              exception when no_data_found then
               vContratoSuzano := 'XXX';
            end;     
          end if;
          
          -- IMPERATRIZ
            if(  vContratoSuzano = 'XXX') then
          
            begin
                  select t.arm_consuzanoimperatriz_contrato
                         into vContratoSuzano
                    from tdvadm.t_arm_consuzanoimperatriz t 
                 where t.arm_consuzanoimperatriz_grupo       = vGrupoEconomicoPagadorFrete
                 and t.arm_consuzanoimperatriz_tpcarga       = pColetaRowType.Fcf_Tpcarga_Codigo
                 and t.arm_consuzanoimperatriz_veiculo       = NVL(pColetaRowType.Fcf_Tpveiculo_Codigo,'0  ')
                 and t.arm_consuzanoimperatriz_prioridade    = nvl(pColetaRowType.Arm_Coleta_Tpcoleta,'N')
                 and t.arm_consuzanoimperatriz_operacao      = vOperacao
                 and t.arm_consuzanoimperatriz_origem        = vIbgeOrigemIBGE
                 and t.arm_consuzanoimperatriz_destino       = vIbgeDestinoIBGE;
             
              exception when no_data_found then
               vContratoSuzano := 'XXX';
            end;     
          end if;
          
           -- JACAREI
            if(  vContratoSuzano = 'XXX') then
          
            begin
                  select t.arm_consuzanojacarei_contrato
                         into vContratoSuzano
                    from tdvadm.t_arm_consuzanojacarei t 
                 where t.arm_consuzanojacarei_grupo       = vGrupoEconomicoPagadorFrete
                 and t.arm_consuzanojacarei_tpcarga       = pColetaRowType.Fcf_Tpcarga_Codigo
                 and t.arm_consuzanojacarei_veiculo       = NVL(pColetaRowType.Fcf_Tpveiculo_Codigo,'0  ')
                 and t.arm_consuzanojacarei_prioridade    = nvl(pColetaRowType.Arm_Coleta_Tpcoleta,'N')
                 and t.arm_consuzanojacarei_operacao      = vOperacao
                 and t.arm_consuzanojacarei_origem        = vIbgeOrigemIBGE
                 and t.arm_consuzanojacarei_destino       = vIbgeDestinoIBGE;
             
              exception when no_data_found then
               vContratoSuzano := 'XXX';
            end;     
          end if;
             
      end if;
     return vContratoSuzano;
             
    exception when others then
      return   vContratoSuzano;
    end;
  end Fn_SUZ_GETCONTRATO;*/
  
   /*********************************************************************************************
  * Data..: 10/09/2001 
  * Autor.: Fenomeno , Sedevitiz, Doutor, Guzinho
  * Versão: 1.0 - Refactor
  * Regra para saber se a coleta é da VALE
  * >> recebendo por parametro um TpColetaNova
  * Regra de solicitação 
  **********************************************************************************************/
    Function Fn_VALE_ValidaCampos(pColetaRowType in t_arm_coleta%RowType,
                                pStatus        out char,
                                pMessage       out varchar2)return boolean
  as
    vGrupoEconomicoPagadorFrete t_glb_cliente.glb_grupoeconomico_codigo%Type;
    
    RegraValeItabrasco           integer;
    RegraValeHispanobras         integer;
    RegraValeNipoBrasileira      integer;
    RegraValeMineracoesBR        integer;
    RegraValeVale                integer;
    RegraValeMosaic              integer;
    RegraValeValeMaraba          integer;
    RegraValeSalobo              integer;
    RegraValeKobrasco            integer;
    RegraValeSepetiba            integer;
    RegraValeMinCorumbaense      integer;
    RegraValeAssociacaoVale      integer;
    RegraValeManganes            integer;
    RegraValeFertilizantes       integer;
    RegraValeAco                 integer;
    RegraBaoVale                 integer;
    TotalRegras                  integer;
    
   
  begin
    Begin
          begin
            Select c.glb_grupoeconomico_codigo
               Into vGrupoEconomicoPagadorFrete
               From t_glb_cliente c
               where trim(c.glb_cliente_cgccpfcodigo) = trim(pColetaRowType.Arm_Coleta_Cnpjpagadorferete);
          exception when no_data_found then
            pStatus := Status_Erro;
            pMessage:= 'CNPJ não encontrado na base de Dados';
            return false;
          end;
        
    if(vGrupoEconomicoPagadorFrete = GrupoEconomicoVALE ) then  
    
    
    -- Bloqueio MBR
       if ((trim(pColetaRowType.Glb_Cliente_Cgccpfcodigoentreg) in ('33417445000120','33417445000201','33417445001798','33417445000805','33417445000716','33417445002336')) or
          (trim(pColetaRowType.Glb_Cliente_Cgccpfcodigocoleta) in ('33417445000120','33417445000201','33417445001798','33417445000805','33417445000716','33417445002336'))) 
         and 
         (pColetaRowType.usu_usuario_codigo_cad not in ('109659506','384576028')) then
         
         pStatus  := Status_warning;
         pMessage := 'CNPJ bloqueado para Solicitação de Coleta!';
         return false;
      
      end if;   
      
      /*
       -- Bloqueio Vale Manganes / MCR
       if ((trim(pColetaRowType.Glb_Cliente_Cgccpfcodigoentreg) in ('03327988000358','03327988000439','03327988000196','15144306006553','15144306006987','15144306007959')) or
          (trim(pColetaRowType.Glb_Cliente_Cgccpfcodigocoleta) in ('03327988000358','03327988000439','03327988000196','15144306006553','15144306006987','15144306007959'))) 
      and 
         (trim(pColetaRowType.usu_usuario_codigo_cad) not in ('109659506','384576028','017536441')) then 
        
         pStatus  := Status_warning;
         pMessage := 'CNPJ bloqueado para Solicitação de Coleta!';
         return false;
      
      end if;  */
 
    
       if(Fn_VALE_LiberaItabrasco(pColetaRowType,pStatus,pMessage)) then
           select count(*)
           into RegraValeItabrasco
           from tdvadm.t_usu_aplicacaoperfil p
           where p.usu_aplicacao_codigo = 'jcoleta'
           and p.usu_perfil_codigo = 'VALE_LIBERA_ITABRASCO'
           and lower(trim(p.usu_usuario_codigo)) = lower(trim(pColetaRowType.usu_usuario_codigo_cad));                     
        end if;
        
        if(Fn_VALE_LiberaHispanobras(pColetaRowType,pStatus,pMessage)) then
           select count(*)
           into RegraValeHispanobras
           from tdvadm.t_usu_aplicacaoperfil p
           where p.usu_aplicacao_codigo = 'jcoleta'
           and p.usu_perfil_codigo = 'VALE_LIBERA_HISPANOBRAS'
           and lower(trim(p.usu_usuario_codigo)) = lower(trim(pColetaRowType.usu_usuario_codigo_cad));                     
        end if;
        
        if(Fn_VALE_LiberaNipoBrasileira(pColetaRowType,pStatus,pMessage)) then
           select count(*)
           into RegraValeNipoBrasileira
           from tdvadm.t_usu_aplicacaoperfil p
           where p.usu_aplicacao_codigo = 'jcoleta'
           and p.usu_perfil_codigo = 'VALE_LIBERA_NIPOBR'
           and lower(trim(p.usu_usuario_codigo)) = lower(trim(pColetaRowType.usu_usuario_codigo_cad));                     
        end if;
        
        if(Fn_VALE_LiberaMineracoesBR(pColetaRowType,pStatus,pMessage)) then
           select count(*)
           into RegraValeMineracoesBR
           from tdvadm.t_usu_aplicacaoperfil p
           where p.usu_aplicacao_codigo = 'jcoleta'
           and p.usu_perfil_codigo = 'VALE_LIBERA_MINERACOESBR'
           and lower(trim(p.usu_usuario_codigo)) = lower(trim(pColetaRowType.usu_usuario_codigo_cad));                     
        end if;
        
         if(Fn_VALE_LiberaVale(pColetaRowType,pStatus,pMessage)) then
           select count(*)
           into RegraValeVale
           from tdvadm.t_usu_aplicacaoperfil p
           where p.usu_aplicacao_codigo = 'jcoleta'
           and p.usu_perfil_codigo = 'VALE_LIBERA_VALE'
           and lower(trim(p.usu_usuario_codigo)) = lower(trim(pColetaRowType.usu_usuario_codigo_cad));                     
        end if;
        
        if(Fn_VALE_LiberaFertilizantes(pColetaRowType,pStatus,pMessage)) then
           select count(*)
           into RegraValefertilizantes
           from tdvadm.t_usu_aplicacaoperfil p
           where p.usu_aplicacao_codigo = 'jcoleta'
           and p.usu_perfil_codigo = 'VALE_LIBERA_FERTILIZANTES'
           and lower(trim(p.usu_usuario_codigo)) = lower(trim(pColetaRowType.usu_usuario_codigo_cad));                     
        end if;
        
        if(Fn_VALE_LiberaMosaic(pColetaRowType,pStatus,pMessage)) then
           select count(*)
           into RegraValeMosaic
           from tdvadm.t_usu_aplicacaoperfil p
           where p.usu_aplicacao_codigo = 'jcoleta'
           and p.usu_perfil_codigo = 'VALE_LIBERA_MOSAIC'
           and lower(trim(p.usu_usuario_codigo)) = lower(trim(pColetaRowType.usu_usuario_codigo_cad));                     
        end if;
        
        if(Fn_VALE_LiberaAcos(pColetaRowType,pStatus,pMessage)) then
           select count(*)
           into RegraValeAco
           from tdvadm.t_usu_aplicacaoperfil p
           where p.usu_aplicacao_codigo = 'jcoleta'
           and p.usu_perfil_codigo = 'VALE_LIBERA_ACO'
           and lower(trim(p.usu_usuario_codigo)) = lower(trim(pColetaRowType.usu_usuario_codigo_cad));                     
        end if;
        
         if(Fn_VALE_LiberaValeMaraba(pColetaRowType,pStatus,pMessage)) then
           select count(*)
           into RegraValeValeMaraba
           from tdvadm.t_usu_aplicacaoperfil p
           where p.usu_aplicacao_codigo = 'jcoleta'
           and p.usu_perfil_codigo = 'VALE_LIBERA_VALEMARABA'
           and lower(trim(p.usu_usuario_codigo)) = lower(trim(pColetaRowType.usu_usuario_codigo_cad));                     
        end if;
        
         if(Fn_VALE_LiberaValeSalobo(pColetaRowType,pStatus,pMessage)) then
           select count(*)
           into RegraValeSalobo
           from tdvadm.t_usu_aplicacaoperfil p
           where p.usu_aplicacao_codigo = 'jcoleta'
           and p.usu_perfil_codigo = 'VALE_LIBERA_SALOBO'
           and lower(trim(p.usu_usuario_codigo)) = lower(trim(pColetaRowType.usu_usuario_codigo_cad));                     
        end if;
        
         if(Fn_VALE_LiberaKobrasco(pColetaRowType,pStatus,pMessage)) then
           select count(*)
           into RegraValeKobrasco
           from tdvadm.t_usu_aplicacaoperfil p
           where p.usu_aplicacao_codigo = 'jcoleta'
           and p.usu_perfil_codigo = 'VALE_LIBERA_KOBRASCO'
           and lower(trim(p.usu_usuario_codigo)) = lower(trim(pColetaRowType.usu_usuario_codigo_cad));                     
        end if;
        
        if(Fn_VALE_LiberaSepetiba(pColetaRowType,pStatus,pMessage)) then
           select count(*)
           into RegraValeSepetiba
           from tdvadm.t_usu_aplicacaoperfil p
           where p.usu_aplicacao_codigo = 'jcoleta'
           and p.usu_perfil_codigo = 'VALE_LIBERA_SEPETIBA'
           and lower(trim(p.usu_usuario_codigo)) = lower(trim(pColetaRowType.usu_usuario_codigo_cad));                     
        end if; 
        
        if(Fn_VALE_LiberaMinCorumbaense(pColetaRowType,pStatus,pMessage)) then
           select count(*)
           into RegraValeMinCorumbaense
           from tdvadm.t_usu_aplicacaoperfil p
           where p.usu_aplicacao_codigo = 'jcoleta'
           and p.usu_perfil_codigo = 'VALE_LIBERA_MINCORUMBA'
           and lower(trim(p.usu_usuario_codigo)) = lower(trim(pColetaRowType.usu_usuario_codigo_cad)); 
           
          if(Instr(pColetaRowType.Arm_Coleta_Emailsolic, '@vale.com') > 1) then
                RegraValeMinCorumbaense := 1;
           end if;
           
           if(Fn_VALE_Usuarios_Fornecedor(pColetaRowType) = true)   then                                        
              if(trim(pColetaRowType.Fcf_Tpcarga_Codigo) = '12' and trim(pColetaRowType.Arm_Coleta_Tpcoleta) = 'N') then
                   RegraValeMinCorumbaense := 1;
              else 
                 pStatus  := Status_warning;
                 pMessage := 'Fornecedor: coleta Mineracao Corumbaense so pode ser solicitar com o tipo de carga fracionado e do tipo normal' ;
                 return false;
              end if;
           end if;                          
        end if; 
        
        if(Fn_VALE_baovale(pColetaRowType,pStatus,pMessage)) then
           select count(*)
           into RegraBaoVale
           from tdvadm.t_usu_aplicacaoperfil p
           where p.usu_aplicacao_codigo = 'jcoleta'
           and p.usu_perfil_codigo = 'VALE_LIBERA_BAOVALE'
           and lower(trim(p.usu_usuario_codigo)) = lower(trim(pColetaRowType.usu_usuario_codigo_cad)); 
           
            if(Instr(pColetaRowType.Arm_Coleta_Emailsolic, '@vale.com') > 1) then
                   RegraBaoVale := 1;
           end if;
           
           if(Fn_VALE_Usuarios_Fornecedor(pColetaRowType) = true)   then                                        
              if(trim(pColetaRowType.Fcf_Tpcarga_Codigo) = '12' and trim(pColetaRowType.Arm_Coleta_Tpcoleta) = 'N') then
                   RegraBaoVale := 1;
              else 
                 pStatus  := Status_warning;
                 pMessage := 'Fornecedor: coleta BAO VALE so pode ser solicitar com o tipo de carga fracionado e do tipo normal' ;
                 return false;
              end if;
           end if;            
        end if; 
        
        if(Fn_VALE_LiberaAssociacaoVale(pColetaRowType,pStatus,pMessage)) then
           select count(*)
           into RegraValeAssociacaoVale
           from tdvadm.t_usu_aplicacaoperfil p
           where p.usu_aplicacao_codigo = 'jcoleta'
           and p.usu_perfil_codigo = 'VALE_LIBERA_ASSOCIACAOVALE'
           and lower(trim(p.usu_usuario_codigo)) = lower(trim(pColetaRowType.usu_usuario_codigo_cad)); 
           if(Instr(pColetaRowType.Arm_Coleta_Emailsolic, '@vale.com') > 1) then
               RegraValeAssociacaoVale := 1;
           end if;
           
           if(Fn_VALE_Usuarios_Fornecedor(pColetaRowType) = true)   then                                        
              if(trim(pColetaRowType.Fcf_Tpcarga_Codigo) = '12' and trim(pColetaRowType.Arm_Coleta_Tpcoleta) = 'N') then
                   RegraValeAssociacaoVale := 1;
              else 
                 pStatus  := Status_warning;
                 pMessage := 'Fornecedor: coleta Associacao so pode ser solicitar com o tipo de carga fracionado e do tipo normal' ;
                 return false;
              end if;
           end if;                                      
        end if; 
        
         if(Fn_VALE_LiberaValeManganes(pColetaRowType,pStatus,pMessage)) then
           select count(*)
           into RegraValeManganes
           from tdvadm.t_usu_aplicacaoperfil p
           where p.usu_aplicacao_codigo = 'jcoleta'
           and p.usu_perfil_codigo = 'VALE_LIBERA_VALEMANGANES'
           and lower(trim(p.usu_usuario_codigo)) = lower(trim(pColetaRowType.usu_usuario_codigo_cad)); 
           
           if(Fn_VALE_Usuarios_Autorizados(pColetaRowType) = true
                         or (RegraValeManganes > 0 ))   then                                         
              RegraValeManganes := 1;
           else 
              RegraValeManganes := 0;
           end if;                                
        end if; 
         
         TotalRegras := nvl(RegraValeItabrasco,0)      + 
                        nvl(RegraValeHispanobras,0)    + 
                        nvl(RegraValeNipoBrasileira,0) + 
                        nvl(RegraValeMineracoesBR,0)   +  
                        nvl(RegraValeVale,0)           +
                        nvl(RegraValeMosaic,0)         +  
                        nvl(RegraValeValeMaraba,0)     +  
                        nvl(RegraValeSalobo,0)         +
                        nvl(RegraValeKobrasco,0)       + 
                        nvl(RegraValeSepetiba,0)       +
                        nvl(RegraValeFertilizantes,0)  +
                        nvl(RegraValeMinCorumbaense,0) +
                        nvl(RegraValeAssociacaoVale,0) +
                        nvl(RegraValeManganes,0)       +
                        nvl(RegraBaoVale,0)            +
                        nvl(RegraValeAco,0);
         
         if(TotalRegras > 0) then 
              if length(trim(nvl(pColetaRowType.Arm_Coleta_Pedido,'0'))) != 10 then
                pStatus  := Status_warning;
                pMessage := 'Numero do Frete deve ser Preenchido com 10 digitos para destino Vale/Ao Longo da Ferrovia.';
                return false;
              end if;

              if SubStr(trim(nvl(pColetaRowType.Arm_Coleta_Pedido,'0')), 1, 2) != '45' then
                 pStatus  := Status_warning;
                 pMessage := 'Numero do Frete deve conter nos 2 primeiros digitos 45 para destino Vale/Ao Longo da Ferrovia.';
                 return false;
               end if;        
         
                pStatus  := Status_normal;
                pMessage := 'Processamento Normal';
                return true;
         else
              pStatus  := Status_warning;
              pMessage := 'Você não tem permissão para solicitar coleta com o CNPJ ' || trim(pColetaRowType.arm_coleta_cnpjpagadorferete) || ' como pagador' ;
              return false;
          end if;
          
          if length(trim(nvl(pColetaRowType.Arm_Coleta_Pedido,'0'))) != 10 then
              pStatus  := Status_warning;
              pMessage := 'Numero do Frete deve ser Preenchido com 10 digitos para destino Vale/Ao Longo da Ferrovia.';
              return false;
          end if;

          if SubStr(trim(nvl(pColetaRowType.Arm_Coleta_Pedido,'0')), 1, 2) != '45' then
             pStatus  := Status_warning;
             pMessage := 'Numero do Frete deve conter nos 2 primeiros digitos 45 para destino Vale/Ao Longo da Ferrovia.';
             return false;
          end if;
          
          if ((trim(pColetaRowType.Glb_Cliente_Cgccpfcodigoentreg) in ('33417445000120','33417445000201','33417445001798','33417445000805','33417445000716','33417445002336')) or
              (trim(pColetaRowType.Glb_Cliente_Cgccpfcodigocoleta) in ('33417445000120','33417445000201','33417445001798','33417445000805','33417445000716','33417445002336'))) 
             and 
             (pColetaRowType.usu_usuario_codigo_cad <> '017536441') then
             
             pStatus  := Status_warning;
             pMessage := 'CNPJ bloqueado para Solicitação de Coleta!';
             return false;
          
          end if;   
 
          
    end if;
       
     pStatus  := Status_normal;
     pMessage := 'Processamento Normal';
     return true;
             
    exception when others then
      pStatus  := Status_erro;
      pMessage := 'Erro ao validar Fn_vale_validacampos Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
      return   false;
    end;
  end Fn_VALE_ValidaCampos;

  /*********************************************************************************************
  * Data..: 29/06/2016
  * Autor.: Fabiano Góes
  * Versão: 
  * Validações de Campos:
  **********************************************************************************************/
  Function Fn_VALE_ValidaCamposNimbi(pColetaRowType in tdvadm.t_arm_coleta%RowType,
                                     pStatus        in out char,
                                     pMessage       in out varchar2)
    return boolean
  as
    vIsValid   boolean := true;
    vStatusIn  char(1);
    vStatusOut char(1);
  begin    
    dbms_output.put_line( 'Status In Nimbi = '||pStatus );
    vStatusIn := substr(trim(pStatus),1,1);
    dbms_output.put_line( 'vStatusIn = '||vStatusIn );
    pkg_col_coleta.Sp_Col_ValidaAsnNimbi(pColetaRowType.XML_COLETA_NUMERO, 
                                         pColetaRowType.Arm_Coleta_Ncompra, 
                                         pColetaRowType.Arm_Coleta_Ciclo, 
                                         pStatus, 
                                         pMessage);
                       
    vStatusOut := substr(trim(pStatus),1,1);                  
    vIsValid := case when ( (upper(nvl(vStatusIn, 'W')) = 'W') or (upper(nvl(vStatusOut, 'W')) = 'W') ) then false
                     else true
                end;
         
    pStatus := case when not(vIsValid) then 'W'
                    else pStatus
               end;
    return vIsValid;
  end Fn_VALE_ValidaCamposNimbi;

  /************************************************************************************************
   * PROGRAMA         : ColetaWeb
   * DESENVOLVEDOR    : Fabiano
   * DATA DE CRIACAO  : 10/09/2015
   * Versão           : 2.0 - Refactor
   * FUNCINALIDADE    : Efetivar a Coleta após ser digitados os items
   * PARTICULARIDADES : Após digitar os dados da Coleta a mesma é salva para ser gerado um numero,
   *                    Porém, neste momento a Coleta recebe um ocorrencia[64] - Coleta Pendente,
   *                    Apenas após ser digitados dos item a Coleta deve ser Efetivada. e neste
   * OBS..............: Esta procedure trata de regras para Efetivar uma Coleta Arcelomittal
   * PARAM. OBRIGAT.  : pColetaNumero | pColetaCiclo = Chave da Coleta
   *                    pStatus = E=ERRO, N=Normal
   *                    pMessage = Mensagem de ERRO ou mensagem de Normal quando necessário
   ************************************************************************************************/
   Procedure Sp_VALE_EfetivarColeta(pColetaNumero       in t_arm_coleta.arm_coleta_ncompra%type,
                                    pColetaCiclo        in t_arm_coleta.arm_coleta_ciclo%type,
                                    pMensagemEfeticacao out varchar2,
                                    pStatus             out varchar2,
                                    pMessage            out varchar2)
   as
    vEmailUsuario        varchar2(1000);
    vEmailsCopia         varchar2(2000);
    vCorpoEmail          varchar2(4000) := '';
    vMensagemEfeticacao  varchar2(4000) := '';
    vAssunto             Varchar2(1000) := 'Coleta gerada/efetivada com sucesso[ '||pColetaNumero||' - '||pColetaCiclo||' ]';
    vEmailOrigem         varchar2(1000) := 'coletaweb@dellavolpe.com.br';

    vAguardarAutorizacao boolean := false;
    vUsuPodeAutorizar    boolean := false;
    vOcorrencia          tdvadm.t_arm_coletaocor.arm_coletaocor_codigo%type := null;
    vColetaRowType       t_arm_Coleta%RowType;
  begin

    begin
      ----------------------------------------------------------------------------------------------------------------------------------
      -- Obtenho a linha da Coleta que deve ser Efetivada
      ----------------------------------------------------------------------------------------------------------------------------------
      vColetaRowType := Fn_Get_ColetaRowType(pColetaNumero, pColetaCiclo);

      ----------------------------------------------------------------------------------------------------------------------------------
      -- Verifico se o Usuário que está efeticando é um usuário com permissão de Autorizar Coleta
      -- Isso porque se a colera entrar em alguma regra para Aguardar desconsidero porque o ususário já é o Autorizador
      ----------------------------------------------------------------------------------------------------------------------------------
      vUsuPodeAutorizar := Fn_Get_PodeAutorizarColeta(vColetaRowType.Usu_Usuario_Codigo_Cad, vColetaRowType.Arm_Coleta_Cnpjsolicitante);

      ----------------------------------------------------------------------------------------------------------------------------------
      -- Se a coleta entrar em alguma regra para Aguardar Autorização:
      -- Seto uma ocorrencia 65=Coleta Aguardando Autorização
      ----------------------------------------------------------------------------------------------------------------------------------
      vAguardarAutorizacao := ( Fn_VALE_AguardaOuEfetiva( pColetaNumero, pColetaCiclo ) ) and ( vUsuPodeAutorizar = False );

      ----------------------------------------------------------------------------------------------------------------------------------
      -- Update necessátio conforme regra de Autorização
      ----------------------------------------------------------------------------------------------------------------------------------
  
      if vAguardarAutorizacao = true then
         vOcorrencia := '65';
      end if;
  
   /*   
      if(Fn_VALE_cnpjMinCorumbaense(vColetaRowType) = true or fn_Vale_cnpjbaovale(vColetaRowType)) then                                                   
        if vAguardarAutorizacao = true then
           vOcorrencia := '65';
        end if;        
      end if;*/

      -- TODO: add usuario alterou no UPDATE
      update t_arm_coleta col
      set col.arm_coletaocor_codigo      = vOcorrencia,
          col.arm_coleta_dtautoriza      = Case when Nvl(vOcorrencia, '-1') = '-1' Then sysdate
                                             else vColetaRowType.arm_coleta_dtautoriza
                                           End,
          col.usu_usuario_codigoautoriza = Case when Nvl(vOcorrencia, '-1') = '-1' Then vColetaRowType.usu_usuario_codigo_cad -- TODO: Diego | usuario nao passa na efetiva, usa o usuario cadastro
                                             else vColetaRowType.usu_usuario_codigoautoriza
                                           End
      where col.arm_coleta_ncompra    = pColetaNumero
        and col.arm_coleta_ciclo      = LPAD(pColetaCiclo,3,000)
        and col.arm_coletaorigem_cod  = 4;
      commit;

      ----------------------------------------------------------------------------------------------------------------------------------
      -- Monta Mensagem do Email de Efeticação
      -- a mesma mensagem de Email será exibida no front-end no momento da Efetivação
      ----------------------------------------------------------------------------------------------------------------------------------
      vMensagemEfeticacao := vMensagemEfeticacao || '<h3>Coleta Efetivada com sucesso</h3>';
      vMensagemEfeticacao := vMensagemEfeticacao || 'Coleta Numero.: ' || pColetaNumero || ' - ' || pColetaCiclo || '<hr/>';
      vMensagemEfeticacao := case when vAguardarAutorizacao = true then vMensagemEfeticacao || '<h3 style="color:red;">AGUARDANDO AUTORIZAÇÃO</h3>'
                               else vMensagemEfeticacao
                             end;

      ---------------------------------------------------------------------------------------------------------
      -- EMAIL EFETIVAÇÃO VALE
      -- obtenho os emails do usuário e os envolvidos na coleta para copia
      -- Sp_Get_EmailColeta vai popular:
      -- ==> vEmailUsuario com o email do usuário que cadastrou a Coleta
      -- ==> vEmailsCopia com os emails do Armazem
      ---------------------------------------------------------------------------------------------------------
      Sp_Get_EmailColeta(pColetaNumero, pColetaCiclo, vEmailUsuario, vEmailsCopia, pStatus, pMessage);

      pMensagemEfeticacao  := pMensagemEfeticacao || '<br/><b>E-mails enviados para:</b>'|| vEmailUsuario||';'||vEmailsCopia||'<br/>';
      vCorpoEmail := vMensagemEfeticacao || Fn_Get_MessageInfoColeta(pColetaNumero, pColetaCiclo, vAguardarAutorizacao);

      vEmailsCopia := case
                        when length(vEmailsCopia) > 5 then vEmailsCopia -- ||';fgoes@dellavolpe.com.br;ddamaceno@dellavolpe.com.br'
                        ---else 'fgoes@dellavolpe.com.br;ddamaceno@dellavolpe.com.br'
                      end;

      begin
        wservice.pkg_glb_email.SP_ENVIAEMAIL(vAssunto,
                                             vCorpoEmail,
                                             vEmailOrigem,
                                             vEmailUsuario,
                                             vEmailsCopia);
      exception when others then
        vAssunto    := 'ERRO ao tentar enviar Email da Coleta: '||pColetaNumero||' - '||pColetaCiclo;
        vCorpoEmail := 'ERRO ao tentar enviar Email da Coleta: '||pColetaNumero||' - '||pColetaCiclo||
                     ' - Usuario: '||vColetaRowType.Usu_Usuario_Codigo_Cad||' - '||sqlerrm;
        wservice.pkg_glb_email.SP_ENVIAEMAIL(vAssunto,
                                             vCorpoEmail,
                                             vEmailOrigem
                                             ------------'fgoes@dellavolpe.com.br',
                                             ------------'ddamaceno@dellavolpe.com.br'
                                             );
      end;

      pStatus   := Status_normal;
      pMessage  := vMensagemEfeticacao;
    exception when others then
      pStatus   := Status_normal;
      pMessage  := 'Erro ao processar Pkg_Col_Coleta.Sp_VLI_EfetivarColeta. Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;

  end Sp_VALE_EfetivarColeta;
  
  /************************************************************************************************
   * PROGRAMA         : ColetaNimbi
   * DESENVOLVEDOR    : Fabiano / Klayton
   * DATA DE CRIACAO  : 12/07/2016
   * Versão           : 2
   * FUNCINALIDADE    : Executar funcionalidades após grava a Coleta
   * PARTICULARIDADES : 
   * OBS..............: Esta procedure trata de regras para Efetivar uma Coleta Nimbi
   * PARAM. OBRIGAT.  : pColetaRowType = Linha da Coleta gravada
   *                    pStatus = E=ERRO, N=Normal
   *                    pMessage = Mensagem de ERRO ou mensagem de Normal quando necessário
   ************************************************************************************************/  
  Procedure Sp_VALE_EfetivarColetaNimbi(pColetaRowType in tdvadm.t_arm_coleta%RowType,
                                        pStatus       out varchar2,
                                        pMessage      out varchar2)
  as
    vAsnNumero       tdvadm.t_col_asn.col_asn_numero%type;
    vProccesCod      tdvadm.t_col_asn.col_asn_specialprocesscode%type;
    vCnpjOrigem      tdvadm.t_col_asnparceiro.col_asnparceiro_cnpj%type;
    vStatus          char(1);
    vMessage         varchar2(2000);
    vOcorrencia      tdvadm.t_arm_coletaocor.arm_coletaocor_codigo%type  := null;
    vTipoFrete       tdvadm.t_col_asn.col_asn_tipocarga%type;
    vNumeroContrato  tdvadm.t_slf_contrato.slf_contrato_codigo%type      := null;
    vOperacaoVale    tdvadm.t_col_asn.col_asn_operacao%type              := null;
    vAcao            tdvadm.t_col_asnacao.col_asnstatus_id%type          := null; 
  begin
    begin

      -- Quando a Solicitação de Coleta é enviada através da Integração Nimbi
      -- o Campo xml_coleta_numero vem com nosso ID de Integração
      -- após a gravação da Coleta atualizamos este campo com o Numero de ASN
      -- isso pra manter um compatibilidade com a Integração Quadrem
      begin
        
        select a.col_asn_numero,
               a.col_asn_specialprocesscode,
               pa.col_asnparceiro_cnpj,
               a.col_asn_tipocarga,
               a.slf_contrato_numero,
               a.col_asn_operacao,
               conf.col_asnconfig_tpacao
          into vAsnNumero,
               vProccesCod,
               vCnpjOrigem,
               vTipoFrete,
               vNumeroContrato,
               vOperacaoVale,
               vAcao 
          from tdvadm.t_col_asn a,
               tdvadm.t_col_asnparceiro pa,
               tdvadm.t_col_asnconfig conf
         where a.col_asn_id                  = pColetaRowType.Xml_Coleta_Numero
           and a.col_asn_id                  = pa.col_asn_id
           and pa.col_asntipoparceiro_id     = '1'
           and a.col_asn_tipocarga           = conf.col_asnconfig_tt
           and a.col_asn_fragileload	       = conf.col_asnconfig_fl
           and a.col_asn_selfsupportingload	 = conf.col_asnconfig_ssl;

      exception when others then
        pStatus  := Status_Erro;
        pMessage := dbms_utility.format_error_backtrace||' - '||sqlerrm;  
      end;
      
      
      -- Se atende aos requisitos de aprovação a asn não aparecera no gerenciador de coletas e sim no portal para que a vale faça aprovação.
      -- desabilitado em 12/12/2018 a pedido da Vale, não olharemos mais os cnpjs
      --If ((vExisteRegra > 0) and (vProccesCod in ('BR01','BR06')) and (substr(vAsnNumero,1,3) = 'V18') and (vTipoFrete!= '4')) then
      /*If ((vProccesCod in ('BR01','BR06')) and (substr(vAsnNumero,1,3) = 'V18') and (vTipoFrete!= '4') and (vTipoFrete != 'C') and (vTipoFrete != '7')) then
         -- ocorrencia 
         vOcorrencia := '65';
      Else
         vOcorrencia := null;
      End if;
      */
      
      If ((vProccesCod in ('BR01','BR06')) and (substr(vAsnNumero,1,3) = 'V18') and (vAcao != 2)) then
         vOcorrencia := '65';
      Else
         vOcorrencia := null;
      End if;
      
      tdvadm.pkg_col_coleta.Sp_Col_ColetaPart(pColetaRowType.Arm_Coleta_Ncompra, 
                                              pColetaRowType.Arm_Coleta_Ciclo,
                                              pColetaRowType.Xml_Coleta_Numero, 
                                              vStatus, 
                                              vMessage);  
                                                                                                                    
      update tdvadm.t_arm_coleta c
         set c.xml_coleta_numero     = vAsnNumero,
             c.arm_coletaocor_codigo = vOcorrencia,
             c.slf_contrato_codigo   = vNumeroContrato,
             c.arm_coleta_operacao   = vOperacaoVale  
       where c.arm_coleta_ncompra    = pColetaRowType.Arm_Coleta_Ncompra
         and c.arm_coleta_ciclo      = pColetaRowType.Arm_Coleta_Ciclo;
         
      commit; 
      -- / End Update xml_coleta_numero
    
      pStatus   := Status_normal;
      pMessage  := 'OK';
    exception when others then
      pStatus   := Status_normal;
      pMessage  := dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;    
  end; 
  /*********************************************************************************************
  * Data..: 10/09/2014
  * Autor.: Fabiano Góes
  * Versão: 2.0 - Refactor
  **********************************************************************************************/
 
  Function Fn_VALE_AguardaOuEfetiva(pColeta t_arm_coleta.arm_coleta_ncompra%type,
                                   pCiclo  t_arm_coleta.arm_coleta_ciclo%type)
    return Boolean
  as
    vIsVALE integer;
  begin
     -------------------------------------------------------------------------------------------
     -- Regra Conforme Sirlano:
     -- Se o Solicitante da Coleta for do Grupo Economico 0020=VALE
     -- a coleta entra como aguardando(ocorrencia=65)
     -------------------------------------------------------------------------------------------
     select count(*)
     into vIsVALE
     from tdvadm.t_arm_coleta co,
          tdvadm.t_glb_cliente cl     
     where trim(co.arm_coleta_cnpjpagadorferete) = trim(cl.glb_cliente_cgccpfcodigo) -- ligo usuario_web/solictante com cliente p/ filtrar pelo grupo economico 0074
     and cl.glb_grupoeconomico_codigo            = GrupoEconomicoVALE -- Filtro pelo Grupo Economico RAI
     and co.arm_coleta_cnpjpagadorferete         in ('15144306006553','15144306006987','15144306007959','03327988000196','03327988000358','03327988000439')
     and co.arm_coleta_ncompra                   = pColeta
     and co.arm_coleta_ciclo                     = pCiclo;

     return vIsVALE > 0;
     
  end Fn_VALE_AguardaOuEfetiva;
  /**********************************************************************************************/
  function Fn_ALC_RestringeAutoriza(pColetaRowType in t_arm_coleta%RowType,
                                    pUsuarioAutorizador  in t_arm_coleta.usu_usuario_codigoautoriza%type)
    return boolean
  as
  
    vRestringir boolean := false;
    vCount integer := 0;
  begin

    if Fn_ALC_IsColetaALC( pColetaRowType ) = true then
      /** Usuario ALC que podem autorizar
        Danilo Braga danilo.braga2@vli-logistica.com.br
        Fabricio Viana Cunha fabricio.cunha@vli-logistica.com.br
        Lucas Fernandes Silva lucas.fernandes.silva@vli-logistica.com.br
        Wagner Batista da Costa wagner.batista@vli-logistica.com.br
      **/
           
      select count(*)
      into vCount
      from TDVADM.T_ARM_PERMITEAUTORIZAR U 
      WHERE lower(u.usu_usuario_codigo) = lower(rpad(pUsuarioAutorizador,10,' '))
      AND U.GLB_GRUPOECONOMICO_CODIGO = GrupoEconomicoALC;
      
      -- Se vCount for igual a 0 o usuário não está na lista de usuários permitidos e a autorização deve ser restringida
      vRestringir := vCount = 0;
    end if;

    return vRestringir;
  end Fn_ALC_RestringeAutoriza;
  
   
  /*********************************************************************************************
  * Data..: 22/12/2014
  * Autor.: Gustavo vocatore, Guilherme e Felipe
  * Versão: 2.0 - Refactor
  **********************************************************************************************/
  Function Fn_ALC_AguardaOuEfetiva(pColeta t_arm_coleta.arm_coleta_ncompra%type,
                                         pCiclo  t_arm_coleta.arm_coleta_ciclo%type)
    return Boolean
  as
    vIsALC integer;
  begin
     -------------------------------------------------------------------------------------------
     -- Regra Conforme Sirlano:
     -- Se o Solicitante da Coleta for do Grupo Economico 0626=ALC 
     -- a coleta entra como aguardando(ocorrencia=65)
     -------------------------------------------------------------------------------------------
     select count(*)
     into vIsALC
     from tdvadm.t_arm_coleta co,
          coleta.usuario_web uw,
          tdvadm.t_glb_cliente cl
     where lower(co.usu_usuario_codigo_cad) = rpad(lower(uw.usu_usuario_codigo),10,' ') -- ligo coleta com usuário_web p/ ter o cnpj do solicitante
     and trim(uw.dc_cnpj) = trim(cl.glb_cliente_cgccpfcodigo) -- ligo usuario_web/solictante com cliente p/ filtrar pelo grupo economico 0074
     and cl.glb_grupoeconomico_codigo = GrupoEconomicoALC -- Filtro pelo Grupo Economico ALC
     and co.arm_coleta_ncompra = pColeta
     and co.arm_coleta_ciclo = pCiclo;

     -------------------------------------------------------------------------------------------
     -- Regra se o usuario/cnpj solicitante da coleta não for ALCOA testo o Destino
     -- Se o Cliente/Entrega da Coleta for do Grupo Economico 0626=ALCOA
     -- a coleta entra como aguardando(ocorrencia=65)
     -------------------------------------------------------------------------------------------
     if vIsALC = 0 then
       select count(*)
       into vIsALC
       from t_arm_coleta co,
            t_glb_cliente cl
       where trim(co.glb_cliente_cgccpfcodigoentreg) = trim(cl.glb_cliente_cgccpfcodigo)
       and cl.glb_grupoeconomico_codigo = GrupoEconomicoALC
       and co.arm_coleta_ncompra = pColeta
       and co.arm_coleta_ciclo = pCiclo;
     end if;

     return vIsALC > 0;
  end Fn_ALC_AguardaOuEfetiva;
  
   /************************************************************************************************
   * PROGRAMA         : ColetaWeb
   * DESENVOLVEDOR    : Gustavo Vocatore ,Felipe, Guilherme
   * DATA DE CRIACAO  : 10/09/2015
   * Versão           : 2.0 - Refactor
   * FUNCINALIDADE    : Efetivar a Coleta após ser digitados os items
   * PARTICULARIDADES : Após digitar os dados da Coleta a mesma é salva para ser gerado um numero,
   *                    Porém, neste momento a Coleta recebe um ocorrencia[64] - Coleta Pendente,
   *                    Apenas após ser digitados dos item a Coleta deve ser Efetivada. e neste
   * OBS..............: Esta procedure trata de regras para Efetivar uma Coleta Arcelomittal
   * PARAM. OBRIGAT.  : pColetaNumero | pColetaCiclo = Chave da Coleta
   *                    pStatus = E=ERRO, N=Normal
   *                    pMessage = Mensagem de ERRO ou mensagem de Normal quando necessário
   ************************************************************************************************/
   Procedure Sp_ALC_EfetivarColeta(pColetaNumero       in t_arm_coleta.arm_coleta_ncompra%type,
                                   pColetaCiclo        in t_arm_coleta.arm_coleta_ciclo%type,
                                   pMensagemEfeticacao out varchar2,
                                   pStatus             out varchar2,
                                   pMessage            out varchar2)
   as
    vEmailUsuario        varchar2(1000);
    vEmailsCopia         varchar2(2000);
    vCorpoEmail          varchar2(4000) := '';
    vMensagemEfeticacao  varchar2(4000) := '';
    vAssunto             Varchar2(1000) := 'Coleta gerada/efetivada com sucesso[ '||pColetaNumero||' - '||pColetaCiclo||' ]';
    vEmailOrigem         varchar2(1000) := 'coletaweb@dellavolpe.com.br';

    vAguardarAutorizacao boolean := false;
    vUsuPodeAutorizar    boolean := false;
    vOcorrencia          tdvadm.t_arm_coletaocor.arm_coletaocor_codigo%type := null;
    vColetaRowType       t_arm_Coleta%RowType;
    vIsAutorizaRemetentePagador Char(1) := 'N';
    vFornecedoresPagador tdvadm.t_usu_perfil.usu_perfil_parat%type;
  begin

    begin
      ----------------------------------------------------------------------------------------------------------------------------------
      -- Obtenho a linha da Coleta que deve ser Efetivada
      ----------------------------------------------------------------------------------------------------------------------------------
      vColetaRowType := Fn_Get_ColetaRowType(pColetaNumero, pColetaCiclo);

      ----------------------------------------------------------------------------------------------------------------------------------
      -- Verifico se o Usuário que está efeticando é um usuário com permissão de Autorizar Coleta
      -- Isso porque se a colera entrar em alguma regra para Aguardar desconsidero porque o ususário já é o Autorizador
      ----------------------------------------------------------------------------------------------------------------------------------
      vUsuPodeAutorizar := Fn_Get_PodeAutorizarColeta(vColetaRowType.Usu_Usuario_Codigo_Cad, vColetaRowType.Arm_Coleta_Cnpjsolicitante);

      ----------------------------------------------------------------------------------------------------------------------------------
      -- Cliente autorizados a Solicitar Coletas Como Pagador Remetente(CIF) já autorizada
      -- TODO: esses CNPJs devem estar em uma regra por contrato
      -- 18/05/2016 - Felipe B - CNPJ: 00680863000157 adicionado a essa regra, conforme solicitação da Sabrina do Comercial
      -- 19/05/2016 - Felipe B - CNPJ's: 03900822000117, 45561404000354, 45561404000192, 45561404000273 adicionados a essa regra, conforme solicitação da Sabrina do Comercial
      -- 20/05/2016 - Felipe B - CNPJ's: 17155342000345, 17155342001074 adicionados a essa regra, conforme solicitação da Sabrina do Comercial
      -- 20/05/2016 - Felipe B - Foi acrescentada a cláusula de Pagador Outros, mas temos que avaliar a regra
      ----------------------------------------------------------------------------------------------------------------------------------
      -- CNPJ...: 57599581000147 = ARS IND. E COM. DE PARAFUSOS E FERRAGENS LTDA.
      -- CNPJ...: 15234146000179 = HERO SUPRIMENTOS INDUSTRIAIS LTDA
      -- CNPJ...: 71442115000184 = SIMAO SERGIO RIBEIRO ME
      -- CNPJ...: 17281973000300 = COFERMETA SA.
      -- CNPJ...: 17281973000220 = COFERMETA SA.
      -- CNPJ...: 17281973001382 = COFERMETA SA.
      ---------------------------------------------------------------------
      -- CNPJ...: 00680863000157 = ARQUIMIG SISTEMAS MOBILIARIOS LTDA
      -- CNPJ...: 03900822000117 = MODULAR MINING SYSTEMS DO BRASIL LTDA
      -- CNPJ...: 45561404000354 = PARCAN INDUSTRIA METALURGICA LTDA
      -- CNPJ...: 45561404000192 = PARCAN INDUSTRIA METALURGICA LTDA
      -- CNPJ...: 45561404000273 = PARCAN INDUSTRIA METALURGICA LTDA       
      -- CNPJ...: 17155342000345 = LOJA ELETRICA LTDA.
      -- CNPJ...: 17155342001074 = LOJA ELETRICA LTDA.
      ----------------------------------------------------------------------------------------------------------------------------------
      begin
/*    select p.usu_perfil_parat
        into vFornecedoresPagador
        from tdvadm.t_usu_perfil p
        where lower(trim(p.usu_aplicacao_codigo)) = 'jcoleta'
          and upper(trim(p.usu_perfil_codigo)) = 'FORNECEDOR_VLI_PAGADOR';  
*/    
        -- Felipe B. - 12/01/2017 - Foi adicionada a tabela AutColCIF para a regra abaixo de Fornecedor VLI
        Select count(*)
          into vFornecedoresPagador
          from tdvadm.t_arm_autcolcif acc
         where acc.glb_grupoeconomico_codigo = GrupoEconomicoALC
           and trim(acc.glb_cliente_cgccpfcodigo)  = trim(vColetaRowType.arm_coleta_cnpjpagadorferete) 
           and acc.usu_usuario_codigo = vColetaRowType.usu_usuario_codigo_cad
           and acc.arm_autcolcif_ativo = 'S';

      exception when no_data_found then
        vFornecedoresPagador := 0;  
      end;
/*      if ( instr(vFornecedoresPagador, trim(vColetaRowType.Glb_Cliente_Cgccpfcodigocoleta)) > 0 ) and (vColetaRowType.Arm_Coleta_Pagadorfrete in ('R','O')) then*/
      if ( vFornecedoresPagador > 0 ) then
           vIsAutorizaRemetentePagador := 'S';
      end if;
      ----------------------------------------------------------------------------------------------------------------------------------
      -- Se a coleta entrar em alguma regra para Aguardar Autorização:
      -- Seto uma ocorrencia 65=Coleta Aguardando Autorização
      ----------------------------------------------------------------------------------------------------------------------------------
      vAguardarAutorizacao := ( Fn_ALC_AguardaOuEfetiva( pColetaNumero, pColetaCiclo ) ) and ( vUsuPodeAutorizar = False ) And (vIsAutorizaRemetentePagador = 'N');

      ----------------------------------------------------------------------------------------------------------------------------------
      -- Update necessátio conforme regra de Autorização
      ----------------------------------------------------------------------------------------------------------------------------------
      if vAguardarAutorizacao = true then
         vOcorrencia := '65';
      end if;

      update t_arm_coleta col
      set col.arm_coletaocor_codigo      = vOcorrencia,
/*          col.Arm_Coleta_Tpcompra        = case when vColetaRowType.Arm_Coleta_Pagadorfrete = 'R' then 'FOB'
                                                else col.Arm_Coleta_Tpcompra
                                           end, */
          col.arm_coleta_dtautoriza      = Case when Nvl(vOcorrencia, '-1') = '-1' Then sysdate
                                             else vColetaRowType.arm_coleta_dtautoriza
                                           End,
          col.usu_usuario_codigoautoriza = Case when Nvl(vOcorrencia, '-1') = '-1' Then vColetaRowType.usu_usuario_codigo_cad -- TODO: Diego | usuario nao passa na efetiva, usa o usuario cadastro
                                             else vColetaRowType.usu_usuario_codigoautoriza
                                           End
      where col.arm_coleta_ncompra    = pColetaNumero
        and col.arm_coleta_ciclo      = LPAD(pColetaCiclo,3,000)
        and col.arm_coletaorigem_cod  = 4;
      commit;

      ----------------------------------------------------------------------------------------------------------------------------------
      -- Monta Mensagem do Email de Efeticação
      -- a mesma mensagem de Email será exibida no front-end no momento da Efetivação
      ----------------------------------------------------------------------------------------------------------------------------------
      vMensagemEfeticacao := vMensagemEfeticacao || '<h3>Coleta Efetivada com sucesso</h3>';
      vMensagemEfeticacao := vMensagemEfeticacao || 'Coleta Numero.: ' || pColetaNumero || ' - ' || pColetaCiclo || '<hr/>';
      vMensagemEfeticacao := case when vAguardarAutorizacao = true then vMensagemEfeticacao || '<h3 style="color:red;">AGUARDANDO AUTORIZAÇÃO</h3>'
                               else vMensagemEfeticacao
                             end;

      ---------------------------------------------------------------------------------------------------------
      -- EMAIL EFETIVAÇÃO VLI
      -- obtenho os emails do usuário e os envolvidos na coleta para copia
      -- Sp_Get_EmailColeta vai popular:
      -- ==> vEmailUsuario com o email do usuário que cadastrou a Coleta
      -- ==> vEmailsCopia com os emails do Armazem
      ---------------------------------------------------------------------------------------------------------
      Sp_Get_EmailColeta(pColetaNumero, pColetaCiclo, vEmailUsuario, vEmailsCopia, pStatus, pMessage);

      pMensagemEfeticacao  := vMensagemEfeticacao || pMensagemEfeticacao || '<br/><b>E-mails enviados para:</b>'|| vEmailUsuario||';'||vEmailsCopia||'<br/>';

      vCorpoEmail := vMensagemEfeticacao || Fn_Get_MessageInfoColeta(pColetaNumero, pColetaCiclo, vAguardarAutorizacao);

      vEmailsCopia := case
                        when length(vEmailsCopia) > 5 then vEmailsCopia --||';fgoes@dellavolpe.com.br;ddamaceno@dellavolpe.com.br'
                        --else 'fgoes@dellavolpe.com.br;ddamaceno@dellavolpe.com.br'
                      end;

      begin
        wservice.pkg_glb_email.SP_ENVIAEMAIL(vAssunto,
                                             vCorpoEmail,
                                             vEmailOrigem,
                                             vEmailUsuario,
                                             vEmailsCopia);
      exception when others then
        vAssunto    := 'ERRO ao tentar enviar Email da Coleta: '||pColetaNumero||' - '||pColetaCiclo;
        vCorpoEmail := 'ERRO ao tentar enviar Email da Coleta: '||pColetaNumero||' - '||pColetaCiclo||
                     ' - Usuario: '||vColetaRowType.Usu_Usuario_Codigo_Cad||' - '||sqlerrm;
        wservice.pkg_glb_email.SP_ENVIAEMAIL(vAssunto,
                                             vCorpoEmail,
                                             vEmailOrigem
                                             --'fgoes@dellavolpe.com.br',
                                             --'ddamaceno@dellavolpe.com.br'
                                             );
      end;

      pStatus   := Status_normal;
      pMessage  := vMensagemEfeticacao;
    exception when others then
      pStatus   := Status_normal;
      pMessage  := 'Erro ao processar Pkg_Col_Coleta.Sp_ALC_EfetivarColeta. Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;

  end Sp_ALC_EfetivarColeta;
  
    
   /************************************************************************************************
   * PROGRAMA         : ColetaWeb
   * DESENVOLVEDOR    : Rafael Noberto
   * DATA DE CRIACAO  : 28/04/2020
   * Versão           :
   * FUNCINALIDADE    : 
   * PARTICULARIDADES : 
   *                    
   *                    
   * OBS..............: 
   * PARAM. OBRIGAT.  : 
   *                    
   *                    
   * 
   ************************************************************************************************/
   Procedure Sp_AGL_EfetivarColeta(pColetaNumero       in t_arm_coleta.arm_coleta_ncompra%type,
                                   pColetaCiclo        in t_arm_coleta.arm_coleta_ciclo%type,
                                   pMensagemEfeticacao out varchar2,
                                   pStatus             out varchar2,
                                   pMessage            out varchar2)
   as
    vEmailUsuario        varchar2(1000);
    vEmailsCopia         varchar2(2000);
    vCorpoEmail          varchar2(4000) := '';
    vMensagemEfeticacao  varchar2(4000) := '';
    vAssunto             Varchar2(1000) := 'Coleta gerada/efetivada com sucesso[ '||pColetaNumero||' - '||pColetaCiclo||' ]';
    vEmailOrigem         varchar2(1000) := 'coletaweb@dellavolpe.com.br';
    vOcorrencia          tdvadm.t_arm_coletaocor.arm_coletaocor_codigo%type := null;
    vGrupo               varchar2(4);

    vAguardarAutorizacao boolean := false;
    vColetaRowType       t_arm_Coleta%RowType;
  begin

    begin
      ----------------------------------------------------------------------------------------------------------------------------------
      -- Obtenho a linha da Coleta que deve ser Efetivada
      ----------------------------------------------------------------------------------------------------------------------------------
      vColetaRowType := Fn_Get_ColetaRowType(pColetaNumero, pColetaCiclo);
      
        -- Tati - 09/06/2021
      if  (TRIM(vColetaRowType.FCF_TPCARGA_CODIGO) in ( '02' )) and (vColetaRowType.Arm_Coleta_Peso > 3500) then      
           pStatus := Status_Erro;
           pMessage := 'Para este contrato, peso máximo permitido é de 3.500 KG';
           RETURN;
       end if;
      
      if vColetaRowType.Arm_Coleta_Tpcoleta = 'E' then
        vOcorrencia := '65';
        vAguardarAutorizacao := true;
      end if;
        
     
       select c.glb_grupoeconomico_codigo
         into vGrupo
         from tdvadm.t_glb_cliente c
        where trim(c.glb_cliente_cgccpfcodigo) = trim(vColetaRowType.Arm_Coleta_Cnpjpagadorferete);
        
       if(vGrupo = GrupoEconomicoAGL) then 
        
           update t_arm_coleta c
              set c.arm_coletaocor_codigo = vOcorrencia,
                  c.usu_usuario_codigoautoriza = null,
                  c.arm_coleta_dtautoriza = null-- TODO: Eliminar este campo
            where c.arm_coleta_ncompra  = pColetaNumero
              and c.arm_coleta_ciclo    = pColetaCiclo;
           commit;
        
       end if;


      pMensagemEfeticacao := vMensagemEfeticacao;

      ---------------------------------------------------------------------------------------------------------
      -- EMAIL EFETIVAÇÃO VALE
      -- obtenho os emails do usuário e os envolvidos na coleta para copia
      -- Sp_Get_EmailColeta vai popular:
      -- ==> vEmailUsuario com o email do usuário que cadastrou a Coleta
      -- ==> vEmailsCopia com os emails do Armazem
      ---------------------------------------------------------------------------------------------------------
      Sp_Get_EmailColeta(pColetaNumero, pColetaCiclo, vEmailUsuario, vEmailsCopia, pStatus, pMessage);

      pMensagemEfeticacao  := pMensagemEfeticacao || '<br/><b>E-mails enviados para:</b>'|| vEmailUsuario||';'||vEmailsCopia||'<br/>';
      vCorpoEmail := vMensagemEfeticacao || Fn_Get_MessageInfoColeta(pColetaNumero, pColetaCiclo, vAguardarAutorizacao);

      pMensagemEfeticacao := case when vAguardarAutorizacao = true then pMensagemEfeticacao || '<h3 style="color:red;">AGUARDANDO AUTORIZAÇÃO</h3>'||
                                                            '<H5>Prazo de autorização de até 24 horas</H5>                          
                                                            Aguardando autorização da coleta. Aprovadores: </br> gabriel.nunes@angloamerican.com </br>
                                                                           heitor.silva_wca@angloamerican.com </br>
                                                                           alexandre.batista@angloamerican.com </br>
                                                                           luis.pacheco@angloamerican.com'
                             else pMensagemEfeticacao
                             end;

      vEmailsCopia := case
                        when length(vEmailsCopia) > 5 then vEmailsCopia -- ||';fgoes@dellavolpe.com.br;ddamaceno@dellavolpe.com.br'
                        ---else 'fgoes@dellavolpe.com.br;ddamaceno@dellavolpe.com.br'
                      end;

      begin
        wservice.pkg_glb_email.SP_ENVIAEMAIL(vAssunto,
                                             vCorpoEmail,
                                             vEmailOrigem,
                                             vEmailUsuario,
                                             vEmailsCopia);
      exception when others then
        vAssunto    := 'ERRO ao tentar enviar Email da Coleta: '||pColetaNumero||' - '||pColetaCiclo;
        vCorpoEmail := 'ERRO ao tentar enviar Email da Coleta: '||pColetaNumero||' - '||pColetaCiclo||
                     ' - Usuario: '||vColetaRowType.Usu_Usuario_Codigo_Cad||' - '||sqlerrm;
        wservice.pkg_glb_email.SP_ENVIAEMAIL(vAssunto,
                                             vCorpoEmail,
                                             vEmailOrigem
                                             ------------'fgoes@dellavolpe.com.br',
                                             ------------'ddamaceno@dellavolpe.com.br'
                                             );
      end;

      pStatus   := Status_normal;
      pMessage  := vMensagemEfeticacao;
    exception when others then
      pStatus   := Status_normal;
      pMessage  := 'Erro ao processar Pkg_Col_Coleta.Sp_AGL_EfetivarColeta. Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;

  end Sp_AGL_EfetivarColeta;
  
   /************************************************************************************************
   * PROGRAMA         : ColetaWeb
   * DESENVOLVEDOR    : Rafael Noberto
   * DATA DE CRIACAO  : 28/04/2020
   * Versão           :
   * FUNCINALIDADE    : 
   * PARTICULARIDADES : 
   *                    
   *                    
   * OBS..............: 
   * PARAM. OBRIGAT.  : 
   *                    
   *                    
   * 
   ************************************************************************************************/
   Procedure Sp_AGN_EfetivarColeta(pColetaNumero       in t_arm_coleta.arm_coleta_ncompra%type,
                                   pColetaCiclo        in t_arm_coleta.arm_coleta_ciclo%type,
                                   pMensagemEfeticacao out varchar2,
                                   pStatus             out varchar2,
                                   pMessage            out varchar2)
   as
    vEmailUsuario        varchar2(1000);
    vEmailsCopia         varchar2(2000);
    vCorpoEmail          varchar2(4000) := '';
    vMensagemEfeticacao  varchar2(4000) := '';
    vAssunto             Varchar2(1000) := 'Coleta gerada/efetivada com sucesso[ '||pColetaNumero||' - '||pColetaCiclo||' ]';
    vEmailOrigem         varchar2(1000) := 'coletaweb@dellavolpe.com.br';
    vOcorrencia          tdvadm.t_arm_coletaocor.arm_coletaocor_codigo%type := null;
    vGrupo               varchar2(4);

    vAguardarAutorizacao boolean := false;
    vColetaRowType       t_arm_Coleta%RowType;
  begin

    begin
      ----------------------------------------------------------------------------------------------------------------------------------
      -- Obtenho a linha da Coleta que deve ser Efetivada
      ----------------------------------------------------------------------------------------------------------------------------------
      vColetaRowType := Fn_Get_ColetaRowType(pColetaNumero, pColetaCiclo);
      
         
      -- Tati - 09/06/2021
        if ( TRIM(vColetaRowType.Fcf_Tpcarga_Codigo) in ( '02', '03' )) and (vColetaRowType.Arm_Coleta_Peso > 3500) then      
            pStatus := Status_Warning;
            pMessage := 'Para este contrato, peso máximo permitido é de 3.500 KG';
            return;
        end if;
      
      if TRIM(vColetaRowType.Fcf_Tpcarga_Codigo) = '03' then
        vOcorrencia := '65';
        vAguardarAutorizacao := true;
      end if;
        
     
       select c.glb_grupoeconomico_codigo
         into vGrupo
         from tdvadm.t_glb_cliente c
        where trim(c.glb_cliente_cgccpfcodigo) = trim(vColetaRowType.Arm_Coleta_Cnpjpagadorferete);
        
       if(vGrupo = GrupoEconomicoAGN) then 
        
           update t_arm_coleta c
              set c.arm_coletaocor_codigo = vOcorrencia,
                  c.usu_usuario_codigoautoriza = null,
                  c.arm_coleta_dtautoriza = null-- TODO: Eliminar este campo
            where c.arm_coleta_ncompra  = pColetaNumero
              and c.arm_coleta_ciclo    = pColetaCiclo;
           commit;
        
       end if;


      pMensagemEfeticacao := vMensagemEfeticacao;

      ---------------------------------------------------------------------------------------------------------
      -- EMAIL EFETIVAÇÃO VALE
      -- obtenho os emails do usuário e os envolvidos na coleta para copia
      -- Sp_Get_EmailColeta vai popular:
      -- ==> vEmailUsuario com o email do usuário que cadastrou a Coleta
      -- ==> vEmailsCopia com os emails do Armazem
      ---------------------------------------------------------------------------------------------------------
      Sp_Get_EmailColeta(pColetaNumero, pColetaCiclo, vEmailUsuario, vEmailsCopia, pStatus, pMessage);

      pMensagemEfeticacao  := pMensagemEfeticacao || '<br/><b>E-mails enviados para:</b>'|| vEmailUsuario||';'||vEmailsCopia||'<br/>';
      vCorpoEmail := vMensagemEfeticacao || Fn_Get_MessageInfoColeta(pColetaNumero, pColetaCiclo, vAguardarAutorizacao);

      pMensagemEfeticacao := case when vAguardarAutorizacao = true then pMensagemEfeticacao || '<h3 style="color:red;">AGUARDANDO AUTORIZAÇÃO</h3>'||
                                                            '<H5>Prazo de autorização de até 24 horas</H5>
                                                            </br>
                                                            Aguardando autorização da coleta. Aprovadores:</br> tulio.rodrigues@angloamerican.com  </br>
                                                                                                           vinicius.e.ribeiro@angloamerican.com </br>
                                                                                                           geicy.silva_hef@angloamerican.com'
                             else pMensagemEfeticacao
                             end;

      vEmailsCopia := case
                        when length(vEmailsCopia) > 5 then vEmailsCopia -- ||';fgoes@dellavolpe.com.br;ddamaceno@dellavolpe.com.br'
                        ---else 'fgoes@dellavolpe.com.br;ddamaceno@dellavolpe.com.br'
                      end;

      begin
        wservice.pkg_glb_email.SP_ENVIAEMAIL(vAssunto,
                                             vCorpoEmail,
                                             vEmailOrigem,
                                             vEmailUsuario,
                                             vEmailsCopia);
      exception when others then
        vAssunto    := 'ERRO ao tentar enviar Email da Coleta: '||pColetaNumero||' - '||pColetaCiclo;
        vCorpoEmail := 'ERRO ao tentar enviar Email da Coleta: '||pColetaNumero||' - '||pColetaCiclo||
                     ' - Usuario: '||vColetaRowType.Usu_Usuario_Codigo_Cad||' - '||sqlerrm;
        wservice.pkg_glb_email.SP_ENVIAEMAIL(vAssunto,
                                             vCorpoEmail,
                                             vEmailOrigem
                                             ------------'fgoes@dellavolpe.com.br',
                                             ------------'ddamaceno@dellavolpe.com.br'
                                             );
      end;

      pStatus   := Status_normal;
      pMessage  := vMensagemEfeticacao;
    exception when others then
      pStatus   := Status_normal;
      pMessage  := 'Erro ao processar Pkg_Col_Coleta.Sp_AGN_EfetivarColeta. Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;

  end Sp_AGN_EfetivarColeta;
  
  
  
 /************************************************************************************************
   * PROGRAMA         : ColetaWeb
   * DESENVOLVEDOR    : F.SEDEVITIZ
   * DATA DE CRIACAO  : 25/ABR/2018
   * Versão           : 2.0 - Refactor
   * FUNCINALIDADE    : Efetivar a Coleta após ser digitados os items
   * PARTICULARIDADES : Após digitar os dados da Coleta a mesma é salva para ser gerado um numero,
   *                    Porém, neste momento a Coleta recebe um ocorrencia[64] - Coleta Pendente,
   *                    Apenas após ser digitados dos item a Coleta deve ser Efetivada. e neste
   * OBS..............: Esta procedure trata de regras para Efetivar uma Coleta Arcelomittal
   * PARAM. OBRIGAT.  : pColetaNumero | pColetaCiclo = Chave da Coleta
   *                    pStatus = E=ERRO, N=Normal
   *                    pMessage = Mensagem de ERRO ou mensagem de Normal quando necessário
   ************************************************************************************************/
   Procedure Sp_VTC_EfetivarColeta(pColetaNumero       in t_arm_coleta.arm_coleta_ncompra%type,
                                   pColetaCiclo        in t_arm_coleta.arm_coleta_ciclo%type,
                                   pMensagemEfeticacao out varchar2,
                                   pStatus             out varchar2,
                                   pMessage            out varchar2)
   as
    vEmailUsuario        varchar2(1000);
    vEmailsCopia         varchar2(2000);
    vCorpoEmail          varchar2(4000) := '';
    vMensagemEfeticacao  varchar2(4000) := '';
    vAssunto             Varchar2(1000) := 'Coleta gerada/efetivada com sucesso[ '||pColetaNumero||' - '||pColetaCiclo||' ]';
    vEmailOrigem         varchar2(1000) := 'coletaweb@dellavolpe.com.br';

    vAguardarAutorizacao boolean := false;
    vOcorrencia          tdvadm.t_arm_coletaocor.arm_coletaocor_codigo%type := null;
    vColetaRowType       t_arm_Coleta%RowType;
  begin

    begin
      ----------------------------------------------------------------------------------------------------------------------------------
      -- Obtenho a linha da Coleta que deve ser Efetivada
      ----------------------------------------------------------------------------------------------------------------------------------
      vColetaRowType := Fn_Get_ColetaRowType(pColetaNumero, pColetaCiclo);
     
      update t_arm_coleta col
      set col.arm_coletaocor_codigo      = vOcorrencia,
/*          col.Arm_Coleta_Tpcompra        = case when vColetaRowType.Arm_Coleta_Pagadorfrete = 'R' then 'FOB'
                                                else col.Arm_Coleta_Tpcompra
                                           end, */
          col.arm_coleta_dtautoriza      = Case when Nvl(vOcorrencia, '-1') = '-1' Then sysdate
                                             else vColetaRowType.arm_coleta_dtautoriza
                                           End,
          col.usu_usuario_codigoautoriza = Case when Nvl(vOcorrencia, '-1') = '-1' Then vColetaRowType.usu_usuario_codigo_cad -- TODO: Diego | usuario nao passa na efetiva, usa o usuario cadastro
                                             else vColetaRowType.usu_usuario_codigoautoriza
                                           End
      where col.arm_coleta_ncompra    = pColetaNumero
        and col.arm_coleta_ciclo      = LPAD(pColetaCiclo,3,000)
        and col.arm_coletaorigem_cod  = 4;
      commit;

      ----------------------------------------------------------------------------------------------------------------------------------
      -- Monta Mensagem do Email de Efeticação
      -- a mesma mensagem de Email será exibida no front-end no momento da Efetivação
      ----------------------------------------------------------------------------------------------------------------------------------
      vMensagemEfeticacao := vMensagemEfeticacao || '<h3>Coleta Efetivada com sucesso</h3>';
      vMensagemEfeticacao := vMensagemEfeticacao || 'Coleta Numero.: ' || pColetaNumero || ' - ' || pColetaCiclo || '<hr/>';
      vMensagemEfeticacao := case when vAguardarAutorizacao = true then vMensagemEfeticacao || '<h3 style="color:red;">AGUARDANDO AUTORIZAÇÃO</h3>'
                               else vMensagemEfeticacao
                             end;

      ---------------------------------------------------------------------------------------------------------
      -- EMAIL EFETIVAÇÃO VLI
      -- obtenho os emails do usuário e os envolvidos na coleta para copia
      -- Sp_Get_EmailColeta vai popular:
      -- ==> vEmailUsuario com o email do usuário que cadastrou a Coleta
      -- ==> vEmailsCopia com os emails do Armazem
      ---------------------------------------------------------------------------------------------------------
      Sp_Get_EmailColeta(pColetaNumero, pColetaCiclo, vEmailUsuario, vEmailsCopia, pStatus, pMessage);

      pMensagemEfeticacao  := vMensagemEfeticacao || pMensagemEfeticacao || '<br/><b>E-mails enviados para:</b>'|| vEmailUsuario||';'||vEmailsCopia||'<br/>';

      vCorpoEmail := vMensagemEfeticacao || Fn_Get_MessageInfoColeta(pColetaNumero, pColetaCiclo, vAguardarAutorizacao);

      vEmailsCopia := case
                        when length(vEmailsCopia) > 5 then vEmailsCopia --||';fgoes@dellavolpe.com.br;ddamaceno@dellavolpe.com.br'
                        --else 'fgoes@dellavolpe.com.br;ddamaceno@dellavolpe.com.br'
                      end;

      begin
        wservice.pkg_glb_email.SP_ENVIAEMAIL(vAssunto,
                                             vCorpoEmail,
                                             vEmailOrigem,
                                             vEmailUsuario,
                                             vEmailsCopia);
      exception when others then
        vAssunto    := 'ERRO ao tentar enviar Email da Coleta: '||pColetaNumero||' - '||pColetaCiclo;
        vCorpoEmail := 'ERRO ao tentar enviar Email da Coleta: '||pColetaNumero||' - '||pColetaCiclo||
                     ' - Usuario: '||vColetaRowType.Usu_Usuario_Codigo_Cad||' - '||sqlerrm;
        wservice.pkg_glb_email.SP_ENVIAEMAIL(vAssunto,
                                             vCorpoEmail,
                                             vEmailOrigem
                                             --'fgoes@dellavolpe.com.br',
                                             --'ddamaceno@dellavolpe.com.br'
                                             );
      end;

      pStatus   := Status_normal;
      pMessage  := vMensagemEfeticacao;
    exception when others then
      pStatus   := Status_normal;
      pMessage  := 'Erro ao processar Pkg_Col_Coleta.Sp_VTC_EfetivarColeta. Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;

  end Sp_VTC_EfetivarColeta;
  
     

  /*********************************************************************************************
  * Data..: 10/09/2015
  * Autor.: Gustavo Vocatore Guilherme Timoteo, Felipe Santaniello
  * Versão: 2.0 - Refactor
  * Regra para saber se a coleta é da ALCOA
  * >> recebendo por parametro um TpColetaNova
  **********************************************************************************************
  * 14/10/2015 - Diego - Alterado param in para tipo da t_arm_coleta
  **********************************************************************************************/
  function Fn_ALC_IsColetaALC(pColetaRowType in t_arm_coleta%RowType)
    return boolean
  as
    vGrupoDestino       t_glb_grupoeconomico.glb_grupoeconomico_codigo%type;
    vGrupoEconomicoSolicitante   t_glb_grupoeconomico.glb_grupoeconomico_codigo%type;
    vIsALC              boolean := false;
  begin
      --------------------------------------------------------------
      -- Obtem o Grupo economico do cliente destinatario da Coleta.
      --------------------------------------------------------------
      begin
        Select c.glb_grupoeconomico_codigo
           Into vGrupoDestino
           From t_glb_cliente c
           where c.glb_cliente_cgccpfcodigo = pColetaRowType.Glb_Cliente_Cgccpfcodigoentreg;
      exception when no_data_found then
        return false;
      end;

      --------------------------------------------------------------
      -- Obtem o Grupo economico do cliente solicitante da Coleta.
      --------------------------------------------------------------
      begin
        Select c.glb_grupoeconomico_codigo
           Into vGrupoEconomicoSolicitante
           From t_glb_cliente c
           where c.glb_cliente_cgccpfcodigo = pColetaRowType.Arm_Coleta_Cnpjsolicitante;
      exception when no_data_found then
        return false;
      end;

    vIsALC := (vGrupoDestino = GrupoEconomicoALC) or (vGrupoEconomicoSolicitante = GrupoEconomicoALC);
    return vIsALC;
  end Fn_ALC_IsColetaALC;
  
  /*********************************************************************************************
  * Data..: 24/ABR/2018
  * Autor.: F.Sedevitiz
  * Versão: 2.0 - Refactor
  * Regra para saber se a coleta é da Votorantin Cimentos
  * >> recebendo por parametro um TpColetaNova
  **********************************************************************************************
  * 14/10/2015 - Diego - Alterado param in para tipo da t_arm_coleta
  **********************************************************************************************/
  function Fn_VTC_IsColetaVTC(pColetaRowType in t_arm_coleta%RowType)
    return boolean
  as
    vGrupoDestino       t_glb_grupoeconomico.glb_grupoeconomico_codigo%type;
    vGrupoEconomicoSolicitante   t_glb_grupoeconomico.glb_grupoeconomico_codigo%type;
    vIsVTC              boolean := false;
  begin
      --------------------------------------------------------------
      -- Obtem o Grupo economico do cliente destinatario da Coleta.
      --------------------------------------------------------------
      begin
        Select c.glb_grupoeconomico_codigo
           Into vGrupoDestino
           From t_glb_cliente c
           where c.glb_cliente_cgccpfcodigo = pColetaRowType.Glb_Cliente_Cgccpfcodigoentreg;
      exception when no_data_found then
        return false;
      end;

      --------------------------------------------------------------
      -- Obtem o Grupo economico do cliente solicitante da Coleta.
      --------------------------------------------------------------
      begin
        Select c.glb_grupoeconomico_codigo
           Into vGrupoEconomicoSolicitante
           From t_glb_cliente c
           where c.glb_cliente_cgccpfcodigo = pColetaRowType.Arm_Coleta_Cnpjsolicitante;
      exception when no_data_found then
        return false;
      end;

    vIsVTC := (vGrupoDestino = GrupoEconomicoVTC) or (vGrupoEconomicoSolicitante = GrupoEconomicoVTC);
    return vIsVTC;
  end Fn_VTC_IsColetaVTC;
  
  
   function Fn_OXI_IsColetaOXI(pColetaRowType in t_arm_coleta%rowType) return boolean
  as
    vGrupoPagador               t_glb_grupoeconomico.glb_grupoeconomico_codigo%type;
    vIsOXI                    boolean := false;
  begin
      --------------------------------------------------------------
      -- Obtem o Grupo economico do cliente destinatario da Coleta.
      --------------------------------------------------------------
      begin
        Select c.glb_grupoeconomico_codigo
           Into vGrupoPagador
           From t_glb_cliente c
           where c.glb_cliente_cgccpfcodigo = rpad(pColetaRowType.ARM_COLETA_CNPJPAGADORFERETE,20,' ');
      exception when no_data_found then
        vGrupoPagador := null;
      end;

    vIsOXI := (vGrupoPagador = (GrupoEconomicoOXI));

    return vIsOXI;
  end Fn_OXI_IsColetaOXI;
  
  
  Function Fn_OXI_ValidaCampos(pColetaRowType in t_arm_coleta%RowType,
                               pStatus        out char,
                               pMessage       out varchar2)
    return boolean
  as
    vIsValid boolean := true;
  begin

 --   if ( Fn_OXI_IsColetaOXI(pColetaRowType) = True ) then



      
            
      /*******validação OXITENO  *************************/
       if (trim(pColetaRowType.Arm_Coleta_Cnpjpagadorferete) in ('14109664000106','14109664000289')) then
       
             vIsValid := false;
             pStatus  := Status_warning;
             pMessage := 'Esse CNPJ não está autorizado a criar coleta';
              return vIsValid;
     
         
       end if;
 --  end if;

    return vIsValid;
  end Fn_OXI_ValidaCampos;
  
  -----------------------------------------------------------------------------------------------
    function Fn_VIX_IsColetaVIX(pColetaRowType in t_arm_coleta%rowType) return boolean
  as
    vGrupoPagador               t_glb_grupoeconomico.glb_grupoeconomico_codigo%type;
    vIsVIX                    boolean := false;
  begin
      --------------------------------------------------------------
      -- Obtem o Grupo economico do cliente destinatario da Coleta.
      --------------------------------------------------------------
      begin
        Select c.glb_grupoeconomico_codigo
           Into vGrupoPagador
           From t_glb_cliente c
           where c.glb_cliente_cgccpfcodigo = rpad(pColetaRowType.ARM_COLETA_CNPJPAGADORFERETE,20,' ');
      exception when no_data_found then
        vGrupoPagador := null;
      end;

    vIsVIX := (vGrupoPagador = (GrupoEconomicoVIX));

    return vIsVIX;
  end Fn_VIX_IsColetaVIX;
  
/*  function Fn_VIX_RestringeAutoriza(pColetaRowType in t_arm_coleta%RowType,
                                    pUsuarioAutorizador  in t_arm_coleta.usu_usuario_codigoautoriza%type)
    return boolean
  as
    vRestringir boolean := false;
    vCount integer := 0;
   
   begin

    if Fn_VIX_IsColetaVIX( pColetaRowType ) = true then
      \** Usuario VLI que podem autorizar
        Danilo Braga danilo.braga2@vli-logistica.com.br
        Fabricio Viana Cunha fabricio.cunha@vli-logistica.com.br
        Lucas Fernandes Silva lucas.fernandes.silva@vli-logistica.com.br
        Wagner Batista da Costa wagner.batista@vli-logistica.com.br
      **\
      select count(*)
      into vCount
      from TDVADM.T_ARM_PERMITEAUTORIZAR U 
      WHERE lower(u.usu_usuario_codigo) = lower(rpad(pUsuarioAutorizador,10,' '))
      AND U.GLB_GRUPOECONOMICO_CODIGO = GrupoEconomicoVIX
      AND U.FCF_TPCARGA_CODIGO = pColetaRowType.Fcf_Tpcarga_Codigo
      AND U.ARM_COLETA_TPCOLETA  = pColetaRowType.Arm_Coleta_Tpcoleta;

      -- Se vCount for igual a 0 o usuário não está na lista de usuários permitidos e a autorização deve ser restringida
      vRestringir := vCount = 0;
    end if;

    return vRestringir;
  end Fn_VIX_RestringeAutoriza;*/
  
  
  function Fn_OWE_IsColetaOWE(pColetaRowType in t_arm_coleta%rowType) return boolean
  as
    vGrupoPagador               t_glb_grupoeconomico.glb_grupoeconomico_codigo%type;
    vIsOWE                      boolean := false;
  begin
      --------------------------------------------------------------
      -- Obtem o Grupo economico do cliente destinatario da Coleta.
      --------------------------------------------------------------
      begin
        Select c.glb_grupoeconomico_codigo
           Into vGrupoPagador
           From t_glb_cliente c
           where c.glb_cliente_cgccpfcodigo = rpad(pColetaRowType.ARM_COLETA_CNPJPAGADORFERETE,20,' ');
      exception when no_data_found then
        vGrupoPagador := null;
      end;

    vIsOWE := (vGrupoPagador = (GrupoEconomicoOWE));

    return vIsOWE;
  end Fn_OWE_IsColetaOWE;
  
     /*********************************************************************************************
  * Data..: 01/ABR/2019
  * Autor.: F.Sedevitiz
  * Versão: 2.0 - Refactor
  * Regra para saber se a coleta é da Nouryon
  * >> recebendo por parametro um TpColetaNova
  **********************************************************************************************/
  function Fn_NOU_IsColetaNOU(pColetaRowType in t_arm_coleta%RowType)
    return boolean
  as
    vGrupoPagador       t_glb_grupoeconomico.glb_grupoeconomico_codigo%type;
    vIsNOU              boolean := false;
  begin
      --------------------------------------------------------------
      -- Obtem o Grupo economico do pagador da Coleta.
      --------------------------------------------------------------
      begin
        Select c.glb_grupoeconomico_codigo
           Into vGrupoPagador
           From t_glb_cliente c
           where c.glb_cliente_cgccpfcodigo = pColetaRowType.Arm_Coleta_Cnpjpagadorferete;
      exception when no_data_found then
        return false;
      end;

    vIsNOU := (vGrupoPagador = GrupoEconomicoNOU);
    return vIsNOU;
  end Fn_NOU_IsColetaNOU;
  
  
  function Fn_AGN_IsColetaAGN(pColetaRowType in t_arm_coleta%rowType) return boolean
  as
    vGrupoPagador               t_glb_grupoeconomico.glb_grupoeconomico_codigo%type;
    vIsAGN                   boolean := false;
  begin
      --------------------------------------------------------------
      -- Obtem o Grupo economico do cliente destinatario da Coleta.
      --------------------------------------------------------------
      begin
        Select c.glb_grupoeconomico_codigo
           Into vGrupoPagador
           From t_glb_cliente c
           where c.glb_cliente_cgccpfcodigo = rpad(pColetaRowType.ARM_COLETA_CNPJPAGADORFERETE,20,' ');
      exception when no_data_found then
        vGrupoPagador := null;
      end;

    vIsAGN := (vGrupoPagador = (GrupoEconomicoAGN));

    return vIsAGN ;
  end Fn_AGN_IsColetaAGN;
  
  
   function Fn_AGL_IsColetaAGL(pColetaRowType in t_arm_coleta%rowType) return boolean
  as
    vGrupoPagador               t_glb_grupoeconomico.glb_grupoeconomico_codigo%type;
    vIsOXI                    boolean := false;
  begin
      --------------------------------------------------------------
      -- Obtem o Grupo economico do cliente destinatario da Coleta.
      --------------------------------------------------------------
      begin
        Select c.glb_grupoeconomico_codigo
           Into vGrupoPagador
           From t_glb_cliente c
           where c.glb_cliente_cgccpfcodigo = rpad(pColetaRowType.ARM_COLETA_CNPJPAGADORFERETE,20,' ');
      exception when no_data_found then
        vGrupoPagador := null;
      end;

    vIsOXI := (vGrupoPagador = (GrupoEconomicoAGL));

    return vIsOXI;
  end Fn_AGL_IsColetaAGL;
  
  
  /*********************************************************************************************
  * Data..: 01/ABR/2019
  * Autor.: F.Sedevitiz
  * Versão: 2.0 - Refactor
  * Regra para saber se a coleta é da Votorantin Energia
  * >> recebendo por parametro um TpColetaNova
  **********************************************************************************************/
  function Fn_VTE_IsColetaVTE(pColetaRowType in t_arm_coleta%RowType)
    return boolean
  as
    vGrupoPagador       t_glb_grupoeconomico.glb_grupoeconomico_codigo%type;
    vIsVTE              boolean := false;
  begin
      --------------------------------------------------------------
      -- Obtem o Grupo economico do pagador da Coleta.
      --------------------------------------------------------------
      begin
        Select c.glb_grupoeconomico_codigo
           Into vGrupoPagador
           From t_glb_cliente c
           where c.glb_cliente_cgccpfcodigo = pColetaRowType.Arm_Coleta_Cnpjpagadorferete;
      exception when no_data_found then
        return false;
      end;

    vIsVTE := (vGrupoPagador = GrupoEconomicoVTE);
    return vIsVTE;
  end Fn_VTE_IsColetaVTE;
  
  /************************************************************************************************
   * PROGRAMA         : ColetaWeb
   * DESENVOLVEDOR    : F.SEDEVITIZ
   * DATA DE CRIACAO  : 01/ABR/2019
   * Versão           : 2.0 - Refactor
   * FUNCINALIDADE    : Efetivar a Coleta após ser digitados os items
   * PARTICULARIDADES : Após digitar os dados da Coleta a mesma é salva para ser gerado um numero,
   *                    Porém, neste momento a Coleta recebe um ocorrencia[64] - Coleta Pendente,
   *                    Apenas após ser digitados dos item a Coleta deve ser Efetivada. e neste
   * OBS..............: Esta procedure trata de regras para Efetivar uma Coleta Arcelomittal
   * PARAM. OBRIGAT.  : pColetaNumero | pColetaCiclo = Chave da Coleta
   *                    pStatus = E=ERRO, N=Normal
   *                    pMessage = Mensagem de ERRO ou mensagem de Normal quando necessário
   ************************************************************************************************/
   Procedure Sp_VTE_EfetivarColeta(pColetaNumero       in t_arm_coleta.arm_coleta_ncompra%type,
                                   pColetaCiclo        in t_arm_coleta.arm_coleta_ciclo%type,
                                   pMensagemEfeticacao out varchar2,
                                   pStatus             out varchar2,
                                   pMessage            out varchar2)
   as
    vEmailUsuario        varchar2(1000);
    vEmailsCopia         varchar2(2000);
    vCorpoEmail          varchar2(4000) := '';
    vMensagemEfeticacao  varchar2(4000) := '';
    vAssunto             Varchar2(1000) := 'Coleta gerada/efetivada com sucesso[ '||pColetaNumero||' - '||pColetaCiclo||' ]';
    vEmailOrigem         varchar2(1000) := 'coletaweb@dellavolpe.com.br';
    VExpresso            tdvadm.t_Arm_coleta.arm_coleta_tpcoleta%Type;
    VTipoCarga           tdvadm.t_Arm_coleta.fcf_tpcarga_codigo%Type;
    VModalidade          tdvadm.t_Arm_coleta.arm_coleta_entcoleta%Type;
    vAguardarAutorizacao boolean := false;
    vUsuPodeAutorizar    boolean := false;
    vOcorrencia          tdvadm.t_arm_coletaocor.arm_coletaocor_codigo%type := null;
    vColetaRowType       t_arm_Coleta%RowType;
  begin

    begin
    
      vColetaRowType := Fn_Get_ColetaRowType(pColetaNumero, pColetaCiclo);
    

      SELECT A.ARM_COLETA_TPCOLETA,
             A.FCF_TPCARGA_CODIGO,
             A.ARM_COLETA_ENTCOLETA
        INTO VExpresso,
             VTipoCarga,
             VModalidade
      FROM TDVADM.T_ARM_COLETA A
      WHERE A.ARM_COLETA_NCOMPRA = pColetaNumero
      AND A.ARM_COLETA_CICLO = pColetaCiclo;

      if(VExpresso = 'E' or trim(VTipoCarga) = '01' or VModalidade = 'C') then
      
         vUsuPodeAutorizar := Fn_Get_PodeAutorizarColeta(vColetaRowType.Usu_Usuario_Codigo_Cad, vColetaRowType.Arm_Coleta_Cnpjsolicitante);

         vAguardarAutorizacao := ( Fn_VTE_AguardaOuEfetiva( pColetaNumero, pColetaCiclo ) ) and ( vUsuPodeAutorizar = False );
         
         if vAguardarAutorizacao = true  then
           vOcorrencia := '65';
        end if;
      end if;
    

      update t_arm_coleta col
      set col.arm_coletaocor_codigo      = vOcorrencia,
/*          col.Arm_Coleta_Tpcompra        = case when vColetaRowType.Arm_Coleta_Pagadorfrete = 'R' then 'FOB'
                                                else col.Arm_Coleta_Tpcompra
                                           end, */
          col.arm_coleta_dtautoriza      = Case when Nvl(vOcorrencia, '-1') = '-1' Then sysdate
                                             else vColetaRowType.arm_coleta_dtautoriza
                                           End,
          col.usu_usuario_codigoautoriza = Case when Nvl(vOcorrencia, '-1') = '-1' Then vColetaRowType.usu_usuario_codigo_cad -- TODO: Diego | usuario nao passa na efetiva, usa o usuario cadastro
                                             else vColetaRowType.usu_usuario_codigoautoriza
                                           End
      where col.arm_coleta_ncompra    = pColetaNumero
        and col.arm_coleta_ciclo      = LPAD(pColetaCiclo,3,000)
        and col.arm_coletaorigem_cod  = 4;
      commit;

      ----------------------------------------------------------------------------------------------------------------------------------
      -- Monta Mensagem do Email de Efeticação
      -- a mesma mensagem de Email será exibida no front-end no momento da Efetivação
      ----------------------------------------------------------------------------------------------------------------------------------
      vMensagemEfeticacao := vMensagemEfeticacao || '<h3>Coleta Efetivada com sucesso</h3>';
      vMensagemEfeticacao := vMensagemEfeticacao || 'Coleta Numero.: ' || pColetaNumero || ' - ' || pColetaCiclo || '<hr/>';
      vMensagemEfeticacao := case when vAguardarAutorizacao = true then vMensagemEfeticacao || '<h3 style="color:red;">AGUARDANDO AUTORIZAÇÃO</h3>'
                               else vMensagemEfeticacao
                             end;

      ---------------------------------------------------------------------------------------------------------
      -- EMAIL EFETIVAÇÃO VLI
      -- obtenho os emails do usuário e os envolvidos na coleta para copia
      -- Sp_Get_EmailColeta vai popular:
      -- ==> vEmailUsuario com o email do usuário que cadastrou a Coleta
      -- ==> vEmailsCopia com os emails do Armazem
      ---------------------------------------------------------------------------------------------------------
      Sp_Get_EmailColeta(pColetaNumero, pColetaCiclo, vEmailUsuario, vEmailsCopia, pStatus, pMessage);

      pMensagemEfeticacao  := vMensagemEfeticacao || pMensagemEfeticacao || '<br/><b>E-mails enviados para:</b>'|| vEmailUsuario||';'||vEmailsCopia||'<br/>';

      vCorpoEmail := vMensagemEfeticacao || Fn_Get_MessageInfoColeta(pColetaNumero, pColetaCiclo, vAguardarAutorizacao);

      vEmailsCopia := case
                        when length(vEmailsCopia) > 5 then vEmailsCopia --||';fgoes@dellavolpe.com.br;ddamaceno@dellavolpe.com.br'
                        --else 'fgoes@dellavolpe.com.br;ddamaceno@dellavolpe.com.br'
                      end;

      begin
        wservice.pkg_glb_email.SP_ENVIAEMAIL(vAssunto,
                                             vCorpoEmail,
                                             vEmailOrigem,
                                             vEmailUsuario,
                                             vEmailsCopia);
      exception when others then
        vAssunto    := 'ERRO ao tentar enviar Email da Coleta: '||pColetaNumero||' - '||pColetaCiclo;
        vCorpoEmail := 'ERRO ao tentar enviar Email da Coleta: '||pColetaNumero||' - '||pColetaCiclo||
                     ' - Usuario: '||vColetaRowType.Usu_Usuario_Codigo_Cad||' - '||sqlerrm;
        wservice.pkg_glb_email.SP_ENVIAEMAIL(vAssunto,
                                             vCorpoEmail,
                                             vEmailOrigem
                                             );
      end;

      pStatus   := Status_normal;
      pMessage  := vMensagemEfeticacao;
    exception when others then
      pStatus   := Status_normal;
      pMessage  := 'Erro ao processar Pkg_Col_Coleta.Sp_VTE_EfetivarColeta. Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;

  end Sp_VTE_EfetivarColeta;
  
    /*********************************************************************************************
  * Data..: 01/04/2019 - VTE
  * Autor.: F.Sedevitiz
  * Versão: 2.0 - Refactor
  **********************************************************************************************/
  Function Fn_VTE_AguardaOuEfetiva(pColeta t_arm_coleta.arm_coleta_ncompra%type,
                                   pCiclo  t_arm_coleta.arm_coleta_ciclo%type)
    return Boolean
  as
    vIsVTE integer;
  begin
     -------------------------------------------------------------------------------------------
     -- Regra Conforme Sirlano:
     -- Se o Solicitante da Coleta for do Grupo Economico 0074=VLI
     -- a coleta entra como aguardando(ocorrencia=65)
     -------------------------------------------------------------------------------------------
     select count(*)
     into vIsVTE
     from tdvadm.t_arm_coleta co,
          tdvadm.t_glb_cliente cl     
     where trim(co.arm_coleta_cnpjpagadorferete) = trim(cl.glb_cliente_cgccpfcodigo) -- ligo usuario_web/solictante com cliente p/ filtrar pelo grupo economico 0074
     and cl.glb_grupoeconomico_codigo = GrupoEconomicoVTE -- Filtro pelo Grupo Economico RAI
     and co.arm_coleta_ncompra = pColeta
     and co.arm_coleta_ciclo = pCiclo;

     return vIsVTE > 0;
  end Fn_VTE_AguardaOuEfetiva;
 -------------------------------------------------------- 
    function Fn_VTE_RestringeAutoriza(pColetaRowType in t_arm_coleta%RowType,
                                    pUsuarioAutorizador  in t_arm_coleta.usu_usuario_codigoautoriza%type)
    return boolean
  as
    vRestringir boolean := false;
    vCount integer := 0;
  begin

    if Fn_VTE_IsColetaVTE( pColetaRowType ) = true then

      select count(*)
      into vCount
      from TDVADM.T_ARM_PERMITEAUTORIZAR U 
      WHERE lower(u.usu_usuario_codigo) = lower(rpad(pUsuarioAutorizador,10,' '))
      AND U.GLB_GRUPOECONOMICO_CODIGO IN (GrupoEconomicoVTE);

      -- Se vCount for igual a 0 o usuário não está na lista de usuários permitidos e a autorização deve ser restringida
      vRestringir := vCount = 0;
    end if;

    return vRestringir;
  end Fn_VTE_RestringeAutoriza;
  
/*********************************************************************************************
  * Data..: 03/09/2019
  * Autor.: Ewerton Alves
  * Versão: 2.0 - Refactor
  * Validações de Campos: CBA
  * >> Pedido Not Null
  **********************************************************************************************/
  
   function Fn_CBA_RestringeAutoriza(pColetaRowType in t_arm_coleta%RowType,
                                    pUsuarioAutorizador  in t_arm_coleta.usu_usuario_codigoautoriza%type)
    return boolean
  as
    vRestringir boolean := false;
    vCount integer := 0;
  begin

    if Fn_CBA_IsColetaCBA( pColetaRowType ) = true then

      select count(*)
      into vCount
      from TDVADM.T_ARM_PERMITEAUTORIZAR U 
      WHERE lower(u.usu_usuario_codigo) = lower(rpad(pUsuarioAutorizador,10,' '))
      AND U.GLB_GRUPOECONOMICO_CODIGO IN (GrupoEconomicoCBA);

      -- Se vCount for igual a 0 o usuário não está na lista de usuários permitidos e a autorização deve ser restringida
      vRestringir := vCount = 0;
    end if;

    return vRestringir;
  end Fn_CBA_RestringeAutoriza;
  
  
   /*********************************************************************************************
  * Data..: 09/12/2020
  * Autor.: Gustavo Vocatore
  * Versão: 2.0 - Refactor
  * Validações de Campos: AMX
  **********************************************************************************************
  * 09/12/2020 - Gustavo - apenas os usurios amsted pode criar a coleta
  **********************************************************************************************/
  Function Fn_AMX_ValidaCampos(pColetaRowType in tdvadm.t_arm_coleta%RowType,
                               pStatus        out char,
                               pMessage       out varchar2)
    return boolean as
    vIsValid boolean := true;
    ValidaAmsted number(19);


  begin

    if ( Fn_AMX_IsColetaAMX(pColetaRowType) = True ) then
      -- Tati - 29/04/2021     
      -- If colocado para restringir tipo de carga permitida no contrato
      if ( TRIM(pColetaRowType.Arm_Coleta_Tpcoleta) = 'E') and (trim(pColetaRowType.Fcf_Tpcarga_Codigo) in ('01', '02' )) then
        pStatus  := Status_Warning;
        pMessage := 'Prioridade Expressa não se enquadra no contrato, Alterar para NORMAL';
        vIsValid := false;
        return vIsValid;
      end if;
      
      select count(*)
        into ValidaAmsted
        from tdvadm.t_usu_aplicacaoperfil p
       where p.usu_aplicacao_codigo = 'jcoleta'
         and p.usu_perfil_codigo = 'AMSTED_SOLICITA_COLETA'
         and lower(trim(p.usu_usuario_codigo)) = lower(trim(pColetaRowType.usu_usuario_codigo_cad));
           
       if(ValidaAmsted = 0) then
          pStatus  := Status_Warning;
          pMessage := 'Apenas usuarios da armsted pode criar coleta';
          vIsValid := false;
       end if;
     end if;
    

    return vIsValid;
  end Fn_AMX_ValidaCampos;
  
  /*********************************************************************************************
  * Data..: 22/12/2014
  * Autor.: Gustavo Vocatore , Guilherme Timoteo , Felipe Santaniello
  * Versão: 2.0 - Refactor
  * Validações de Campos: VLI
  * >> Pedido Not Null
  **********************************************************************************************
  * 
  **********************************************************************************************/
  Function Fn_ALC_ValidaCampos(pColetaRowType in tdvadm.t_arm_coleta%RowType,
                               pStatus        out char,
                               pMessage       out varchar2)
    return boolean
  as
    vIsValid boolean := true;
    vContatoColetaNome varchar2(1000);
    vContatoColetaTelefone varchar2(50);
    vContatoEntregaNome varchar2(1000);
    vContatoEntregaTelefone varchar2(50);
  begin

    ----------------------------------------------------------------------------------------------
    -- Se o Solicitante ou o Destinatário for ALCOA
    -- considero que é uma coleta ALCOA e entro nas validações especificas
    ----------------------------------------------------------------------------------------------
    if ( Fn_ALC_IsColetaALC(pColetaRowType) = True ) then

/*       if (Trunc(Sysdate) >= '31/12/2015' and Trunc(Sysdate) <= '03/01/2016') then
         pStatus  := Status_Warning;
         pMessage := 'Bloqueio devido ao vencimento do contrato ALCOA! ';
         vIsValid := false;
       end if;*/

       ------------------------------------------------------------------------------------------
       -- Valida Dados Complementares
       ------------------------------------------------------------------------------------------
       -- <dadosComplementares>
       --    <contatoColeta>
       --      <email>teste@teste.com</email>
       --      <nome>Contato de Coleta</nome>
       --      <telefone>(11) 98521-2554</telefone>
       --    </contatoColeta>
       --    <contatoEntrega>
       --      <email></email>
       --      <nome>Contato de Entrega</nome>
       --      <telefone>(11) 98521-2554</telefone>
       --    </contatoEntrega>
       -- </dadosComplementares>
       begin
         SELECT extractValue(VALUE(XMLTAB), '/dadosComplementares/contatoColeta/nome'),
                extractValue(VALUE(XMLTAB), '/dadosComplementares/contatoColeta/telefone'),
                extractValue(VALUE(XMLTAB), '/dadosComplementares/contatoEntrega/nome'),
                extractValue(VALUE(XMLTAB), '/dadosComplementares/contatoEntrega/telefone')
         into vContatoColetaNome,
              vContatoColetaTelefone,
              vContatoEntregaNome,
              vContatoEntregaTelefone
         from TABle(XMLSequence(extract(xmltype.createXML(pColetaRowType.Arm_Coleta_Dadoscompl), '/dadosComplementares'))) XMLTAB;

       exception when others then
         vContatoColetaNome      := null;
         vContatoColetaTelefone  := null;
         vContatoEntregaNome     := null;
         vContatoEntregaTelefone := null;
       end;

       --insert into t_glb_sql(glb_sql_dtgravacao, glb_sql_programa,glb_sql_instrucao)
       --values(sysdate, 'DadosComplementares', 'vContatoColetaNome='||vContatoColetaNome||', '||
       --                                       'vContatoColetaTelefone='||vContatoColetaTelefone||', '||
       --                                       'vContatoEntregaNome='||vContatoEntregaNome||', '||
       --                                       'vContatoEntregaTelefone='||vContatoEntregaTelefone);
       --commit;

       if (nvl(vContatoColetaNome,'n')  = 'n') or (nvl(vContatoColetaTelefone,'n')  = 'n') or
          (nvl(vContatoEntregaNome,'n') = 'n') or (nvl(vContatoEntregaTelefone,'n') = 'n') then
         pStatus  := Status_Warning;
         pMessage := 'Obrigatório a digitação dos Dados Complementares na Aba Contato';
         vIsValid := false;
       end if;


       if (pColetaRowType.Arm_Coleta_Pedido is null) or (length(trim(pColetaRowType.Arm_Coleta_Pedido)) = 0) then
         pStatus  := Status_Warning;
         pMessage := 'Pedido(PO) não pode ser em branco/null e deve ter no maximo 15';
         vIsValid := false;
       end if;
      
       /***********************************************************************************
       * Desenvolvedor: Gustavo Vocatore 
       * Data: 12/12/2016
       * Motivo: 
       * 
 /*      ************************************************************************************\       
       if upper(nvl(pColetaRowType.Arm_Coleta_Pagadorfrete, 'X')) = 'O' then
         select cli.glb_grupoeconomico_codigo
           into vGrupoPagador
           from tdvadm.t_glb_cliente cli   
          where trim(cli.glb_cliente_cgccpfcodigo) = trim(pColetaRowType.Arm_Coleta_Cnpjpagadorferete);
         
         if vGrupoPagador = GrupoEconomicoVLI then
            pStatus  := Status_Warning;
            pMessage := 'Coleta com Destino ALCOA e Pagador Frete = Outros, não pode ter o CNPJ Pagador = ALCOA.';
            vIsValid := false;           
         end if;
       end if;*/
       
    end if;

    return vIsValid;
  end Fn_ALC_ValidaCampos;
  
   /*********************************************************************************************
  * Data..: 09/02/2018
  * Autor.: Gustavo Vocatore
  * Versão: 2.0 - Refactor
  **********************************************************************************************/
  Function Fn_ALB_AguardaOuEfetiva(pColeta t_arm_coleta.arm_coleta_ncompra%type,
                                         pCiclo  t_arm_coleta.arm_coleta_ciclo%type)
    return Boolean
  as
    vIsALB integer;
  begin
     -------------------------------------------------------------------------------------------
     -- Regra Conforme Sirlano:
     -- Se o Solicitante da Coleta for do Grupo Economico 0074=VLI
     -- a coleta entra como aguardando(ocorrencia=65)
     -------------------------------------------------------------------------------------------
     select count(*)
     into vIsALB
     from tdvadm.t_arm_coleta co,
          coleta.usuario_web uw,
          tdvadm.t_glb_cliente cl
     where lower(co.usu_usuario_codigo_cad) = rpad(lower(uw.usu_usuario_codigo),10,' ') -- ligo coleta com usuário_web p/ ter o cnpj do solicitante
     and trim(uw.dc_cnpj) = trim(cl.glb_cliente_cgccpfcodigo) -- ligo usuario_web/solictante com cliente p/ filtrar pelo grupo economico 0074
     and cl.glb_grupoeconomico_codigo = GrupoEconomicoALB -- Filtro pelo Grupo Economico VLI
     and co.arm_coleta_ncompra = pColeta
     and co.arm_coleta_ciclo = pCiclo;

     -------------------------------------------------------------------------------------------
     -- Regra se o usuario/cnpj solicitante da coleta não for VLI testo o Destino
     -- Se o Cliente/Entrega da Coleta for do Grupo Economico 0074=VLI
     -- a coleta entra como aguardando(ocorrencia=65)
     -------------------------------------------------------------------------------------------
     if vIsALB = 0 then
       select count(*)
       into vIsALB
       from t_arm_coleta co,
            t_glb_cliente cl
       where trim(co.glb_cliente_cgccpfcodigoentreg) = trim(cl.glb_cliente_cgccpfcodigo)
       and cl.glb_grupoeconomico_codigo = GrupoEconomicoALB
       and co.arm_coleta_ncompra = pColeta
       and co.arm_coleta_ciclo = pCiclo;
     end if;

     return vIsALB > 0;
  end Fn_ALB_AguardaOuEfetiva;
  
   /*********************************************************************************************
  * Data..: 09/02/2018 - SUZ
  * Autor.: F.Sedevitiz
  * Versão: 2.0 - Refactor
  **********************************************************************************************/
  Function Fn_SUZ_AguardaOuEfetiva(pColeta t_arm_coleta.arm_coleta_ncompra%type,
                                         pCiclo  t_arm_coleta.arm_coleta_ciclo%type)
    return Boolean
  as
    vIsSUZ integer;
  begin
     -------------------------------------------------------------------------------------------
     -- Regra Conforme Sirlano:
     -- Se o Solicitante da Coleta for do Grupo Economico 0074=VLI
     -- a coleta entra como aguardando(ocorrencia=65)
     -------------------------------------------------------------------------------------------
     select count(*)
     into vIsSUZ
     from tdvadm.t_arm_coleta co,
          coleta.usuario_web uw,
          tdvadm.t_glb_cliente cl
     where lower(co.usu_usuario_codigo_cad) = rpad(lower(uw.usu_usuario_codigo),10,' ') -- ligo coleta com usuário_web p/ ter o cnpj do solicitante
     and trim(uw.dc_cnpj) = trim(cl.glb_cliente_cgccpfcodigo) -- ligo usuario_web/solictante com cliente p/ filtrar pelo grupo economico 0074
     and cl.glb_grupoeconomico_codigo  IN (GrupoEconomicoSUZ, GrupoEconomicoSUZ2, GrupoEconomicoSUZ3, GrupoEconomicoSUZ4, 
                                                           GrupoEconomicoSUZ5, GrupoEconomicoSUZ6, GrupoEconomicoSUZ7, GrupoEconomicoSUZ8,
                                                           GrupoEconomicoSUZ9, GrupoEconomicoSUZ10, GrupoEconomicoSUZ11, GrupoEconomicoSUZ12) -- Filtro pelo Grupo Economico SUZ
     and co.arm_coleta_ncompra = pColeta
     and co.arm_coleta_ciclo = pCiclo;

     -------------------------------------------------------------------------------------------
     -- Regra se o usuario/cnpj solicitante da coleta não for VLI testo o Destino
     -- Se o Cliente/Entrega da Coleta for do Grupo Economico 0074=VLI
     -- a coleta entra como aguardando(ocorrencia=65)
     -------------------------------------------------------------------------------------------
     if vIsSUZ = 0 then
       select count(*)
       into vIsSUZ
       from t_arm_coleta co,
            t_glb_cliente cl
       where trim(co.glb_cliente_cgccpfcodigoentreg) = trim(cl.glb_cliente_cgccpfcodigo)
       and cl.glb_grupoeconomico_codigo IN (GrupoEconomicoSUZ, GrupoEconomicoSUZ2, GrupoEconomicoSUZ3, GrupoEconomicoSUZ4, 
                                                           GrupoEconomicoSUZ5, GrupoEconomicoSUZ6, GrupoEconomicoSUZ7, GrupoEconomicoSUZ8,
                                                           GrupoEconomicoSUZ9, GrupoEconomicoSUZ10, GrupoEconomicoSUZ11, GrupoEconomicoSUZ12)
       and co.arm_coleta_ncompra = pColeta
       and co.arm_coleta_ciclo = pCiclo;
     end if;

     return vIsSUZ > 0;
  end Fn_SUZ_AguardaOuEfetiva;
  
  /*********************************************************************************************
  * Data..: 15/02/2018 - RAI
  * Autor.: F.Sedevitiz
  * Versão: 2.0 - Refactor
  **********************************************************************************************/
  Function Fn_RAI_AguardaOuEfetiva(pColeta t_arm_coleta.arm_coleta_ncompra%type,
                                         pCiclo  t_arm_coleta.arm_coleta_ciclo%type)
    return Boolean
  as
    vIsRAI integer;
  begin
     -------------------------------------------------------------------------------------------
     -- Regra Conforme Sirlano:
     -- Se o Solicitante da Coleta for do Grupo Economico 0074=VLI
     -- a coleta entra como aguardando(ocorrencia=65)
     -------------------------------------------------------------------------------------------
     select count(*)
     into vIsRAI
     from tdvadm.t_arm_coleta co,
          tdvadm.t_glb_cliente cl     
     where trim(co.arm_coleta_cnpjpagadorferete) = trim(cl.glb_cliente_cgccpfcodigo) -- ligo usuario_web/solictante com cliente p/ filtrar pelo grupo economico 0074
     and cl.glb_grupoeconomico_codigo = GrupoEconomicoRAI -- Filtro pelo Grupo Economico RAI
     and co.arm_coleta_ncompra = pColeta
     and co.arm_coleta_ciclo = pCiclo;

     return vIsRAI > 0;
  end Fn_RAI_AguardaOuEfetiva;
  
   /*********************************************************************************************
  * Data..: 28/02/2018 - USI
  * Autor.: F.Sedevitiz
  * Versão: 2.0 - Refactor
  **********************************************************************************************/
  Function Fn_USI_AguardaOuEfetiva(pColeta t_arm_coleta.arm_coleta_ncompra%type,
                                         pCiclo  t_arm_coleta.arm_coleta_ciclo%type)
    return Boolean
  as
    vIsUSI integer;
  begin
     -------------------------------------------------------------------------------------------
     -- Regra Conforme Sirlano:
     -- Se o Solicitante da Coleta for do Grupo Economico 0074=VLI
     -- a coleta entra como aguardando(ocorrencia=65)
     -------------------------------------------------------------------------------------------
     select count(*)
     into vIsUSI
     from tdvadm.t_arm_coleta co,
          tdvadm.t_glb_cliente cl
     where trim(co.arm_coleta_cnpjpagadorferete) = trim(cl.glb_cliente_cgccpfcodigo) -- ligo usuario_web/solictante com cliente p/ filtrar pelo grupo economico 0074
     and cl.glb_grupoeconomico_codigo IN (GrupoEconomicoUSI,GrupoEconomicoUSI2) -- Filtro pelo Grupo Economico USI
     and co.arm_coleta_ncompra = pColeta
     and co.arm_coleta_ciclo = pCiclo;

     return vIsUSI > 0;
  end Fn_USI_AguardaOuEfetiva;
  
  /*#######################################################################################################################################
  /*# 10/09/2015 - Fabiano Góes - Area especifica para Regras VLI
  /*#######################################################################################################################################*/

  /*********************************************************************************************
  * Data..: 22/12/2014
  * Autor.: Fabiano Góes
  * Versão: 2.0 - Refactor
  **********************************************************************************************/
  Function Fn_VLI_AguardaOuEfetiva(pColeta t_arm_coleta.arm_coleta_ncompra%type,
                                         pCiclo  t_arm_coleta.arm_coleta_ciclo%type)
    return Boolean
  as
    vIsVLI integer;
  begin
     -------------------------------------------------------------------------------------------
     -- Regra Conforme Sirlano:
     -- Se o Solicitante da Coleta for do Grupo Economico 0074=VLI
     -- a coleta entra como aguardando(ocorrencia=65)
     -------------------------------------------------------------------------------------------
     select count(*)
     into vIsVLI
     from tdvadm.t_arm_coleta co,
          coleta.usuario_web uw,
          tdvadm.t_glb_cliente cl
     where lower(co.usu_usuario_codigo_cad) = rpad(lower(uw.usu_usuario_codigo),10,' ') -- ligo coleta com usuário_web p/ ter o cnpj do solicitante
     and trim(uw.dc_cnpj) = trim(cl.glb_cliente_cgccpfcodigo) -- ligo usuario_web/solictante com cliente p/ filtrar pelo grupo economico 0074
     and cl.glb_grupoeconomico_codigo = GrupoEconomicoVLI -- Filtro pelo Grupo Economico VLI
     and co.arm_coleta_ncompra = pColeta
     and co.arm_coleta_ciclo = pCiclo;

     -------------------------------------------------------------------------------------------
     -- Regra se o usuario/cnpj solicitante da coleta não for VLI testo o Destino
     -- Se o Cliente/Entrega da Coleta for do Grupo Economico 0074=VLI
     -- a coleta entra como aguardando(ocorrencia=65)
     -------------------------------------------------------------------------------------------
     if vIsVLI = 0 then
       select count(*)
       into vIsVLI
       from t_arm_coleta co,
            t_glb_cliente cl
       where trim(co.arm_coleta_cnpjpagadorferete) = trim(cl.glb_cliente_cgccpfcodigo)
       and cl.glb_grupoeconomico_codigo = GrupoEconomicoVLI
       and co.arm_coleta_ncompra = pColeta
       and co.arm_coleta_ciclo = pCiclo;
     end if;

     return vIsVLI > 0;
  end Fn_VLI_AguardaOuEfetiva;

  /*********************************************************************************************
  * Data..: 22/12/2014
  * Autor.: Fabiano Góes
  * Versão: 2.0 - Refactor
  * Validações de Campos: VLI
  * >> Pedido Not Null
  **********************************************************************************************/
/*  Function Fn_VLI_ValidaCampos(pTypeColeta    in TpColetaNova,
                               pStatus        out char,
                               pMessage       out varchar2)
    return boolean
  as
    vIsValid boolean := true;
  begin

    ----------------------------------------------------------------------------------------------
    -- Se o Solicitante ou o Destinatário for VLI
    -- considero que é uma coleta VLI e entro nas validações especificas
    ----------------------------------------------------------------------------------------------
    if ( Fn_VLI_IsColetaVLI(pTypeColeta) = True ) then

       if (pTypeColeta.pedido is null) or (length(trim(pTypeColeta.pedido)) = 0) then
         pStatus  := Status_Warning;
         pMessage := 'Pedido(PO) não pode ser em branco/null e deve ter no maximo 15';
         vIsValid := false;
       end if;

    end if;

    return vIsValid;
  end Fn_VLI_ValidaCampos;  */

  /*********************************************************************************************
  * Data..: 22/12/2014
  * Autor.: Fabiano Góes
  * Versão: 2.0 - Refactor
  * Validações de Campos: VLI
  * >> Pedido Not Null
  **********************************************************************************************
  * 14/10/2015 - Diego - Alterado param in para tipo da linha da t_arm_coleta
  **********************************************************************************************/
  Function Fn_VLI_ValidaCampos(pColetaRowType in tdvadm.t_arm_coleta%RowType,
                               pStatus        out char,
                               pMessage       out varchar2)
    return boolean
  as
    vIsValid boolean := true;
    vContatoColetaNome varchar2(1000);
    vContatoColetaTelefone varchar2(50);
    vContatoEntregaNome varchar2(1000);
    vContatoEntregaTelefone varchar2(50);
  begin

    ----------------------------------------------------------------------------------------------
    -- Se o Solicitante ou o Destinatário for VLI
    -- considero que é uma coleta VLI e entro nas validações especificas
    ----------------------------------------------------------------------------------------------
    if ( Fn_VLI_IsColetaVLI(pColetaRowType) = True ) then

/*       if (Trunc(Sysdate) >= '31/12/2015' and Trunc(Sysdate) <= '03/01/2016') then
         pStatus  := Status_Warning;
         pMessage := 'Bloqueio devido ao vencimento do contrato VLI! ';
         vIsValid := false;
       end if;*/

       ------------------------------------------------------------------------------------------
       -- Valida Dados Complementares
       ------------------------------------------------------------------------------------------
       -- <dadosComplementares>
       --    <contatoColeta>
       --      <email>teste@teste.com</email>
       --      <nome>Contato de Coleta</nome>
       --      <telefone>(11) 98521-2554</telefone>
       --    </contatoColeta>
       --    <contatoEntrega>
       --      <email></email>
       --      <nome>Contato de Entrega</nome>
       --      <telefone>(11) 98521-2554</telefone>
       --    </contatoEntrega>
       -- </dadosComplementares>
       begin
         SELECT extractValue(VALUE(XMLTAB), '/dadosComplementares/contatoColeta/nome'),
                extractValue(VALUE(XMLTAB), '/dadosComplementares/contatoColeta/telefone'),
                extractValue(VALUE(XMLTAB), '/dadosComplementares/contatoEntrega/nome'),
                extractValue(VALUE(XMLTAB), '/dadosComplementares/contatoEntrega/telefone')
         into vContatoColetaNome,
              vContatoColetaTelefone,
              vContatoEntregaNome,
              vContatoEntregaTelefone
         from TABle(XMLSequence(extract(xmltype.createXML(pColetaRowType.Arm_Coleta_Dadoscompl), '/dadosComplementares'))) XMLTAB;

       exception when others then
         vContatoColetaNome      := null;
         vContatoColetaTelefone  := null;
         vContatoEntregaNome     := null;
         vContatoEntregaTelefone := null;
       end;

       --insert into t_glb_sql(glb_sql_dtgravacao, glb_sql_programa,glb_sql_instrucao)
       --values(sysdate, 'DadosComplementares', 'vContatoColetaNome='||vContatoColetaNome||', '||
       --                                       'vContatoColetaTelefone='||vContatoColetaTelefone||', '||
       --                                       'vContatoEntregaNome='||vContatoEntregaNome||', '||
       --                                       'vContatoEntregaTelefone='||vContatoEntregaTelefone);
       --commit;

       if (nvl(vContatoColetaNome,'n')  = 'n') or (nvl(vContatoColetaTelefone,'n')  = 'n') or
          (nvl(vContatoEntregaNome,'n') = 'n') or (nvl(vContatoEntregaTelefone,'n') = 'n') then
         pStatus  := Status_Warning;
         pMessage := 'Obrigatório a digitação dos Dados Complementares na Aba Contato';
         vIsValid := false;
       end if;


       if (pColetaRowType.Arm_Coleta_Pedido is null) or (length(trim(pColetaRowType.Arm_Coleta_Pedido)) = 0) then
         pStatus  := Status_Warning;
         pMessage := 'Pedido(PO) não pode ser em branco/null e deve ter no maximo 15';
         vIsValid := false;
       end if;

       /***********************************************************************************
       * Desenvolvedor: Felipe B.
       * Data: 24/05/2016
       * Motivo: Solicitação do Fabrício da VLI, para que fornecedores não pedissem coleta 
       * como expresso, Foi liberada somente para autorizadores essa funcionalidade
       ************************************************************************************/
       if ((pColetaRowType.Arm_Coleta_Tpcoleta = 'E') and not(Fn_Get_PodeAutorizarColeta(pColetaRowType.Usu_Usuario_Codigo_Cad, pColetaRowType.Arm_Coleta_Cnpjsolicitante))) then
         pStatus  := Status_Warning;
         pMessage := 'VLI Somente Autorizadores podem solicitar coleta do tipo expressa';
         vIsValid := false;
       end if;
       
       /***********************************************************************************
       * Desenvolvedor: Fabiano / Diego.
       * Data: 12/12/2016
       * Motivo: Conforme Solicitação via e-mail por Fabricio:
       * Coleta com Destino VLI e Pagador Frete = Outros, não pode ter o CNPJ Pagador = VLI.
       ************************************************************************************/       
/*       if upper(nvl(pColetaRowType.Arm_Coleta_Pagadorfrete, 'X')) = 'O' then
         select cli.glb_grupoeconomico_codigo
           into vGrupoPagador
           from tdvadm.t_glb_cliente cli   
          where trim(cli.glb_cliente_cgccpfcodigo) = trim(pColetaRowType.Arm_Coleta_Cnpjpagadorferete);
         
         if vGrupoPagador = GrupoEconomicoVLI then
            pStatus  := Status_Warning;
            pMessage := 'Coleta com Destino VLI e Pagador Frete = Outros, não pode ter o CNPJ Pagador = VLI.';
            vIsValid := false;           
         end if;
       end if;*/
       
    end if;

    return vIsValid;
  end Fn_VLI_ValidaCampos;

  /************************************************************************************************
   * PROGRAMA         : ColetaWeb
   * DESENVOLVEDOR    : Fabiano
   * DATA DE CRIACAO  : 10/09/2015
   * Versão           : 2.0 - Refactor
   * FUNCINALIDADE    : Efetivar a Coleta após ser digitados os items
   * PARTICULARIDADES : Após digitar os dados da Coleta a mesma é salva para ser gerado um numero,
   *                    Porém, neste momento a Coleta recebe um ocorrencia[64] - Coleta Pendente,
   *                    Apenas após ser digitados dos item a Coleta deve ser Efetivada. e neste
   * OBS..............: Esta procedure trata de regras para Efetivar uma Coleta Arcelomittal
   * PARAM. OBRIGAT.  : pColetaNumero | pColetaCiclo = Chave da Coleta
   *                    pStatus = E=ERRO, N=Normal
   *                    pMessage = Mensagem de ERRO ou mensagem de Normal quando necessário
   ************************************************************************************************/
   Procedure Sp_VLI_EfetivarColeta(pColetaNumero       in t_arm_coleta.arm_coleta_ncompra%type,
                                   pColetaCiclo        in t_arm_coleta.arm_coleta_ciclo%type,
                                   pMensagemEfeticacao out varchar2,
                                   pStatus             out varchar2,
                                   pMessage            out varchar2)
   as
    vEmailUsuario        varchar2(1000);
    vEmailsCopia         varchar2(2000);
    vCorpoEmail          varchar2(4000) := '';
    vMensagemEfeticacao  varchar2(4000) := '';
    vAssunto             Varchar2(1000) := 'Coleta gerada/efetivada com sucesso[ '||pColetaNumero||' - '||pColetaCiclo||' ]';
    vEmailOrigem         varchar2(1000) := 'coletaweb@dellavolpe.com.br';

    vAguardarAutorizacao boolean := false;
    vUsuPodeAutorizar    boolean := false;
    vOcorrencia          tdvadm.t_arm_coletaocor.arm_coletaocor_codigo%type := null;
    vColetaRowType       t_arm_Coleta%RowType;
    vIsAutorizaRemetentePagador Char(1) := 'N';
    vFornecedoresPagador tdvadm.t_usu_perfil.usu_perfil_parat%type;
  begin

    begin
      ----------------------------------------------------------------------------------------------------------------------------------
      -- Obtenho a linha da Coleta que deve ser Efetivada
      ----------------------------------------------------------------------------------------------------------------------------------
      vColetaRowType := Fn_Get_ColetaRowType(pColetaNumero, pColetaCiclo);

      ----------------------------------------------------------------------------------------------------------------------------------
      -- Verifico se o Usuário que está efeticando é um usuário com permissão de Autorizar Coleta
      -- Isso porque se a colera entrar em alguma regra para Aguardar desconsidero porque o ususário já é o Autorizador
      ----------------------------------------------------------------------------------------------------------------------------------
      vUsuPodeAutorizar := Fn_Get_PodeAutorizarColeta(vColetaRowType.Usu_Usuario_Codigo_Cad, vColetaRowType.Arm_Coleta_Cnpjsolicitante);

      ----------------------------------------------------------------------------------------------------------------------------------
      -- Cliente autorizados a Solicitar Coletas Como Pagador Remetente(CIF) já autorizada
      -- TODO: esses CNPJs devem estar em uma regra por contrato
      -- 18/05/2016 - Felipe B - CNPJ: 00680863000157 adicionado a essa regra, conforme solicitação da Sabrina do Comercial
      -- 19/05/2016 - Felipe B - CNPJ's: 03900822000117, 45561404000354, 45561404000192, 45561404000273 adicionados a essa regra, conforme solicitação da Sabrina do Comercial
      -- 20/05/2016 - Felipe B - CNPJ's: 17155342000345, 17155342001074 adicionados a essa regra, conforme solicitação da Sabrina do Comercial
      -- 20/05/2016 - Felipe B - Foi acrescentada a cláusula de Pagador Outros, mas temos que avaliar a regra
      ----------------------------------------------------------------------------------------------------------------------------------
      -- CNPJ...: 57599581000147 = ARS IND. E COM. DE PARAFUSOS E FERRAGENS LTDA.
      -- CNPJ...: 15234146000179 = HERO SUPRIMENTOS INDUSTRIAIS LTDA
      -- CNPJ...: 71442115000184 = SIMAO SERGIO RIBEIRO ME
      -- CNPJ...: 17281973000300 = COFERMETA SA.
      -- CNPJ...: 17281973000220 = COFERMETA SA.
      -- CNPJ...: 17281973001382 = COFERMETA SA.
      ---------------------------------------------------------------------
      -- CNPJ...: 00680863000157 = ARQUIMIG SISTEMAS MOBILIARIOS LTDA
      -- CNPJ...: 03900822000117 = MODULAR MINING SYSTEMS DO BRASIL LTDA
      -- CNPJ...: 45561404000354 = PARCAN INDUSTRIA METALURGICA LTDA
      -- CNPJ...: 45561404000192 = PARCAN INDUSTRIA METALURGICA LTDA
      -- CNPJ...: 45561404000273 = PARCAN INDUSTRIA METALURGICA LTDA       
      -- CNPJ...: 17155342000345 = LOJA ELETRICA LTDA.
      -- CNPJ...: 17155342001074 = LOJA ELETRICA LTDA.
      ----------------------------------------------------------------------------------------------------------------------------------
      begin
/*    select p.usu_perfil_parat
        into vFornecedoresPagador
        from tdvadm.t_usu_perfil p
        where lower(trim(p.usu_aplicacao_codigo)) = 'jcoleta'
          and upper(trim(p.usu_perfil_codigo)) = 'FORNECEDOR_VLI_PAGADOR';  
*/    
        -- Felipe B. - 12/01/2017 - Foi adicionada a tabela AutColCIF para a regra abaixo de Fornecedor VLI
        Select count(*)
          into vFornecedoresPagador
          from tdvadm.t_arm_autcolcif acc
         where acc.glb_grupoeconomico_codigo = GrupoEconomicoVLI
           and trim(acc.glb_cliente_cgccpfcodigo)  = trim(vColetaRowType.arm_coleta_cnpjpagadorferete) 
           and acc.usu_usuario_codigo = vColetaRowType.usu_usuario_codigo_cad
           and acc.arm_autcolcif_ativo = 'S';

      exception when no_data_found then
        vFornecedoresPagador := 0;  
      end;
/*      if ( instr(vFornecedoresPagador, trim(vColetaRowType.Glb_Cliente_Cgccpfcodigocoleta)) > 0 ) and (vColetaRowType.Arm_Coleta_Pagadorfrete in ('R','O')) then*/
      if ( vFornecedoresPagador > 0 ) then
           vIsAutorizaRemetentePagador := 'S';
      end if;
      ----------------------------------------------------------------------------------------------------------------------------------
      -- Se a coleta entrar em alguma regra para Aguardar Autorização:
      -- Seto uma ocorrencia 65=Coleta Aguardando Autorização
      ----------------------------------------------------------------------------------------------------------------------------------
      vAguardarAutorizacao := ( Fn_VLI_AguardaOuEfetiva( pColetaNumero, pColetaCiclo ) ) and ( vUsuPodeAutorizar = False ) And (vIsAutorizaRemetentePagador = 'N');

      ----------------------------------------------------------------------------------------------------------------------------------
      -- Update necessátio conforme regra de Autorização
      ----------------------------------------------------------------------------------------------------------------------------------
      if vAguardarAutorizacao = true then
         vOcorrencia := '65';
      end if;

      update t_arm_coleta col
      set col.arm_coletaocor_codigo      = vOcorrencia,
/*          col.Arm_Coleta_Tpcompra        = case when vColetaRowType.Arm_Coleta_Pagadorfrete = 'R' then 'FOB'
                                                else col.Arm_Coleta_Tpcompra
                                           end, */
          col.arm_coleta_dtautoriza      = Case when Nvl(vOcorrencia, '-1') = '-1' Then sysdate
                                             else vColetaRowType.arm_coleta_dtautoriza
                                           End,
          col.usu_usuario_codigoautoriza = Case when Nvl(vOcorrencia, '-1') = '-1' Then vColetaRowType.usu_usuario_codigo_cad -- TODO: Diego | usuario nao passa na efetiva, usa o usuario cadastro
                                             else vColetaRowType.usu_usuario_codigoautoriza
                                           End
      where col.arm_coleta_ncompra    = pColetaNumero
        and col.arm_coleta_ciclo      = LPAD(pColetaCiclo,3,000)
        and col.arm_coletaorigem_cod  = 4;
      commit;

      ----------------------------------------------------------------------------------------------------------------------------------
      -- Monta Mensagem do Email de Efeticação
      -- a mesma mensagem de Email será exibida no front-end no momento da Efetivação
      ----------------------------------------------------------------------------------------------------------------------------------
      vMensagemEfeticacao := vMensagemEfeticacao || '<h3>Coleta Efetivada com sucesso</h3>';
      vMensagemEfeticacao := vMensagemEfeticacao || 'Coleta Numero.: ' || pColetaNumero || ' - ' || pColetaCiclo || '<hr/>';
      vMensagemEfeticacao := case when vAguardarAutorizacao = true then vMensagemEfeticacao || '<h3 style="color:red;">AGUARDANDO AUTORIZAÇÃO</h3>'
                               else vMensagemEfeticacao
                             end;

      ---------------------------------------------------------------------------------------------------------
      -- EMAIL EFETIVAÇÃO VLI
      -- obtenho os emails do usuário e os envolvidos na coleta para copia
      -- Sp_Get_EmailColeta vai popular:
      -- ==> vEmailUsuario com o email do usuário que cadastrou a Coleta
      -- ==> vEmailsCopia com os emails do Armazem
      ---------------------------------------------------------------------------------------------------------
      Sp_Get_EmailColeta(pColetaNumero, pColetaCiclo, vEmailUsuario, vEmailsCopia, pStatus, pMessage);

      pMensagemEfeticacao  := vMensagemEfeticacao || pMensagemEfeticacao || '<br/><b>E-mails enviados para:</b>'|| vEmailUsuario||';'||vEmailsCopia||'<br/>';

      vCorpoEmail := vMensagemEfeticacao || Fn_Get_MessageInfoColeta(pColetaNumero, pColetaCiclo, vAguardarAutorizacao);

      vEmailsCopia := case
                        when length(vEmailsCopia) > 5 then vEmailsCopia --||';fgoes@dellavolpe.com.br;ddamaceno@dellavolpe.com.br'
                        --else 'fgoes@dellavolpe.com.br;ddamaceno@dellavolpe.com.br'
                      end;

      begin
        wservice.pkg_glb_email.SP_ENVIAEMAIL(vAssunto,
                                             vCorpoEmail,
                                             vEmailOrigem,
                                             vEmailUsuario,
                                             vEmailsCopia);
      exception when others then
        vAssunto    := 'ERRO ao tentar enviar Email da Coleta: '||pColetaNumero||' - '||pColetaCiclo;
        vCorpoEmail := 'ERRO ao tentar enviar Email da Coleta: '||pColetaNumero||' - '||pColetaCiclo||
                     ' - Usuario: '||vColetaRowType.Usu_Usuario_Codigo_Cad||' - '||sqlerrm;
        wservice.pkg_glb_email.SP_ENVIAEMAIL(vAssunto,
                                             vCorpoEmail,
                                             vEmailOrigem
                                             --'fgoes@dellavolpe.com.br',
                                             --'ddamaceno@dellavolpe.com.br'
                                             );
      end;

      pStatus   := Status_normal;
      pMessage  := vMensagemEfeticacao;
    exception when others then
      pStatus   := Status_normal;
      pMessage  := 'Erro ao processar Pkg_Col_Coleta.Sp_VLI_EfetivarColeta. Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;

  end Sp_VLI_EfetivarColeta;
 --------------------------------------------------------------------------------------------- 
   function Fn_ALB_RestringeAutoriza(pColetaRowType in t_arm_coleta%RowType,
                                    pUsuarioAutorizador  in t_arm_coleta.usu_usuario_codigoautoriza%type)
    return boolean
  as
    vRestringir boolean := false;
    vCount integer := 0;
  begin

    if Fn_ALB_IsColetaALB( pColetaRowType ) = true then
      /** Usuario VLI que podem autorizar
        Danilo Braga danilo.braga2@vli-logistica.com.br
        Fabricio Viana Cunha fabricio.cunha@vli-logistica.com.br
        Lucas Fernandes Silva lucas.fernandes.silva@vli-logistica.com.br
        Wagner Batista da Costa wagner.batista@vli-logistica.com.br
      **/
      select count(*)
      into vCount
      from TDVADM.T_ARM_PERMITEAUTORIZAR U 
      WHERE lower(u.usu_usuario_codigo) = lower(rpad(pUsuarioAutorizador,10,' '))
      AND U.GLB_GRUPOECONOMICO_CODIGO = GrupoEconomicoALB;

      -- Se vCount for igual a 0 o usuário não está na lista de usuários permitidos e a autorização deve ser restringida
      vRestringir := vCount = 0;
    end if;

    return vRestringir;
  end Fn_ALB_RestringeAutoriza;
  
   
     -----------------------------------------------------------------------------------------------------
  function Fn_PRA_RestringeAutoriza(pColetaRowType in t_arm_coleta%RowType,
                                    pUsuarioAutorizador  in t_arm_coleta.usu_usuario_codigoautoriza%type)
    return boolean
  as
    vRestringir boolean := false;
    vCount integer := 0;
   
   begin

    if Fn_PRA_IsColetaPRA( pColetaRowType ) = true then
      /** Usuario VLI que podem autorizar
        Danilo Braga danilo.braga2@vli-logistica.com.br
        Fabricio Viana Cunha fabricio.cunha@vli-logistica.com.br
        Lucas Fernandes Silva lucas.fernandes.silva@vli-logistica.com.br
        Wagner Batista da Costa wagner.batista@vli-logistica.com.br
      **/
      select count(*)
      into vCount
      from TDVADM.T_ARM_PERMITEAUTORIZAR U 
      WHERE lower(u.usu_usuario_codigo) = lower(rpad(pUsuarioAutorizador,10,' '))
      AND U.GLB_GRUPOECONOMICO_CODIGO = GrupoEconomicoPRA;

      -- Se vCount for igual a 0 o usuário não está na lista de usuários permitidos e a autorização deve ser restringida
      vRestringir := vCount = 0;
    end if;

    return vRestringir;
  end Fn_PRA_RestringeAutoriza;
  
    function Fn_OXI_RestringeAutoriza(pColetaRowType in t_arm_coleta%RowType,
                                    pUsuarioAutorizador  in t_arm_coleta.usu_usuario_codigoautoriza%type)
    return boolean
  as
    vRestringir boolean := false;
    vCount integer := 0;
   
   begin

    if Fn_OXI_IsColetaOXI( pColetaRowType ) = true then
      /** Usuario VLI que podem autorizar
        Danilo Braga danilo.braga2@vli-logistica.com.br
        Fabricio Viana Cunha fabricio.cunha@vli-logistica.com.br
        Lucas Fernandes Silva lucas.fernandes.silva@vli-logistica.com.br
        Wagner Batista da Costa wagner.batista@vli-logistica.com.br
      **/
      select count(*)
      into vCount
      from TDVADM.T_ARM_PERMITEAUTORIZAR U 
      WHERE lower(u.usu_usuario_codigo) = lower(rpad(pUsuarioAutorizador,10,' '))
      AND U.GLB_GRUPOECONOMICO_CODIGO = GrupoEconomicoOXI
      AND U.FCF_TPCARGA_CODIGO = pColetaRowType.Fcf_Tpcarga_Codigo
      AND U.ARM_COLETA_TPCOLETA  = pColetaRowType.Arm_Coleta_Tpcoleta;

      -- Se vCount for igual a 0 o usuário não está na lista de usuários permitidos e a autorização deve ser restringida
      vRestringir := vCount = 0;
    end if;

    return vRestringir;
  end Fn_OXI_RestringeAutoriza;
  
  
      function Fn_ENE_RestringeAutoriza(pColetaRowType in t_arm_coleta%RowType,
                                    pUsuarioAutorizador  in t_arm_coleta.usu_usuario_codigoautoriza%type)
    return boolean
  as
    vRestringir boolean := false;
    vCount integer := 0;
   
   begin

    if Fn_ENE_IsColetaENE( pColetaRowType ) = true then
      /** Usuario VLI que podem autorizar
        Danilo Braga danilo.braga2@vli-logistica.com.br
        Fabricio Viana Cunha fabricio.cunha@vli-logistica.com.br
        Lucas Fernandes Silva lucas.fernandes.silva@vli-logistica.com.br
        Wagner Batista da Costa wagner.batista@vli-logistica.com.br
      **/
      select count(*)
      into vCount
      from TDVADM.T_ARM_PERMITEAUTORIZAR U 
      WHERE lower(u.usu_usuario_codigo) = lower(rpad(pUsuarioAutorizador,10,' '))
      AND U.GLB_GRUPOECONOMICO_CODIGO = GrupoEconomicoENE;
 

      -- Se vCount for igual a 0 o usuário não está na lista de usuários permitidos e a autorização deve ser restringida
      vRestringir := vCount = 0;
    end if;

    return vRestringir;
  end Fn_ENE_RestringeAutoriza;
  
  Function Fn_ENE_ValidaCampos(pColetaRowType in tdvadm.t_arm_coleta%RowType,
                               pStatus        out char,
                               pMessage       out varchar2) return boolean
  as 
    vIsValid boolean := true;
    ValidaAmsted number(19);
  begin

    if ( Fn_ENE_IsColetaENE(pColetaRowType) = True ) then
      -- Thiago - 30/04/2021     
      -- If colocado para restringir tipo de carga permitida no contrato
      if ( TRIM(pColetaRowType.Arm_Coleta_Tpcoleta) = 'E') and (trim(pColetaRowType.Fcf_Tpcarga_Codigo) in ( '02' )) then
        pStatus  := Status_Warning;
        pMessage := 'Prioridade EXPRESSA não se enquadra no tipo de carga FRACIONADO. Alterar prioridade para NORMAL';
        vIsValid := false;
        return vIsValid;
      end if;

     end if;
  
    return vIsValid;
  end Fn_ENE_ValidaCampos;
    

  
        -----------------------------------------------------------------------------------------------------
  function Fn_PAR_RestringeAutoriza(pColetaRowType in t_arm_coleta%RowType,
                                    pUsuarioAutorizador  in t_arm_coleta.usu_usuario_codigoautoriza%type)
    return boolean
  as
    vRestringir boolean := false;
    vCount integer := 0;
   
   begin

    if Fn_PRA_IsColetaPRA( pColetaRowType ) = true then
      /** Usuario VLI que podem autorizar
        Danilo Braga danilo.braga2@vli-logistica.com.br
        Fabricio Viana Cunha fabricio.cunha@vli-logistica.com.br
        Lucas Fernandes Silva lucas.fernandes.silva@vli-logistica.com.br
        Wagner Batista da Costa wagner.batista@vli-logistica.com.br
      **/
      select count(*)
      into vCount
      from TDVADM.T_ARM_PERMITEAUTORIZAR U 
      WHERE lower(u.usu_usuario_codigo) = lower(rpad(pUsuarioAutorizador,10,' '))
      AND U.GLB_GRUPOECONOMICO_CODIGO = GrupoEconomicoPAR;

      -- Se vCount for igual a 0 o usuário não está na lista de usuários permitidos e a autorização deve ser restringida
      vRestringir := vCount = 0;
    end if;

    return vRestringir;
  end Fn_PAR_RestringeAutoriza;
  
  ---------------------------------------------------------------------------------------------
  function Fn_SUZ_RestringeAutoriza(pColetaRowType in t_arm_coleta%RowType,
                                    pUsuarioAutorizador  in t_arm_coleta.usu_usuario_codigoautoriza%type)
    return boolean
  as
    vRestringir boolean := false;
    vCount integer := 0;
  begin

    if Fn_SUZ_IsColetaSUZ( pColetaRowType ) = true then
      /** Usuario VLI que podem autorizar
        Danilo Braga danilo.braga2@vli-logistica.com.br
        Fabricio Viana Cunha fabricio.cunha@vli-logistica.com.br
        Lucas Fernandes Silva lucas.fernandes.silva@vli-logistica.com.br
        Wagner Batista da Costa wagner.batista@vli-logistica.com.br
      **/
      select count(*)
      into vCount
      from TDVADM.T_ARM_PERMITEAUTORIZAR U 
      WHERE lower(u.usu_usuario_codigo) = lower(rpad(pUsuarioAutorizador,10,' '))
      AND U.GLB_GRUPOECONOMICO_CODIGO IN (GrupoEconomicoSUZ, GrupoEconomicoSUZ2, GrupoEconomicoSUZ3, GrupoEconomicoSUZ4, 
                                                           GrupoEconomicoSUZ5, GrupoEconomicoSUZ6, GrupoEconomicoSUZ7, GrupoEconomicoSUZ8,
                                                           GrupoEconomicoSUZ9, GrupoEconomicoSUZ10, GrupoEconomicoSUZ11,GrupoEconomicoSUZ12);

      -- Se vCount for igual a 0 o usuário não está na lista de usuários permitidos e a autorização deve ser restringida
      vRestringir := vCount = 0;
    end if;

    return vRestringir;
  end Fn_SUZ_RestringeAutoriza;
  
  -----------------------------------------------------------------------------------------------------
  function Fn_RAI_RestringeAutoriza(pColetaRowType in t_arm_coleta%RowType,
                                    pUsuarioAutorizador  in t_arm_coleta.usu_usuario_codigoautoriza%type)
    return boolean
  as
    vRestringir boolean := false;
    vCount integer := 0;
  begin

    if Fn_RAI_IsColetaRAI( pColetaRowType ) = true then
      
      select count(*)
      into vCount
      from TDVADM.T_ARM_PERMITEAUTORIZAR U 
      WHERE lower(u.usu_usuario_codigo) = lower(rpad(pUsuarioAutorizador,10,' '))
      AND U.GLB_GRUPOECONOMICO_CODIGO = GrupoEconomicoRAI;

      -- Se vCount for igual a 0 o usuário não está na lista de usuários permitidos e a autorização deve ser restringida
      vRestringir := vCount = 0;
    end if;

    return vRestringir;
  end Fn_RAI_RestringeAutoriza;
  
    function Fn_PET_RestringeAutoriza(pColetaRowType in t_arm_coleta%RowType,
                                    pUsuarioAutorizador  in t_arm_coleta.usu_usuario_codigoautoriza%type)
    return boolean
  as
    vRestringir boolean := false;
   
  begin

    if Fn_PET_IsColetaPET( pColetaRowType ) = true then
      if(pUsuarioAutorizador = '153570957' 
      and trim( pColetaRowType. Arm_Coleta_Cnpjpagadorferete) = '73410326000403')then
    
      -- Se vCount for igual a 0 o usuário não está na lista de usuários permitidos e a autorização deve ser restringida
      vRestringir := true;
       end if;
    end if;
    return vRestringir;
  end Fn_PET_RestringeAutoriza;
  
    ----------------------------------------------------------------------------------------------
  
   function Fn_AGL_RestringeAutoriza(pColetaRowType in t_arm_coleta%RowType,
                                    pUsuarioAutorizador  in t_arm_coleta.usu_usuario_codigoautoriza%type)
    return boolean
  as
    vRestringir boolean := false;
    vCount integer := 0;
  begin

    if Fn_AGL_IsColetaAGL( pColetaRowType ) = true then
      /** Usuario AGL que podem autorizar
        Gabriel Nunes - gabriel.nunes@angloamerican.com
        Heitor Silva - heitor.silva_wca@angloamerican.com
        Alexandre Batista - alexandre.batista@angloamerican.com;
        Luiz Pacheco - luis.pacheco@angloamerican.com;
      **/
      select count(*)
      into vCount
      from TDVADM.T_ARM_PERMITEAUTORIZAR U 
      WHERE lower(u.usu_usuario_codigo) = lower(rpad(pUsuarioAutorizador,10,' '))
      AND U.GLB_GRUPOECONOMICO_CODIGO = GrupoEconomicoAGL;

      -- Se vCount for igual a 0 o usuário não está na lista de usuários permitidos e a autorização deve ser restringida
      vRestringir := vCount = 0;
    end if;

    return vRestringir;
  end Fn_AGL_RestringeAutoriza;
  
  function Fn_NOU_RestringeAutoriza(pColetaRowType in t_arm_coleta%RowType,
                                    pUsuarioAutorizador  in t_arm_coleta.usu_usuario_codigoautoriza%type)
    return boolean
  as
    vRestringir boolean := false;
    vCount integer := 0;
   
   begin

    if Fn_NOU_IsColetaNOU( pColetaRowType ) = true then
      /** Usuario VLI que podem autorizar
        Danilo Braga danilo.braga2@vli-logistica.com.br
        Fabricio Viana Cunha fabricio.cunha@vli-logistica.com.br
        Lucas Fernandes Silva lucas.fernandes.silva@vli-logistica.com.br
        Wagner Batista da Costa wagner.batista@vli-logistica.com.br
      **/
      select count(*)
      into vCount
      from TDVADM.T_ARM_PERMITEAUTORIZAR U 
      WHERE lower(u.usu_usuario_codigo) = lower(rpad(pUsuarioAutorizador,10,' '))
      AND U.GLB_GRUPOECONOMICO_CODIGO = GrupoEconomicoNOU;

      -- Se vCount for igual a 0 o usuário não está na lista de usuários permitidos e a autorização deve ser restringida
      vRestringir := vCount = 0;
    end if;

    return vRestringir;
  end Fn_NOU_RestringeAutoriza;
  
  ----------------------------------------------------------------------------------------------
  
   function Fn_AGN_RestringeAutoriza(pColetaRowType in t_arm_coleta%RowType,
                                    pUsuarioAutorizador  in t_arm_coleta.usu_usuario_codigoautoriza%type)
    return boolean
  as
    vRestringir boolean := false;
    vCount integer := 0;
  begin

    if Fn_AGN_IsColetaAGN( pColetaRowType ) = true then
      /** Usuario AGN que podem autorizar
        Tulio Silva - tulio.silva@angloamerican.com
        Vinicius Ribeiro -  vinicius.e.ribeiro@angloamerican.com
        Geycce Silva - geycce.silva_hef@angloamerican.com
      **/
      select count(*)
      into vCount
      from TDVADM.T_ARM_PERMITEAUTORIZAR U 
      WHERE lower(u.usu_usuario_codigo) = lower(rpad(pUsuarioAutorizador,10,' '))
      AND U.GLB_GRUPOECONOMICO_CODIGO = GrupoEconomicoAGN;

      -- Se vCount for igual a 0 o usuário não está na lista de usuários permitidos e a autorização deve ser restringida
      vRestringir := vCount = 0;
    end if;

    return vRestringir;
  end Fn_AGN_RestringeAutoriza;
  ---------------------------------------------------------------------------------------------
  
  -----------------------------------------------------------------------------------------------------
  function Fn_USI_RestringeAutoriza(pColetaRowType in t_arm_coleta%RowType,
                                    pUsuarioAutorizador  in t_arm_coleta.usu_usuario_codigoautoriza%type)
    return boolean
  as
    vRestringir boolean := false;
    vCount integer := 0;
    vGrupoUsiminas               t_glb_grupoeconomico.glb_grupoeconomico_codigo%type;

  begin

    if Fn_USI_IsColetaUSI( pColetaRowType ) = true then
  
      begin
        Select c.glb_grupoeconomico_codigo
           Into vGrupoUsiminas
           From t_glb_cliente c
           where c.glb_cliente_cgccpfcodigo = rpad(pColetaRowType.Arm_Coleta_Cnpjpagadorferete,20,' ');
      exception when no_data_found then
        vGrupoUsiminas := null;
      end;
      
      if(vGrupoUsiminas = GrupoEconomicoUSI) then
      
        select count(*)
        into vCount
        from TDVADM.T_ARM_PERMITEAUTORIZAR U 
        WHERE lower(u.usu_usuario_codigo) = lower(rpad(pUsuarioAutorizador,10,' '))
        AND U.GLB_GRUPOECONOMICO_CODIGO = GrupoEconomicoUSI;
                -- Se vCount for igual a 0 o usuário não está na lista de usuários permitidos e a autorização deve ser restringida
        vRestringir := vCount = 0;
      end if;
      
      if(vGrupoUsiminas = GrupoEconomicoUSI2) then
      
        select count(*)
        into vCount
        from TDVADM.T_ARM_PERMITEAUTORIZAR U 
        WHERE lower(u.usu_usuario_codigo) = lower(rpad(pUsuarioAutorizador,10,' '))
        AND U.GLB_GRUPOECONOMICO_CODIGO = GrupoEconomicoUSI2;
                -- Se vCount for igual a 0 o usuário não está na lista de usuários permitidos e a autorização deve ser restringida
        vRestringir := vCount = 0;
      end if;
    end if;

    return vRestringir;
  end Fn_USI_RestringeAutoriza;
  
  
    function Fn_VALE_RestringeAutoriza(pColetaRowType in t_arm_coleta%RowType,
                                    pUsuarioAutorizador  in t_arm_coleta.usu_usuario_codigoautoriza%type)
    return boolean
  as
    vRestringir boolean := false;
    vCount integer := 0;
    vGrupoVale              t_glb_grupoeconomico.glb_grupoeconomico_codigo%type;

  begin

    if Fn_VALE_IsColetaVALE( pColetaRowType ) = true then
  
      begin
        Select c.glb_grupoeconomico_codigo
           Into vGrupoVale
           From t_glb_cliente c
           where c.glb_cliente_cgccpfcodigo = rpad(pColetaRowType.Arm_Coleta_Cnpjpagadorferete,20,' ');
      exception when no_data_found then
        vGrupoVale := null;
      end;
      
      if(vGrupoVale = GrupoEconomicoVALE) then
        select count(*)
        into vCount
        from TDVADM.T_ARM_PERMITEAUTORIZAR U 
        WHERE lower(u.usu_usuario_codigo) = lower(rpad(pUsuarioAutorizador,10,' '))
        AND U.GLB_GRUPOECONOMICO_CODIGO = GrupoEconomicoVALE;
                -- Se vCount for igual a 0 o usuário não está na lista de usuários permitidos e a autorização deve ser restringida
        vRestringir := vCount = 0;
      end if;
    end if;

    return vRestringir;
  end Fn_VALE_RestringeAutoriza;
  
  -----------------------------------------------------------------------------------------------------
  function Fn_VLI_RestringeAutoriza(pColetaRowType in t_arm_coleta%RowType,
                                    pUsuarioAutorizador  in t_arm_coleta.usu_usuario_codigoautoriza%type)
    return boolean
  as



    vRestringir boolean := false;
    vCount integer := 0;
  begin

    if Fn_VLI_IsColetaVLI( pColetaRowType ) = true then
      /** Usuario VLI que podem autorizar
        Danilo Braga danilo.braga2@vli-logistica.com.br
        Fabricio Viana Cunha fabricio.cunha@vli-logistica.com.br
        Lucas Fernandes Silva lucas.fernandes.silva@vli-logistica.com.br
        Wagner Batista da Costa wagner.batista@vli-logistica.com.br
      **/
      select count(*)
      into vCount
      from TDVADM.T_ARM_PERMITEAUTORIZAR U 
      WHERE lower(u.usu_usuario_codigo) = lower(rpad(pUsuarioAutorizador,10,' '))
      AND U.GLB_GRUPOECONOMICO_CODIGO = GrupoEconomicoVLI;

      -- Se vCount for igual a 0 o usuário não está na lista de usuários permitidos e a autorização deve ser restringida
      vRestringir := vCount = 0;
    end if;

    return vRestringir;
  end Fn_VLI_RestringeAutoriza;

  /*********************************************************************************************
  * Data..: 10/09/2015
  * Autor.: Fabiano Góes
  * Versão: 2.0 - Refactor
  * Regra para saber se a coleta é da VLI
  * >> recebendo por parametro um TpColetaNova
  **********************************************************************************************
  * 14/10/2015 - Diego - Alterado param in para tipo da t_arm_coleta
  **********************************************************************************************/
  function Fn_VLI_IsColetaVLI(pColetaRowType in t_arm_coleta%RowType)
    return boolean
  as
    vGrupoDestino       t_glb_grupoeconomico.glb_grupoeconomico_codigo%type;
    vGrupoEconomicoPagador  t_glb_grupoeconomico.glb_grupoeconomico_codigo%type;
    vIsVLI              boolean := false;
  begin
      --------------------------------------------------------------
      -- Obtem o Grupo economico do cliente destinatario da Coleta.
      --------------------------------------------------------------
      begin
        Select c.glb_grupoeconomico_codigo
           Into vGrupoDestino
           From t_glb_cliente c
           where c.glb_cliente_cgccpfcodigo = pColetaRowType.Glb_Cliente_Cgccpfcodigoentreg;
      exception when no_data_found then
        return false;
      end;

      --------------------------------------------------------------
      -- Obtem o Grupo economico do cliente solicitante da Coleta.
      --------------------------------------------------------------
      begin
        Select c.glb_grupoeconomico_codigo
           Into vGrupoEconomicoPagador
           From t_glb_cliente c
           where c.glb_cliente_cgccpfcodigo = pColetaRowType.ARM_COLETA_CNPJPAGADORFERETE;
      exception when no_data_found then
        return false;
      end;

    vIsVLI := (vGrupoDestino = GrupoEconomicoVLI) or (vGrupoEconomicoPagador = GrupoEconomicoVLI);
    return vIsVLI;
    return vIsVLI;
  end Fn_VLI_IsColetaVLI;
  
  
   /*********************************************************************************************
  * Create by: Gustavo Vocatore
  * Date: 09/12/2020 
  **********************************************************************************************/
  function Fn_AMX_IsColetaAMX(pColetaRowType in t_arm_coleta%rowType) return boolean
  as
    vGrupoPagador       t_glb_grupoeconomico.glb_grupoeconomico_codigo%type;
    vIsAMXSev           boolean := false;
  begin
      --------------------------------------------------------------
      -- Obtem o Grupo economico do pagador da Coleta.
      --------------------------------------------------------------
      begin
        Select c.glb_grupoeconomico_codigo
           Into vGrupoPagador
           From t_glb_cliente c
           where c.glb_cliente_cgccpfcodigo = rpad(pColetaRowType.ARM_COLETA_CNPJPAGADORFERETE,20,' ');
      exception when no_data_found then
        vGrupoPagador := null;
      end;
      
    vIsAMXSev := (vGrupoPagador = GrupoEconomicoAMX);
    return vIsAMXSev;
  end Fn_AMX_IsColetaAMX;
  
  /*********************************************************************************************
  * Create by: Jonatas Veloso
  * Date: 08/10/2019 
  **********************************************************************************************/
  function Fn_BIO_IsColetaBIO(pColetaRowType in t_arm_coleta%rowType) return boolean
  as
    vGrupoPagador       t_glb_grupoeconomico.glb_grupoeconomico_codigo%type;
    vIsBioSev           boolean := false;
  begin
      --------------------------------------------------------------
      -- Obtem o Grupo economico do pagador da Coleta.
      --------------------------------------------------------------
      begin
        Select c.glb_grupoeconomico_codigo
           Into vGrupoPagador
           From t_glb_cliente c
           where c.glb_cliente_cgccpfcodigo = rpad(pColetaRowType.ARM_COLETA_CNPJPAGADORFERETE,20,' ');
      exception when no_data_found then
        vGrupoPagador := null;
      end;
      
    vIsBioSev := (vGrupoPagador = GrupoEconomicoBIO);
    return vIsBioSev;
  end Fn_BIO_IsColetaBIO;
  
  /************************************************************************************************
  * PROGRAMA         : Aguarda ou Efetiva do Cliente BioSev
  * DESENVOLVEDOR    : Jonatas
  * DATA DE CRIACAO  : 16/08/2017
  ************************************************************************************************/
  Function Fn_BIO_AguardaOuEfetiva(pColetaRowType t_arm_coleta%rowtype, 
                                   pUsuario t_Arm_coleta.Usu_Usuario_Codigo_Cad%type)
     return Boolean
   as
     vCount integer := 1;
  begin
    
    if(pColetaRowType.Fcf_Tpcarga_Codigo in ('01','33','34')) then
  
      Select count(*)
        into vCount 
        from Tdvadm.t_usu_aplicacaoperfil ap
       where ap.usu_aplicacao_codigo = 'jcoleta'
         and ap.usu_perfil_codigo    = 'BIO_EFETIVA_TPCARGA'
         and lower(ap.usu_usuario_codigo) = rpad(lower(pUsuario),10,' ');
    
    end if;

    return vCount = 0;
  end Fn_BIO_AguardaOuEfetiva;
  
  
  
  /********************************************************************************************************
  * CREATE BY: JONATAS VELOSO
  * DATE: 08/10/2019
  *********************************************************************************************************/
  Procedure Sp_BIO_EfetivarColeta(pColetaNumero       in t_arm_coleta.arm_coleta_ncompra%type,
                                  pColetaCiclo        in t_arm_coleta.arm_coleta_ciclo%type,
                                  pMensagemEfeticacao out varchar2,
                                  pStatus             out varchar2,
                                  pMessage            out varchar2)
   as
    vEmailUsuario        varchar2(1000);
    vEmailsCopia         varchar2(2000);
    vCorpoEmail          varchar2(4000) := '';
    vMensagemEfeticacao  varchar2(4000) := '';
    vAssunto             Varchar2(1000) := 'Coleta gerada/efetivada com sucesso[ '||pColetaNumero||' - '||pColetaCiclo||' ]';
    vEmailOrigem         varchar2(1000) := 'coletaweb@dellavolpe.com.br';
    vAguardarAutorizacao boolean := false;
    vColetaRowType       t_arm_Coleta%RowType;
    vOcorrencia          t_arm_coleta.arm_coletaocor_codigo%type := null;
  begin

    begin
    
      vColetaRowType := Fn_Get_ColetaRowType(pColetaNumero, pColetaCiclo);     

      --Aqui vai a regra EFETVIAR COLETA
      
      vAguardarAutorizacao := Fn_BIO_AguardaOuEfetiva(vColetaRowType ,vColetaRowType.Usu_Usuario_Codigo_Cad);
      
      if vAguardarAutorizacao then
         vOcorrencia := '65'; 
      end if;

      update tdvadm.t_Arm_coleta c
         set c.arm_coletaocor_codigo = vOcorrencia
       where c.arm_coleta_ncompra = vColetaRowType.Arm_Coleta_Ncompra
         and c.arm_coleta_ciclo   = vColetaRowType.Arm_Coleta_Ciclo;
  
      commit;
      ----------------------------------------------------------------------------------------------------------------------------------
      -- Monta Mensagem do Email de Efeticação
      -- a mesma mensagem de Email será exibida no front-end no momento da Efetivação
      ----------------------------------------------------------------------------------------------------------------------------------
      vMensagemEfeticacao := vMensagemEfeticacao || '<h3>Coleta Efetivada com sucesso</h3>';
      vMensagemEfeticacao := vMensagemEfeticacao || 'Coleta Numero.: ' || pColetaNumero || ' - ' || pColetaCiclo || '<hr/>';
      vMensagemEfeticacao := case when vAguardarAutorizacao = true then vMensagemEfeticacao || '<h3 style="color:red;">Aguardando autorização da coleta aprovador: luiza.lopes@biosev.com</h3>'
                               else vMensagemEfeticacao
                             end;

      ---------------------------------------------------------------------------------------------------------
      -- EMAIL EFETIVAÇÃO VLI
      -- obtenho os emails do usuário e os envolvidos na coleta para copia
      -- Sp_Get_EmailColeta vai popular:
      -- ==> vEmailUsuario com o email do usuário que cadastrou a Coleta
      -- ==> vEmailsCopia com os emails do Armazem
      ---------------------------------------------------------------------------------------------------------
      Sp_Get_EmailColeta(pColetaNumero, pColetaCiclo, vEmailUsuario, vEmailsCopia, pStatus, pMessage);

      pMensagemEfeticacao  := vMensagemEfeticacao || pMensagemEfeticacao || '<br/><b>E-mails enviados para:</b>'|| vEmailUsuario||';'||vEmailsCopia||'<br/>';

      vCorpoEmail := vMensagemEfeticacao || Fn_Get_MessageInfoColeta(pColetaNumero, pColetaCiclo, vAguardarAutorizacao);

      vEmailsCopia := case
                        when length(vEmailsCopia) > 5 then vEmailsCopia --||';jonatas.veloso@dellavolpe.com.br';
                      end;

      begin
        wservice.pkg_glb_email.SP_ENVIAEMAIL(vAssunto,
                                             vCorpoEmail,
                                             vEmailOrigem,
                                             vEmailUsuario,
                                             vEmailsCopia);
      exception when others then
        vAssunto    := 'ERRO ao tentar enviar Email da Coleta: '||pColetaNumero||' - '||pColetaCiclo;
        vCorpoEmail := 'ERRO ao tentar enviar Email da Coleta: '||pColetaNumero||' - '||pColetaCiclo||
                     ' - Usuario: '||vColetaRowType.Usu_Usuario_Codigo_Cad||' - '||sqlerrm;
        wservice.pkg_glb_email.SP_ENVIAEMAIL(vAssunto,
                                             vCorpoEmail,
                                             vEmailOrigem
                                             );
      end;

      pStatus   := Status_normal;
      pMessage  := vMensagemEfeticacao;
    exception when others then
      pStatus   := Status_normal;
      pMessage  := 'Erro ao processar Pkg_Col_Coleta.Sp_BIO_EfetivarColeta. Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;

  end Sp_BIO_EfetivarColeta;  
  
  
    function Fn_PARANA_RestringeAutoriza(pColetaRowType in t_arm_coleta%RowType,
                                    pUsuarioAutorizador  in t_arm_coleta.usu_usuario_codigoautoriza%type)
    return boolean
  as
    vRestringir boolean := false;
    vCount integer := 0;
   
   begin

    if Fn_PARANA_IsColetaPARANA( pColetaRowType ) = true then
      /** Usuario VLI que podem autorizar
        Danilo Braga danilo.braga2@vli-logistica.com.br
        Fabricio Viana Cunha fabricio.cunha@vli-logistica.com.br
        Lucas Fernandes Silva lucas.fernandes.silva@vli-logistica.com.br
        Wagner Batista da Costa wagner.batista@vli-logistica.com.br
      **/
      select count(*)
      into vCount
      from TDVADM.T_ARM_PERMITEAUTORIZAR U 
      WHERE lower(u.usu_usuario_codigo) = lower(rpad(pUsuarioAutorizador,10,' '))
      AND U.GLB_GRUPOECONOMICO_CODIGO = GrupoEconomicoPARANA;

      -- Se vCount for igual a 0 o usuário não está na lista de usuários permitidos e a autorização deve ser restringida
      vRestringir := vCount = 0;
    end if;

    return vRestringir;
  end Fn_PARANA_RestringeAutoriza;
  
  
    /*********************************************************************************************
  * Data..: 25/05/2020
  * Autor.: Gustavo Vocatore, Rafael Franca
  * Validações de Campos:
  * Regra Tipo expresso
  **********************************************************************************************/
  Function Fn_PRA_ValidaCampos(pColetaRowType in t_arm_coleta%RowType,
                               pStatus        out char,
                               pMessage       out varchar2)return boolean
  as
    vGrupoEconomicoPagadorFrete t_glb_cliente.glb_grupoeconomico_codigo%Type;
    vUsuarioEmail tdvadm.t_usu_usuario.usu_usuario_email%Type;
  begin
    Begin
          begin
            Select c.glb_grupoeconomico_codigo
               Into vGrupoEconomicoPagadorFrete
               From t_glb_cliente c
               where trim(c.glb_cliente_cgccpfcodigo) = trim(pColetaRowType.Arm_Coleta_Cnpjpagadorferete);
          exception when no_data_found then
            pStatus := Status_Erro;
            pMessage:= 'CNPJ não encontrado na base de Dados';
            return false;
          end;
          
          
          
    if(vGrupoEconomicoPagadorFrete = GrupoEconomicoPRA ) then  
   
        SELECT U.USU_USUARIO_EMAIL
            INTO vUsuarioEmail
        FROM TDVADM.T_USU_USUARIO U
        WHERE U.USU_USUARIO_CODIGO = pColetaRowType.Usu_Usuario_Codigo_Cad;
    
        if(Instr(vUsuarioEmail, '@prada') = 0) then
          pStatus  := Status_warning;
          pMessage := 'Apenas usuarios prada tem liberação para solicitar coleta';
          return false;
        end if;
     end if;

     pStatus  := Status_normal;
     pMessage := 'Processamento Normal';
     return true;
     
    exception when others then
      pStatus  := Status_erro;
      pMessage := 'Fn_PRA_ValidaCampos: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
      return   false;
    end;
  end Fn_PRA_ValidaCampos;

  /*********************************************************************************************
  * Data..: 18/10/2019
  * Autor.: Jonatas Veloso
  * Validações de Campos:
  * Regra Tipo Carga(Fcf_Tpcarga_Codigo):
  **********************************************************************************************/
  Function Fn_BIO_ValidaCampos(pColetaRowType in t_arm_coleta%RowType,
                               pStatus        out char,
                               pMessage       out varchar2)return boolean
  as
    vGrupoEconomicoPagadorFrete t_glb_cliente.glb_grupoeconomico_codigo%Type;
    
    
  begin
    Begin
          begin
            Select c.glb_grupoeconomico_codigo
               Into vGrupoEconomicoPagadorFrete
               From t_glb_cliente c
               where trim(c.glb_cliente_cgccpfcodigo) = trim(pColetaRowType.Arm_Coleta_Cnpjpagadorferete);
          exception when no_data_found then
            pStatus := Status_Erro;
            pMessage:= 'CNPJ não encontrado na base de Dados';
            return false;
          end;
          
    if(vGrupoEconomicoPagadorFrete = GrupoEconomicoBIO ) then  
	      if ( trim(nvl(pColetaRowType.Fcf_Tpcarga_Codigo, 'null')) in ('33','34') ) then
          if (nvl(pColetaRowType.Fcf_Tpveiculo_Codigo,'null') = 'null') then
             pStatus  := Status_warning;
             pMessage := 'Para tipo de Carga Expresso D0 ou D1, o Tipo de Veiculo é obrigatório!'||chr(13);
            return false;
          end if;
        end if;   
        
     /*   if length(trim(nvl(pColetaRowType.Arm_Coleta_Pedido,'0'))) != 10 then
            pStatus  := Status_warning;
            pMessage := 'Numero do pedido tem que ter 10 caracteres.';
            return false;
        end if;  */      
     end if;
     
     if(trim(pColetaRowType.Arm_Coleta_Pedido) is null) then 
        pStatus  := Status_warning;
        pMessage := 'Número do Pedido está nulo, favor preencher!'||chr(13);
        return false;
     end if;

     pStatus  := Status_normal;
     pMessage := 'Processamento Normal';
     return true;
     
    exception when others then
      pStatus  := Status_erro;
      pMessage := 'Erro ao validar Fn_BIO_ValidaCampos Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
      return   false;
    end;
  end Fn_BIO_ValidaCampos;
  
  /*********************************************************************************************
  * Data..: 09/JULHO/2021
  * Autor.: Tatiane
  * Regra para saber se a coleta é da SOLTEC
  **********************************************************************************************/
  function Fn_SOL_IsColetaSOLTEC(pColetaRowType in t_arm_coleta%rowType) return boolean
  as
    vGrupoPagador       t_glb_grupoeconomico.glb_grupoeconomico_codigo%type;
    vIsSOLSev           boolean := false;
  begin
      --------------------------------------------------------------
      -- Obtem o Grupo economico do pagador da Coleta.
      --------------------------------------------------------------
      begin
        Select c.glb_grupoeconomico_codigo
           Into vGrupoPagador
           From t_glb_cliente c
           where c.glb_cliente_cgccpfcodigo = rpad(pColetaRowType.ARM_COLETA_CNPJPAGADORFERETE,20,' ');
      exception when no_data_found then
        vGrupoPagador := null;
      end;
      
    vIsSOLSev := (vGrupoPagador = GrupoEconomicoSOL);
    return vIsSOLSev;
  end Fn_SOL_IsColetaSOLTEC;    
  
  /*********************************************************************************************
  * Data..: 08/07/2021
  * Autor.: Tatiane 
  * Validações de Campos:
  **********************************************************************************************/
  Function Fn_SOL_ValidaCampos(pColetaRowType in t_arm_coleta%RowType,
                               pStatus        out char,
                               pMessage       out varchar2)return boolean
  as
    --vIsValid boolean := true;
    vValidaSoltec number(19);
    vGrupoEconomicoPagadorFrete t_glb_cliente.glb_grupoeconomico_codigo%Type;
  begin

    if ( Fn_SOL_IsColetaSOLTEC(pColetaRowType) = True ) then
      select count(*)
       into vValidaSoltec
       from tdvadm.t_usu_aplicacaoperfil p
      where p.usu_aplicacao_codigo = 'jcoleta'
        and p.usu_perfil_codigo = 'SOLTEC_SOLICITA_COLETA'
        and p.usu_usuario_codigo = rpad(lower(trim(pColetaRowType.usu_usuario_codigo_cad)), 10);
     
     vValidaSoltec := nvl(Trim(vValidaSoltec), 0);
         
     if(vValidaSoltec = 0) then
       pStatus  := Status_Warning;
       pMessage := 'Usuário não autorizado para criar coletas SOLTEC.';
       return false;
     end if;
  
    if length(pColetaRowType.Arm_Coleta_Pedido) < 6 then
        pStatus  := Status_warning;
        pMessage := 'Número do Pedido tem que ter no mínimo 6 caracteres.';
        return false;
     end if;
     
     if(trim(pColetaRowType.Arm_Coleta_Pedido) is null) then 
        pStatus  := Status_warning;
        pMessage := 'Número do Pedido está nulo, favor preencher!'||chr(13);
        return false;
     end if;
     
    end if;
    
     pStatus  := Status_normal;
     pMessage := 'Processamento Normal';
     return true;
  end Fn_SOL_ValidaCampos;
  
  
  /*********************************************************************************************
  * Data..: 25/05/2020
  * Autor.: Gustavo Vocatore, Rafael Franca
  * Validações de Campos:
  * Regra Tipo expresso
  **********************************************************************************************/
  Function Fn_AGL_ValidaCampos(pColetaRowType in t_arm_coleta%RowType,
                               pStatus        out char,
                               pMessage       out varchar2)return boolean
      as
        vGrupoEconomicoPagadorFrete t_glb_cliente.glb_grupoeconomico_codigo%Type;
        vUsuarioEmail tdvadm.t_usu_usuario.usu_usuario_email%Type;
    begin
      Begin
            begin
              Select c.glb_grupoeconomico_codigo
                 Into vGrupoEconomicoPagadorFrete
                 From t_glb_cliente c
                 where trim(c.glb_cliente_cgccpfcodigo) = trim(pColetaRowType.Arm_Coleta_Cnpjpagadorferete);
            exception when no_data_found then
              pStatus := Status_Erro;
              pMessage:= 'CNPJ não encontrado na base de Dados';
              return false;
            end;
            
            
            
      if(vGrupoEconomicoPagadorFrete = GrupoEconomicoAGL )  then
     
          SELECT U.USU_USUARIO_EMAIL
              INTO vUsuarioEmail
          FROM TDVADM.T_USU_USUARIO U
          WHERE U.USU_USUARIO_CODIGO = pColetaRowType.Usu_Usuario_Codigo_Cad;
      
         /* if(pColetaRowType.Arm_Coleta_Tpcoleta = 'E' and Instr(vUsuarioEmail, '@anglo') = 0) then
            pStatus  := Status_warning;           
            pMessage := 'Apenas usuarios anglo tem liberação para solicitar coleta expressa';
            return false;
          end if;*/
          
         if(pColetaRowType.Arm_Coleta_Tpcoleta = 'E') then
            pStatus  := Status_warning;
            pMessage := 'Coleta anglo minerio não pode ser solicitado expresso';
            return false;
          end if;
       end if;

       pStatus  := Status_normal;
       pMessage := 'Processamento Normal';
       return true;
       
      exception when others then
        pStatus  := Status_erro;
        pMessage := 'Fn_AGL_ValidaCampos: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
        return   false;
      end;
    end Fn_AGL_ValidaCampos;
  
 /*********************************************************************************************
  * Data..: 25/05/2020
  * Autor.: Gustavo Vocatore, Rafael Franca
  * Validações de Campos:
  * Regra Tipo expresso
  **********************************************************************************************/
  Function Fn_AGN_ValidaCampos(pColetaRowType in t_arm_coleta%RowType,
                               pStatus        out char,
                               pMessage       out varchar2)return boolean
  as
    vGrupoEconomicoPagadorFrete t_glb_cliente.glb_grupoeconomico_codigo%Type;
    vUsuarioEmail tdvadm.t_usu_usuario.usu_usuario_email%Type;
  begin
    Begin
          begin
            Select c.glb_grupoeconomico_codigo
               Into vGrupoEconomicoPagadorFrete
               From t_glb_cliente c
               where trim(c.glb_cliente_cgccpfcodigo) = trim(pColetaRowType.Arm_Coleta_Cnpjpagadorferete);
          exception when no_data_found then
            pStatus := Status_Erro;
            pMessage:= 'CNPJ não encontrado na base de Dados';
            return false;
          end;
          
          
          
    if(vGrupoEconomicoPagadorFrete = GrupoEconomicoAGN ) then  
   
        SELECT U.USU_USUARIO_EMAIL
            INTO vUsuarioEmail
        FROM TDVADM.T_USU_USUARIO U
        WHERE U.USU_USUARIO_CODIGO = pColetaRowType.Usu_Usuario_Codigo_Cad;
    
       /* if(pColetaRowType.Arm_Coleta_Tpcoleta = 'E' and Instr(vUsuarioEmail, '@anglo') = 0) then
          pStatus  := Status_warning;
          pMessage := 'Apenas usuarios anglo tem liberação para solicitar coleta expressa';
          return false;
        end if;*/
        
       if(pColetaRowType.Arm_Coleta_Tpcoleta = 'E' and trim (pColetaRowType.Fcf_Tpcarga_Codigo) = '02' ) then
          pStatus  := Status_warning;
          pMessage := 'Coleta anglo niquel não pode ser solicitado expresso,com tipo de carga fracionada';
          return false;
        end if;
        
       if(pColetaRowType.Arm_Coleta_Tpcoleta = 'N' and trim (pColetaRowType.Fcf_Tpcarga_Codigo) = '03' ) then
          pStatus  := Status_warning;
          pMessage := 'Coleta anglo niquel do tipo de carga expressa km so pode ser solicitado do tipo expresso';
          return false;
        end if;
     end if;

     pStatus  := Status_normal;
     pMessage := 'Processamento Normal';
     return true;
     
    exception when others then
      pStatus  := Status_erro;
      pMessage := 'Fn_AGN_ValidaCampos: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
      return   false;
    end;
  end Fn_AGN_ValidaCampos;
  
  Function Fn_PET_ValidaCampos(pColetaRowType in t_arm_coleta%rowType,
                                    pStatus        out char,
                                    pMessage       out varchar2)
    return boolean
  as
    vIsValid boolean := true;
  begin

    if ( Fn_PET_IsColetaPET(pColetaRowType) = true ) then
      
        if ( TRIM(pColetaRowType.Arm_Coleta_Tpcoleta) = 'E' ) then      
           pStatus := Status_Warning;
           vIsValid := false;
           pMessage := 'Coleta expressa não pode ser solicitada';
           return vIsValid;
       end if;                       
    end if;
    
    pStatus := 'N';
    pMessage:= null;
    return vIsValid;
  end Fn_PET_ValidaCampos;
  
  
  Function Fn_OWE_ValidaCampos(pColetaRowType in t_arm_coleta%rowType,
                                    pStatus        out char,
                                    pMessage       out varchar2)
    return boolean
  as
    vIsValid boolean := true;
  begin

    if ( Fn_OWE_IsColetaOWE(pColetaRowType) = true ) then
      
        if ( TRIM(pColetaRowType.Arm_Coleta_Tpcoleta) = 'E' and trim(pColetaRowType.Fcf_Tpcarga_Codigo) = '02' ) then      
           pStatus := Status_Warning;
           vIsValid := false;
           pMessage := 'Coleta não válida, para prioridade expresso, alterar tipo de carga para Lotacao';
           return vIsValid;
       end if;                       
    end if;
    
    pStatus := 'N';
    pMessage:= null;
    return vIsValid;
  end Fn_OWE_ValidaCampos;
  
  function Fn_OWE_RestringeAutoriza(pColetaRowType in t_arm_coleta%RowType,
                                    pUsuarioAutorizador  in t_arm_coleta.usu_usuario_codigoautoriza%type)
    return boolean
  as
    vRestringir boolean := false;
    vCount integer := 0;
    vGrupoOWENS               t_glb_grupoeconomico.glb_grupoeconomico_codigo%type;

  begin

    if Fn_OWE_IsColetaOWE( pColetaRowType ) = true then
  
      begin
        Select c.glb_grupoeconomico_codigo
           Into vGrupoOWENS
           From t_glb_cliente c
           where c.glb_cliente_cgccpfcodigo = rpad(pColetaRowType.Arm_Coleta_Cnpjpagadorferete,20,' ');
      exception when no_data_found then
        vGrupoOWENS := null;
      end;
      
      if(vGrupoOWENS = GrupoEconomicoOWE) then
      
        select count(*)
        into vCount
        from TDVADM.T_ARM_PERMITEAUTORIZAR U 
        WHERE lower(u.usu_usuario_codigo) = lower(rpad(pUsuarioAutorizador,10,' '))
        AND U.GLB_GRUPOECONOMICO_CODIGO = GrupoEconomicoOWE;
                -- Se vCount for igual a 0 o usuário não está na lista de usuários permitidos e a autorização deve ser restringida
        vRestringir := vCount = 0;
      end if;
      
    end if;

    return vRestringir;
  end Fn_OWE_RestringeAutoriza;
  
  Function Fn_OWE_AguardaOuEfetiva(pColeta t_arm_coleta.arm_coleta_ncompra%type,
                                   pCiclo  t_arm_coleta.arm_coleta_ciclo%type)
    return Boolean
  as
    vIsOWE integer;
  begin
     -------------------------------------------------------------------------------------------
     -- Regra Conforme Sirlano:
     -- Se o Solicitante da Coleta for do Grupo Economico 0704=OWE
     -- a coleta entra como aguardando(ocorrencia=65)
     -------------------------------------------------------------------------------------------
     select count(*)
     into vIsOWE
     from tdvadm.t_arm_coleta co,
          tdvadm.t_glb_cliente cl
     where trim(co.arm_coleta_cnpjpagadorferete) = trim(cl.glb_cliente_cgccpfcodigo) -- ligo usuario_web/solictante com cliente p/ filtrar pelo grupo economico 0074
     and cl.glb_grupoeconomico_codigo IN (GrupoEconomicoOWE) -- Filtro pelo Grupo Economico USI
     and co.arm_coleta_ncompra = pColeta
     and co.arm_coleta_ciclo = pCiclo;

     return vIsOWE > 0;
  end Fn_OWE_AguardaOuEfetiva;
  
  Procedure Sp_OWE_EfetivarColeta(pColetaNumero       in t_arm_coleta.arm_coleta_ncompra%type,
                                   pColetaCiclo        in t_arm_coleta.arm_coleta_ciclo%type,
                                   pMensagemEfeticacao out varchar2,
                                   pStatus             out varchar2,
                                   pMessage            out varchar2)
   as
    vEmailUsuario        varchar2(1000);
    vEmailsCopia         varchar2(2000);
    vCorpoEmail          varchar2(4000) := '';
    vMensagemEfeticacao  varchar2(4000) := '';
    vAssunto             Varchar2(1000) := 'Coleta gerada/efetivada com sucesso[ '||pColetaNumero||' - '||pColetaCiclo||' ]';
    vEmailOrigem         varchar2(1000) := 'coletaweb@dellavolpe.com.br';
    vOcorrencia          tdvadm.t_arm_coletaocor.arm_coletaocor_codigo%type := null;
    vGrupo               varchar2(4);

    vAguardarAutorizacao boolean := false;
    vColetaRowType       t_arm_Coleta%RowType;
    
    -- Tati 01/03/2021 
    vUsuPodeAutorizar    boolean := false;
  begin

    begin
      ----------------------------------------------------------------------------------------------------------------------------------
      -- Obtenho a linha da Coleta que deve ser Efetivada
      ----------------------------------------------------------------------------------------------------------------------------------
      vColetaRowType := Fn_Get_ColetaRowType(pColetaNumero, pColetaCiclo);
      
      --vOcorrencia := '65';  
      --vAguardarAutorizacao := true;   
      
      vUsuPodeAutorizar := Fn_Get_PodeAutorizarColeta(vColetaRowType.Usu_Usuario_Codigo_Cad, vColetaRowType.Arm_Coleta_Cnpjsolicitante);
      
        
      vAguardarAutorizacao := ( Fn_OWE_AguardaOuEfetiva( pColetaNumero, pColetaCiclo ) ) and 
                              ( vUsuPodeAutorizar = False );
      
      if vAguardarAutorizacao = true then
         vOcorrencia := '65';
      end if;  
     
       select c.glb_grupoeconomico_codigo
         into vGrupo
         from tdvadm.t_glb_cliente c
        where trim(c.glb_cliente_cgccpfcodigo) = trim(vColetaRowType.Arm_Coleta_Cnpjpagadorferete);
        
       if(vGrupo = GrupoEconomicoOWE) then 
        
           update t_arm_coleta c
              set c.arm_coletaocor_codigo = vOcorrencia,
                  c.usu_usuario_codigoautoriza = null,
                  c.arm_coleta_dtautoriza = null-- TODO: Eliminar este campo
            where c.arm_coleta_ncompra  = pColetaNumero
              and c.arm_coleta_ciclo    = pColetaCiclo;
           commit;
        
       end if;


      pMensagemEfeticacao := vMensagemEfeticacao;

      ---------------------------------------------------------------------------------------------------------
      -- EMAIL EFETIVAÇÃO VALE
      -- obtenho os emails do usuário e os envolvidos na coleta para copia
      -- Sp_Get_EmailColeta vai popular:
      -- ==> vEmailUsuario com o email do usuário que cadastrou a Coleta
      -- ==> vEmailsCopia com os emails do Armazem
      ---------------------------------------------------------------------------------------------------------
      Sp_Get_EmailColeta(pColetaNumero, pColetaCiclo, vEmailUsuario, vEmailsCopia, pStatus, pMessage);

      pMensagemEfeticacao  := pMensagemEfeticacao || '<br/><b>E-mails enviados para:</b>'|| vEmailUsuario||';'||vEmailsCopia||'<br/>';
      vCorpoEmail := vMensagemEfeticacao || Fn_Get_MessageInfoColeta(pColetaNumero, pColetaCiclo, vAguardarAutorizacao);

      pMensagemEfeticacao := case when vAguardarAutorizacao = true then pMensagemEfeticacao || '<h3 style="color:red;">AGUARDANDO AUTORIZAÇÃO</h3>'||
                                                            '<H5>Prazo de autorização de até 24 horas</H5>
                                                            </br>
                                                            Aguardando autorização da coleta. Aprovadores:</br> tiago.franco@o-i.com  </br>
                                                                                                          Janete.daHora@o-i.com </br>
                                                                                                          Nadine.Nascimento@o-i.com </br>
                                                                                                          josenildo.carvalho@o-i.com'
                             else pMensagemEfeticacao
                             end;

      vEmailsCopia := case
                        when length(vEmailsCopia) > 5 then vEmailsCopia -- ||';fgoes@dellavolpe.com.br;ddamaceno@dellavolpe.com.br'
                        ---else 'fgoes@dellavolpe.com.br;ddamaceno@dellavolpe.com.br'
                      end;

      begin
        wservice.pkg_glb_email.SP_ENVIAEMAIL(vAssunto,
                                             vCorpoEmail,
                                             vEmailOrigem,
                                             vEmailUsuario,
                                             vEmailsCopia);
      exception when others then
        vAssunto    := 'ERRO ao tentar enviar Email da Coleta: '||pColetaNumero||' - '||pColetaCiclo;
        vCorpoEmail := 'ERRO ao tentar enviar Email da Coleta: '||pColetaNumero||' - '||pColetaCiclo||
                     ' - Usuario: '||vColetaRowType.Usu_Usuario_Codigo_Cad||' - '||sqlerrm;
        wservice.pkg_glb_email.SP_ENVIAEMAIL(vAssunto,
                                             vCorpoEmail,
                                             vEmailOrigem
                                             ------------'fgoes@dellavolpe.com.br',
                                             ------------'ddamaceno@dellavolpe.com.br'
                                             );
      end;

      pStatus   := Status_normal;
      pMessage  := vMensagemEfeticacao;
    exception when others then
      pStatus   := Status_normal;
      pMessage  := 'Erro ao processar Pkg_Col_Coleta.Sp_OWE_EfetivarColeta. Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;

  end Sp_OWE_EfetivarColeta;
  
  function Fn_CAR_IsColetaCAR(pColetaRowType in t_arm_coleta%rowType) return boolean
  as
    vGrupoPagador               t_glb_grupoeconomico.glb_grupoeconomico_codigo%type;
    vIsCAR                     boolean := false;
  begin
      --------------------------------------------------------------
      -- Obtem o Grupo economico do cliente destinatario da Coleta.
      --------------------------------------------------------------
      begin
        Select c.glb_grupoeconomico_codigo
           Into vGrupoPagador
           From t_glb_cliente c
           where c.glb_cliente_cgccpfcodigo = rpad(pColetaRowType.ARM_COLETA_CNPJPAGADORFERETE,20,' ');
      exception when no_data_found then
        vGrupoPagador := null;
      end;

    vIsCAR := (vGrupoPagador = (GrupoEconomicoCAR));

    return vIsCAR;
  end Fn_CAR_IsColetaCAR;
  
  
  function Fn_CAR_RestringeAutoriza(pColetaRowType in t_arm_coleta%RowType,
                                    pUsuarioAutorizador  in t_arm_coleta.usu_usuario_codigoautoriza%type)
    return boolean
  as
    vRestringir boolean := false;
    vCount integer := 0;
    vGrupoCAR               t_glb_grupoeconomico.glb_grupoeconomico_codigo%type;

  begin

    if Fn_CAR_IsColetaCAR( pColetaRowType ) = true then
  
      begin
        Select c.glb_grupoeconomico_codigo
           Into vGrupoCAR
           From t_glb_cliente c
           where c.glb_cliente_cgccpfcodigo = rpad(pColetaRowType.Arm_Coleta_Cnpjpagadorferete,20,' ');
      exception when no_data_found then
        vGrupoCAR := null;
      end;
      
      if(vGrupoCAR = GrupoEconomicoCAR) then
      
        select count(*)
        into vCount
        from TDVADM.T_ARM_PERMITEAUTORIZAR U 
        WHERE lower(u.usu_usuario_codigo) = lower(rpad(pUsuarioAutorizador,10,' '))
        AND U.GLB_GRUPOECONOMICO_CODIGO = GrupoEconomicoCAR;
                -- Se vCount for igual a 0 o usuário não está na lista de usuários permitidos e a autorização deve ser restringida
        vRestringir := vCount = 0;
      end if;
      
    end if;

    return vRestringir;
  end Fn_CAR_RestringeAutoriza;
  
  Function Fn_CAR_AguardaOuEfetiva(pColeta t_arm_coleta.arm_coleta_ncompra%type,
                                   pCiclo  t_arm_coleta.arm_coleta_ciclo%type)
    return Boolean
  as
    vIsCAR integer;
  begin
     -------------------------------------------------------------------------------------------
     -- Regra Conforme Sirlano:
     -- Se o Solicitante da Coleta for do Grupo Economico 0551=MINERACAO CARAIBA
     -- a coleta entra como aguardando(ocorrencia=65)
     -------------------------------------------------------------------------------------------
     select count(*)
     into vIsCAR
     from tdvadm.t_arm_coleta co,
          tdvadm.t_glb_cliente cl
     where trim(co.arm_coleta_cnpjpagadorferete) = trim(cl.glb_cliente_cgccpfcodigo) -- ligo usuario_web/solictante com cliente p/ filtrar pelo grupo economico 0551
     and cl.glb_grupoeconomico_codigo IN (GrupoEconomicoCAR) -- Filtro pelo Grupo Economico CAR
     and co.arm_coleta_ncompra = pColeta
     and co.arm_coleta_ciclo = pCiclo;

     return vIsCAR > 0;
  end Fn_CAR_AguardaOuEfetiva;
  
  Function Fn_CAR_ValidaCampos(pColetaRowType in t_arm_coleta%RowType,
                                 pStatus        out char,
                                 pMessage       out varchar2)return boolean
  as
    vGrupoEconomicoPagadorFrete t_glb_cliente.glb_grupoeconomico_codigo%Type;
    vUsuarioEmail tdvadm.t_usu_usuario.usu_usuario_email%Type;
  begin
    Begin
          begin
            Select c.glb_grupoeconomico_codigo
               Into vGrupoEconomicoPagadorFrete
               From t_glb_cliente c
               where trim(c.glb_cliente_cgccpfcodigo) = trim(pColetaRowType.Arm_Coleta_Cnpjpagadorferete);
          exception when no_data_found then
            pStatus := Status_Erro;
            pMessage:= 'CNPJ não encontrado na base de Dados';
            return false;
          end;
          
    if(vGrupoEconomicoPagadorFrete = GrupoEconomicoCAR ) then  
        
       if(pColetaRowType.Arm_Coleta_Tpcoleta = 'E' and trim (pColetaRowType.Fcf_Tpcarga_Codigo) = '02' ) then
          pStatus  := Status_warning;
          pMessage := 'Coleta Mineração Caraíba não pode ser solicitado expresso,com tipo de carga fracionada';
          return false;
        end if;        
          
     end if;

     pStatus  := Status_normal;
     pMessage := 'Processamento Normal';
     return true;
     
    exception when others then
      pStatus  := Status_erro;
      pMessage := 'Fn_AGN_ValidaCampos: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
      return   false;
    end;
  end Fn_CAR_ValidaCampos;
  
  Procedure Sp_CAR_EfetivarColeta(pColetaNumero       in t_arm_coleta.arm_coleta_ncompra%type,
                                   pColetaCiclo        in t_arm_coleta.arm_coleta_ciclo%type,
                                   pMensagemEfeticacao out varchar2,
                                   pStatus             out varchar2,
                                   pMessage            out varchar2)
   as
    vEmailUsuario        varchar2(1000);
    vEmailsCopia         varchar2(2000);
    vCorpoEmail          varchar2(4000) := '';
    vMensagemEfeticacao  varchar2(4000) := '';
    vAssunto             Varchar2(1000) := 'Coleta gerada/efetivada com sucesso[ '||pColetaNumero||' - '||pColetaCiclo||' ]';
    vEmailOrigem         varchar2(1000) := 'coletaweb@dellavolpe.com.br';
    vOcorrencia          tdvadm.t_arm_coletaocor.arm_coletaocor_codigo%type := null;
    vGrupo               varchar2(4);

    vAguardarAutorizacao boolean := false;
    vColetaRowType       t_arm_Coleta%RowType;
    
    
    vUsuPodeAutorizar    boolean := false;
  begin

    begin
      ----------------------------------------------------------------------------------------------------------------------------------
      -- Obtenho a linha da Coleta que deve ser Efetivada
      ----------------------------------------------------------------------------------------------------------------------------------
      vColetaRowType := Fn_Get_ColetaRowType(pColetaNumero, pColetaCiclo);
      
      --vOcorrencia := '65';  
      --vAguardarAutorizacao := true;   
      
      vUsuPodeAutorizar := Fn_Get_PodeAutorizarColeta(vColetaRowType.Usu_Usuario_Codigo_Cad, vColetaRowType.Arm_Coleta_Cnpjsolicitante);
      
        
      vAguardarAutorizacao := ( Fn_CAR_AguardaOuEfetiva( pColetaNumero, pColetaCiclo ) ) and 
                              ( vUsuPodeAutorizar = False );
      
      if vAguardarAutorizacao = true then
         vOcorrencia := '65';
      end if;  
     
       select c.glb_grupoeconomico_codigo
         into vGrupo
         from tdvadm.t_glb_cliente c
        where trim(c.glb_cliente_cgccpfcodigo) = trim(vColetaRowType.Arm_Coleta_Cnpjpagadorferete);
        
       if(vGrupo = GrupoEconomicoCAR) then 
        
           update t_arm_coleta c
              set c.arm_coletaocor_codigo = vOcorrencia,
                  c.usu_usuario_codigoautoriza = null,
                  c.arm_coleta_dtautoriza = null-- TODO: Eliminar este campo
            where c.arm_coleta_ncompra  = pColetaNumero
              and c.arm_coleta_ciclo    = pColetaCiclo;
           commit;
        
       end if;


      pMensagemEfeticacao := vMensagemEfeticacao;

      ---------------------------------------------------------------------------------------------------------
      -- EMAIL EFETIVAÇÃO VALE
      -- obtenho os emails do usuário e os envolvidos na coleta para copia
      -- Sp_Get_EmailColeta vai popular:
      -- ==> vEmailUsuario com o email do usuário que cadastrou a Coleta
      -- ==> vEmailsCopia com os emails do Armazem
      ---------------------------------------------------------------------------------------------------------
      Sp_Get_EmailColeta(pColetaNumero, pColetaCiclo, vEmailUsuario, vEmailsCopia, pStatus, pMessage);

      pMensagemEfeticacao  := pMensagemEfeticacao || '<br/><b>E-mails enviados para:</b>'|| vEmailUsuario||';'||vEmailsCopia||'<br/>';
      vCorpoEmail := vMensagemEfeticacao || Fn_Get_MessageInfoColeta(pColetaNumero, pColetaCiclo, vAguardarAutorizacao);

      pMensagemEfeticacao := case when vAguardarAutorizacao = true then pMensagemEfeticacao || '<h3 style="color:red;">AGUARDANDO AUTORIZAÇÃO</h3>'||
                                                            '<H5>Prazo de autorização de até 24 horas</H5>
                                                            </br>
                                                            Aguardando autorização da coleta. Aprovadores:</br> edicarlos.borges@minacaraiba.com  </br>
                                                                                                          natalia.silva@minacaraiba.com </br>                                                                                                         
                                                                                                          paula.silva@minacaraiba.com </br>                                                                                                          
                                                                                                          wmyrley.goncalves@minacaraiba.com </br>
                                                                                                          maria.oliveira@minacaraiba.com </br>
                                                                                                          ariane.silva@minacaraiba.com'
                             else pMensagemEfeticacao
                             end;

      vEmailsCopia := case
                        when length(vEmailsCopia) > 5 then vEmailsCopia -- ||';fgoes@dellavolpe.com.br;ddamaceno@dellavolpe.com.br'
                        ---else 'fgoes@dellavolpe.com.br;ddamaceno@dellavolpe.com.br'
                      end;

      begin
        wservice.pkg_glb_email.SP_ENVIAEMAIL(vAssunto,
                                             vCorpoEmail,
                                             vEmailOrigem,
                                             vEmailUsuario,
                                             vEmailsCopia);
      exception when others then
        vAssunto    := 'ERRO ao tentar enviar Email da Coleta: '||pColetaNumero||' - '||pColetaCiclo;
        vCorpoEmail := 'ERRO ao tentar enviar Email da Coleta: '||pColetaNumero||' - '||pColetaCiclo||
                     ' - Usuario: '||vColetaRowType.Usu_Usuario_Codigo_Cad||' - '||sqlerrm;
        wservice.pkg_glb_email.SP_ENVIAEMAIL(vAssunto,
                                             vCorpoEmail,
                                             vEmailOrigem
                                             ------------'fgoes@dellavolpe.com.br',
                                             ------------'ddamaceno@dellavolpe.com.br'
                                             );
      end;

      pStatus   := Status_normal;
      pMessage  := vMensagemEfeticacao;
    exception when others then
      pStatus   := Status_normal;
      pMessage  := 'Erro ao processar Pkg_Col_Coleta.Sp_CAR_EfetivarColeta. Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;

  end Sp_CAR_EfetivarColeta;

  /*#######################################################################################################################################
  /*# 10/09/2015 - Fabiano Góes - Area especifica para Regras AMT=Arcelomittla
  /*#######################################################################################################################################*/


  /************************************************************************************************
   * PROGRAMA         : ColetaWeb
   * DESENVOLVEDOR    : Fabiano
   * DATA DE CRIACAO  : 10/09/2015
   * Versão           : 2.0 - Refactor
   * FUNCINALIDADE    : Efetivar a Coleta após ser digitados os items
   * PARTICULARIDADES : Após digitar os dados da Coleta a mesma é salva para ser gerado um numero,
   *                    Porém, neste momento a Coleta recebe um ocorrencia[64] - Coleta Pendente,
   *                    Apenas após ser digitados dos item a Coleta deve ser Efetivada. e neste
   * OBS..............: Esta procedure trata de regras para Efetivar uma Coleta Arcelomittal
   * PARAM. OBRIGAT.  : pColetaNumero | pColetaCiclo = Chave da Coleta
   *                    pStatus = E=ERRO, N=Normal
   *                    pMessage = Mensagem de ERRO ou mensagem de Normal quando necessário
   ************************************************************************************************/
   Procedure Sp_AMT_EfetivarColeta(pColetaNumero       in t_arm_coleta.arm_coleta_ncompra%type,
                                   pColetaCiclo        in t_arm_coleta.arm_coleta_ciclo%type,
                                   pMensagemEfeticacao out varchar2,
                                   pStatus             out varchar2,
                                   pMessage            out varchar2)
   as
    vEmailUsuario        varchar2(1000);
    vEmailsCopia         varchar2(2000);
    vCorpoEmail          varchar2(4000) := '';
    vAssunto             Varchar(100);
    vEmailOrigem         varchar2(1000) := 'coletaweb@dellavolpe.com.br';

    vAguardarAutorizacao boolean := false;
    vUsuPodeAutorizar    boolean := false;
    vOcorrencia          tdvadm.t_arm_coletaocor.arm_coletaocor_codigo%type := null;
    vLinhaPreColeta      t_edi_arcelormittal%RowType;
    --vTpCargaCodigo       t_Glb_Tpcarga.Glb_Tpcarga_Codigo%Type;
    vColetaRowType       t_arm_Coleta%RowType;
    vColetaTipo          t_arm_coleta.arm_coleta_tipo%type;
    vColetaTpCompta      t_arm_coleta.arm_coleta_tpcompra%type;
    vEntColeta           t_arm_coleta.arm_coleta_entcoleta%type;
    vColetaObs           t_arm_coleta.arm_coleta_obs%type;

    vPedItem             t_edi_arcelormittal%RowType;
    vIsFornecedorPagador boolean := false;
    vFornecedoresPagador integer;
  begin

    begin
      ----------------------------------------------------------------------------------------------------------------------------------
      -- Obtenho a linha da Coleta que deve ser Efetivada
      ----------------------------------------------------------------------------------------------------------------------------------
      vColetaRowType := Fn_Get_ColetaRowType(pColetaNumero, pColetaCiclo);
      vColetaTipo     := vColetaRowType.Arm_Coleta_Tipo;
      vEntColeta      := vColetaRowType.Arm_Coleta_Entcoleta; -- modalidade
      vColetaTpCompta := vColetaRowType.Arm_Coleta_Tpcompra;

      ----------------------------------------------------------------------------------------------------------------------------------
      -- Verifico se o Usuário que está efeticando é um usuário com permissão de Autorizar Coleta
      -- Isso porque se a colera entrar em alguma regra para Aguardar desconsidero porque o ususário já é o Autorizador
      ----------------------------------------------------------------------------------------------------------------------------------
      vUsuPodeAutorizar := Fn_Get_PodeAutorizarColeta(vColetaRowType.Usu_Usuario_Codigo_Cad, vColetaRowType.Arm_Coleta_Cnpjsolicitante);
      
      Select count(*)
        into vFornecedoresPagador
        from tdvadm.t_arm_autcolcif acc
       where acc.glb_grupoeconomico_codigo = GrupoEconomicoAMT
         and trim(acc.glb_cliente_cgccpfcodigo)  = trim(vColetaRowType.arm_coleta_cnpjpagadorferete) 
         and acc.usu_usuario_codigo = vColetaRowType.usu_usuario_codigo_cad
         and acc.arm_autcolcif_ativo = 'S';

      vIsFornecedorPagador   := (vFornecedoresPagador > 0);

      ----------------------------------------------------------------------------------------------------------------------------------
      -- Se a coleta entrar em alguma regra para Aguardar Autorização:
      -- Seto uma ocorrencia 65=Coleta Aguardando Autorização
      -- Se entrar em regra de Expressa/Emergencial também seta a Coleta
      ----------------------------------------------------------------------------------------------------------------------------------
      vAguardarAutorizacao := ( Fn_AMT_AguardaOuEfetivaEX( pColetaNumero, pColetaCiclo ) ) and ( vUsuPodeAutorizar = False );

      ----------------------------------------------------------------------------------------------------------------------------------
      -- 28/08/2015
      -- Regra Arcelormittal definida entre: Chaves | Cris | Fabiano | Diego
      -- PEDIDO COMO FOB:
      --        > arm_coleta_tipo     = ENTREGA
      --        > arm_coleta_tpcompra = FCA
      -- PEDIDO COMO FOT:
      --        > arm_coleta_tipo     = ENTREGA
      --        > arm_coleta_tpcompra = FCA
      -- PEDIDO COMO EXW:
      --        > arm_coleta_tipo     = COLETAR
      --        > arm_coleta_tpcompra = FOB
      -- SE A COLETA FOR EMERGENCIAL CONSIDERAR SEMPRE:
      --        > arm_coleta_tipo     = COLETAR
      --        > arm_coleta_tpcompra = FOB
      ----------------------------------------------------------------------------------------------------------------------------------
      begin
        vLinhaPreColeta := Pkg_Edi_Precoleta.Fn_Get_PreColetaRowTypePedItem(vColetaRowType.Arm_Coleta_Pedido);
      exception when no_data_found then
        if(vUsuPodeAutorizar = true)then
             Pkg_Edi_Precoleta.Sp_InsertPreColetaPorColeta(vColetaRowType, pStatus, pMessage);
        end if;
        -- atribui nulo para permanecer a regra normalmente
        vLinhaPreColeta := null;
        vLinhaPreColeta.Edi_Arcelormittal_Inconterms := null;
      end;
      
      ----------------------------------------------------------------------------------------------------------------------------------
      -- 11/04/2016 - Fabiano
      -- Regra: Alterar a regra de Inconterms conforme e-mail do sr. Marcio Xavier
      -- Email anexo na issue: #626 - http://192.168.9.207/redmine/issues/626
      -- Quando o Pedido digitado na solicitação da Coleta existir na tabela T_EDI_ARCELORMITTAL como "CIF"
      -- A Coleta deve ser Reprovada.
      -- Setar a Coleta com uma ocorrencia que Cancela Coleta e mencionar na observação o motivo.
      ----------------------------------------------------------------------------------------------------------------------------------
      if (vLinhaPreColeta.Edi_Arcelormittal_Inconterms = 'CIF') and (not vIsFornecedorPagador) then        
         ------------------------------------------------------------
         -- Update para Coleta Cancelada
         ------------------------------------------------------------
         vOcorrencia := '67'; -- 67 = Cancelamento de Coleta
         update t_arm_coleta col
         set col.arm_coletaocor_codigo   = vOcorrencia
         where col.arm_coleta_ncompra    = pColetaNumero
           and col.arm_coleta_ciclo      = LPAD(pColetaCiclo,3,000);   
         commit;
           
         ------------------------------------------------------------
         -- Mensagem para o Usuário
         ------------------------------------------------------------  
         pMensagemEfeticacao := '';   
         pMensagemEfeticacao := pMensagemEfeticacao || '<h3>Coleta <span style="color:red;">Reprovada</span></h3>'; 
         pMensagemEfeticacao := pMensagemEfeticacao || 'Coleta Numero.: ' || pColetaNumero || ' - ' || pColetaCiclo || '<hr/>'; 
         pMensagemEfeticacao := pMensagemEfeticacao || '<span style="color:red;">Conforme Regra ArcelorMittal, Coletas com Pedido CIF devem ser reprovadas</span>';
         vAssunto := 'Coleta [ '||pColetaNumero||' - '||pColetaCiclo||' ] Reprovada conforme Regra ArcelorMittal';
         
         ------------------------------------------------------------
         -- Email informativo de Cancelamento
         ------------------------------------------------------------
         Sp_Get_EmailColeta(pColetaNumero, pColetaCiclo, vEmailUsuario, vEmailsCopia, pStatus, pMessage);
         pMensagemEfeticacao  := pMensagemEfeticacao || '<br/><b>E-mails enviados para:</b>'|| vEmailUsuario||';'||vEmailsCopia||'<br/>';
         vCorpoEmail := pMensagemEfeticacao || Fn_Get_MessageInfoColeta(pColetaNumero, pColetaCiclo, vAguardarAutorizacao);
         wservice.pkg_glb_email.SP_ENVIAEMAIL(vAssunto, vCorpoEmail, vEmailOrigem, vEmailUsuario, vEmailsCopia);         
         
         pStatus   := Status_normal;
         pMessage  := pMensagemEfeticacao;     
         return;             
      end if;

      --if vTpCargaCodigo = 'EX' then
      if vColetaRowType.Glb_Tpcarga_Codigo = 'EX' then
         vColetaTipo      := 'COLETAR';
         vColetaTpCompta  := CASE WHEN vLinhaPreColeta.Edi_Arcelormittal_Inconterms = 'FOB' THEN 'FOB'
                                  WHEN vLinhaPreColeta.Edi_Arcelormittal_Inconterms = 'FOT' THEN 'FCA'
                                  ELSE 'FOB'
                             END;
         vEntColeta       := 'C';
      else
         -- Se nao contem precoleta nao altera modalidade
         if Nvl(vLinhaPreColeta.Edi_Arcelormittal_Inconterms, 'NULL') != 'NULL' then
           
               -- Regra especifica para usuários do Comercial TDV
               if( vIsFornecedorPagador ) and (vColetaRowType.Arm_Coleta_Pagadorfrete = 'R') then
                 vColetaTipo      := CASE WHEN vLinhaPreColeta.Edi_Arcelormittal_Inconterms = 'FOB' THEN 'ENTREGA'
                                           WHEN vLinhaPreColeta.Edi_Arcelormittal_Inconterms = 'FOT' THEN 'ENTREGA'
                                           ELSE 'COLETAR'
                                      END;
                 vColetaTpCompta  := CASE WHEN vLinhaPreColeta.Edi_Arcelormittal_Inconterms = 'FOB' THEN 'FCA'
                                          WHEN vLinhaPreColeta.Edi_Arcelormittal_Inconterms = 'FOT' THEN 'FCA'
                                          ELSE 'FOB'
                                     END;
                 vEntColeta       := CASE WHEN vLinhaPreColeta.Edi_Arcelormittal_Inconterms = 'FOB' THEN 'E'
                                          WHEN vLinhaPreColeta.Edi_Arcelormittal_Inconterms = 'FOT' THEN 'E'
                                          ELSE 'C'
                                     END;             
               else  
                 vColetaTipo      :=  CASE WHEN vLinhaPreColeta.Edi_Arcelormittal_Inconterms = 'FOB' THEN 'ENTREGA'
                                           WHEN vLinhaPreColeta.Edi_Arcelormittal_Inconterms = 'FOT' THEN 'ENTREGA'
                                           ELSE 'COLETAR'
                                      END;
                 vColetaTpCompta  := CASE WHEN vLinhaPreColeta.Edi_Arcelormittal_Inconterms = 'FOB' THEN 'FCA'
                                          WHEN vLinhaPreColeta.Edi_Arcelormittal_Inconterms = 'FOT' THEN 'FCA'
                                          ELSE 'FOB'
                                     END;
                 vEntColeta       := CASE WHEN vLinhaPreColeta.Edi_Arcelormittal_Inconterms = 'FOB' THEN 'E'
                                          WHEN vLinhaPreColeta.Edi_Arcelormittal_Inconterms = 'FOT' THEN 'E'
                                          ELSE 'C'
                                     END;

                   -- Regra pode quebrar regra acima, caso tenha algum item que seja diferente de EXW
                   -- Diego Lirio - 12/11/2015
                   for copeit in ( select *
                                     from t_arm_coletapedidoitem cpi
                                     where cpi.arm_coleta_ncompra = pColetaNumero
                                       and cpi.arm_coleta_ciclo   = pColetaCiclo)
                   loop
                      vPedItem := Pkg_Edi_Precoleta.Fn_Get_PreColetaRowType(copeit.edi_arcelormittal_pedido, copeit.edi_arcelormittal_itempedido);
                      if(vPedItem.Edi_Arcelormittal_Inconterms != 'EXW')then
                          vColetaTipo     := 'ENTREGA';
                          vEntColeta      := 'E'; -- modalidade
                          vColetaTpCompta := 'FCA';
                      end if;
                   end loop;
                   
               end if; -- if( vIsUsuComercial ) then

          end if; -- if Nvl(vLinhaPreColeta.Edi_Arcelormittal_Inconterms, 'NULL') != 'NULL' then

      end if;


      vColetaObs := 'Pedido: '||fn_TrimASCII( nvl(vLinhaPreColeta.Edi_Arcelormittal_Inconterms, 'Pedido inválido' ))||' - '||
                    'Inconterms: '||vLinhaPreColeta.Edi_Arcelormittal_Inconterms;

      ----------------------------------------------------------------------------------------------------------------------------------
      -- Update necessátio conforme regra de Autorização
      ----------------------------------------------------------------------------------------------------------------------------------
      if (vAguardarAutorizacao = true) and (not vIsFornecedorPagador) then
         vOcorrencia := '65';
      end if;    

      update t_arm_coleta col
      set --col.arm_coletaocor_codigo      = vOcorrencia,
          col.arm_coleta_dtautoriza      = Case when Nvl(vOcorrencia, '-1') = '-1' Then sysdate
                                             else vColetaRowType.arm_coleta_dtautoriza
                                           End,
          col.arm_coleta_tipo            = vColetaTipo, -- ENTREGA / COLETAR
          col.arm_coleta_tpcompra        = vColetaTpCompta,
          col.arm_coleta_obs             = col.arm_coleta_obs ||' - '|| vColetaObs,
          col.usu_usuario_codigoautoriza = Case when Nvl(vOcorrencia, '-1') = '-1' Then vColetaRowType.usu_usuario_codigo_cad -- TODO: Diego | usuario nao passa na efetiva, usa o usuario cadastro
                                             else vColetaRowType.usu_usuario_codigoautoriza
                                           End,
          col.arm_coleta_entcoleta       = vEntColeta -- E / C
      where col.arm_coleta_ncompra    = pColetaNumero
        and col.arm_coleta_ciclo      = LPAD(pColetaCiclo,3,000)
        and col.arm_coletaorigem_cod  = 4;

       --------------------------------------------------------------------------------------------------
       -- Se tem mais de um Item/Pedido aplico a regra
       -- Executo a regra para verificar se a Coleta será COLETAR/ENTREGAR
       -- conforme Iconterms dos Itens/Pedido da Pré Coleta
       --------------------------------------------------------------------------------------------------
       Sp_AMT_SetColetaEntrega(pColetaNumero, pColetaCiclo, pStatus, pMessage);
       if pStatus != 'N' then
         raise_application_error(-20001, 'Erro ao aplicar a regra de Icontems >> '||pMessage);
       end if;

      ----------------------------------------------------------------------------------------------------------------------------------
      -- Fabiano Góes - 09/03/2016
      -- Regra Colicitada pelo Chaves através de e-mail em  03/03/2016
      -- Para Coletas AMT, toda Coleta com Tipo de Carga Lotação deve entrar como modalidade = COLETAR
      -- Fcf_Tpcarga_Codigo = 01 >> LOTAÇÃO
      -- Fcf_Tpcarga_Codigo = 02 >> FRACIONADO
      -- Obs.: Essa regra pode sobrepor alguma regra aplicada acima
      ----------------------------- -----------------------------------------------------------------------------------------------------
      if trim(nvl(vColetaRowType.Fcf_Tpcarga_Codigo, '02')) = '01' then
        vColetaTipo := 'COLETAR';
        vEntColeta  := 'C'; 
        update t_arm_coleta col
        set col.arm_coleta_tipo            = vColetaTipo, -- ENTREGA / COLETAR
            col.arm_coleta_entcoleta       = vEntColeta -- E / C
        where col.arm_coleta_ncompra    = pColetaNumero
          and col.arm_coleta_ciclo      = LPAD(pColetaCiclo,3,000)
          and col.arm_coletaorigem_cod  = 4;           
      end if;  

      ----------------------------------------------------------------------------------------------------------------------------------
      -- Monta Mensagem do Email de Efeticação
      -- a mesma mensagem de Email será exibida no front-end no momento da Efetivação
      ----------------------------------------------------------------------------------------------------------------------------------
      pMensagemEfeticacao := pMensagemEfeticacao || '<h3>Coleta Efetivada com sucesso</h3>';
      pMensagemEfeticacao := pMensagemEfeticacao || 'Coleta Numero.: ' || pColetaNumero || ' - ' || pColetaCiclo || '<hr/>';
      pMensagemEfeticacao := pMensagemEfeticacao || '<h2 style="color:red;">'|| Case when vColetaRowType.Glb_Tpcarga_Codigo = 'EX' then 'Emergencial'
                                                                                  else ''
                                                                                End || '</h2>';
      pMensagemEfeticacao := case when vAguardarAutorizacao = true then pMensagemEfeticacao || '<h3 style="color:red;">AGUARDANDO AUTORIZAÇÃO da AMT</h3>'||
                                                                        '<H5>Prazo de autorização de até 24 horas</H5>'
                               else pMensagemEfeticacao
                             end;

      pMensagemEfeticacao := pMensagemEfeticacao || Case
                                                      when vLinhaPreColeta.Edi_Arcelormittal_Inconterms = 'EXW' THEN  '<h3 style="color:red;">A Transportes Della Volpe COLETARÁ a Carga</h3><br/>'
                                                      --when vColetaRowType.Arm_Coleta_Entcoleta = 'C' THEN  '<h3 style="color:red;">A Transportes Della Volpe COLETARÁ a Carga</h3><br/>'
                                                      when vEntColeta = 'C' THEN  '<h3 style="color:red;">A Transportes Della Volpe COLETARÁ a Carga</h3><br/>'
                                                      ELSE '<h3 style="color:red;">Transportes Della Volpe está AGUARDANDO a entrega</h3><br/>'
                                                    END;

      vAssunto    := case when vAguardarAutorizacao then 'Coleta gerada AGUARDANDO AUTORIZAÇÃO[ '||pColetaNumero||' - '||pColetaCiclo||' ]'
                       else 'Coleta gerada com sucesso[ '||pColetaNumero||' - '||pColetaCiclo||' ]'
                     end;

      ---------------------------------------------------------------------------------------------------------
      -- EMAIL EFETIVAÇÃO ARCELOMITTAL
      -- obtenho os emails do usuário e os envolvidos na coleta para copia
      -- Sp_Get_EmailColeta vai popular:
      -- ==> vEmailUsuario com o email do usuário que cadastrou a Coleta
      -- ==> vEmailsCopia com os emails do Armazem
      ---------------------------------------------------------------------------------------------------------
      Sp_Get_EmailColeta(pColetaNumero, pColetaCiclo, vEmailUsuario, vEmailsCopia, pStatus, pMessage);

      pMensagemEfeticacao  := pMensagemEfeticacao || '<br/><b>E-mails enviados para:</b>'|| vEmailUsuario||';'||vEmailsCopia||'<br/>';

      vCorpoEmail := pMensagemEfeticacao || Fn_Get_MessageInfoColeta(pColetaNumero, pColetaCiclo, vAguardarAutorizacao);

      vEmailsCopia := case
                        when length(vEmailsCopia) > 5 then vEmailsCopia --||';fgoes@dellavolpe.com.br;ddamaceno@dellavolpe.com.br'
                        --else 'fgoes@dellavolpe.com.br;ddamaceno@dellavolpe.com.br'
                      end;

      begin
        wservice.pkg_glb_email.SP_ENVIAEMAIL(vAssunto,
                                             vCorpoEmail,
                                             vEmailOrigem,
                                             vEmailUsuario,
                                             vEmailsCopia);
      exception when others then
        vAssunto    := 'ERRO ao tentar enviar Email da Coleta: '||pColetaNumero||' - '||pColetaCiclo;
        vCorpoEmail := 'ERRO ao tentar enviar Email da Coleta: '||pColetaNumero||' - '||pColetaCiclo||
                     ' - Usuario: '||vColetaRowType.Usu_Usuario_Codigo_Cad||' - '||sqlerrm;
        wservice.pkg_glb_email.SP_ENVIAEMAIL(vAssunto,
                                             vCorpoEmail,
                                             vEmailOrigem
                                             --'fgoes@dellavolpe.com.br',
                                             --'ddamaceno@dellavolpe.com.br'
                                             );
      end;

      -- TODO: add usuario alterou no UPDATE
      update t_arm_coleta col
      set col.arm_coletaocor_codigo   = vOcorrencia
      where col.arm_coleta_ncompra    = pColetaNumero
        and col.arm_coleta_ciclo      = LPAD(pColetaCiclo,3,000)
        and col.arm_coletaorigem_cod  = 4;

      --insert into t_glb_sql(glb_sql_instrucao,glb_sql_dtgravacao,glb_sql_programa)
      --values('Efetivar [ '||pColetaNumero||' - '||pColetaCiclo||' - '||pMensagemEfeticacao,sysdate, 'ColetaEfetivar');
      --commit;

      commit;
      pStatus   := Status_normal;
      pMessage  := pMensagemEfeticacao;
    exception when others then
      rollback;
      pStatus   := Status_Erro;
      pMessage  := 'Erro ao processar Pkg_Col_Coleta.Sp_AMT_EfetivarColeta. Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;

  end Sp_AMT_EfetivarColeta;

  /*********************************************************************************************
  * Data..: 22/08/2015
  * Autor.: Fabiano Góes
  * Versão: 2.0 - Refactor
  * |-------------------------------------------------------------
  * |   Coleta   |  PreColeta   |
  * |-------------------------------------------------------------
  * |   E        |  E           | Entra Autorizada
  * |   Normal   |  E           | Transforma em [E] já Autorizada
  * |   E        |  Normal      | Entra AGUARDANDO
  * TODO:
  * Refatorar para separar regra de autorização/transformar em Expressa/Emergencial e regra de Aguardar
  **********************************************************************************************/
  Function Fn_AMT_AguardaOuEfetivaEX(pColeta t_arm_coleta.arm_coleta_ncompra%type,
                                     pCiclo  t_arm_coleta.arm_coleta_ciclo%type)
    return Boolean
  as
    vAguardar           boolean := false;
    vTipoCarga          t_arm_coleta.glb_tpcarga_codigo%type;
    vPreColetaRow       t_edi_arcelormittal%rowtype;
    vPedido             t_edi_arcelormittal.edi_arcelormittal_pedido%type;
    vItemPedido         t_edi_arcelormittal.edi_arcelormittal_itempedido%type;
    vCliRementCNPJ      t_arm_coleta.glb_cliente_cgccpfcodigocoleta%type;
    vUsuSolicitanteCNPJ t_arm_coleta.arm_coleta_cnpjsolicitante%Type;
    vUsuario            Varchar(10);
    vTpColeta           tdvadm.t_arm_coleta.arm_coleta_tpcoleta%Type;
    vStatus             char(1);
    vMessage            varchar2(1000);
  begin

      -- **************************************************************************
      -- ********** Obtenho os dados da Coleta ************************************
      -- **************************************************************************
      -- Quando chegar neste function já foi executado a validação do campo Pedido
      -- que será obrigatório e com limite minimo, então tenho certeza que este
      -- campo(arm_coleta_pedido) estará preenchido com no minimo 11
      select substr(c.arm_coleta_pedido, 1, 10),
             substr(c.arm_coleta_pedido, 11, length(c.arm_coleta_pedido)-10),
             nvl(c.glb_tpcarga_codigo, 'FF'),
             c.glb_cliente_cgccpfcodigocoleta,
             c.arm_coleta_cnpjsolicitante,
             c.arm_coleta_tpcoleta,
             c.usu_usuario_codigo_cad
        into vPedido,
             vItemPedido,
             vTipoCarga,
             vCliRementCNPJ,
             vUsuSolicitanteCNPJ,
             vTpColeta,
             vUsuario
      from tdvadm.t_arm_coleta c
      where c.arm_coleta_ncompra = pColeta
        and c.arm_coleta_ciclo   = pCiclo;


      if vTpColeta = 'E' then  
          Sp_Set_ColetaExpressa(pColeta, pCiclo, vUsuario, vStatus, vMessage);
          return true;
      end if;

      -- **************************************************************************
      -- * Alteração: 26/09/2016 - Diego Lirio | A pedido do Marques e AMT.
      -- * Verifico se somente numero do pedido existe, e nao mais pedido-item
      begin
        vAguardar := Not Pkg_Edi_Precoleta.Fn_Existe_Pedido(vPedido);
      exception when no_data_found then
        vAguardar := true;
        return vAguardar;
      end;
        
      
      -- **************************************************************************
      -- ********** Obtenho os dados da PreColeta *********************************
      -- **************************************************************************
      -- Quando não conseguir encontrar a PreColeta pelo Numero do pedido-item
      -- Digitado na Solicitação da Coleta, deixo o TipoPreColeta como Nullo
      -- Coleta Entra Aguardando
      begin
        vPreColetaRow := Pkg_Edi_Precoleta.Fn_Get_PreColetaRowType(vPedido, vItemPedido);
      exception when no_data_found then
        --vAguardar := true;  --> Entra aguardando se somente numero do pedido nao existir e nao mais pedido-item
        return vAguardar;
      end;    


        --|---------------------------------------------------------------------------------------
        --|   Coleta   |  PreColeta   |
        --|---------------------------------------------------------------------------------------
        --|   E        |  E           | Entra Autorizada
        --|---------------------------------------------------------------------------------------
        if (vTipoCarga = 'EX') and (nvl(vPreColetaRow.Edi_Arcelormittal_Tpcoleta,'C') = 'E') then

          Sp_Set_ColetaExpressa(pColeta, pCiclo, vPreColetaRow.Usu_Usuario_Alterou, vStatus, vMessage);
          if vStatus != 'N' then
             Raise_Application_Error(-20001, 'Erro ao transformar Coleta em Emergencial, '||vMessage);
          end if;

          vAguardar := false;
          return vAguardar;
        end if;

        --|---------------------------------------------------------------------------------------
        --|   Coleta   |  PreColeta   |
        --|---------------------------------------------------------------------------------------
        --|   Normal   |  E           | Transforma em [E] já Autorizada
        --|---------------------------------------------------------------------------------------
        if (vTipoCarga != 'EX') and (nvl(vPreColetaRow.Edi_Arcelormittal_Tpcoleta,'C') = 'E') then

          Sp_Set_ColetaExpressa(pColeta, pCiclo, vPreColetaRow.Usu_Usuario_Alterou, vStatus, vMessage);
          if vStatus != 'N' then
             Raise_Application_Error(-20001, 'Erro ao transformar Coleta em Emergencial, '||vMessage);
          end if;

          vAguardar := false;
          return vAguardar;
        end if;

        --|---------------------------------------------------------------------------------------
        --|   Coleta   |  PreColeta   |
        --|---------------------------------------------------------------------------------------
        --|   E        |  Normal      | Entra AGUARDANDO
        --|---------------------------------------------------------------------------------------
        if (vTipoCarga = 'EX') and (nvl(vPreColetaRow.Edi_Arcelormittal_Tpcoleta,'C') != 'E') then

          if vStatus != 'N' then
             Raise_Application_Error(-20001, 'Erro ao transformar Coleta em Emergencial, '||vMessage);
          end if;
          vAguardar := true;
          return vAguardar;
        end if;

     commit;
     return vAguardar;

  end Fn_AMT_AguardaOuEfetivaEX;

  /*********************************************************************************************
  * Data..: 22/08/2015
  * Autor.: Fabiano Góes
  * Versão: 2.0 - Refactor
  * Validações de Campos: Pedido/Item
  * >> No caso da ArcelorMittal o campos Pedido será obrigatório e deverá conter o
  * >> numero do pedido com o item,
  * >> O numero do [pedido] deve conter 10 caracteres
  * >> O [Item] deve conter no minimo 2
  * >> validar se o campo pedido tem no minimo 12 caracteres
  **********************************************************************************************/
/*  Function Fn_AMT_ValidaCampos(pTypeColeta    in TpColetaNova,
                               pStatus        out char,
                               pMessage       out varchar2)
    return boolean
  as
    vIsValid boolean := true;
  begin

    if ( Fn_AMT_IsColetaAMT(pTypeColeta) = True ) then


      \***********Validação Tipo Carga******************\
      vIsValid := Fn_Col_ValidaTipoCarga(pTypeColeta,
                                         pStatus    ,
                                         pMessage);
      if not vIsValid then
        vIsValid := false;
        pStatus  := Status_warning;
        pMessage := pMessage;
        return vIsValid;
      end if;

      \***********Validação Pedido******************\
      if (tdvadm.f_enumerico(pTypeColeta.pedido) = 'N') then
        vIsValid := false;
        pStatus  := Status_warning;
        pMessage := 'O Campo [Pedido] é de Preenchimento obrigatório e deve conter apenas NUMEROS';
        return vIsValid;
      end if;

      if (length(nvl(pTypeColeta.pedido,'0')) < 12) then
        vIsValid := false;
        pStatus  := Status_warning;
        pMessage := 'O Campo [Pedido] é de Preenchimento obrigatório e deve conter no minimo 12 caracteres, '||
                    'sendo composto por numero do Pedido + Item (não pode conter espaços nem caracteres especiais como barra, traço ou ponto)';
        return vIsValid;
      end if;

    end if; --/ if Destino ou Solicitante for do Grupo ArcelorMittal

    return vIsValid;
  end Fn_AMT_ValidaCampos;  */

  /*********************************************************************************************
  * Data..: 22/08/2015
  * Autor.: Fabiano Góes
  * Versão: 2.0 - Refactor
  * Validações de Campos: Pedido/Item
  * >> No caso da ArcelorMittal o campos Pedido será obrigatório e deverá conter o
  * >> numero do pedido com o item,
  * >> O numero do [pedido] deve conter 10 caracteres
  * >> O [Item] deve conter no minimo 2
  * >> validar se o campo pedido tem no minimo 12 caracteres
  **********************************************************************************************
  * 14/10/2015 - Diego - Alterado param in para tipo da t_arm_coleta
  **********************************************************************************************/
  Function Fn_AMT_ValidaCampos(pColetaRowType in t_arm_coleta%RowType,
                               pStatus        out char,
                               pMessage       out varchar2)
    return boolean
  as
    vIsValid boolean := true;
  begin

    if ( Fn_AMT_IsColetaAMT(pColetaRowType) = True ) then


      /***********Validação Tipo Carga******************/
      vIsValid := Fn_Col_ValidaTipoCarga(pColetaRowType,
                                         pStatus    ,
                                         pMessage);
      if not vIsValid then
        vIsValid := false;
        pStatus  := Status_warning;
        pMessage := pMessage;
        return vIsValid;
      end if;
      
            
      /*******validação SUNCOKE EAST *************************/
       if (trim(pColetaRowType.Arm_Coleta_Cnpjpagadorferete) = '07114605000152') and 
         (pColetaRowType.Usu_Usuario_Codigo_Cad <> 'cmsouza') then
       
             vIsValid := false;
             pStatus  := Status_warning;
             pMessage := 'Para o CNPJ 07114605000152 não está autorizado a criar coleta';
              return vIsValid;
     
         
       end if;
      ---
       if (trim(pColetaRowType.Arm_Coleta_Cnpjpagadorferete) = '07114605000152') and 
         (pColetaRowType.Usu_Usuario_Codigo_Cad <> 'cmsouza')then
         if(TRIM(pColetaRowType.Fcf_Tpcarga_Codigo) <> '01') then
             vIsValid := false;
             pStatus  := Status_warning;
             pMessage := 'Para o CNPJ 07114605000152 como pagador apenas coleta lotação pode ser solicitada';
              return vIsValid;
         end if;
         
       end if;

      /***********Validação Pedido******************/
      if (tdvadm.f_enumerico(pColetaRowType.Arm_Coleta_Pedido) = 'N') then
        vIsValid := false;
        pStatus  := Status_warning;
        pMessage := 'O Campo [Pedido] é de Preenchimento obrigatório e deve conter apenas NUMEROS';
        return vIsValid;
      end if;

      /************************************************************************************
       * Comentado por Diego 22/09/2016, 
       *  a pedido do Marques AMT solicitou que coleta nao tera como situacao de 
       *  aprovacao o pedido+item e sim somente o pedido. Obrigatoriedade sera 
       *  de 10 caracteres referente ao pedido.
       */
      --if (length(nvl(Trim(pColetaRowType.Arm_Coleta_Pedido),'0')) < 12) then
      --  vIsValid := false;
      --  pStatus  := Status_warning;
      --  pMessage := 'O Campo [Pedido] é de Preenchimento obrigatório e deve conter no minimo 12 caracteres, '||
      --              'sendo composto por numero do Pedido + Item (não pode conter espaços nem caracteres especiais como barra, traço ou ponto)';
      --  return vIsValid;
      --end if;
      if (length(nvl(Trim(pColetaRowType.Arm_Coleta_Pedido),'0')) < 10) then
        vIsValid := false;
        pStatus  := Status_warning;
        pMessage := 'O Campo [Pedido] é de Preenchimento obrigatório e deve conter no minimo 10 caracteres '||
                    '(não pode conter espaços nem caracteres especiais como barra, traço ou ponto)';
        return vIsValid;
      end if;

    end if; --/ if Destino ou Solicitante for do Grupo ArcelorMittal

    return vIsValid;
  end Fn_AMT_ValidaCampos;
  
  /*********************************************************************************************
  * Data..: 23/04/2020
  * Autor.: Tatiane
  **********************************************************************************************/
  
 /*   Function Fn_GIL_ValidaCampos(pColetaRowType in t_arm_coleta%RowType,
                               pStatus        out char,
                               pMessage       out varchar2)
    return boolean
  as
    vIsValid boolean := true;
  begin

 --   if ( Fn_GIL_IsColetaGIL(pColetaRowType) = True ) then



      
            
      \*******validação GILBARCO  *************************\
       if (trim(pColetaRowType.Arm_Coleta_Cnpjpagadorferete) = '04893402000113') then
       
             vIsValid := false;
             pStatus  := Status_warning;
             pMessage := 'Para o CNPJ 04893402000113 não está autorizado a criar coleta';
              return vIsValid;
     
         
       end if;
 --  end if;

    return vIsValid;
  end Fn_GIL_ValidaCampos;
  */
  function Fn_ENE_IsColetaENE(pColetaRowType in t_arm_coleta%rowType) return boolean
  as
    vGrupoPagador               t_glb_grupoeconomico.glb_grupoeconomico_codigo%type;
    vIsENE                    boolean := false;
  begin
      --------------------------------------------------------------
      -- Obtem o Grupo economico do cliente destinatario da Coleta.
      --------------------------------------------------------------
      begin
        Select c.glb_grupoeconomico_codigo
           Into vGrupoPagador
           From t_glb_cliente c
           where c.glb_cliente_cgccpfcodigo = rpad(pColetaRowType.ARM_COLETA_CNPJPAGADORFERETE,20,' ');
      exception when no_data_found then
        vGrupoPagador := null;
      end;

    vIsENE := (vGrupoPagador = (GrupoEconomicoENE));

    return vIsENE;
  end Fn_ENE_IsColetaENE;

  /*********************************************************************************************
  * Data..: 22/08/2015
  * Autor.: Fabiano Góes
  * Versão: 2.0 - Refactor
  * Regra para saber se a coleta é da ArcelorMittal
  * >> recebendo por parametro um TpColetaNova
  **********************************************************************************************
  * 14/10/2015 - Diego - Alterado param in para tipo da t_arm_coleta
  **********************************************************************************************/
  function Fn_AMT_IsColetaAMT(pColetaRowType in t_arm_coleta%rowType) return boolean
  as
    vGrupoPagador       t_glb_grupoeconomico.glb_grupoeconomico_codigo%type;
    vIsArcelorMittal    boolean := false;
  begin
      --------------------------------------------------------------
      -- Obtem o Grupo economico do cliente destinatario da Coleta.
      --------------------------------------------------------------
      begin
        Select c.glb_grupoeconomico_codigo
           Into vGrupoPagador
           From t_glb_cliente c
           where c.glb_cliente_cgccpfcodigo = rpad(pColetaRowType.ARM_COLETA_CNPJPAGADORFERETE,20,' ');
      exception when no_data_found then
        vGrupoPagador := null;
      end;
      
    vIsArcelorMittal := (vGrupoPagador = GrupoEconomicoAMT);
    return vIsArcelorMittal;
  end Fn_AMT_IsColetaAMT;
  
  /*********************************************************************************************/
    function Fn_GIL_IsColetaGIL(pColetaRowType in t_arm_coleta%rowType) return boolean
  as
    vGrupoPagador       t_glb_grupoeconomico.glb_grupoeconomico_codigo%type;
    vIsGilbarco    boolean := false;
  begin
      --------------------------------------------------------------
      -- Obtem o Grupo economico do cliente destinatario da Coleta.
      --------------------------------------------------------------
      begin
        Select c.glb_grupoeconomico_codigo
           Into vGrupoPagador
           From t_glb_cliente c
           where c.glb_cliente_cgccpfcodigo = rpad(pColetaRowType.ARM_COLETA_CNPJPAGADORFERETE,20,' ');
      exception when no_data_found then
        vGrupoPagador := null;
      end;
      
     vIsGilbarco := (vGrupoPagador = GrupoEconomicoGIL);
    return  vIsGilbarco;
  end Fn_GIL_IsColetaGIL;


  /*********************************************************************************************
  * Data..: 03/09/2015
  * Autor.: Diego Lirio
  * Versão: 2.0 - Refactor
  * Procedure para confirmar se salva Coleta Direto
  * Verificacao Para AMT, se pedido existe, caso não existe pStatus returna W
  **********************************************************************************************/
  Procedure Sp_AMT_ConfirmPost(pColetaType in T_Arm_Coleta%RowType,
                                pStatus     out char,
                                pMessage    out varchar2)
  As
    vClienteRowTypeDest T_Glb_Cliente%RowType;
    vClienteRowTypeSoli T_Glb_Cliente%RowType;
  Begin
      Begin
          vClienteRowTypeDest := Pkg_Glb_Cliente.Fn_Get_ClienteRowType(pColetaType.Glb_Cliente_Cgccpfcodigoentreg);
          vClienteRowTypeSoli := Pkg_Glb_Cliente.Fn_Get_ClienteRowType(pColetaType.Arm_Coleta_Cnpjsolicitante);
          if GrupoEconomicoAMT In (vClienteRowTypeDest.Glb_Grupoeconomico_Codigo, vClienteRowTypeSoli.Glb_Grupoeconomico_Codigo) then

               -- Verifica se pedido existe
               if ((Length(pColetaType.Arm_Coleta_Pedido) = 10) and (Pkg_Edi_Precoleta.Fn_Existe_Pedido(pColetaType.Arm_Coleta_Pedido) = True)) then
                 pStatus  := 'N';
                 pMessage := 'Pedido Existe';
                 return;
               end if;

               -- Verifica se pedido/item existe
               if ((Length(pColetaType.Arm_Coleta_Pedido) > 10) and (Pkg_Edi_Precoleta.Fn_Existe_PreColeta(pColetaType.Arm_Coleta_Pedido) = False)) then
                  pStatus := 'W';
                  pMessage := 'Pedido não existe, deseja continuar?';
                  return;
               end if;
          end if;
          pStatus := 'N';
          pMessage := 'OK';
      Exception When Others Then
          pStatus := 'E';
          pMessage := 'Não há cadastro deste CNPJ ('||pColetaType.Glb_Cliente_Cgccpfcodigoentreg||') na Base de dados!';
          return;
      end;
  end Sp_AMT_ConfirmPost;

  /*********************************************************************************************
  * Data..: 18/09/2015
  * Autor.: Fabiano Góes
  * Versão: 1.1 - Implementação Arcelomittal
  * Funcionalidade: Quando em uma mesma Coleta existe mais de um Item/Pedido com Iconterms diferentes
  *                 e um dos Iconterms for de ENTREGA, a Coleta vira COLETAR
  *                 se algum Item/Pedido for Emergencial, a Coleta mantem a regra de:
  *                 Emergencial = COLETAR
  **********************************************************************************************/
  procedure Sp_AMT_SetColetaEntrega(pColetaNumero     In Varchar2,
                                    pColetaCiclo      In Varchar2,
                                    pStatus           out varchar2,
                                    pMessage          out varchar2)
  as
    vPreColetaRowType t_edi_arcelormittal%rowtype;
    vColetaRowType    t_arm_coleta%rowtype;
    vColetaTipo       t_arm_coleta.arm_coleta_tipo%type;
    vColetaTpCompra   t_arm_coleta.arm_coleta_tpcompra%type;
    vColetaObs        t_arm_coleta.arm_coleta_obs%type;
  begin
    begin

        vColetaRowType := Fn_Get_ColetaRowType(pColetaNumero, pColetaCiclo);
        if ( nvl(trim(vColetaRowType.Arm_Coletaocor_Codigo),'-1') not in ('64', '68','65') ) then
           pStatus  := Status_Warning;
           pMessage := 'Apenas Coletas aguardando podem ser modificadas!!!';
           return;
        end if;

        for p_cursor in(select a.edi_arcelormittal_pedido,
                               a.edi_arcelormittal_itempedido,
                               a.edi_arcelormittal_inconterms
                          from T_ARM_COLETAPEDIDOITEM cp,
                               t_edi_arcelormittal a
                         where cp.edi_arcelormittal_pedido     = a.edi_arcelormittal_pedido
                           and cp.edi_arcelormittal_itempedido = a.edi_arcelormittal_itempedido
                           and cp.arm_coleta_ncompra = TRIM(pColetaNumero)
                           and cp.arm_coleta_ciclo   = pColetaCiclo)
        loop
            vPreColetaRowType := Pkg_Edi_Precoleta.Fn_Get_PreColetaRowType(p_cursor.edi_arcelormittal_pedido, p_cursor.edi_arcelormittal_itempedido);

            --if vPreColetaRowType.Edi_Arcelormittal_Tpcoleta = 'E' then
            if (vPreColetaRowType.Edi_Arcelormittal_Inconterms = 'FOB' or vPreColetaRowType.Edi_Arcelormittal_Inconterms = 'FOT') and
                vPreColetaRowType.Edi_Arcelormittal_Tpcoleta != 'E' then

               vColetaTipo     := 'ENTREGA';
               vColetaTpCompra := 'FCA';
               vColetaObs      := 'Pedido: '||p_cursor.edi_arcelormittal_pedido||p_cursor.edi_arcelormittal_itempedido||' - '||
                                  'Inconterms: '||vPreColetaRowType.Edi_Arcelormittal_Inconterms;
               -- TODO: add usuario alterou no UPDATE
               update t_arm_coleta col
                  set col.arm_coleta_tipo      = vColetaTipo,
                      col.arm_coleta_tpcompra  = vColetaTpCompra,
                      col.arm_coleta_obs       = col.arm_coleta_obs ||' - '|| vColetaObs
               where col.arm_coleta_ncompra    = TRIM(pColetaNumero)
                 and col.arm_coleta_ciclo      = pColetaCiclo;
               COMMIT;

               EXIT;
            end if;

        end loop;

    Exception When Others Then
        pStatus := 'E';
        pMessage := dbms_utility.format_error_backtrace||' >> '||sqlerrm;
        return;
    end;
  end Sp_AMT_SetColetaEntrega;
  
  /*********************************************************************************************
  * Data..: 03/09/2019
  * Autor.: gustavo e Ewerton
  * Regra para saber se a coleta é da PRADA
  **********************************************************************************************/
  function Fn_PRA_IsColetaPRA(pColetaRowType in t_arm_coleta%rowType) return boolean
  as
    vGrupoPagador       t_glb_grupoeconomico.glb_grupoeconomico_codigo%type;
    vIsPRA    boolean := false;
  begin
      --------------------------------------------------------------
      -- Obtem o Grupo economico do cliente pagador da Coleta.
      --------------------------------------------------------------
      begin
        Select c.glb_grupoeconomico_codigo
           Into vGrupoPagador
           From t_glb_cliente c
           where c.glb_cliente_cgccpfcodigo = rpad(pColetaRowType.ARM_COLETA_CNPJPAGADORFERETE,20,' ');
      exception when no_data_found then
        vGrupoPagador := null;
      end;

    vIsPRA := (vGrupoPagador = GrupoEconomicoPRA);

    return vIsPRA;
  end Fn_PRA_IsColetaPRA;


  /*#######################################################################################################################################
  /*# 04/12/2015 - Diego - Area especifica para Regras THY=THYSSENKRUPP Grupo = 0570
  /*#######################################################################################################################################*/
 
 /*********************************************************************************************
  * Data..: 04/12/2015
  * Autor.: Diego Lirio
  * Regra para saber se a coleta é da ThyssenKrupp
  **********************************************************************************************/
  function Fn_THY_IsColetaTHYSSEN(pColetaRowType in t_arm_coleta%rowType) return boolean
  as
    vGrupoDestino       t_glb_grupoeconomico.glb_grupoeconomico_codigo%type;
    vGrupoEconomicoSolicitante   t_glb_grupoeconomico.glb_grupoeconomico_codigo%type;
    vIsThyssenKrupp    boolean := false;
  begin
      --------------------------------------------------------------
      -- Obtem o Grupo economico do cliente destinatario da Coleta.
      --------------------------------------------------------------
      begin
        Select c.glb_grupoeconomico_codigo
           Into vGrupoDestino
           From t_glb_cliente c
           where c.glb_cliente_cgccpfcodigo = rpad(pColetaRowType.Glb_Cliente_Cgccpfcodigoentreg,20,' ');
      exception when no_data_found then
        vGrupoDestino := null;
      end;

      --------------------------------------------------------------
      -- Obtem o Grupo economico do cliente solicitante da Coleta.
      --------------------------------------------------------------
      begin
        Select c.glb_grupoeconomico_codigo
           Into vGrupoEconomicoSolicitante
           From t_glb_cliente c
           where c.glb_cliente_cgccpfcodigo = rpad(pColetaRowType.Arm_Coleta_Cnpjsolicitante, 20, ' ');
      exception when no_data_found then
        vGrupoEconomicoSolicitante := null;
      end;

    vIsThyssenKrupp := (vGrupoDestino = GrupoEconomicoTHY) or (vGrupoEconomicoSolicitante = GrupoEconomicoTHY);

    return vIsThyssenKrupp;
  end Fn_THY_IsColetaTHYSSEN;
  
   /*********************************************************************************************
  * Data..: 03/09/2019
  * Autor.: gustavo e Ewerton
  * Regra para saber se a coleta é da Aperan
  **********************************************************************************************/
  function Fn_APE_IsColetaAPERAN(pColetaRowType in t_arm_coleta%rowType) return boolean
  as
    vGrupoPagador       t_glb_grupoeconomico.glb_grupoeconomico_codigo%type;
    vIsAPERAN    boolean := false;
  begin
      --------------------------------------------------------------
      -- Obtem o Grupo economico do cliente pagador da Coleta.
      --------------------------------------------------------------
      begin
        Select c.glb_grupoeconomico_codigo
           Into vGrupoPagador
           From t_glb_cliente c
           where c.glb_cliente_cgccpfcodigo = rpad(pColetaRowType.ARM_COLETA_CNPJPAGADORFERETE,20,' ');
      exception when no_data_found then
        vGrupoPagador := null;
      end;

    vIsAPERAN := (vGrupoPagador = GrupoEconomicoAPE);

    return vIsAPERAN;
  end Fn_APE_IsColetaAPERAN;
  
  /*********************************************************************************************
  * Data..: 02/10/2019
  * Autor.: Ewerton Alves, Jonatas Veloso
  * Efetiva Coleta
  **********************************************************************************************/
  Procedure Sp_APE_EfetivarColeta(pColetaNumero       in t_arm_coleta.arm_coleta_ncompra%type,
                                   pColetaCiclo        in t_arm_coleta.arm_coleta_ciclo%type,
                                   pMensagemEfeticacao out varchar2,
                                   pStatus             out varchar2,
                                   pMessage            out varchar2)
   as
    vEmailUsuario        varchar2(1000);
    vEmailsCopia         varchar2(2000);
    vCorpoEmail          varchar2(4000) := '';
    vMensagemEfeticacao  varchar2(4000) := '';
    vAssunto             Varchar2(1000) := 'Coleta gerada/efetivada com sucesso[ '||pColetaNumero||' - '||pColetaCiclo||' ]';
    vEmailOrigem         varchar2(1000) := 'coletaweb@dellavolpe.com.br';
    vAguardarAutorizacao boolean := false;
    vColetaRowType       t_arm_Coleta%RowType;
    vOcorrencia          t_arm_coleta.arm_coletaocor_codigo%type := null;
    vCount               number;
  begin

    begin
    
      vColetaRowType := Fn_Get_ColetaRowType(pColetaNumero, pColetaCiclo);     
      vCount := 1;

      ----------------------------------------------------------------------------------------------------------------------------------
      -- Monta Mensagem do Email de Efeticação
      -- a mesma mensagem de Email será exibida no front-end no momento da Efetivação
      ----------------------------------------------------------------------------------------------------------------------------------
      vMensagemEfeticacao := vMensagemEfeticacao || '<h3>Coleta Efetivada com sucesso</h3>';
      vMensagemEfeticacao := vMensagemEfeticacao || 'Coleta Numero.: ' || pColetaNumero || ' - ' || pColetaCiclo || '<hr/>';         
            
      if vColetaRowType.Arm_Coleta_Tpcoleta = 'E' then
          -- CNPJ Regra Expresso   
          Select count(*)
            into vCount 
            from Tdvadm.t_usu_aplicacaoperfil ap
           where ap.usu_aplicacao_codigo = 'jcoleta'
             and ap.usu_perfil_codigo    = 'APE_EFETIVA_EXPRESSO'
             and lower(ap.usu_usuario_codigo) = rpad(lower(vColetaRowType.Usu_Usuario_Codigo_Cad),10,' ');


         if vCount = 0 then                 
                update t_arm_coleta c
                set c.arm_coleta_tpcoleta        = 'N',
                    c.arm_coleta_prioridade      =  4 -- TODO: Eliminar este campo
                where c.arm_coleta_ncompra  = pColetaNumero
                  and c.arm_coleta_ciclo    = pColetaCiclo;

                DELETE FROM t_arm_coletaformexp E
                WHERE E.ARM_COLETA_NCOMPRA = pColetaNumero
                AND E.ARM_COLETA_CICLO = pColetaCiclo;
                COMMIT;

                vMensagemEfeticacao := vMensagemEfeticacao || '<b>Atenção: </b> <span style="color: red">Coleta Solicitada como Expressa e transformada para Normal<br/>';
                vMensagemEfeticacao := vMensagemEfeticacao || 'Usuário não tem permissão para solicitar Coleta Expressa</span><hr/>';                    
         end if;
      end if;
      
      update t_arm_coleta c
         set c.arm_coletaocor_codigo = vOcorrencia
       where c.arm_coleta_ncompra  = pColetaNumero
         and c.arm_coleta_ciclo    = pColetaCiclo;
        
      commit;
      
      pMensagemEfeticacao := vMensagemEfeticacao;

      ---------------------------------------------------------------------------------------------------------
      -- EMAIL EFETIVAÇÃO APERAM
      -- obtenho os emails do usuário e os envolvidos na coleta para copia
      -- Sp_Get_EmailColeta vai popular:
      -- ==> vEmailUsuario com o email do usuário que cadastrou a Coleta
      -- ==> vEmailsCopia com os emails do Armazem
      ---------------------------------------------------------------------------------------------------------
      Sp_Get_EmailColeta(pColetaNumero, pColetaCiclo, vEmailUsuario, vEmailsCopia, pStatus, pMessage);

      pMensagemEfeticacao  := pMensagemEfeticacao || '<br/><b>E-mails enviados para:</b>'|| vEmailUsuario||';'||vEmailsCopia||'<br/>';

      vCorpoEmail := vMensagemEfeticacao || Fn_Get_MessageInfoColeta(pColetaNumero, pColetaCiclo, vAguardarAutorizacao);

      vEmailsCopia := case
                        when length(vEmailsCopia) > 5 then vEmailsCopia 
                       
                      end;

      begin
        wservice.pkg_glb_email.SP_ENVIAEMAIL(vAssunto,
                                             vCorpoEmail,
                                             vEmailOrigem,
                                             vEmailUsuario,
                                             vEmailsCopia);
      exception when others then
        vAssunto    := 'ERRO ao tentar enviar Email da Coleta: '||pColetaNumero||' - '||pColetaCiclo;
        vCorpoEmail := 'ERRO ao tentar enviar Email da Coleta: '||pColetaNumero||' - '||pColetaCiclo||
                     ' - Usuario: '||vColetaRowType.Usu_Usuario_Codigo_Cad||' - '||sqlerrm;
        wservice.pkg_glb_email.SP_ENVIAEMAIL(vAssunto,
                                             vCorpoEmail,
                                             vEmailOrigem
                                             );
      end;

      pStatus   := Status_normal;
      pMessage  := vMensagemEfeticacao;
    exception when others then
      pStatus   := Status_normal;
      pMessage  := 'Erro ao processar Pkg_Col_Coleta.Sp_APE_EfetivarColeta. Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;
  end Sp_APE_EfetivarColeta;
  
   /************************************************************************************************
   * PROGRAMA         : ColetaWeb
   * DESENVOLVEDOR    : F.SEDEVITIZ
   * DATA DE CRIACAO  : 01/ABR/2019
   * Versão           : 2.0 - Refactor
   * FUNCINALIDADE    : Efetivar a Coleta após ser digitados os items
   * PARTICULARIDADES : Após digitar os dados da Coleta a mesma é salva para ser gerado um numero,
   *                    Porém, neste momento a Coleta recebe um ocorrencia[64] - Coleta Pendente,
   *                    Apenas após ser digitados dos item a Coleta deve ser Efetivada. e neste
   * OBS..............: Esta procedure trata de regras para Efetivar uma Coleta Arcelomittal
   * PARAM. OBRIGAT.  : pColetaNumero | pColetaCiclo = Chave da Coleta
   *                    pStatus = E=ERRO, N=Normal
   *                    pMessage = Mensagem de ERRO ou mensagem de Normal quando necessário
   ************************************************************************************************/
   Procedure Sp_NOU_EfetivarColeta(pColetaNumero       in t_arm_coleta.arm_coleta_ncompra%type,
                                   pColetaCiclo        in t_arm_coleta.arm_coleta_ciclo%type,
                                   pMensagemEfeticacao out varchar2,
                                   pStatus             out varchar2,
                                   pMessage            out varchar2)
   as
    vEmailUsuario        varchar2(1000);
    vEmailsCopia         varchar2(2000);
    vCorpoEmail          varchar2(4000) := '';
    vMensagemEfeticacao  varchar2(4000) := '';
    vAssunto             Varchar2(1000) := 'Coleta gerada/efetivada com sucesso[ '||pColetaNumero||' - '||pColetaCiclo||' ]';
    vEmailOrigem         varchar2(1000) := 'coletaweb@dellavolpe.com.br';
    vAguardarAutorizacao boolean := false;
    vUsuPodeAutorizar    boolean := false;
    vOcorrencia          tdvadm.t_arm_coletaocor.arm_coletaocor_codigo%type := null;
    vColetaRowType       t_arm_Coleta%RowType;
  begin

    begin
    
         vColetaRowType := Fn_Get_ColetaRowType(pColetaNumero, pColetaCiclo);

         vAguardarAutorizacao :=  vUsuPodeAutorizar = False ;
         
         if vAguardarAutorizacao = true  then
           vOcorrencia := '65';
        end if;
    

      update t_arm_coleta col
      set col.arm_coletaocor_codigo      = vOcorrencia,
/*          col.Arm_Coleta_Tpcompra        = case when vColetaRowType.Arm_Coleta_Pagadorfrete = 'R' then 'FOB'
                                                else col.Arm_Coleta_Tpcompra
                                           end, */
          col.arm_coleta_dtautoriza      = Case when Nvl(vOcorrencia, '-1') = '-1' Then sysdate
                                             else vColetaRowType.arm_coleta_dtautoriza
                                           End,
          col.usu_usuario_codigoautoriza = Case when Nvl(vOcorrencia, '-1') = '-1' Then vColetaRowType.usu_usuario_codigo_cad -- TODO: Diego | usuario nao passa na efetiva, usa o usuario cadastro
                                             else vColetaRowType.usu_usuario_codigoautoriza
                                           End
      where col.arm_coleta_ncompra    = pColetaNumero
        and col.arm_coleta_ciclo      = LPAD(pColetaCiclo,3,000)
        and col.arm_coletaorigem_cod  = 4;
      commit;

      ----------------------------------------------------------------------------------------------------------------------------------
      -- Monta Mensagem do Email de Efeticação
      -- a mesma mensagem de Email será exibida no front-end no momento da Efetivação
      ----------------------------------------------------------------------------------------------------------------------------------
      vMensagemEfeticacao := vMensagemEfeticacao || '<h3>Coleta Efetivada com sucesso</h3>';
      vMensagemEfeticacao := vMensagemEfeticacao || 'Coleta Numero.: ' || pColetaNumero || ' - ' || pColetaCiclo || '<hr/>';
      vMensagemEfeticacao := case when vAguardarAutorizacao = true then vMensagemEfeticacao || '<h3 style="color:red;">AGUARDANDO AUTORIZAÇÃO</h3>'
                               else vMensagemEfeticacao
                             end;

      ---------------------------------------------------------------------------------------------------------
      -- EMAIL EFETIVAÇÃO VLI
      -- obtenho os emails do usuário e os envolvidos na coleta para copia
      -- Sp_Get_EmailColeta vai popular:
      -- ==> vEmailUsuario com o email do usuário que cadastrou a Coleta
      -- ==> vEmailsCopia com os emails do Armazem
      ---------------------------------------------------------------------------------------------------------
      Sp_Get_EmailColeta(pColetaNumero, pColetaCiclo, vEmailUsuario, vEmailsCopia, pStatus, pMessage);

      pMensagemEfeticacao  := vMensagemEfeticacao || pMensagemEfeticacao || '<br/><b>E-mails enviados para:</b>'|| vEmailUsuario||';'||vEmailsCopia||'<br/>';

      vCorpoEmail := vMensagemEfeticacao || Fn_Get_MessageInfoColeta(pColetaNumero, pColetaCiclo, vAguardarAutorizacao);

      vEmailsCopia := case
                        when length(vEmailsCopia) > 5 then vEmailsCopia --||';fgoes@dellavolpe.com.br;ddamaceno@dellavolpe.com.br'
                        --else 'fgoes@dellavolpe.com.br;ddamaceno@dellavolpe.com.br'
                      end;

      begin
        wservice.pkg_glb_email.SP_ENVIAEMAIL(vAssunto,
                                             vCorpoEmail,
                                             vEmailOrigem,
                                             vEmailUsuario,
                                             vEmailsCopia);
      exception when others then
        vAssunto    := 'ERRO ao tentar enviar Email da Coleta: '||pColetaNumero||' - '||pColetaCiclo;
        vCorpoEmail := 'ERRO ao tentar enviar Email da Coleta: '||pColetaNumero||' - '||pColetaCiclo||
                     ' - Usuario: '||vColetaRowType.Usu_Usuario_Codigo_Cad||' - '||sqlerrm;
        wservice.pkg_glb_email.SP_ENVIAEMAIL(vAssunto,
                                             vCorpoEmail,
                                             vEmailOrigem
                                             );
      end;

      pStatus   := Status_normal;
      pMessage  := vMensagemEfeticacao;
    exception when others then
      pStatus   := Status_normal;
      pMessage  := 'Erro ao processar Pkg_Col_Coleta.Sp_NOU_EfetivarColeta. Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;

  end Sp_NOU_EfetivarColeta;
  
      /*********************************************************************************************
  * Data..: 27/08/2020
  * Autor.: gustavo e tati
  * Regra para saber se a coleta é da paranapanama
  **********************************************************************************************/
  function Fn_PARANA_IsColetaPARANA(pColetaRowType in t_arm_coleta%rowType) return boolean
  as
    vGrupoPagador       t_glb_grupoeconomico.glb_grupoeconomico_codigo%type;
    vIsPARANA    boolean := false;
  begin
      --------------------------------------------------------------
      -- Obtem o Grupo economico do cliente pagador da Coleta.
      --------------------------------------------------------------
      begin
        Select c.glb_grupoeconomico_codigo
           Into vGrupoPagador
           From t_glb_cliente c
           where c.glb_cliente_cgccpfcodigo = rpad(pColetaRowType.ARM_COLETA_CNPJPAGADORFERETE,20,' ');
      exception when no_data_found then
        vGrupoPagador := null;
      end;

    vIsPARANA := (vGrupoPagador = GrupoEconomicoPARANA);

    return vIsPARANA;
  end Fn_PARANA_IsColetaPARANA;

  /*********************************************************************************************
  * Data..: 04/12/2015
  * Autor.: Diego Lirio
  * Validações de Campos:
  * >> validar se o campo pedido tem no minimo 12 caracteres
  **********************************************************************************************/
  Function Fn_THY_ValidaCampos(pColetaRowType in t_arm_coleta%RowType,
                               pStatus        out char,
                               pMessage       out varchar2)
    return boolean
  as
    vIsValid boolean := true;
    vGrupoUsuarioSolicitante T_glb_cliente.Glb_Grupoeconomico_Codigo%Type;
    vGrupoPagador T_glb_cliente.Glb_Grupoeconomico_Codigo%Type;
    vIsFornecedorLiberado Integer;
    vPermiteColetaThyssen varchar2(2000);
  begin

    if ( Fn_THY_IsColetaTHYSSEN(pColetaRowType) = True ) then

        ---------------------------------------------------------------------------------------------------------------------
        -- 02/05/2016 - Fabiano
        -- Liberando estes fornecedores por enquanto
        -- depois dos testes devemos tirar este código e liberar para todos      
        ---------------------------------------------------------------------------------------------------------------------
        /**   
        Select Count(*)
          Into vIsFornecedorLiberado
          From t_usu_usuario u
          where trim(u.usu_usuario_codigo) = pColetaRowType.Usu_Usuario_Codigo_Cad 
            --and trim(u.usu_usuario_login) In ('ECIL','HERAEUS','KSB BOMBAS','NORTEL',
            --                                  'SEW EURODRIVE','WEG','WEIR','TUBO MASTER','JM EUROFLEX',
            --                                 'DAY BRASIL','A BRONZINOX');
            and trim(u.usu_usuario_login) In ('01479446','01209528','WROCHA','IFONTENELE','WEIR',
                                              'RICLSOUZA','CLAUDINEIMARTINS','MATESPELETRO','CAMARANTE',
                                              'CPLINO','RURIKO KITAMURA','VALERIAPO','APANDRADE','PAMILTON',
                                              'IVAN LUCAS','SMORAES','ELIANE GARONI','NORTEL','AFABIANO',
                                              'KANASTACIO','JOSINORTEL','SM','M.LINHARES','1238','RICSOUZA',
                                              'BASTOS','FRANMOREIRA','ABRONZINOX','ABONZINOX','CALBERTONI',
                                              'RTABIAS','HVINTURINI','RLUENGO','FAKSB','DLOPES','MARMOSANTOS',
                                              'EDINIZ','DCANDIDO','SEW','CNASCIMENTO','BRMAGIGO','ANDERSON',
                                              'MOVIEIRA','MOISESVIEIRA','EFELIPO','LILIANTSANTOS','ECIL',
                                              'FATWEG','01507682','KSB','FARWEG','A BRONZINOX','RBASTOS',
                                              'JFOCHESATTOWEG','OLAVIO FURLAN','JGOTZ','GKUESTER','TSAPELLI',
                                              'FELIPEFELICIANO','WEG','RMOSER','WALBATISTA','LUIZVINICIUS',
                                              'LVCARLOS','WEGEQUIPAMENTOS','WEGPOWER','HERAEUS','WCESTARI',
                                              'DAYBRASIL','KSB.BOMBAS','CESTARIWEG','WEGLTDA');
        **/                                               
        begin
          select p.usu_perfil_parat
          into vPermiteColetaThyssen
          from tdvadm.t_usu_perfil p
          where lower(trim(p.usu_aplicacao_codigo)) = 'jcoleta'
            and upper(trim(p.usu_perfil_codigo)) = 'PERMITE_COLETA_THYSSEN';  
        exception when no_data_found then
          vPermiteColetaThyssen := '';  
        end;        
        vIsFornecedorLiberado := instr(lower(vPermiteColetaThyssen), lower(trim(pColetaRowType.Usu_Usuario_Codigo_Cad)));
                                                  
        if vIsFornecedorLiberado > 0 then
            pStatus := 'N';
            pMessage := 'OK';
            vIsValid := True;
            return vIsValid;          
        end if;
    
        -- Valida se cnpj de destino 07005330000119 é solicitado por um usuario ThyssenKrupp
        -- Regra implementada | Data..: 04/12/2015 Diego Lirio 
        -----------------------------------------------------------------------------------------
        -- A pedido do Chaves: Adicionado na Regra o pagador for diferente de ThyssenKrupp
        -- 17/11/2016 | Diego Lirio - Fabiano Goes
        -----------------------------------------------------------------------------------------
        if '07005330000119' = trim(pColetaRowType.Glb_Cliente_Cgccpfcodigoentreg) then
             
             select c.glb_grupoeconomico_codigo
               Into vGrupoUsuarioSolicitante
               From t_glb_cliente c
               where c.glb_cliente_cgccpfcodigo = pColetaRowType.Arm_Coleta_Cnpjsolicitante;

             select c.glb_grupoeconomico_codigo
               Into vGrupoPagador
               From t_glb_cliente c
               where c.glb_cliente_cgccpfcodigo = pColetaRowType.arm_coleta_cnpjpagadorferete;
               
             if (vGrupoPagador = GrupoEconomicoTHY) and (vGrupoUsuarioSolicitante != GrupoEconomicoTHY) then
                 pStatus := 'W';
                 pMessage := 'Somente usuários ThyssenKrupp podem solicitar com o CNPJ 07005330000119 como Destinatário!';
                 return false;
             end if;
        end if;
        
        
    end if; --/ if Destino ou Solicitante for do Grupo ThyssenKrupp

    pStatus := 'N';
    pMessage := 'OK';
    return vIsValid;
  end Fn_THY_ValidaCampos;
  
  /*********************************************************************************************
  * Data..: 04/12/2015
  * Autor.: Gustavo Ewerton
  * Validações de Campos:
  * >> validar se o campo pedido tem no minimo 12 caracteres
  **********************************************************************************************/
 /* Function Fn_APE_ValidaCampos(pColetaRowType in t_arm_coleta%RowType,
                               pStatus        out char,
                               pMessage       out varchar2)
    return boolean
  as
    vIsValid boolean := true;
    --vPermiteColetaAPERAN tdvadm.t_usu_perfil.usu_perfil_parat%Type;
  begin

    if ( Fn_APE_IsColetaAPERAN(pColetaRowType) = True ) then

        begin
          select p.usu_usuario_codigo
          into vPermiteColetaAPERAN
          from tdvadm.t_usu_aplicacaoperfil p
          where lower(trim(p.usu_aplicacao_codigo)) = 'jcoleta'
            and upper(trim(p.usu_perfil_codigo)) = 'PERMITE_COLETA_APERAN'
            and p.usu_usuario_codigo = pColetaRowType.Usu_Usuario_Codigo_Cad;  
        exception when no_data_found then
          vPermiteColetaAPERAN := null;  
        end;        
       
        if (pColetaRowType.Arm_Coleta_Tpcoleta = 'E' and vPermiteColetaAPERAN is null) then
                 pStatus := 'W';
                 pMessage := 'Você não tem autorização para solicitar coleta expressa.';
                 return false;
             end if;
    end if;

    pStatus := 'N';
    pMessage := 'OK';
    return vIsValid;
  end Fn_APE_ValidaCampos;*/
  
  /*********************************************************************************************
  * Data..: 29/04/2016
  * Autor.: Fabiano Góes
  * Versão: 2.0.1 - Igualar Efetivar THYSSENKRUPP como VLI
  **********************************************************************************************/
  Function Fn_THY_AguardaOuEfetiva(pColeta t_arm_coleta.arm_coleta_ncompra%type,
                                         pCiclo  t_arm_coleta.arm_coleta_ciclo%type)
    return Boolean
  as
    vIsTHYSSENKRUPP integer;
  begin
     -------------------------------------------------------------------------------------------
     -- Regra Conforme Chaves e Marques:
     -- Se o Solicitante da Coleta for do Grupo Economico 0570=THYSSENKRUPP
     -- a coleta entra como aguardando(ocorrencia=65)
     -------------------------------------------------------------------------------------------
     select count(*)
     into vIsTHYSSENKRUPP
     from tdvadm.t_arm_coleta co,
          coleta.usuario_web uw,
          tdvadm.t_glb_cliente cl
     where lower(co.usu_usuario_codigo_cad) = rpad(lower(uw.usu_usuario_codigo),10,' ') -- ligo coleta com usuário_web p/ ter o cnpj do solicitante
     and trim(uw.dc_cnpj) = trim(cl.glb_cliente_cgccpfcodigo) -- ligo usuario_web/solictante com cliente p/ filtrar pelo grupo economico 0074
     and cl.glb_grupoeconomico_codigo = GrupoEconomicoTHY -- Filtro pelo Grupo Economico THYSSENKRUPP
     and co.arm_coleta_ncompra = pColeta
     and co.arm_coleta_ciclo = pCiclo;

     -------------------------------------------------------------------------------------------
     -- Regra se o usuario/cnpj solicitante da coleta não for THYSSENKRUPP testo o Destino
     -- Se o Cliente/Entrega da Coleta for do Grupo Economico 0570=THYSSENKRUPP
     -- a coleta entra como aguardando(ocorrencia=65)
     -------------------------------------------------------------------------------------------
     if vIsTHYSSENKRUPP = 0 then
       select count(*)
       into vIsTHYSSENKRUPP
       from t_arm_coleta co,
            t_glb_cliente cl
       where trim(co.glb_cliente_cgccpfcodigoentreg) = trim(cl.glb_cliente_cgccpfcodigo)
       and cl.glb_grupoeconomico_codigo = GrupoEconomicoTHY
       and co.arm_coleta_ncompra = pColeta
       and co.arm_coleta_ciclo = pCiclo;
     end if;

     return vIsTHYSSENKRUPP > 0;
  end Fn_THY_AguardaOuEfetiva;
  
  /************************************************************************************************
   * PROGRAMA         : ColetaWeb
   * DESENVOLVEDOR    : Fabiano / Diego
   * DATA DE CRIACAO  : 29/04/2016
   * Versão           : 2.0.1 - Igualar Efetivar THYSSENKRUPP como VLI
   * FUNCINALIDADE    : Coleta Aguardando Aprovação quando Solicitante não é Autorizador
   * PARTICULARIDADES : 
   * OBS..............: Esta procedure trata de regras para Efetivar uma Coleta THYSSENKRUPP
   * PARAM. OBRIGAT.  : pColetaNumero | pColetaCiclo = Chave da Coleta
   *                    pStatus = E=ERRO, N=Normal
   *                    pMessage = Mensagem de ERRO ou mensagem de Normal quando necessário
   ************************************************************************************************/
   Procedure Sp_THY_EfetivarColeta(pColetaNumero       in t_arm_coleta.arm_coleta_ncompra%type,
                                   pColetaCiclo        in t_arm_coleta.arm_coleta_ciclo%type,
                                   pMensagemEfeticacao out varchar2,
                                   pStatus             out varchar2,
                                   pMessage            out varchar2)
   as
    vEmailUsuario        varchar2(1000);
    vEmailsCopia         varchar2(2000);
    vCorpoEmail          varchar2(4000) := '';
    vMensagemEfeticacao  varchar2(4000) := '';
    vAssunto             Varchar2(1000) := 'Coleta gerada/efetivada com sucesso[ '||pColetaNumero||' - '||pColetaCiclo||' ]';
    vEmailOrigem         varchar2(1000) := 'coletaweb@dellavolpe.com.br';

    vAguardarAutorizacao boolean := false;
    vUsuPodeAutorizar    boolean := false;
    vOcorrencia          tdvadm.t_arm_coletaocor.arm_coletaocor_codigo%type := null;
    vColetaRowType       t_arm_Coleta%RowType;
    vIsUsuComercial      boolean := false;
  begin

    begin
      ----------------------------------------------------------------------------------------------------------------------------------
      -- Obtenho a linha da Coleta que deve ser Efetivada
      ----------------------------------------------------------------------------------------------------------------------------------
      vColetaRowType := Fn_Get_ColetaRowType(pColetaNumero, pColetaCiclo);

      ----------------------------------------------------------------------------------------------------------------------------------
      -- Verifico se o Usuário que está efetivando é um usuário com permissão de Autorizar Coleta
      -- Isso porque se a colera entrar em alguma regra para Aguardar desconsidero porque o ususário já é o Autorizador
      ----------------------------------------------------------------------------------------------------------------------------------
      vUsuPodeAutorizar := Fn_Get_PodeAutorizarColeta(vColetaRowType.Usu_Usuario_Codigo_Cad, vColetaRowType.Arm_Coleta_Cnpjsolicitante);

      ----------------------------------------------------------------------------------------------------------------------------------
      -- Se a coleta entrar em alguma regra para Aguardar Autorização:
      -- Seto uma ocorrencia 65=Coleta Aguardando Autorização
      ----------------------------------------------------------------------------------------------------------------------------------
      vIsUsuComercial := Fn_Get_IsUsuarioComercial(vColetaRowType.Usu_Usuario_Codigo_Cad, vColetaRowType.Arm_Coleta_Cnpjsolicitante);
      vAguardarAutorizacao := ( Fn_THY_AguardaOuEfetiva( pColetaNumero, pColetaCiclo ) ) and ( vUsuPodeAutorizar = False ) and (vIsUsuComercial = False);

      ----------------------------------------------------------------------------------------------------------------------------------
      -- Update necessátio conforme regra de Autorização
      ----------------------------------------------------------------------------------------------------------------------------------
      if vAguardarAutorizacao = true then
         vOcorrencia := '65';
      end if;

      update t_arm_coleta col
      set col.arm_coletaocor_codigo      = vOcorrencia,
          col.arm_coleta_dtautoriza      = Case when Nvl(vOcorrencia, '-1') = '-1' Then sysdate
                                             else vColetaRowType.arm_coleta_dtautoriza
                                           End,
          col.usu_usuario_codigoautoriza = Case when Nvl(vOcorrencia, '-1') = '-1' Then vColetaRowType.usu_usuario_codigo_cad -- TODO: Diego | usuario nao passa na efetiva, usa o usuario cadastro
                                             else vColetaRowType.usu_usuario_codigoautoriza
                                           End
      where col.arm_coleta_ncompra    = pColetaNumero
        and col.arm_coleta_ciclo      = LPAD(pColetaCiclo,3,000)
        and col.arm_coletaorigem_cod  = 4;
      commit;

      ----------------------------------------------------------------------------------------------------------------------------------
      -- Monta Mensagem do Email de Efeticação
      -- a mesma mensagem de Email será exibida no front-end no momento da Efetivação
      ----------------------------------------------------------------------------------------------------------------------------------
      vMensagemEfeticacao := vMensagemEfeticacao || '<h3>Coleta Efetivada com sucesso</h3>';
      vMensagemEfeticacao := vMensagemEfeticacao || 'Coleta Numero.: ' || pColetaNumero || ' - ' || pColetaCiclo || '<hr/>';
      vMensagemEfeticacao := case when vAguardarAutorizacao = true then vMensagemEfeticacao || '<h3 class="text-danger">AGUARDANDO AUTORIZAÇÃO</h3>'
                               else vMensagemEfeticacao
                             end;

      ---------------------------------------------------------------------------------------------------------
      -- EMAIL EFETIVAÇÃO THYSSENKRUPP
      -- obtenho os emails do usuário e os envolvidos na coleta para copia
      -- Sp_Get_EmailColeta vai popular:
      -- ==> vEmailUsuario com o email do usuário que cadastrou a Coleta
      -- ==> vEmailsCopia com os emails do Armazem
      ---------------------------------------------------------------------------------------------------------
      Sp_Get_EmailColeta(pColetaNumero, pColetaCiclo, vEmailUsuario, vEmailsCopia, pStatus, pMessage);

      pMensagemEfeticacao  := vMensagemEfeticacao || pMensagemEfeticacao || '<br/><b>E-mails enviados para:</b>'|| vEmailUsuario||';'||vEmailsCopia||'<br/>';

      vCorpoEmail := vMensagemEfeticacao || Fn_Get_MessageInfoColeta(pColetaNumero, pColetaCiclo, vAguardarAutorizacao);

      vEmailsCopia := case
                        when length(vEmailsCopia) > 5 then vEmailsCopia --||';fgoes@dellavolpe.com.br;ddamaceno@dellavolpe.com.br'
                        --else 'fgoes@dellavolpe.com.br;ddamaceno@dellavolpe.com.br'
                      end;

      begin
        wservice.pkg_glb_email.SP_ENVIAEMAIL(vAssunto,
                                             vCorpoEmail,
                                             vEmailOrigem,
                                             vEmailUsuario,
                                             vEmailsCopia);
      exception when others then
        vAssunto    := 'ERRO ao tentar enviar Email da Coleta: '||pColetaNumero||' - '||pColetaCiclo;
        vCorpoEmail := 'ERRO ao tentar enviar Email da Coleta: '||pColetaNumero||' - '||pColetaCiclo||
                     ' - Usuario: '||vColetaRowType.Usu_Usuario_Codigo_Cad||' - '||sqlerrm;
        wservice.pkg_glb_email.SP_ENVIAEMAIL(vAssunto,
                                             vCorpoEmail,
                                             vEmailOrigem
                                             --'fgoes@dellavolpe.com.br',
                                             --'ddamaceno@dellavolpe.com.br'
                                             );
      end;

      pStatus   := Status_normal;
      pMessage  := vMensagemEfeticacao;
    exception when others then
      pStatus   := Status_normal;
      pMessage  := 'Erro ao processar Pkg_Col_Coleta.Sp_THY_EfetivarColeta. Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;

  end Sp_THY_EfetivarColeta;    

  /*#######################################################################################################################################
  /*# 18/01/2016 - Fabiano - Area especifica para Regras CBA Grupo = 0569
  /*#######################################################################################################################################*/

  /*********************************************************************************************
  * Data..: 18/01/2016
  * Autor.: Fabiano Góes
  * Regra para saber se a coleta é da CBA
  **********************************************************************************************/
   function Fn_CBA_IsColetaCBA(pColetaRowType in t_arm_coleta%rowType) return boolean
  as
    vGrupoPagador   t_glb_grupoeconomico.glb_grupoeconomico_codigo%type;
    vIsCBA              boolean := false;
  begin
      --------------------------------------------------------------
      -- Obtem o Grupo economico do cliente destinatario da Coleta.
      --------------------------------------------------------------
        begin
        Select c.glb_grupoeconomico_codigo
           Into vGrupoPagador
           From t_glb_cliente c
           where c.glb_cliente_cgccpfcodigo = rpad(pColetaRowType.ARM_COLETA_CNPJPAGADORFERETE,20,' ');
      exception when no_data_found then
        vGrupoPagador := null;
      end;

    vIsCBA := vGrupoPagador In(GrupoEconomicoCBA);

    return vIsCBA;
  end Fn_CBA_IsColetaCBA;
  
  /*********************************************************************************************
  * Data..: 18/01/2016
  * Autor.: Fabiano Góes
  * Regra para saber se a coleta é da HYDRO
  **********************************************************************************************/
  function Fn_HYD_IsColetaHYD(pColetaRowType in t_arm_coleta%rowType) return boolean
  as
    vGrupoDestino               t_glb_grupoeconomico.glb_grupoeconomico_codigo%type;
    vGrupoEconomicoSolicitante  t_glb_grupoeconomico.glb_grupoeconomico_codigo%type;
    vIsHYD                      boolean := false;
  begin
      --------------------------------------------------------------
      -- Obtem o Grupo economico do cliente destinatario da Coleta.
      --------------------------------------------------------------
      begin
        Select c.glb_grupoeconomico_codigo
           Into vGrupoDestino
           From t_glb_cliente c
           where c.glb_cliente_cgccpfcodigo = rpad(pColetaRowType.Glb_Cliente_Cgccpfcodigoentreg,20,' ');
      exception when no_data_found then
        vGrupoDestino := null;
      end;

      --------------------------------------------------------------
      -- Obtem o Grupo economico do cliente solicitante da Coleta.
      --------------------------------------------------------------
      begin
        Select c.glb_grupoeconomico_codigo
           Into vGrupoEconomicoSolicitante
           From t_glb_cliente c
           where c.glb_cliente_cgccpfcodigo = rpad(pColetaRowType.Arm_Coleta_Cnpjsolicitante, 20, ' ');
      exception when no_data_found then
        vGrupoEconomicoSolicitante := null;
      end;

     vIsHYD := (vGrupoDestino In(GrupoEconomicoHYD)) or (vGrupoEconomicoSolicitante In(GrupoEconomicoHYD));

    return vIsHYD;
  end Fn_HYD_IsColetaHYD;
  
  /*********************************************************************************************
  * Data..: 18/01/2016
  * Autor.: Fabiano Góes
  * Regra para saber se a coleta é da HYDRO
  **********************************************************************************************/
  function Fn_PAR_IsColetaPAR(pColetaRowType in t_arm_coleta%rowType) return boolean
  as
    vGrupoPagador               t_glb_grupoeconomico.glb_grupoeconomico_codigo%type;
    vIsPAR                   boolean := false;
  begin
      --------------------------------------------------------------
      -- Obtem o Grupo economico do cliente destinatario da Coleta.
      --------------------------------------------------------------
      begin
        Select c.glb_grupoeconomico_codigo
           Into vGrupoPagador
           From t_glb_cliente c
           where c.glb_cliente_cgccpfcodigo = rpad(pColetaRowType.ARM_COLETA_CNPJPAGADORFERETE,20,' ');
      exception when no_data_found then
        vGrupoPagador := null;
      end;

    vIsPAR := (vGrupoPagador = (GrupoEconomicoPAR));

    return vIsPAR;
  end Fn_PAR_IsColetaPAR;
  
   /*********************************************************************************************
  * Data..: 09/Fev/2018
  * Autor.: Gustavo Vocatore && Felipe Sedevitiz 
  * Regra para saber se a coleta é da ALBAR
  **********************************************************************************************/
  function Fn_ALB_IsColetaALB(pColetaRowType in t_arm_coleta%rowType) return boolean
  as
    vGrupoDestino               t_glb_grupoeconomico.glb_grupoeconomico_codigo%type;
    vGrupoEconomicoSolicitante  t_glb_grupoeconomico.glb_grupoeconomico_codigo%type;
    vIsALB                      boolean := false;
  begin
      --------------------------------------------------------------
      -- Obtem o Grupo economico do cliente destinatario da Coleta.
      --------------------------------------------------------------
      begin
        Select c.glb_grupoeconomico_codigo
           Into vGrupoDestino
           From t_glb_cliente c
           where c.glb_cliente_cgccpfcodigo = rpad(pColetaRowType.Glb_Cliente_Cgccpfcodigoentreg,20,' ');
      exception when no_data_found then
        vGrupoDestino := null;
      end;

      --------------------------------------------------------------
      -- Obtem o Grupo economico do cliente solicitante da Coleta.
      --------------------------------------------------------------
      begin
        Select c.glb_grupoeconomico_codigo
           Into vGrupoEconomicoSolicitante
           From t_glb_cliente c
           where c.glb_cliente_cgccpfcodigo = rpad(pColetaRowType.Arm_Coleta_Cnpjsolicitante, 20, ' ');
      exception when no_data_found then
        vGrupoEconomicoSolicitante := null;
      end;

    vIsALB := (vGrupoDestino In(GrupoEconomicoALB)) or (vGrupoEconomicoSolicitante In(GrupoEconomicoALB));

    return vIsALB;
  end Fn_ALB_IsColetaALB;
  
  
  /*********************************************************************************************
  * Data..: 22/Mar/2021
  * Autor.: Tatiane
  * Validacao criada para ultra cargo ULTRACARGO
  **********************************************************************************************/
  
  Function Fn_ULT_ValidaCampos(pColetaRowType in t_arm_coleta%rowType,
                                    pStatus        out char,
                                    pMessage       out varchar2)
    return boolean
    
  as
    vIsValid boolean := true;
    conteudoPedido1 varchar2(50);
    conteudoPedido2 varchar2(50);
  begin
    

    if ( Fn_ULT_IsColetaULT(pColetaRowType) = true ) then
     
        
        /*
        if (instr(TRIM(pColetaRowType.Arm_Coleta_Pedido ), '/') > 1) then
          
          conteudoPedido1 := substr(TRIM(pColetaRowType.Arm_Coleta_Pedido ), 1, instr(TRIM(pColetaRowType.Arm_Coleta_Pedido ), '/')-1);
          if (length(conteudoPedido1) < 10) then
            pStatus := Status_Warning;
            vIsValid := false;
            pMessage := 'O primeiro numero do pedido não pode ter menos que 10 caracteres.';
          end if;  
          
          conteudoPedido2 := substr(TRIM(pColetaRowType.Arm_Coleta_Pedido ), instr(TRIM(pColetaRowType.Arm_Coleta_Pedido ), '/')+1, length(TRIM(pColetaRowType.Arm_Coleta_Pedido )));
          if (length(conteudoPedido2) < 10) then
            pStatus := Status_Warning;
            vIsValid := false;
            pMessage := 'O segundo numero do pedido não pode ter menos que 10 caracteres.';
          end if; 

        elsif (length(TRIM(pColetaRowType.Arm_Coleta_Pedido)) < 10) then
           pStatus := Status_Warning;
           vIsValid := false;
           pMessage := 'Pedido não pode ter menos que 10 caracteres.';
           return vIsValid;
        end if;
        */
        
        if (length(TRIM(pColetaRowType.Arm_Coleta_Pedido)) < 10) then
           pStatus := Status_Warning;
           vIsValid := false;
           pMessage := 'Pedido não pode ter menos que 10 caracteres.';
           return vIsValid;
        end if;
         
        if ( TRIM(pColetaRowType.Arm_Coleta_Tpcoleta) = 'E' and trim(pColetaRowType.Fcf_Tpcarga_Codigo) = '02' ) then      
           pStatus := Status_Warning;
           vIsValid := false;
           pMessage := 'Coleta não válida, para prioridade expresso, alterar tipo de carga para Lotacao';
           return vIsValid;
       end if;                       
    end if;
    
    pStatus := 'N';
    pMessage:= null;
    return vIsValid;
  end Fn_ULT_ValidaCampos;


  /*********************************************************************************************
  * Data..: 20/Set/2021
  * Autor.: João
  * Validacao criada para ELDORADO
  **********************************************************************************************/
  
  function Fn_ELD_IsColetaELD(pColetaRowType in t_arm_coleta%rowType) return boolean
  as
    vGrupoPagador             t_glb_grupoeconomico.glb_grupoeconomico_codigo%type;
    vIsELD                    boolean := false;
  begin
      --------------------------------------------------------------
      -- Obtem o Grupo economico do cliente destinatario da Coleta.
      --------------------------------------------------------------
      begin
        Select c.glb_grupoeconomico_codigo
           Into vGrupoPagador
           From t_glb_cliente c
           where c.glb_cliente_cgccpfcodigo = rpad(pColetaRowType.ARM_COLETA_CNPJPAGADORFERETE,20,' ');
      exception when no_data_found then
        vGrupoPagador := null;
      end;

    vIsELD := (vGrupoPagador = (GrupoEconomicoELD));

    return vIsELD;
  end Fn_ELD_IsColetaELD;
 
  Function Fn_ELD_ValidaCampos(pColetaRowType in t_arm_coleta%rowType,
                                    pStatus        out char,
                                    pMessage       out varchar2)
    return boolean
    
  as
    vIsValid boolean := true;
  begin    
    if ( Fn_ELD_IsColetaELD(pColetaRowType) = true ) then
             
        if (length(TRIM(pColetaRowType.Arm_Coleta_Pedido)) < 10) then
           pStatus := Status_Warning;
           vIsValid := false;
           pMessage := 'Pedido não pode ter menos que 10 caracteres.';
           return vIsValid;
        end if;
         
    end if;
    
    pStatus := 'N';
    pMessage:= null;
    return vIsValid;
  end Fn_ELD_ValidaCampos;
  
    
  /********************************************************************************************************
  * CREATE BY: TATIANE SANTOS
  * DATE: 01/04/2020
  *********************************************************************************************************/
  Procedure Sp_ULT_EfetivarColeta(pColetaNumero       in t_arm_coleta.arm_coleta_ncompra%type,
                                  pColetaCiclo        in t_arm_coleta.arm_coleta_ciclo%type,
                                  pMensagemEfeticacao out varchar2,
                                  pStatus             out varchar2,
                                  pMessage            out varchar2)
   as
    vEmailUsuario        varchar2(1000);
    vEmailsCopia         varchar2(2000);
    vCorpoEmail          varchar2(4000) := '';
    vMensagemEfeticacao  varchar2(4000) := '';
    vAssunto             Varchar2(1000) := 'Coleta gerada/efetivada com sucesso[ '||pColetaNumero||' - '||pColetaCiclo||' ]';
    vEmailOrigem         varchar2(1000) := 'coletaweb@dellavolpe.com.br';
    vAguardarAutorizacao boolean := false;
    vColetaRowType       t_arm_Coleta%RowType;
    vOcorrencia          t_arm_coleta.arm_coletaocor_codigo%type := null;
    vGrupo               varchar2(4);
  
  vUsuPodeAutorizar    boolean := false;
  begin

    begin
    
      vColetaRowType := Fn_Get_ColetaRowType(pColetaNumero, pColetaCiclo);     

      --Aqui vai a regra EFETVIAR COLETA
        
    vUsuPodeAutorizar := Fn_Get_PodeAutorizarColeta(vColetaRowType.Usu_Usuario_Codigo_Cad, vColetaRowType.Arm_Coleta_Cnpjsolicitante);
      
      vAguardarAutorizacao := Fn_ULT_AguardaOuEfetiva(vColetaRowType ,vColetaRowType.Usu_Usuario_Codigo_Cad);
      
      if vAguardarAutorizacao then
         vOcorrencia := '65'; 
      end if;

      select c.glb_grupoeconomico_codigo
         into vGrupo
         from tdvadm.t_glb_cliente c
        where trim(c.glb_cliente_cgccpfcodigo) = trim(vColetaRowType.Arm_Coleta_Cnpjpagadorferete);
        
       if(vGrupo = GrupoEconomicoULT) then 
        
           update t_arm_coleta c
              set c.arm_coletaocor_codigo = vOcorrencia,
                  c.usu_usuario_codigoautoriza = null,
                  c.arm_coleta_dtautoriza = null-- TODO: Eliminar este campo
            where c.arm_coleta_ncompra  = pColetaNumero
              and c.arm_coleta_ciclo    = pColetaCiclo;
           commit;
        
       end if;
     
      ----------------------------------------------------------------------------------------------------------------------------------
      -- Monta Mensagem do Email de Efeticação
      -- a mesma mensagem de Email será exibida no front-end no momento da Efetivação
      ----------------------------------------------------------------------------------------------------------------------------------
      vMensagemEfeticacao := vMensagemEfeticacao || '<h3>Coleta Efetivada com sucesso</h3>';
      vMensagemEfeticacao := vMensagemEfeticacao || 'Coleta Numero.: ' || pColetaNumero || ' - ' || pColetaCiclo || '<hr/>';
      vMensagemEfeticacao := case when vAguardarAutorizacao = true then vMensagemEfeticacao || '<h3 style="color:red;">Aguardando autorização da coleta aprovador: 
                                                                                               </br> 
                                                                                                luis.augusto@ultracargo.com.br;</br>
                                                                                                luizh.almeida@ultracargo.com.br;</br>
                                                                                                mateus.lopes@ultracargo.com.br;</br>
                                                                                                samara.rsantos@ultracargo.com.br;</br>
                                                                                                silvana.lira@ultracargo.com.br;</br>
                                                                                                stefanie.bernardi@ultracargo.com.br;</br>
                                                                                                claudinei.rocha@ultracargo.com.br;</br>
                                                                                               </h3>'
                                                                                               /*
                                                                                               amanda.perini@ultracargo.com.br;</br>
                                                                                               bruna.fborges@ultracargo.com.br;</br>
                                                                                               everton.poliveira@ultracargo.com.br;</br>
                                                                                               fernanda.lobo@ultracargo.com.br;</br>
                                                                                               guilherme.piccolli@ultracargo.com.br;</br>
                                                                                               henrique.oliveira@ultracargo.com.br;</br>
                                                                                               lucas.menegueco@ultracargo.com.br;</br>
                                                                                               luis.augusto@ultracargo.com.br;</br>
                                                                                               luizh.almeida@ultracargo.com.br;</br>
                                                                                               marcus.sartori@ultracargo.com.br;</br>
                                                                                               mateus.lopes@ultracargo.com.br;</br>
                                                                                               priscilla.brasileiro@ultracargo.com.br;</br>
                                                                                               rodrigo.cavalcante@ultracargo.com.br;</br>
                                                                                               samara.rsantos@ultracargo.com.br;</br>
                                                                                               silvana.lira@ultracargo.com.br;</br>
                                                                                               stefanie.bernardi@ultracargo.com.br;</br>
                                                                                               mabreu@dellavolpe.com.br;</br>
                                                                                               claudinei.rocha@ultracargo.com.br;</br>
                                                                                               fernanda.malmeida@ultracargo.com.br;</br>
                                                                                               gabrielr.ribeiro@ultracargo.com.br;</br>
                                                                                               natalia.viviano@ultracargo.com.br;</br>
                                                                                               priscila.gomes@ultracargo.com.br;</br>
                                                                                               rafael.simoes@ultracargo.com.br;</br>
                                                                                               vitor.diegues@ultracargo.com.br;</br>
                                                                                               Thiago.fischer@ultracargo.com.br;</br>
                                                                                               albuquerque.silva@ultracargo.com.br;</br>
                                                                                               anadir.rodrigues@ultracargo.com.br;</br>
                                                                                               larissac.silva@ultracargo.com.br;</br>
                                                                                               guilherme.barros@ultracargo.com.br;</br>
                                                                                               ana.brito@ultracargo.com.br;</br>
                                                                                               cassio.nascimento@ultracargo.com.br;</br>
                                                                                               bianca.sousa@ultracargo.com.br;</br>*/
                                                                                               
                               else vMensagemEfeticacao
                             end;

      ---------------------------------------------------------------------------------------------------------
      -- EMAIL EFETIVAÇÃO VLI
      -- obtenho os emails do usuário e os envolvidos na coleta para copia
      -- Sp_Get_EmailColeta vai popular:
      -- ==> vEmailUsuario com o email do usuário que cadastrou a Coleta
      -- ==> vEmailsCopia com os emails do Armazem
      ---------------------------------------------------------------------------------------------------------
      Sp_Get_EmailColeta(pColetaNumero, pColetaCiclo, vEmailUsuario, vEmailsCopia, pStatus, pMessage);

      pMensagemEfeticacao  := vMensagemEfeticacao || pMensagemEfeticacao || '<br/><b>E-mails enviados para:</b>'|| vEmailUsuario||';'||vEmailsCopia||'<br/>';

      vCorpoEmail := vMensagemEfeticacao || Fn_Get_MessageInfoColeta(pColetaNumero, pColetaCiclo, vAguardarAutorizacao);

      vEmailsCopia := case
                        when length(vEmailsCopia) > 5 then vEmailsCopia --||';jonatas.veloso@dellavolpe.com.br';
                      end;

      begin
        wservice.pkg_glb_email.SP_ENVIAEMAIL(vAssunto,
                                             vCorpoEmail,
                                             vEmailOrigem,
                                             vEmailUsuario,
                                             vEmailsCopia);
      exception when others then
        vAssunto    := 'ERRO ao tentar enviar Email da Coleta: '||pColetaNumero||' - '||pColetaCiclo;
        vCorpoEmail := 'ERRO ao tentar enviar Email da Coleta: '||pColetaNumero||' - '||pColetaCiclo||
                     ' - Usuario: '||vColetaRowType.Usu_Usuario_Codigo_Cad||' - '||sqlerrm;
        wservice.pkg_glb_email.SP_ENVIAEMAIL(vAssunto,
                                             vCorpoEmail,
                                             vEmailOrigem
                                             );
      end;

      pStatus   := Status_normal;
      pMessage  := vMensagemEfeticacao;
    exception when others then
      pStatus   := Status_normal;
      pMessage  := 'Erro ao processar Pkg_Col_Coleta.Sp_ULT_EfetivarColeta. Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;

  end Sp_ULT_EfetivarColeta;
    
  /************************************************************************************************
  * PROGRAMA         : Aguarda ou Efetiva do Cliente Ult-ultracargos
  * DESENVOLVEDOR    : Tatiane
  * DATA DE CRIACAO  : 01/04/2021
  ************************************************************************************************/
  Function Fn_ULT_AguardaOuEfetiva(pColetaRowType t_arm_coleta%rowtype, 
                                   pUsuario t_Arm_coleta.Usu_Usuario_Codigo_Cad%type)
     return Boolean
   as
     vCount integer := 1;
  begin
    
    if(pColetaRowType.Fcf_Tpcarga_Codigo in ('01','33','34', '02')) then
  
      Select count(*)
        into vCount 
        from Tdvadm.t_usu_aplicacaoperfil ap
       where ap.usu_aplicacao_codigo = 'jcoleta'
         and ap.usu_perfil_codigo    = 'ULT_EFETIVA_TPCARGA'
         and lower(ap.usu_usuario_codigo) = rpad(lower(pUsuario),10,' ');
         
        
    end if;

    return vCount = 0;
  end Fn_ULT_AguardaOuEfetiva;
  
  /*********************************************************************************************
  * Data..: 11/Mar/2021
  * Autor.: Artur Boudoux
  * Regra para saber se a coleta é da ULTRACARGO
  **********************************************************************************************/

  
  function Fn_NOV_IsColetaNOVELIS(pColetaRowType in t_arm_coleta%rowType) return boolean
  as
    vGrupoPagador       t_glb_grupoeconomico.glb_grupoeconomico_codigo%type;
    vIsNVLSev           boolean := false;
  begin
      --------------------------------------------------------------
      -- Obtem o Grupo economico do pagador da Coleta.
      --------------------------------------------------------------
      begin
        Select c.glb_grupoeconomico_codigo
           Into vGrupoPagador
           From t_glb_cliente c
           where c.glb_cliente_cgccpfcodigo = rpad(pColetaRowType.ARM_COLETA_CNPJPAGADORFERETE,20,' ');
      exception when no_data_found then
        vGrupoPagador := null;
      end;
      
    vIsNVLSev := (vGrupoPagador = GrupoEconomicoNOVELIS);
    return vIsNVLSev;
  end Fn_NOV_IsColetaNOVELIS;    
  
  -------------------------------------------------------------------------------------------
  
  -------------------------------------------------------------------------------------------
   Function Fn_Novelis_ValidaCampos(pColetaRowType in t_arm_coleta%rowType,
                                     pStatus        out char,
                                     pMessage       out varchar2) return boolean AS
    vIsValid boolean := true;
    ValidaNovelis number(19);


  begin

    if ( Fn_NOV_IsColetaNOVELIS(pColetaRowType) = True ) and 
       ( pColetaRowType.Arm_Coleta_Tpcoleta = 'E' ) then
         select count(*)
           into ValidaNovelis
           from tdvadm.t_usu_aplicacaoperfil p
           where p.usu_aplicacao_codigo = 'jcoleta'
           and p.usu_perfil_codigo = 'NVL_SOLICITA_EXPRESSO'
           and p.usu_usuario_codigo = rpad(lower(trim(pColetaRowType.usu_usuario_codigo_cad)), 10);
           
           if(ValidaNovelis = 0) then
              pStatus  := Status_Warning;
              pMessage := 'Usuário não autorizado criar coletas expressas. Favor contatar colaborador Novelis para solicitar coleta.';
              vIsValid := false;
              return vIsValid;
           end if;
    end if;
    
    return vIsValid;
  end Fn_Novelis_ValidaCampos;
  
  ----------------------------------------------------------------------------------
  
  Procedure Sp_NOVELIS_EfetivarColeta(pColetaNumero       in t_arm_coleta.arm_coleta_ncompra%type,
                                      pColetaCiclo        in t_arm_coleta.arm_coleta_ciclo%type,
                                      pMensagemEfeticacao out varchar2,
                                      pStatus             out varchar2,
                                      pMessage            out varchar2)
   as
     vColeta tdvadm.t_arm_coleta.arm_coleta_ncompra%type;
     vCiclo tdvadm.t_arm_coleta.arm_coleta_ciclo%type;
     vTpColeta tdvadm.t_arm_coleta.arm_coleta_tpcoleta%type;
     vUsuCad tdvadm.t_arm_coleta.usu_usuario_codigo_cad%type;
   begin
     begin  
       
       select c.arm_coleta_ncompra,
              c.arm_coleta_ciclo,
              c.arm_coleta_tpcoleta,
              c.usu_usuario_codigo_cad
         into vColeta,
              vCiclo,
              vTpColeta,
              vUsuCad
       from tdvadm.t_arm_coleta c
       where c.arm_coleta_ncompra = pColetaNumero
         and c.arm_coleta_ciclo   = pColetaCiclo; 
         
         
       vColeta   := NVL(vColeta, '0');
       vCiclo    := NVL(vCiclo, '0'); 
       vTpColeta := NVL(vTpColeta, 'X');
       vUsuCad   := NVL(vUsuCad, 'X');
        
     exception when no_data_found then
       
         vColeta   := '0';
         vCiclo    := '0'; 
         vTpColeta := 'X';
         vUsuCad   := 'X';
         
     end;
     
     
   end Sp_NOVELIS_EfetivarColeta;
  
  /*********************************************************************************************
  * Data..: 11/Mar/2021
  * Autor.: Artur Boudoux
  * Regra para saber se a coleta é da ULTRACARGO
  **********************************************************************************************/
  function Fn_ULT_IsColetaULT(pColetaRowType in t_arm_coleta%rowType) return boolean
  as
    vGrupoPagador               t_glb_grupoeconomico.glb_grupoeconomico_codigo%type;
    vIsULT                      boolean := false;
  begin
      --------------------------------------------------------------
      -- Obtem o Grupo economico do cliente destinatario da Coleta.
      --------------------------------------------------------------
      begin
        Select c.glb_grupoeconomico_codigo
           Into vGrupoPagador
           From t_glb_cliente c
           where c.glb_cliente_cgccpfcodigo = rpad(pColetaRowType.ARM_COLETA_CNPJPAGADORFERETE,20,' ');
      exception when no_data_found then
        vGrupoPagador := null;
      end;

    vIsULT  := vGrupoPagador In (GrupoEconomicoULT);

    return vIsULT;
  end Fn_ULT_IsColetaULT;



   /*********************************************************************************************
  * Data..: 09/Fev/2018
  * Autor.: Felipe Sedevitiz 
  * Regra para saber se a coleta é da SUZANO
  **********************************************************************************************/
  function Fn_SUZ_IsColetaSUZ(pColetaRowType in t_arm_coleta%rowType) return boolean
  as
    vGrupoPagador              t_glb_grupoeconomico.glb_grupoeconomico_codigo%type;
    vIsSUZ                    boolean := false;
  begin
      --------------------------------------------------------------
      -- Obtem o Grupo economico do cliente destinatario da Coleta.
      --------------------------------------------------------------
      begin
         Select c.glb_grupoeconomico_codigo
           Into vGrupoPagador
           From t_glb_cliente c
           where c.glb_cliente_cgccpfcodigo = rpad(pColetaRowType.ARM_COLETA_CNPJPAGADORFERETE,20,' ');
      exception when no_data_found then
        vGrupoPagador := null;
      end;


    vIsSUZ := vGrupoPagador IN (GrupoEconomicoSUZ, GrupoEconomicoSUZ2, GrupoEconomicoSUZ3, GrupoEconomicoSUZ4, 
                                                           GrupoEconomicoSUZ5, GrupoEconomicoSUZ6, GrupoEconomicoSUZ7, GrupoEconomicoSUZ8,
                                                           GrupoEconomicoSUZ9, GrupoEconomicoSUZ10, GrupoEconomicoSUZ11,GrupoEconomicoSUZ12);

    return vIsSUZ;
  end Fn_SUZ_IsColetaSUZ;


  /*********************************************************************************************
  * Data..: 15/Fev/2018
  * Autor.: Felipe Sedevitiz 
  * Regra para saber se a coleta é da RAIZEN
  **********************************************************************************************/
  function Fn_RAI_IsColetaRAI(pColetaRowType in t_arm_coleta%rowType) return boolean
  as
    vGrupoPagador               t_glb_grupoeconomico.glb_grupoeconomico_codigo%type;
    vIsRAI                    boolean := false;
  begin
      --------------------------------------------------------------
      -- Obtem o Grupo economico do cliente destinatario da Coleta.
      --------------------------------------------------------------
      begin
        Select c.glb_grupoeconomico_codigo
           Into vGrupoPagador
           From t_glb_cliente c
           where c.glb_cliente_cgccpfcodigo = rpad(pColetaRowType.ARM_COLETA_CNPJPAGADORFERETE,20,' ');
      exception when no_data_found then
        vGrupoPagador := null;
      end;

    vIsRAI := (vGrupoPagador = (GrupoEconomicoRAI));

    return vIsRAI;
  end Fn_RAI_IsColetaRAI;
  
    /*********************************************************************************************
  * Data..: 29/Jan/2020
  * Autor.: Rafael Noberto 
  * Regra para saber se a coleta é da PETROPOLIS
  **********************************************************************************************/
  function Fn_PET_IsColetaPET(pColetaRowType in t_arm_coleta%rowType) return boolean
  as
    vGrupoPagador               t_glb_grupoeconomico.glb_grupoeconomico_codigo%type;
    vIsRAI                    boolean := false;
  begin
      --------------------------------------------------------------
      -- Obtem o Grupo economico do cliente destinatario da Coleta.
      --------------------------------------------------------------
      begin
        Select c.glb_grupoeconomico_codigo
           Into vGrupoPagador
           From t_glb_cliente c
           where c.glb_cliente_cgccpfcodigo = rpad(pColetaRowType.ARM_COLETA_CNPJPAGADORFERETE,20,' ');
      exception when no_data_found then
        vGrupoPagador := null;
      end;

    vIsRAI := (vGrupoPagador = (GrupoEconomicoPET));

    return vIsRAI;
  end Fn_PET_IsColetaPET;

  /*********************************************************************************************
  * Data..: 28/Fev/2018
  * Autor.: Felipe Sedevitiz 
  * Regra para saber se a coleta é da USIMINAS
  **********************************************************************************************/
  function Fn_USI_IsColetaUSI(pColetaRowType in t_arm_coleta%rowType) return boolean
  as
    vGrupoPagador             t_glb_grupoeconomico.glb_grupoeconomico_codigo%type;
    vIsUSI                    boolean := false;
  begin
      --------------------------------------------------------------
      -- Obtem o Grupo economico do cliente destinatario da Coleta.
      --------------------------------------------------------------
      begin
     Select c.glb_grupoeconomico_codigo
           Into vGrupoPagador
           From t_glb_cliente c
           where c.glb_cliente_cgccpfcodigo = pColetaRowType.ARM_COLETA_CNPJPAGADORFERETE;
      exception when no_data_found then
        return false;
      end;

    vIsUSI := (vGrupoPagador IN (GrupoEconomicoUSI,GrupoEconomicoUSI2));
    return vIsUSI;
  end Fn_USI_IsColetaUSI;

  /************************************************************************************************
   * PROGRAMA         : ColetaWeb
   * DESENVOLVEDOR    : Fabiano
   * DATA DE CRIACAO  : 10/09/2015
   * Versão           : 2.0 - Refactor
   * FUNCINALIDADE    : Efetivar a Coleta após ser digitados os items
   * PARTICULARIDADES : Após digitar os dados da Coleta a mesma é salva para ser gerado um numero,
   *                    Porém, neste momento a Coleta recebe um ocorrencia[64] - Coleta Pendente,
   *                    Apenas após ser digitados dos item a Coleta deve ser Efetivada. e neste
   * OBS..............: Esta procedure trata de regras para Efetivar uma Coleta Arcelomittal
   * PARAM. OBRIGAT.  : pColetaNumero | pColetaCiclo = Chave da Coleta
   *                    pStatus = E=ERRO, N=Normal
   *                    pMessage = Mensagem de ERRO ou mensagem de Normal quando necessário
   * 01/02/2016 | Fabiano: Regra CBA para todas Coletas como modalidade COLETAR
   ************************************************************************************************/
   Procedure Sp_CBA_EfetivarColeta(pColetaNumero       in t_arm_coleta.arm_coleta_ncompra%type,
                                   pColetaCiclo        in t_arm_coleta.arm_coleta_ciclo%type,
                                   pMensagemEfeticacao out varchar2,
                                   pStatus             out varchar2,
                                   pMessage            out varchar2)
   as
    vEmailUsuario        varchar2(1000);
    vEmailsCopia         varchar2(2000);
    vCorpoEmail          varchar2(4000) := '';
    vMensagemEfeticacao  varchar2(4000) := '';
    vAssunto             Varchar2(1000) := 'Coleta gerada/efetivada com sucesso[ '||pColetaNumero||' - '||pColetaCiclo||' ]';
    vEmailOrigem         varchar2(1000) := 'coletaweb@dellavolpe.com.br';
    vOcorrencia          t_arm_coleta.arm_coletaocor_codigo%type := null;

    vAguardarAutorizacao boolean := false;
    vColetaRowType       t_arm_Coleta%RowType;
    vCount Integer;
  begin

    begin
      ----------------------------------------------------------------------------------------------------------------------------------
      -- Obtenho a linha da Coleta que deve ser Efetivada
      ----------------------------------------------------------------------------------------------------------------------------------
      vColetaRowType := Fn_Get_ColetaRowType(pColetaNumero, pColetaCiclo);
      
      if (trim(vColetaRowType.Fcf_Tpcarga_Codigo) in ('11','01')) then
         vAguardarAutorizacao := Fn_CBA_AguardaOuEfetiva(vColetaRowType.Usu_Usuario_Codigo_Cad);
      end if;  
      
      if vAguardarAutorizacao then
          vOcorrencia := '65';
      end if;
      
      ----------------------------------------------------------------------------------------------------------------------------------
      -- Efeitva a coleta limpando a ocorrencia e gravando data autorização como sysdate e usuário autorizador como o de cadastro
      -- Conforme Solicitação da Cris, é regra de contrato que todas as Coletas Solictadas pela ferramenta sejam como modalidade COLETAR
      ----------------------------------------------------------------------------------------------------------------------------------
      update t_arm_coleta c
      set  c.arm_coletaocor_codigo      = vOcorrencia,
           c.arm_coleta_dtautoriza      = sysdate,
           c.usu_usuario_codigoautoriza = vColetaRowType.Usu_Usuario_Codigo_Cad,
           c.arm_coleta_entcoleta       = 'C',
           c.arm_coleta_tipo            = 'COLETAR'
       where c.arm_coleta_ncompra  = pColetaNumero
         and c.arm_coleta_ciclo    = pColetaCiclo;
      commit;

      ----------------------------------------------------------------------------------------------------------------------------------
      -- Monta Mensagem do Email de Efeticação
      -- a mesma mensagem de Email será exibida no front-end no momento da Efetivação
      ----------------------------------------------------------------------------------------------------------------------------------
      vMensagemEfeticacao := vMensagemEfeticacao || '<h3>Coleta Efetivada com sucesso</h3>';
      vMensagemEfeticacao := vMensagemEfeticacao || 'Coleta Numero.: ' || pColetaNumero || ' - ' || pColetaCiclo || '<hr/>';

      if ( UPPER(nvl(vColetaRowType.Arm_Coleta_Entcoleta, 'C')) = 'E' ) or ( UPPER(nvl(vColetaRowType.Arm_Coleta_Tipo, 'COLETAR')) = 'ENTREGA' ) then
         vMensagemEfeticacao := vMensagemEfeticacao || '<b>Atenção: </b> <span style="color: red">Coleta Solicitada como ENTREGA e transformada para COLETAR<br/>';
         vMensagemEfeticacao := vMensagemEfeticacao || 'Confomr regra de Contrato.</span><hr/>';
      end if;

      ----------------------------------------------------------------------------------------------------------------------------------
      -- Quando for uma Coleta Expressa e o usuário Solicitante não for 'VMETAIS'
      -- a Coleta deve ser Transformada para Normal
      -- e na mensagem de Efetivação e Email deve estar falando que foi transformada porque o usuário não tem permissão para solicitar Expressa
      ----------------------------------------------------------------------------------------------------------------------------------
      
      /*
       * Diego Lirio - Regra alterada somente para alguns CNPJ do grupo 0569.
       * Regra solicitada por Kethleen 20/04/2017 - via Email
       */      
      --if vColetaRowType.Arm_Coleta_Tpcoleta = 'E' and trim(lower(vColetaRowType.Usu_Usuario_Codigo_Cad)) != lower('vmetais') then
         
      
      if vColetaRowType.Arm_Coleta_Tpcoleta = 'E' then
            -- CNPJ Regra Expresso   
            Select Count(*)
              into vCount
              from Tdvadm.t_usu_perfildetalhe pd
             where pd.usu_aplicacao_codigo = 'jcoleta'
               and pd.usu_perfil_codigo    = 'CBA_EFETIVA_EXPRESSO'
               and trim(pd.usu_perfildetalhe_regra) in (trim(vColetaRowType.Glb_Cliente_Cgccpfcodigoentreg), trim(vColetaRowType.Arm_Coleta_Cnpjsolicitante));       
            -- se for cnpj da regra entra no if
            if vCount > 0 then
                  Select count(*)
                    into vCount 
                    from Tdvadm.t_usu_aplicacaoperfil ap
                   where ap.usu_aplicacao_codigo = 'jcoleta'
                     and ap.usu_perfil_codigo    = 'CBA_EFETIVA_EXPRESSO'
                     and lower(ap.usu_usuario_codigo) = rpad(lower(vColetaRowType.Usu_Usuario_Codigo_Cad),10,' ');
                  -- se usuario nao tiver permisssao para pedir como EXPRESSO transforma para NORMAL   
                  if vCount = 0 then                 
                         update t_arm_coleta c
                         set c.arm_coleta_tpcoleta        = 'N',
                             c.arm_coleta_tpcompra        = 'FOB',
                             c.arm_coleta_prioridade      =  4,
                             c.glb_tpcarga_codigo         = '02' -- TODO: Eliminar este campo
                         where c.arm_coleta_ncompra  = pColetaNumero
                           and c.arm_coleta_ciclo    = pColetaCiclo;

                         DELETE FROM t_arm_coletaformexp E
                         WHERE E.ARM_COLETA_NCOMPRA = pColetaNumero
                         AND E.ARM_COLETA_CICLO = pColetaCiclo;
                         COMMIT;

                         vMensagemEfeticacao := vMensagemEfeticacao || '<b>Atenção: </b> <span style="color: red">Coleta Solicitada como Expressa e transformada para Normal<br/>';
                         vMensagemEfeticacao := vMensagemEfeticacao || 'Usuário não tem permissão para solicitar Coleta Expressa</span><hr/>';                    
                  end if;
            end if;
      end if;

      pMensagemEfeticacao := vMensagemEfeticacao;

      ---------------------------------------------------------------------------------------------------------
      -- EMAIL EFETIVAÇÃO VALE
      -- obtenho os emails do usuário e os envolvidos na coleta para copia
      -- Sp_Get_EmailColeta vai popular:
      -- ==> vEmailUsuario com o email do usuário que cadastrou a Coleta
      -- ==> vEmailsCopia com os emails do Armazem
      ---------------------------------------------------------------------------------------------------------
      Sp_Get_EmailColeta(pColetaNumero, pColetaCiclo, vEmailUsuario, vEmailsCopia, pStatus, pMessage);

      pMensagemEfeticacao  := pMensagemEfeticacao || '<br/><b>E-mails enviados para:</b>'|| vEmailUsuario||';'||vEmailsCopia||'<br/>';
      vCorpoEmail := vMensagemEfeticacao || Fn_Get_MessageInfoColeta(pColetaNumero, pColetaCiclo, vAguardarAutorizacao);

      vMensagemEfeticacao := case when vAguardarAutorizacao = true then vMensagemEfeticacao || '<h3 style="color:red;">AGUARDANDO AUTORIZAÇÃO</h3>'||
                                                            '<H5>Prazo de autorização de até 24 horas</H5>'
                             else vMensagemEfeticacao
                             end;

      vEmailsCopia := case
                        when length(vEmailsCopia) > 5 then vEmailsCopia -- ||';fgoes@dellavolpe.com.br;ddamaceno@dellavolpe.com.br'
                        ---else 'fgoes@dellavolpe.com.br;ddamaceno@dellavolpe.com.br'
                      end;

      begin
        wservice.pkg_glb_email.SP_ENVIAEMAIL(vAssunto,
                                             vCorpoEmail,
                                             vEmailOrigem,
                                             vEmailUsuario,
                                             vEmailsCopia);
      exception when others then
        vAssunto    := 'ERRO ao tentar enviar Email da Coleta: '||pColetaNumero||' - '||pColetaCiclo;
        vCorpoEmail := 'ERRO ao tentar enviar Email da Coleta: '||pColetaNumero||' - '||pColetaCiclo||
                     ' - Usuario: '||vColetaRowType.Usu_Usuario_Codigo_Cad||' - '||sqlerrm;
        wservice.pkg_glb_email.SP_ENVIAEMAIL(vAssunto,
                                             vCorpoEmail,
                                             vEmailOrigem
                                             ------------'fgoes@dellavolpe.com.br',
                                             ------------'ddamaceno@dellavolpe.com.br'
                                             );
      end;

      pStatus   := Status_normal;
      pMessage  := vMensagemEfeticacao;
    exception when others then
      pStatus   := Status_normal;
      pMessage  := 'Erro ao processar Pkg_Col_Coleta.Sp_VLI_EfetivarColeta. Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;

  end Sp_CBA_EfetivarColeta;

  /************************************************************************************************
  * PROGRAMA         : Aguarda ou Efetiva do Cliente CBA
  * DESENVOLVEDOR    : Ewerton / Jonatas
  * DATA DE CRIACAO  : 16/08/2017
  ************************************************************************************************/
  Function Fn_CBA_AguardaOuEfetiva(pUsuario t_Arm_coleta.Usu_Usuario_Codigo_Cad%type)
     return Boolean
   as
     vCount integer;
  begin
    
    Select count(*)
      into vCount 
      from Tdvadm.t_usu_aplicacaoperfil ap
     where ap.usu_aplicacao_codigo = 'jcoleta'
       and ap.usu_perfil_codigo    = 'CBA_EFETIVA_LOTACAO'
       and lower(ap.usu_usuario_codigo) = rpad(lower(pUsuario),10,' ');

     return vCount = 0;
  end Fn_CBA_AguardaOuEfetiva;
  
   /************************************************************************************************
   * PROGRAMA         : ColetaWeb
   * DESENVOLVEDOR    : Rafael Noberto
   * DATA DE CRIACAO  : 28/04/2020
   * Versão           :
   * FUNCINALIDADE    : 
   * PARTICULARIDADES : 
   *                    
   *                    
   * OBS..............: 
   * PARAM. OBRIGAT.  : 
   *                    
   *                    
   * 
   ************************************************************************************************/
   Procedure Sp_PAR_EfetivarColeta(pColetaNumero       in t_arm_coleta.arm_coleta_ncompra%type,
                                   pColetaCiclo        in t_arm_coleta.arm_coleta_ciclo%type,
                                   pMensagemEfeticacao out varchar2,
                                   pStatus             out varchar2,
                                   pMessage            out varchar2)
   as
    vEmailUsuario        varchar2(1000);
    vEmailsCopia         varchar2(2000);
    vCorpoEmail          varchar2(4000) := '';
    vMensagemEfeticacao  varchar2(4000) := '';
    vAssunto             Varchar2(1000) := 'Coleta gerada/efetivada com sucesso[ '||pColetaNumero||' - '||pColetaCiclo||' ]';
    vEmailOrigem         varchar2(1000) := 'coletaweb@dellavolpe.com.br';
    vOcorrencia          tdvadm.t_arm_coletaocor.arm_coletaocor_codigo%type := null;
    vGrupo               varchar2(4);

    vAguardarAutorizacao boolean := false;
    vColetaRowType       t_arm_Coleta%RowType;
  begin

    begin
      ----------------------------------------------------------------------------------------------------------------------------------
      -- Obtenho a linha da Coleta que deve ser Efetivada
      ----------------------------------------------------------------------------------------------------------------------------------
    
      
      vColetaRowType := Fn_Get_ColetaRowType(pColetaNumero, pColetaCiclo);
      
     
      if (TRIM(vColetaRowType.Fcf_Tpcarga_Codigo) = '01') then
        vOcorrencia := '65';
        vAguardarAutorizacao := true;
      end if;
        
       select c.glb_grupoeconomico_codigo
         into vGrupo
         from tdvadm.t_glb_cliente c
        where trim(c.glb_cliente_cgccpfcodigo) = trim(vColetaRowType.Arm_Coleta_Cnpjpagadorferete);
        
       if(vGrupo = GrupoEconomicoPAR) then 
        
           update t_arm_coleta c
              set c.arm_coletaocor_codigo = vOcorrencia,
                  c.usu_usuario_codigoautoriza = null,
                  c.arm_coleta_dtautoriza = null-- TODO: Eliminar este campo
            where c.arm_coleta_ncompra  = pColetaNumero
              and c.arm_coleta_ciclo    = pColetaCiclo;
           commit;
        
       end if;


      pMensagemEfeticacao := vMensagemEfeticacao;

      ---------------------------------------------------------------------------------------------------------
      -- EMAIL EFETIVAÇÃO VALE
      -- obtenho os emails do usuário e os envolvidos na coleta para copia
      -- Sp_Get_EmailColeta vai popular:
      -- ==> vEmailUsuario com o email do usuário que cadastrou a Coleta
      -- ==> vEmailsCopia com os emails do Armazem
      ---------------------------------------------------------------------------------------------------------
      Sp_Get_EmailColeta(pColetaNumero, pColetaCiclo, vEmailUsuario, vEmailsCopia, pStatus, pMessage);

      pMensagemEfeticacao  := pMensagemEfeticacao || '<br/><b>E-mails enviados para:</b>'|| vEmailUsuario||';'||vEmailsCopia||'<br/>';
      vCorpoEmail := vMensagemEfeticacao || Fn_Get_MessageInfoColeta(pColetaNumero, pColetaCiclo, vAguardarAutorizacao);

      pMensagemEfeticacao := case when vAguardarAutorizacao = true then pMensagemEfeticacao || '<h3 style="color:red;">AGUARDANDO AUTORIZAÇÃO</h3>'||
                                                            '<H5>Prazo de autorização de até 24 horas</H5>'
                             else pMensagemEfeticacao
                             end;

      vEmailsCopia := case
                        when length(vEmailsCopia) > 5 then vEmailsCopia -- ||';fgoes@dellavolpe.com.br;ddamaceno@dellavolpe.com.br'
                        ---else 'fgoes@dellavolpe.com.br;ddamaceno@dellavolpe.com.br'
                      end;

      begin
        wservice.pkg_glb_email.SP_ENVIAEMAIL(vAssunto,
                                             vCorpoEmail,
                                             vEmailOrigem,
                                             vEmailUsuario,
                                             vEmailsCopia);
      exception when others then
        vAssunto    := 'ERRO ao tentar enviar Email da Coleta: '||pColetaNumero||' - '||pColetaCiclo;
        vCorpoEmail := 'ERRO ao tentar enviar Email da Coleta: '||pColetaNumero||' - '||pColetaCiclo||
                     ' - Usuario: '||vColetaRowType.Usu_Usuario_Codigo_Cad||' - '||sqlerrm;
        wservice.pkg_glb_email.SP_ENVIAEMAIL(vAssunto,
                                             vCorpoEmail,
                                             vEmailOrigem
                                             ------------'fgoes@dellavolpe.com.br',
                                             ------------'ddamaceno@dellavolpe.com.br'
                                             );
      end;

      pStatus   := Status_normal;
      pMessage  := vMensagemEfeticacao;
    exception when others then
      pStatus   := Status_normal;
      pMessage  := 'Erro ao processar Pkg_Col_Coleta.Sp_PAR_EfetivarColeta. Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;

  end Sp_PAR_EfetivarColeta;
  
  /************************************************************************************************
   * PROGRAMA         : ColetaWeb
   * DESENVOLVEDOR    : Klayton ; Gustavo / Guilherme / Jonatas
   * DATA DE CRIACAO  : 16/08/2017
   * Versão           :
   * FUNCINALIDADE    : 
   * PARTICULARIDADES : 
   *                    
   *                    
   * OBS..............: 
   * PARAM. OBRIGAT.  : 
   *                    
   *                    
   * 
   ************************************************************************************************/
   Procedure Sp_HYD_EfetivarColeta(pColetaNumero       in t_arm_coleta.arm_coleta_ncompra%type,
                                   pColetaCiclo        in t_arm_coleta.arm_coleta_ciclo%type,
                                   pMensagemEfeticacao out varchar2,
                                   pStatus             out varchar2,
                                   pMessage            out varchar2)
   as
    vEmailUsuario        varchar2(1000);
    vEmailsCopia         varchar2(2000);
    vCorpoEmail          varchar2(4000) := '';
    vMensagemEfeticacao  varchar2(4000) := '';
    vAssunto             Varchar2(1000) := 'Coleta gerada/efetivada com sucesso[ '||pColetaNumero||' - '||pColetaCiclo||' ]';
    vEmailOrigem         varchar2(1000) := 'coletaweb@dellavolpe.com.br';
    vGrupo               varchar2(4);

    vAguardarAutorizacao boolean := false;
    vColetaRowType       t_arm_Coleta%RowType;
    vCount Integer;
  begin

    begin
      ----------------------------------------------------------------------------------------------------------------------------------
      -- Obtenho a linha da Coleta que deve ser Efetivada
      ----------------------------------------------------------------------------------------------------------------------------------
      vColetaRowType := Fn_Get_ColetaRowType(pColetaNumero, pColetaCiclo);

      ----------------------------------------------------------------------------------------------------------------------------------
      -- Efeitva a coleta limpando a ocorrencia e gravando data autorização como sysdate e usuário autorizador como o de cadastro
      -- Conforme Solicitação da Cris, é regra de contrato que todas as Coletas Solictadas pela ferramenta sejam como modalidade COLETAR
      ----------------------------------------------------------------------------------------------------------------------------------
      update t_arm_coleta c
      set  c.arm_coletaocor_codigo      = null,
           c.arm_coleta_dtautoriza      = sysdate,
           c.usu_usuario_codigoautoriza = vColetaRowType.Usu_Usuario_Codigo_Cad,
           c.arm_coleta_entcoleta       = 'C',
           c.arm_coleta_tipo            = 'COLETAR'
       where c.arm_coleta_ncompra  = pColetaNumero
         and c.arm_coleta_ciclo    = pColetaCiclo;
      commit;

      ----------------------------------------------------------------------------------------------------------------------------------
      -- Monta Mensagem do Email de Efeticação
      -- a mesma mensagem de Email será exibida no front-end no momento da Efetivação
      ----------------------------------------------------------------------------------------------------------------------------------
      vMensagemEfeticacao := vMensagemEfeticacao || '<h3>Coleta Efetivada com sucesso</h3>';
      vMensagemEfeticacao := vMensagemEfeticacao || 'Coleta Numero.: ' || pColetaNumero || ' - ' || pColetaCiclo || '<hr/>';

      if ( UPPER(nvl(vColetaRowType.Arm_Coleta_Entcoleta, 'C')) = 'E' ) or ( UPPER(nvl(vColetaRowType.Arm_Coleta_Tipo, 'COLETAR')) = 'ENTREGA' ) then
         vMensagemEfeticacao := vMensagemEfeticacao || '<b>Atenção: </b> <span style="color: red">Coleta Solicitada como ENTREGA e transformada para COLETAR<br/>';
         vMensagemEfeticacao := vMensagemEfeticacao || 'Confomr regra de Contrato.</span><hr/>';
      end if;

      ----------------------------------------------------------------------------------------------------------------------------------
      -- Quando for uma Coleta Expressa e o usuário Solicitante não for 'VMETAIS'
      -- a Coleta deve ser Transformada para Normal
      -- e na mensagem de Efetivação e Email deve estar falando que foi transformada porque o usuário não tem permissão para solicitar Expressa
      ----------------------------------------------------------------------------------------------------------------------------------
      
      /*
       * Diego Lirio - Regra alterada somente para alguns CNPJ do grupo 0569.
       * Regra solicitada por Kethleen 20/04/2017 - via Email
       */      
      --if vColetaRowType.Arm_Coleta_Tpcoleta = 'E' and trim(lower(vColetaRowType.Usu_Usuario_Codigo_Cad)) != lower('vmetais') then
      if vColetaRowType.Arm_Coleta_Tpcoleta = 'E' then
            -- CNPJ Regra Expresso   
            Select Count(*)
              into vCount
              from Tdvadm.t_usu_perfildetalhe pd
             where pd.usu_aplicacao_codigo = 'jcoleta'
               and pd.usu_perfil_codigo    = 'HYD_EFETIVA_EXPRESSO'
               and trim(pd.usu_perfildetalhe_regra) in (trim(vColetaRowType.Glb_Cliente_Cgccpfcodigoentreg), trim(vColetaRowType.Arm_Coleta_Cnpjsolicitante));       
            -- se for cnpj da regra entra no if
            if vCount > 0 then
                  Select count(*)
                    into vCount 
                    from Tdvadm.t_usu_aplicacaoperfil ap
                   where ap.usu_aplicacao_codigo = 'jcoleta'
                     and ap.usu_perfil_codigo    = 'HYD_EFETIVA_EXPRESSO'
                     and lower(ap.usu_usuario_codigo) = rpad(lower(vColetaRowType.Usu_Usuario_Codigo_Cad),10,' ');
                  -- se usuario nao tiver permisssao para pedir como EXPRESSO transforma para NORMAL   
                  if vCount = 0 then                 
                         update t_arm_coleta c
                         set c.arm_coleta_tpcoleta        = 'N',
                             c.arm_coleta_tpcompra        = 'FOB',
                             c.arm_coleta_prioridade      =  4,
                             c.glb_tpcarga_codigo         = '02' -- TODO: Eliminar este campo
                         where c.arm_coleta_ncompra  = pColetaNumero
                           and c.arm_coleta_ciclo    = pColetaCiclo;

                         DELETE FROM t_arm_coletaformexp E
                         WHERE E.ARM_COLETA_NCOMPRA = pColetaNumero
                         AND E.ARM_COLETA_CICLO = pColetaCiclo;
                         COMMIT;

                         vMensagemEfeticacao := vMensagemEfeticacao || '<b>Atenção: </b> <span style="color: red">Coleta Solicitada como Expressa e transformada para Normal<br/>';
                         vMensagemEfeticacao := vMensagemEfeticacao || 'Usuário não tem permissão para solicitar Coleta Expressa</span><hr/>';                    
                  end if;
            end if;
      end if;
      
     /*
     * Jonatas Veloso - Quando a coleta for lotação, apenas alguns usuários podem autorizar.
     * Homologação - 24/09/2019
     * Produção    - 30/09/2019
     */       
     if trim(vColetaRowType.Fcf_Tpcarga_Codigo) in ('01','11') then
     
       select c.glb_grupoeconomico_codigo
         into vGrupo
         from tdvadm.t_glb_cliente c
        where trim(c.glb_cliente_cgccpfcodigo) = trim(vColetaRowType.Arm_Coleta_Cnpjpagadorferete);
        
       if(vGrupo = GrupoEconomicoHYD) then 
        
         vAguardarAutorizacao := Fn_HYD_AguardaOuEfetiva( vColetaRowType.Usu_Usuario_Codigo_Cad );
         
         if vAguardarAutorizacao = true  then
           update t_arm_coleta c
              set c.arm_coletaocor_codigo = '65',
                  c.usu_usuario_codigoautoriza = null,
                  c.arm_coleta_dtautoriza = null-- TODO: Eliminar este campo
            where c.arm_coleta_ncompra  = pColetaNumero
              and c.arm_coleta_ciclo    = pColetaCiclo;
           commit;
         end if;
        
       end if;
     end if;


      pMensagemEfeticacao := vMensagemEfeticacao;

      ---------------------------------------------------------------------------------------------------------
      -- EMAIL EFETIVAÇÃO VALE
      -- obtenho os emails do usuário e os envolvidos na coleta para copia
      -- Sp_Get_EmailColeta vai popular:
      -- ==> vEmailUsuario com o email do usuário que cadastrou a Coleta
      -- ==> vEmailsCopia com os emails do Armazem
      ---------------------------------------------------------------------------------------------------------
      Sp_Get_EmailColeta(pColetaNumero, pColetaCiclo, vEmailUsuario, vEmailsCopia, pStatus, pMessage);

      pMensagemEfeticacao  := pMensagemEfeticacao || '<br/><b>E-mails enviados para:</b>'|| vEmailUsuario||';'||vEmailsCopia||'<br/>';
      vCorpoEmail := vMensagemEfeticacao || Fn_Get_MessageInfoColeta(pColetaNumero, pColetaCiclo, vAguardarAutorizacao);

      pMensagemEfeticacao := case when vAguardarAutorizacao = true then pMensagemEfeticacao || '<h3 style="color:red;">AGUARDANDO AUTORIZAÇÃO</h3>'||
                                                            '<H5>Prazo de autorização de até 24 horas</H5>'
                             else pMensagemEfeticacao
                             end;

      vEmailsCopia := case
                        when length(vEmailsCopia) > 5 then vEmailsCopia -- ||';fgoes@dellavolpe.com.br;ddamaceno@dellavolpe.com.br'
                        ---else 'fgoes@dellavolpe.com.br;ddamaceno@dellavolpe.com.br'
                      end;

      begin
        wservice.pkg_glb_email.SP_ENVIAEMAIL(vAssunto,
                                             vCorpoEmail,
                                             vEmailOrigem,
                                             vEmailUsuario,
                                             vEmailsCopia);
      exception when others then
        vAssunto    := 'ERRO ao tentar enviar Email da Coleta: '||pColetaNumero||' - '||pColetaCiclo;
        vCorpoEmail := 'ERRO ao tentar enviar Email da Coleta: '||pColetaNumero||' - '||pColetaCiclo||
                     ' - Usuario: '||vColetaRowType.Usu_Usuario_Codigo_Cad||' - '||sqlerrm;
        wservice.pkg_glb_email.SP_ENVIAEMAIL(vAssunto,
                                             vCorpoEmail,
                                             vEmailOrigem
                                             ------------'fgoes@dellavolpe.com.br',
                                             ------------'ddamaceno@dellavolpe.com.br'
                                             );
      end;

      pStatus   := Status_normal;
      pMessage  := vMensagemEfeticacao;
    exception when others then
      pStatus   := Status_normal;
      pMessage  := 'Erro ao processar Pkg_Col_Coleta.Sp_VLI_EfetivarColeta. Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;

  end Sp_HYD_EfetivarColeta;
  
  /*********************************************************************************************
  * Data..: 24/09/2019
  * Autor.: Jonatas Veloso
  * Versão: 1.0.1 - Aguarda ou Efetiva coleta Grupo 0613
  **********************************************************************************************/
  Function Fn_HYD_AguardaOuEfetiva(pUsuario t_Arm_coleta.Usu_Usuario_Codigo_Cad%type)
    return Boolean
  as
    vCount integer;
  begin

    Select count(*)
      into vCount 
      from Tdvadm.t_usu_aplicacaoperfil ap
     where ap.usu_aplicacao_codigo = 'jcoleta'
       and ap.usu_perfil_codigo    = 'HYD_EFETIVA_LOTACAO'
       and lower(ap.usu_usuario_codigo) = rpad(lower(pUsuario),10,' ');

     return vCount = 0;
  end Fn_HYD_AguardaOuEfetiva;
  
   /************************************************************************************************
   * PROGRAMA         : ColetaWebALB
   * DESENVOLVEDOR    : Gustavo Vocatore, F.Sedevitiz
   * DATA DE CRIACAO  : 09/02/2018
   * Versão           :
   * FUNCIONALIDADE   : 
   * PARTICULARIDADES : 
   *                    
   *                    
   * OBS..............: 
   * PARAM. OBRIGAT.  : 
   *                    
   *                    
   * 
   ************************************************************************************************/
   Procedure Sp_ALB_EfetivarColeta(pColetaNumero       in t_arm_coleta.arm_coleta_ncompra%type,
                                   pColetaCiclo        in t_arm_coleta.arm_coleta_ciclo%type,
                                   pMensagemEfeticacao out varchar2,
                                   pStatus             out varchar2,
                                   pMessage            out varchar2)
   as
    vEmailUsuario        varchar2(1000);
    vEmailsCopia         varchar2(2000);
    vCorpoEmail          varchar2(4000) := '';
    vMensagemEfeticacao  varchar2(4000) := '';
    vAssunto             Varchar2(1000) := 'Coleta gerada/efetivada com sucesso[ '||pColetaNumero||' - '||pColetaCiclo||' ]';
    vEmailOrigem         varchar2(1000) := 'coletaweb@dellavolpe.com.br';
    vPrioridade          tdvadm.t_arm_coleta.arm_coleta_prioridade%type;
    vTipoCarga           tdvadm.t_arm_coleta.fcf_tpcarga_codigo%type;

    vAguardarAutorizacao boolean := false;
    vUsuPodeAutorizar    boolean := false;
    vOcorrencia          tdvadm.t_arm_coletaocor.arm_coletaocor_codigo%type := null;
    vColetaRowType       t_arm_Coleta%RowType;
  begin

    begin
      ----------------------------------------------------------------------------------------------------------------------------------
      -- Obtenho a linha da Coleta que deve ser Efetivada
      ----------------------------------------------------------------------------------------------------------------------------------
      vColetaRowType := Fn_Get_ColetaRowType(pColetaNumero, pColetaCiclo);

      ----------------------------------------------------------------------------------------------------------------------------------
      -- Verifico se o Usuário que está efeticando é um usuário com permissão de Autorizar Coleta
      -- Isso porque se a colera entrar em alguma regra para Aguardar desconsidero porque o ususário já é o Autorizador
      ----------------------------------------------------------------------------------------------------------------------------------
      vUsuPodeAutorizar := Fn_Get_PodeAutorizarColeta(vColetaRowType.Usu_Usuario_Codigo_Cad, vColetaRowType.Arm_Coleta_Cnpjsolicitante);

      ----------------------------------------------------------------------------------------------------------------------------------
      -- Cliente autorizados a Solicitar Coletas Como Pagador Remetente(CIF) já autorizada
      -- TODO: esses CNPJs devem estar em uma regra por contrato
      -- 18/05/2016 - Felipe B - CNPJ: 00680863000157 adicionado a essa regra, conforme solicitação da Sabrina do Comercial
      -- 19/05/2016 - Felipe B - CNPJ's: 03900822000117, 45561404000354, 45561404000192, 45561404000273 adicionados a essa regra, conforme solicitação da Sabrina do Comercial
      -- 20/05/2016 - Felipe B - CNPJ's: 17155342000345, 17155342001074 adicionados a essa regra, conforme solicitação da Sabrina do Comercial
      -- 20/05/2016 - Felipe B - Foi acrescentada a cláusula de Pagador Outros, mas temos que avaliar a regra
      ----------------------------------------------------------------------------------------------------------------------------------
      -- CNPJ...: 57599581000147 = ARS IND. E COM. DE PARAFUSOS E FERRAGENS LTDA.
      -- CNPJ...: 15234146000179 = HERO SUPRIMENTOS INDUSTRIAIS LTDA
      -- CNPJ...: 71442115000184 = SIMAO SERGIO RIBEIRO ME
      -- CNPJ...: 17281973000300 = COFERMETA SA.
      -- CNPJ...: 17281973000220 = COFERMETA SA.
      -- CNPJ...: 17281973001382 = COFERMETA SA.
      ---------------------------------------------------------------------
      -- CNPJ...: 00680863000157 = ARQUIMIG SISTEMAS MOBILIARIOS LTDA
      -- CNPJ...: 03900822000117 = MODULAR MINING SYSTEMS DO BRASIL LTDA
      -- CNPJ...: 45561404000354 = PARCAN INDUSTRIA METALURGICA LTDA
      -- CNPJ...: 45561404000192 = PARCAN INDUSTRIA METALURGICA LTDA
      -- CNPJ...: 45561404000273 = PARCAN INDUSTRIA METALURGICA LTDA       
      -- CNPJ...: 17155342000345 = LOJA ELETRICA LTDA.
      -- CNPJ...: 17155342001074 = LOJA ELETRICA LTDA.
      ----------------------------------------------------------------------------------------------------------------------------------
      ----------------------------------------------------------------------------------------------------------------------------------
      -- Se a coleta entrar em alguma regra para Aguardar Autorização:
      -- Seto uma ocorrencia 65=Coleta Aguardando Autorização
      ----------------------------------------------------------------------------------------------------------------------------------
      select t.arm_coleta_prioridade,
             t.fcf_tpcarga_codigo
             into vPrioridade,
                  vTipoCarga
             from tdvadm.t_arm_coleta t 
             where t.arm_coleta_ncompra = pColetaNumero 
             and t.arm_coleta_ciclo = pColetaCiclo;

      if ( vPrioridade <> '4' OR vTipoCarga = '01 ') then
         vAguardarAutorizacao := ( Fn_ALB_AguardaOuEfetiva( pColetaNumero, pColetaCiclo ) ) and ( vUsuPodeAutorizar = False );

        ----------------------------------------------------------------------------------------------------------------------------------
        -- Update necessátio conforme regra de Autorização
        ----------------------------------------------------------------------------------------------------------------------------------
        if vAguardarAutorizacao = true then
           vOcorrencia := '65';
        end if;
      end if;

      update t_arm_coleta col
      set col.arm_coletaocor_codigo      = vOcorrencia,
/*          col.Arm_Coleta_Tpcompra        = case when vColetaRowType.Arm_Coleta_Pagadorfrete = 'R' then 'FOB'
                                                else col.Arm_Coleta_Tpcompra
                                           end, */
          col.arm_coleta_dtautoriza      = Case when Nvl(vOcorrencia, '-1') = '-1' Then sysdate
                                             else vColetaRowType.arm_coleta_dtautoriza
                                           End,
          col.usu_usuario_codigoautoriza = Case when Nvl(vOcorrencia, '-1') = '-1' Then vColetaRowType.usu_usuario_codigo_cad -- TODO: Diego | usuario nao passa na efetiva, usa o usuario cadastro
                                             else vColetaRowType.usu_usuario_codigoautoriza
                                           End
      where col.arm_coleta_ncompra    = pColetaNumero
        and col.arm_coleta_ciclo      = LPAD(pColetaCiclo,3,000)
        and col.arm_coletaorigem_cod  = 4;
      commit;

      ----------------------------------------------------------------------------------------------------------------------------------
      -- Monta Mensagem do Email de Efeticação
      -- a mesma mensagem de Email será exibida no front-end no momento da Efetivação
      ----------------------------------------------------------------------------------------------------------------------------------
      vMensagemEfeticacao := vMensagemEfeticacao || '<h3>Coleta Efetivada com sucesso</h3>';
      vMensagemEfeticacao := vMensagemEfeticacao || 'Coleta Numero.: ' || pColetaNumero || ' - ' || pColetaCiclo || '<hr/>';
      vMensagemEfeticacao := case when vAguardarAutorizacao = true then vMensagemEfeticacao || '<h3 style="color:red;">AGUARDANDO AUTORIZAÇÃO</h3>'
                               else vMensagemEfeticacao
                             end;

      ---------------------------------------------------------------------------------------------------------
      -- EMAIL EFETIVAÇÃO VLI
      -- obtenho os emails do usuário e os envolvidos na coleta para copia
      -- Sp_Get_EmailColeta vai popular:
      -- ==> vEmailUsuario com o email do usuário que cadastrou a Coleta
      -- ==> vEmailsCopia com os emails do Armazem
      ---------------------------------------------------------------------------------------------------------
      Sp_Get_EmailColeta(pColetaNumero, pColetaCiclo, vEmailUsuario, vEmailsCopia, pStatus, pMessage);

      pMensagemEfeticacao  := vMensagemEfeticacao || pMensagemEfeticacao || '<br/><b>E-mails enviados para:</b>'|| vEmailUsuario||';'||vEmailsCopia||'<br/>';

      vCorpoEmail := vMensagemEfeticacao || Fn_Get_MessageInfoColeta(pColetaNumero, pColetaCiclo, vAguardarAutorizacao);

      vEmailsCopia := case
                        when length(vEmailsCopia) > 5 then vEmailsCopia --||';fgoes@dellavolpe.com.br;ddamaceno@dellavolpe.com.br'
                        --else 'fgoes@dellavolpe.com.br;ddamaceno@dellavolpe.com.br'
                      end;

      begin
        wservice.pkg_glb_email.SP_ENVIAEMAIL(vAssunto,
                                             vCorpoEmail,
                                             vEmailOrigem,
                                             vEmailUsuario,
                                             vEmailsCopia);
      exception when others then
        vAssunto    := 'ERRO ao tentar enviar Email da Coleta: '||pColetaNumero||' - '||pColetaCiclo;
        vCorpoEmail := 'ERRO ao tentar enviar Email da Coleta: '||pColetaNumero||' - '||pColetaCiclo||
                     ' - Usuario: '||vColetaRowType.Usu_Usuario_Codigo_Cad||' - '||sqlerrm;
        wservice.pkg_glb_email.SP_ENVIAEMAIL(vAssunto,
                                             vCorpoEmail,
                                             vEmailOrigem
                                             --'fgoes@dellavolpe.com.br',
                                             --'ddamaceno@dellavolpe.com.br'
                                             );
      end;

      pStatus   := Status_normal;
      pMessage  := vMensagemEfeticacao;
    exception when others then
      pStatus   := Status_normal;
      pMessage  := 'Erro ao processar Pkg_Col_Coleta.Sp_VLI_EfetivarColeta. Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;
  end Sp_ALB_EfetivarColeta;
  
  /************************************************************************************************
   * PROGRAMA         : ColetaWebSUZ
   * DESENVOLVEDOR    : F.Sedevitiz
   * DATA DE CRIACAO  : 09/02/2018
   * Versão           :
   * FUNCIONALIDADE   : 
   * PARTICULARIDADES : 
   *                    
   *                    
   * OBS..............: 
   * PARAM. OBRIGAT.  : 
   *                    
   *                    
   * 
   ************************************************************************************************/
   Procedure Sp_SUZ_EfetivarColeta(pColetaNumero       in t_arm_coleta.arm_coleta_ncompra%type,
                                   pColetaCiclo        in t_arm_coleta.arm_coleta_ciclo%type,
                                   pMensagemEfeticacao out varchar2,
                                   pStatus             out varchar2,
                                   pMessage            out varchar2)
   as
    vEmailUsuario        varchar2(1000);
    vEmailsCopia         varchar2(2000);
    vCorpoEmail          varchar2(4000) := '';
    vMensagemEfeticacao  varchar2(4000) := '';
    vAssunto             Varchar2(1000) := 'Coleta gerada/efetivada com sucesso[ '||pColetaNumero||' - '||pColetaCiclo||' ]';
    vEmailOrigem         varchar2(1000) := 'coletaweb@dellavolpe.com.br';

    vAguardarAutorizacao boolean := false;
    vUsuPodeAutorizar    boolean := false;
    vOcorrencia          tdvadm.t_arm_coletaocor.arm_coletaocor_codigo%type := null;
    vColetaRowType       t_arm_Coleta%RowType;
    vCountGrupo          Integer;    
  begin

    begin
      ----------------------------------------------------------------------------------------------------------------------------------
      -- Obtenho a linha da Coleta que deve ser Efetivada
      ----------------------------------------------------------------------------------------------------------------------------------
      vColetaRowType := Fn_Get_ColetaRowType(pColetaNumero, pColetaCiclo);

      ----------------------------------------------------------------------------------------------------------------------------------
      -- Verifico se o Usuário que está efeticando é um usuário com permissão de Autorizar Coleta
      -- Isso porque se a colera entrar em alguma regra para Aguardar desconsidero porque o ususário já é o Autorizador
      ----------------------------------------------------------------------------------------------------------------------------------
      vUsuPodeAutorizar := Fn_Get_PodeAutorizarColeta(vColetaRowType.Usu_Usuario_Codigo_Cad, vColetaRowType.Arm_Coleta_Cnpjsolicitante);

      ----------------------------------------------------------------------------------------------------------------------------------
      -- Cliente autorizados a Solicitar Coletas Como Pagador Remetente(CIF) já autorizada
      -- TODO: esses CNPJs devem estar em uma regra por contrato
      -- 18/05/2016 - Felipe B - CNPJ: 00680863000157 adicionado a essa regra, conforme solicitação da Sabrina do Comercial
      -- 19/05/2016 - Felipe B - CNPJ's: 03900822000117, 45561404000354, 45561404000192, 45561404000273 adicionados a essa regra, conforme solicitação da Sabrina do Comercial
      -- 20/05/2016 - Felipe B - CNPJ's: 17155342000345, 17155342001074 adicionados a essa regra, conforme solicitação da Sabrina do Comercial
      -- 20/05/2016 - Felipe B - Foi acrescentada a cláusula de Pagador Outros, mas temos que avaliar a regra
      ----------------------------------------------------------------------------------------------------------------------------------
      -- CNPJ...: 57599581000147 = ARS IND. E COM. DE PARAFUSOS E FERRAGENS LTDA.
      -- CNPJ...: 15234146000179 = HERO SUPRIMENTOS INDUSTRIAIS LTDA
      -- CNPJ...: 71442115000184 = SIMAO SERGIO RIBEIRO ME
      -- CNPJ...: 17281973000300 = COFERMETA SA.
      -- CNPJ...: 17281973000220 = COFERMETA SA.
      -- CNPJ...: 17281973001382 = COFERMETA SA.
      ---------------------------------------------------------------------
      -- CNPJ...: 00680863000157 = ARQUIMIG SISTEMAS MOBILIARIOS LTDA
      -- CNPJ...: 03900822000117 = MODULAR MINING SYSTEMS DO BRASIL LTDA
      -- CNPJ...: 45561404000354 = PARCAN INDUSTRIA METALURGICA LTDA
      -- CNPJ...: 45561404000192 = PARCAN INDUSTRIA METALURGICA LTDA
      -- CNPJ...: 45561404000273 = PARCAN INDUSTRIA METALURGICA LTDA       
      -- CNPJ...: 17155342000345 = LOJA ELETRICA LTDA.
      -- CNPJ...: 17155342001074 = LOJA ELETRICA LTDA.

      ----------------------------------------------------------------------------------------------------------------------------------
      -- Se a coleta entrar em alguma regra para Aguardar Autorização:
      -- Seto uma ocorrencia 65=Coleta Aguardando Autorização
      ----------------------------------------------------------------------------------------------------------------------------------
      vAguardarAutorizacao := ( Fn_SUZ_AguardaOuEfetiva( pColetaNumero, pColetaCiclo ) ) and ( vUsuPodeAutorizar = False );

      ----------------------------------------------------------------------------------------------------------------------------------
      -- Update necessátio conforme regra de Autorização
      ----------------------------------------------------------------------------------------------------------------------------------
      if vAguardarAutorizacao = true then
         vOcorrencia := '65';
      end if;

      update t_arm_coleta col
      set col.arm_coletaocor_codigo      = vOcorrencia,
/*          col.Arm_Coleta_Tpcompra        = case when vColetaRowType.Arm_Coleta_Pagadorfrete = 'R' then 'FOB'
                                                else col.Arm_Coleta_Tpcompra
                                           end, */
          col.arm_coleta_dtautoriza      = Case when Nvl(vOcorrencia, '-1') = '-1' Then sysdate
                                             else vColetaRowType.arm_coleta_dtautoriza
                                           End,
          col.usu_usuario_codigoautoriza = Case when Nvl(vOcorrencia, '-1') = '-1' Then vColetaRowType.usu_usuario_codigo_cad -- TODO: Diego | usuario nao passa na efetiva, usa o usuario cadastro
                                             else vColetaRowType.usu_usuario_codigoautoriza
                                           End
      where col.arm_coleta_ncompra    = pColetaNumero
        and col.arm_coleta_ciclo      = LPAD(pColetaCiclo,3,000)
        and col.arm_coletaorigem_cod  = 4;
      commit;

      ----------------------------------------------------------------------------------------------------------------------------------
      -- Monta Mensagem do Email de Efeticação
      -- a mesma mensagem de Email será exibida no front-end no momento da Efetivação
      ----------------------------------------------------------------------------------------------------------------------------------
      vMensagemEfeticacao := vMensagemEfeticacao || '<h3>Coleta Efetivada com sucesso</h3>';
      vMensagemEfeticacao := vMensagemEfeticacao || 'Coleta Numero.: ' || pColetaNumero || ' - ' || pColetaCiclo || '<hr/>';
      vMensagemEfeticacao := case when vAguardarAutorizacao = true then vMensagemEfeticacao || '<h3 style="color:red;">AGUARDANDO AUTORIZAÇÃO</h3>'
                               else vMensagemEfeticacao
                             end;

      ---------------------------------------------------------------------------------------------------------
      -- EMAIL EFETIVAÇÃO VLI
      -- obtenho os emails do usuário e os envolvidos na coleta para copia
      -- Sp_Get_EmailColeta vai popular:
      -- ==> vEmailUsuario com o email do usuário que cadastrou a Coleta
      -- ==> vEmailsCopia com os emails do Armazem
      ---------------------------------------------------------------------------------------------------------
      Sp_Get_EmailColeta(pColetaNumero, pColetaCiclo, vEmailUsuario, vEmailsCopia, pStatus, pMessage);
      
      select count(*)
        into vCountGrupo
        from tdvadm.t_arm_coleta co,
             tdvadm.t_glb_cliente cl
       where cl.glb_grupoeconomico_codigo  IN (GrupoEconomicoSUZ12) 
         and cl.glb_cliente_cgccpfcodigo = rpad(co.arm_coleta_cnpjpagadorferete, 20)
         and co.arm_coleta_ncompra = pColetaNumero
         and co.arm_coleta_ciclo = pColetaCiclo;
      
      vCountGrupo := NVL(vCountGrupo, 0);
      
      if (vCountGrupo > 0) then
         vEmailUsuario := vEmailUsuario || ';angelos@suzano.com.br;gersond@suzano.com.br';
         pMensagemEfeticacao  := vMensagemEfeticacao || pMensagemEfeticacao || '<br/><b>E-mails enviados para:</b>'|| 
                                'angelos@suzano.com.br;gersond@suzano.com.br' ||
                                ';' ||vEmailsCopia || '<br/>';
      else 
         pMensagemEfeticacao  := vMensagemEfeticacao || pMensagemEfeticacao || '<br/><b>E-mails enviados para:</b>'|| vEmailUsuario||';'||vEmailsCopia||'<br/>';
      end if;
      
      vCorpoEmail := vMensagemEfeticacao || Fn_Get_MessageInfoColeta(pColetaNumero, pColetaCiclo, vAguardarAutorizacao);

      vEmailsCopia := case
                        when length(vEmailsCopia) > 5 then vEmailsCopia --||';fgoes@dellavolpe.com.br;ddamaceno@dellavolpe.com.br'
                        --else 'fgoes@dellavolpe.com.br;ddamaceno@dellavolpe.com.br'
                      end;

      begin
        wservice.pkg_glb_email.SP_ENVIAEMAIL(vAssunto,
                                             vCorpoEmail,
                                             vEmailOrigem,
                                             vEmailUsuario,
                                             vEmailsCopia);
      exception when others then
        vAssunto    := 'ERRO ao tentar enviar Email da Coleta: '||pColetaNumero||' - '||pColetaCiclo;
        vCorpoEmail := 'ERRO ao tentar enviar Email da Coleta: '||pColetaNumero||' - '||pColetaCiclo||
                     ' - Usuario: '||vColetaRowType.Usu_Usuario_Codigo_Cad||' - '||sqlerrm;
        wservice.pkg_glb_email.SP_ENVIAEMAIL(vAssunto,
                                             vCorpoEmail,
                                             vEmailOrigem
                                             --'fgoes@dellavolpe.com.br',
                                             --'ddamaceno@dellavolpe.com.br'
                                             );
      end;

      pStatus   := Status_normal;
      pMessage  := vMensagemEfeticacao;
    exception when others then
      pStatus   := Status_normal;
      pMessage  := 'Erro ao processar Pkg_Col_Coleta.Sp_VLI_EfetivarColeta. Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;
  end Sp_SUZ_EfetivarColeta;



 /************************************************************************************************
   * PROGRAMA         : ColetaWebRAI
   * DESENVOLVEDOR    : F.Sedevitiz
   * DATA DE CRIACAO  : 15/02/2018
   * Versão           :
   * FUNCIONALIDADE   : 
   * PARTICULARIDADES : 
   *                    
   *                    
   * OBS..............: 
   * PARAM. OBRIGAT.  : 
   *                    
   *                    
   * 
   ************************************************************************************************/
   Procedure Sp_RAI_EfetivarColeta(pColetaNumero       in t_arm_coleta.arm_coleta_ncompra%type,
                                   pColetaCiclo        in t_arm_coleta.arm_coleta_ciclo%type,
                                   pMensagemEfeticacao out varchar2,
                                   pStatus             out varchar2,
                                   pMessage            out varchar2)
   as
    vEmailUsuario        varchar2(1000);
    vEmailsCopia         varchar2(2000);
    vCorpoEmail          varchar2(4000) := '';
    vMensagemEfeticacao  varchar2(4000) := '';
    vAssunto             Varchar2(1000) := 'Coleta gerada/efetivada com sucesso[ '||pColetaNumero||' - '||pColetaCiclo||' ]';
    vEmailOrigem         varchar2(1000) := 'coletaweb@dellavolpe.com.br';

    vAguardarAutorizacao boolean := false;
    vOcorrencia          tdvadm.t_arm_coletaocor.arm_coletaocor_codigo%type := null;
    vColetaRowType       t_arm_coleta%rowType;
  begin

    begin
      ----------------------------------------------------------------------------------------------------------------------------------
      -- Obtenho a linha da Coleta que deve ser Efetivada
      ----------------------------------------------------------------------------------------------------------------------------------
      vColetaRowType := Fn_Get_ColetaRowType(pColetaNumero, pColetaCiclo);
      
       if(vColetaRowType.arm_coleta_peso  < 7001 and (TRIM(vColetaRowType.fcf_tpcarga_codigo)) Not in ('02','04', '12', '31', '33', '34')) then
          pStatus  := Status_Warning;
          pMessage := '<br><b>COLETA INVALIDA:<br>Coleta com peso inferior a 7000 tem que ser tipo de veiculo Fracionado!<br>*****</b><br>';
          return;
        end if; 
        
       if(vColetaRowType.arm_coleta_peso  > 7000 and (TRIM(vColetaRowType.fcf_tpcarga_codigo)) Not in ( '11','04','38', '33','34')) then
          pStatus  := Status_Warning;
          pMessage := '<br><b>COLETA INVALIDA:<br>Coleta com peso inferior a 7000 tem que ser tipo de veiculo Lotação!<br>*****</b><br>';
          return;
        end if;   
      
      
/*      if(vColetaRowType.fcf_tpcarga_codigo = '38' AND  Fn_RAI_RestringeAutoriza(vColetaRowType, vColetaRowType.usu_usuario_codigo_cad) = true) then
          vOcorrencia := '65';
          vAguardarAutorizacao := true;
      end if;*/
      
      update t_arm_coleta col
      set col.arm_coletaocor_codigo      = vOcorrencia,
/*          col.Arm_Coleta_Tpcompra        = case when vColetaRowType.Arm_Coleta_Pagadorfrete = 'R' then 'FOB'
                                                else col.Arm_Coleta_Tpcompra
                                           end, */
          col.arm_coleta_dtautoriza      = Case when Nvl(vOcorrencia, '-1') = '-1' Then sysdate
                                             else vColetaRowType.arm_coleta_dtautoriza
                                           End,
          col.usu_usuario_codigoautoriza = Case when Nvl(vOcorrencia, '-1') = '-1' Then vColetaRowType.usu_usuario_codigo_cad -- TODO: Diego | usuario nao passa na efetiva, usa o usuario cadastro
                                             else vColetaRowType.usu_usuario_codigoautoriza
                                           End
      where col.arm_coleta_ncompra    = pColetaNumero
        and col.arm_coleta_ciclo      = LPAD(pColetaCiclo,3,000)
        and col.arm_coletaorigem_cod  = 4;
      commit;

      ----------------------------------------------------------------------------------------------------------------------------------
      -- Monta Mensagem do Email de Efeticação
      -- a mesma mensagem de Email será exibida no front-end no momento da Efetivação
      ----------------------------------------------------------------------------------------------------------------------------------
      vMensagemEfeticacao := vMensagemEfeticacao || '<h3>Coleta Efetivada com sucesso</h3>';
      vMensagemEfeticacao := vMensagemEfeticacao || 'Coleta Numero.: ' || pColetaNumero || ' - ' || pColetaCiclo || '<hr/>';
      vMensagemEfeticacao := case when vAguardarAutorizacao = true then vMensagemEfeticacao || '<h3 style="color:red;">AGUARDANDO AUTORIZAÇÃO</h3>'
                               else vMensagemEfeticacao
                             end;

      ---------------------------------------------------------------------------------------------------------
      -- EMAIL EFETIVAÇÃO VLI
      -- obtenho os emails do usuário e os envolvidos na coleta para copia
      -- Sp_Get_EmailColeta vai popular:
      -- ==> vEmailUsuario com o email do usuário que cadastrou a Coleta
      -- ==> vEmailsCopia com os emails do Armazem
      ---------------------------------------------------------------------------------------------------------
      Sp_Get_EmailColeta(pColetaNumero, pColetaCiclo, vEmailUsuario, vEmailsCopia, pStatus, pMessage);

      pMensagemEfeticacao  := vMensagemEfeticacao || pMensagemEfeticacao || '<br/><b>E-mails enviados para:</b>'|| vEmailUsuario||';'||vEmailsCopia||'<br/>';

      vCorpoEmail := vMensagemEfeticacao || Fn_Get_MessageInfoColeta(pColetaNumero, pColetaCiclo, vAguardarAutorizacao);

      vEmailsCopia := case
                        when length(vEmailsCopia) > 5 then vEmailsCopia --||';fgoes@dellavolpe.com.br;ddamaceno@dellavolpe.com.br'
                        --else 'fgoes@dellavolpe.com.br;ddamaceno@dellavolpe.com.br'
                      end;

      begin
        wservice.pkg_glb_email.SP_ENVIAEMAIL(vAssunto,
                                             vCorpoEmail,
                                             vEmailOrigem,
                                             vEmailUsuario,
                                             vEmailsCopia);
      exception when others then
        vAssunto    := 'ERRO ao tentar enviar Email da Coleta: '||pColetaNumero||' - '||pColetaCiclo;
        vCorpoEmail := 'ERRO ao tentar enviar Email da Coleta: '||pColetaNumero||' - '||pColetaCiclo||
                     ' - Usuario: '||vColetaRowType.Usu_Usuario_Codigo_Cad||' - '||sqlerrm;
        wservice.pkg_glb_email.SP_ENVIAEMAIL(vAssunto,
                                             vCorpoEmail,
                                             vEmailOrigem
                                             --'fgoes@dellavolpe.com.br',
                                             --'ddamaceno@dellavolpe.com.br'
                                             );
      end;

      pStatus   := Status_normal;
      pMessage  := vMensagemEfeticacao;
    exception when others then
      pStatus   := Status_normal;
      pMessage  := 'Erro ao processar Pkg_Col_Coleta.Sp_VLI_EfetivarColeta. Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;
  end Sp_RAI_EfetivarColeta;


/************************************************************************************************
   * PROGRAMA         : ColetaWebUSI
   * DESENVOLVEDOR    : F.Sedevitiz
   * DATA DE CRIACAO  : 28/02/2018
   * Versão           :
   * FUNCIONALIDADE   : 
   * PARTICULARIDADES : 
   *                    
   *                    
   * OBS..............: 
   * PARAM. OBRIGAT.  : 
   *                    
   *                    
   * 
   ************************************************************************************************/
   Procedure Sp_USI_EfetivarColeta(pColetaNumero       in t_arm_coleta.arm_coleta_ncompra%type,
                                   pColetaCiclo        in t_arm_coleta.arm_coleta_ciclo%type,
                                   pMensagemEfeticacao out varchar2,
                                   pStatus             out varchar2,
                                   pMessage            out varchar2)
   as
    vEmailUsuario        varchar2(1000);
    vEmailsCopia         varchar2(2000);
    vCorpoEmail          varchar2(4000) := '';
    vMensagemEfeticacao  varchar2(4000) := '';
    vAssunto             Varchar2(1000) := 'Coleta gerada/efetivada com sucesso[ '||pColetaNumero||' - '||pColetaCiclo||' ]';
    vEmailOrigem         varchar2(1000) := 'coletaweb@dellavolpe.com.br';
    
    vAguardarAutorizacao boolean := false;
    vUsuPodeAutorizar    boolean := false;
    vOcorrencia          tdvadm.t_arm_coletaocor.arm_coletaocor_codigo%type := null;
    vColetaRowType       t_arm_Coleta%RowType;
  begin

    begin
      ----------------------------------------------------------------------------------------------------------------------------------
      -- Obtenho a linha da Coleta que deve ser Efetivada
      ----------------------------------------------------------------------------------------------------------------------------------
      vColetaRowType := Fn_Get_ColetaRowType(pColetaNumero, pColetaCiclo);

      ----------------------------------------------------------------------------------------------------------------------------------
      -- Verifico se o Usuário que está efeticando é um usuário com permissão de Autorizar Coleta
      -- Isso porque se a colera entrar em alguma regra para Aguardar desconsidero porque o ususário já é o Autorizador
      ----------------------------------------------------------------------------------------------------------------------------------
      vUsuPodeAutorizar := Fn_Get_PodeAutorizarColeta(vColetaRowType.Usu_Usuario_Codigo_Cad, vColetaRowType.Arm_Coleta_Cnpjsolicitante);
      ------------------------------------------------------------------------------------------------------------------------
      -- Se a coleta entrar em alguma regra para Aguardar Autorização:
      -- Seto uma ocorrencia 65=Coleta Aguardando Autorização
      ----------------------------------------------------------------------------------------------------------------------------------
         
          vAguardarAutorizacao := ( Fn_USI_AguardaOuEfetiva( pColetaNumero, pColetaCiclo ) ) and ( vUsuPodeAutorizar = False );
          ----------------------------------------------------------------------------------------------------------------------------------
          -- Update necessátio conforme regra de Autorização
          ----------------------------------------------------------------------------------------------------------------------------------
          if vAguardarAutorizacao = true then
             vOcorrencia := '65';
          end if;


      update t_arm_coleta col
      set col.arm_coletaocor_codigo      = vOcorrencia,
/*          col.Arm_Coleta_Tpcompra        = case when vColetaRowType.Arm_Coleta_Pagadorfrete = 'R' then 'FOB'
                                                else col.Arm_Coleta_Tpcompra
                                           end, */
          col.arm_coleta_dtautoriza      = Case when Nvl(vOcorrencia, '-1') = '-1' Then sysdate
                                             else vColetaRowType.arm_coleta_dtautoriza
                                           End,
          col.usu_usuario_codigoautoriza = Case when Nvl(vOcorrencia, '-1') = '-1' Then vColetaRowType.usu_usuario_codigo_cad -- TODO: Diego | usuario nao passa na efetiva, usa o usuario cadastro
                                             else vColetaRowType.usu_usuario_codigoautoriza
                                           End
      where col.arm_coleta_ncompra    = pColetaNumero
        and col.arm_coleta_ciclo      = LPAD(pColetaCiclo,3,000)
        and col.arm_coletaorigem_cod  = 4;
      commit;

      ----------------------------------------------------------------------------------------------------------------------------------
      -- Monta Mensagem do Email de Efeticação
      -- a mesma mensagem de Email será exibida no front-end no momento da Efetivação
      ----------------------------------------------------------------------------------------------------------------------------------
      vMensagemEfeticacao := vMensagemEfeticacao || '<h3>Coleta Efetivada com sucesso</h3>';
      vMensagemEfeticacao := vMensagemEfeticacao || 'Coleta Numero.: ' || pColetaNumero || ' - ' || pColetaCiclo || '<hr/>';
      vMensagemEfeticacao := case when vAguardarAutorizacao = true then vMensagemEfeticacao || '<h3 style="color:red;">AGUARDANDO AUTORIZAÇÃO</h3>'
                               else vMensagemEfeticacao
                             end;

      ---------------------------------------------------------------------------------------------------------
      -- EMAIL EFETIVAÇÃO VLI
      -- obtenho os emails do usuário e os envolvidos na coleta para copia
      -- Sp_Get_EmailColeta vai popular:
      -- ==> vEmailUsuario com o email do usuário que cadastrou a Coleta
      -- ==> vEmailsCopia com os emails do Armazem
      ---------------------------------------------------------------------------------------------------------
      Sp_Get_EmailColeta(pColetaNumero, pColetaCiclo, vEmailUsuario, vEmailsCopia, pStatus, pMessage);

      pMensagemEfeticacao  := vMensagemEfeticacao || pMensagemEfeticacao || '<br/><b>E-mails enviados para:</b>'|| vEmailUsuario||';'||vEmailsCopia||'<br/>';

      vCorpoEmail := vMensagemEfeticacao || Fn_Get_MessageInfoColeta(pColetaNumero, pColetaCiclo, vAguardarAutorizacao);

      vEmailsCopia := case
                        when length(vEmailsCopia) > 5 then vEmailsCopia --||';fgoes@dellavolpe.com.br;ddamaceno@dellavolpe.com.br'
                        --else 'fgoes@dellavolpe.com.br;ddamaceno@dellavolpe.com.br'
                      end;

      begin
        wservice.pkg_glb_email.SP_ENVIAEMAIL(vAssunto,
                                             vCorpoEmail,
                                             vEmailOrigem,
                                             vEmailUsuario,
                                             vEmailsCopia);
      exception when others then
        vAssunto    := 'ERRO ao tentar enviar Email da Coleta: '||pColetaNumero||' - '||pColetaCiclo;
        vCorpoEmail := 'ERRO ao tentar enviar Email da Coleta: '||pColetaNumero||' - '||pColetaCiclo||
                     ' - Usuario: '||vColetaRowType.Usu_Usuario_Codigo_Cad||' - '||sqlerrm;
        wservice.pkg_glb_email.SP_ENVIAEMAIL(vAssunto,
                                             vCorpoEmail,
                                             vEmailOrigem
                                             --'fgoes@dellavolpe.com.br',
                                             --'ddamaceno@dellavolpe.com.br'
                                             );
      end;

      pStatus   := Status_normal;
      pMessage  := vMensagemEfeticacao;
    exception when others then
      pStatus   := Status_normal;
      pMessage  := 'Erro ao processar Pkg_Col_Coleta.Sp_VLI_EfetivarColeta. Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;
  end Sp_USI_EfetivarColeta;





  /*********************************************************************************************
  * Data..: 02/01/2016
  * Autor.: Fabiano Góes
  * Versão: 1.9.2
  * Validações de Campos:
  * Regra Tipo Carga(Fcf_Tpcarga_Codigo):
  * -->Se for uma Coleta CBA
  * --|--> Se Tipo de Carga = Lotação
  * --|--|--> Se o CNPJ Solicitante não estiver na lista de CNPJs Permitidos = Bloquear gravação da Coleta
  * CNPJs liberados:
  * 61074829008701
  * 43474212000385
  * 57029431000106
  * 73698938000109
  * 55081749000100
  * 52555711000126
  * 08684547003423
  * 58874124000186
  * 71431l8000102
  * 61101895002865
  * 48790596000105
  * 53846226000174
  * 61064838014002
  **********************************************************************************************/
  Function Fn_CBA_ValidaCampos(pColetaRowType in t_arm_coleta%RowType,
                               pStatus        out char,
                               pMessage       out varchar2)
    return boolean
  as
    vIsValid boolean := true;
    /*
    vCNPJsLiberadosLotacao varchar2(1000) := '61074829008701;43474212000385;57029431000106;73698938000109;55081749000100;'||
                                             '52555711000126;08684547003423;58874124000186;71431688000102;61101895002865;'||
                                             '48790596000105;53846226000174;61064838014002'; */
  begin

    if ( Fn_CBA_IsColetaCBA(pColetaRowType) = true ) then
      
       pStatus := 'N';
       pMessage:= null;
       return vIsValid;
       
       /*
          Diego Lirio | Comentado validacao de Carga LOTACAO, todos podem pedir.. 
                         citado por Tiago Faturamento | Bruno Bernardo via email 26/04/2017 07:58
       ---------------------------------------------------------------------------------------------------------
       -- Fcf_Tpcarga_Codigo = 01 >> LOTAÇÃO | Fcf_Tpcarga_Codigo = 02 >> FRACIONADO
       -- TESTE SE É UMA COLETA LOTAÇÃO
       ---------------------------------------------------------------------------------------------------------
       if ( trim(nvl(pColetaRowType.Fcf_Tpcarga_Codigo,'02')) = '01' ) then

          ------------------------------------------------------------------------------------------------------
          -- TESTE SE O CNPJ DO SOLICITANTE NÃO ESTÁ NA LISTA DE CNPJs LIBERADOS
          ------------------------------------------------------------------------------------------------------
          if ( instr(vCNPJsLiberadosLotacao, trim(pColetaRowType.Arm_Coleta_Cnpjsolicitante)) = 0 ) then
            vIsValid := false;
            pStatus  := 'W';
            pMessage := 'Usuário não tem permissão para solicitar Carga Lotação!';
          end if;

         return vIsValid;
       end if;
       
       */
       
    end if;

    pStatus := 'N';
    pMessage:= null;

    return vIsValid;
  end Fn_CBA_ValidaCampos;
  
  /*********************************************************************************************
  * Data..: 18/01/2016
  * Autor.: Diego Lírio
  *  Regra para saber se a coleta é da Votorantim Zinco
  **********************************************************************************************/
  function Fn_VZI_IsColetaVZI(pColetaRowType in t_arm_coleta%rowType) return boolean
  as
    vGrupoDestino       t_glb_grupoeconomico.glb_grupoeconomico_codigo%type;
    vGrupoEconomicoSolicitante   t_glb_grupoeconomico.glb_grupoeconomico_codigo%type;
    vIsVZI              boolean := false;
  begin
      --------------------------------------------------------------
      -- Obtem o Grupo economico do cliente destinatario da Coleta.
      --------------------------------------------------------------
      begin
        Select c.glb_grupoeconomico_codigo
           Into vGrupoDestino
           From t_glb_cliente c
           where c.glb_cliente_cgccpfcodigo = rpad(pColetaRowType.Glb_Cliente_Cgccpfcodigoentreg,20,' ');
      exception when no_data_found then
        vGrupoDestino := null;
      end;

      --------------------------------------------------------------
      -- Obtem o Grupo economico do cliente solicitante da Coleta.
      --------------------------------------------------------------
      begin
        Select c.glb_grupoeconomico_codigo
           Into vGrupoEconomicoSolicitante
           From t_glb_cliente c
           where c.glb_cliente_cgccpfcodigo = rpad(pColetaRowType.Arm_Coleta_Cnpjsolicitante, 20, ' ');
      exception when no_data_found then
        vGrupoEconomicoSolicitante := null;
      end;

    vIsVZI := (vGrupoDestino In(GrupoEconomicoVZI)) or (vGrupoEconomicoSolicitante In(GrupoEconomicoVZI));

    return vIsVZI;
  end Fn_VZI_IsColetaVZI;  
  
  
   /************************************************************************************************
   * PROGRAMA         : ColetaWebUSI
   * DESENVOLVEDOR    : F.Sedevitiz
   * DATA DE CRIACAO  : 28/02/2018
   * Versão           :
   * FUNCIONALIDADE   : 
   * PARTICULARIDADES : 
   *                    
   *                    
   * OBS..............: 
   * PARAM. OBRIGAT.  : 
   *                    
   *                    
   * 
   ************************************************************************************************/
   Procedure Sp_PRA_EfetivarColeta(pColetaNumero       in t_arm_coleta.arm_coleta_ncompra%type,
                                   pColetaCiclo        in t_arm_coleta.arm_coleta_ciclo%type,
                                   pMensagemEfeticacao out varchar2,
                                   pStatus             out varchar2,
                                   pMessage            out varchar2)
   as
    vEmailUsuario        varchar2(1000);
    vEmailsCopia         varchar2(2000);
    vCorpoEmail          varchar2(4000) := '';
    vMensagemEfeticacao  varchar2(4000) := '';
    vAssunto             Varchar2(1000) := 'Coleta gerada/efetivada com sucesso[ '||pColetaNumero||' - '||pColetaCiclo||' ]';
    vEmailOrigem         varchar2(1000) := 'coletaweb@dellavolpe.com.br';
    
    vAguardarAutorizacao boolean := false;
    vOcorrencia          tdvadm.t_arm_coletaocor.arm_coletaocor_codigo%type := null;
    vColetaRowType       t_arm_Coleta%RowType;
  begin

    begin
      ----------------------------------------------------------------------------------------------------------------------------------
      -- Obtenho a linha da Coleta que deve ser Efetivada
      ----------------------------------------------------------------------------------------------------------------------------------
      vColetaRowType := Fn_Get_ColetaRowType(pColetaNumero, pColetaCiclo);

      update t_arm_coleta col
      set col.arm_coletaocor_codigo      = vOcorrencia,
/*          col.Arm_Coleta_Tpcompra        = case when vColetaRowType.Arm_Coleta_Pagadorfrete = 'R' then 'FOB'
                                                else col.Arm_Coleta_Tpcompra
                                           end, */
          col.arm_coleta_dtautoriza      = Case when Nvl(vOcorrencia, '-1') = '-1' Then sysdate
                                             else vColetaRowType.arm_coleta_dtautoriza
                                           End,
          col.usu_usuario_codigoautoriza = Case when Nvl(vOcorrencia, '-1') = '-1' Then vColetaRowType.usu_usuario_codigo_cad -- TODO: Diego | usuario nao passa na efetiva, usa o usuario cadastro
                                             else vColetaRowType.usu_usuario_codigoautoriza
                                           End
      where col.arm_coleta_ncompra    = pColetaNumero
        and col.arm_coleta_ciclo      = LPAD(pColetaCiclo,3,000)
        and col.arm_coletaorigem_cod  = 4;
      commit;

      ----------------------------------------------------------------------------------------------------------------------------------
      -- Monta Mensagem do Email de Efeticação
      -- a mesma mensagem de Email será exibida no front-end no momento da Efetivação
      ----------------------------------------------------------------------------------------------------------------------------------
      vMensagemEfeticacao := vMensagemEfeticacao || '<h3>Coleta Efetivada com sucesso</h3>';
      vMensagemEfeticacao := vMensagemEfeticacao || 'Coleta Numero.: ' || pColetaNumero || ' - ' || pColetaCiclo || '<hr/>';
      vMensagemEfeticacao := case when vAguardarAutorizacao = true then vMensagemEfeticacao || '<h3 style="color:red;">AGUARDANDO AUTORIZAÇÃO</h3>'
                               else vMensagemEfeticacao
                             end;

      ---------------------------------------------------------------------------------------------------------
      -- EMAIL EFETIVAÇÃO VLI
      -- obtenho os emails do usuário e os envolvidos na coleta para copia
      -- Sp_Get_EmailColeta vai popular:
      -- ==> vEmailUsuario com o email do usuário que cadastrou a Coleta
      -- ==> vEmailsCopia com os emails do Armazem
      ---------------------------------------------------------------------------------------------------------
      Sp_Get_EmailColeta(pColetaNumero, pColetaCiclo, vEmailUsuario, vEmailsCopia, pStatus, pMessage);

      pMensagemEfeticacao  := vMensagemEfeticacao || pMensagemEfeticacao || '<br/><b>E-mails enviados para:</b>'|| vEmailUsuario||';'||vEmailsCopia||'<br/>';

      vCorpoEmail := vMensagemEfeticacao || Fn_Get_MessageInfoColeta(pColetaNumero, pColetaCiclo, vAguardarAutorizacao);

      vEmailsCopia := case
                        when length(vEmailsCopia) > 5 then vEmailsCopia --||';fgoes@dellavolpe.com.br;ddamaceno@dellavolpe.com.br'
                        --else 'fgoes@dellavolpe.com.br;ddamaceno@dellavolpe.com.br'
                      end;

      begin
        wservice.pkg_glb_email.SP_ENVIAEMAIL(vAssunto,
                                             vCorpoEmail,
                                             vEmailOrigem,
                                             vEmailUsuario,
                                             vEmailsCopia);
      exception when others then
        vAssunto    := 'ERRO ao tentar enviar Email da Coleta: '||pColetaNumero||' - '||pColetaCiclo;
        vCorpoEmail := 'ERRO ao tentar enviar Email da Coleta: '||pColetaNumero||' - '||pColetaCiclo||
                     ' - Usuario: '||vColetaRowType.Usu_Usuario_Codigo_Cad||' - '||sqlerrm;
        wservice.pkg_glb_email.SP_ENVIAEMAIL(vAssunto,
                                             vCorpoEmail,
                                             vEmailOrigem
                                             --'fgoes@dellavolpe.com.br',
                                             --'ddamaceno@dellavolpe.com.br'
                                             );
      end;

      pStatus   := Status_normal;
      pMessage  := vMensagemEfeticacao;
    exception when others then
      pStatus   := Status_normal;
      pMessage  := 'Erro ao processar Pkg_Col_Coleta.Sp_PRA_EfetivarColeta. Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;
  end Sp_PRA_EfetivarColeta;
  
  /************************************************************************************************
   * PROGRAMA         : ColetaWeb
   * DESENVOLVEDOR    : Diego
   * DATA DE CRIACAO  : 27/03/2017
   * PARTICULARIDADES : Efetivar Coleta para aguardando de a mesmo estiver com PRIORIDADE = Expresso -> solicitado por Ketleen dia 27/03/2017 via email
   * PARAM. OBRIGAT.  : pColetaNumero | pColetaCiclo = Chave da Coleta
   *                    pStatus = E=ERRO, N=Normal
   *                    pMessage = Mensagem de ERRO ou mensagem de Normal quando necessário
   ************************************************************************************************/
   Procedure Sp_VZI_EfetivarColeta(pColetaNumero       in t_arm_coleta.arm_coleta_ncompra%type,
                                   pColetaCiclo        in t_arm_coleta.arm_coleta_ciclo%type,
                                   pMensagemEfeticacao out varchar2,
                                   pStatus             out varchar2,
                                   pMessage            out varchar2)
   as
    vEmailUsuario         varchar2(1000);
    vEmailsCopia          varchar2(2000);
    vCorpoEmail           varchar2(4000) := '';
    vMensagemEfeticacao   varchar2(4000) := '';
    vAssunto              Varchar2(1000) := 'Coleta gerada/efetivada com sucesso[ '||pColetaNumero||' - '||pColetaCiclo||' ]';
    vEmailOrigem          varchar2(1000) := 'coletaweb@dellavolpe.com.br';

    vUsuarioAutorizador   boolean := false;
    vColetaRowType        tdvadm.t_arm_Coleta%RowType;
    vIsExpressaAguardando boolean := false;
  begin

    begin
      ----------------------------------------------------------------------------------------------------------------------------------
      -- Obtenho a linha da Coleta que deve ser Efetivada
      ----------------------------------------------------------------------------------------------------------------------------------
      vColetaRowType := Fn_Get_ColetaRowType(pColetaNumero, pColetaCiclo);
      
      vUsuarioAutorizador := Fn_Get_PodeAutorizarColeta(pUsuario => vColetaRowType.USU_USUARIO_CODIGO_CAD, pCnpj => vColetaRowType.Arm_Coleta_Cnpjsolicitante);

      ----------------------------------------------------------------------------------------------------------------------------------
      -- Monta Mensagem do Email de Efeticação
      -- a mesma mensagem de Email será exibida no front-end no momento da Efetivação
      ----------------------------------------------------------------------------------------------------------------------------------
      vMensagemEfeticacao := vMensagemEfeticacao || '<h3>Coleta Efetivada com sucesso</h3>';
      vMensagemEfeticacao := vMensagemEfeticacao || 'Coleta Numero.: ' || pColetaNumero || ' - ' || pColetaCiclo || '<hr/>';

      ----------------------------------------------------------------------------------------------------------------------------------
      -- Quando for uma Coleta Expressa e o usuário Solicitante não for AUTORIZADOR Entra Aguardando
      -- e na mensagem de Efetivação e Email deve estar falando que foi transformada porque o usuário não tem permissão para solicitar Expressa
      ----------------------------------------------------------------------------------------------------------------------------------
      if vColetaRowType.Arm_Coleta_Tpcoleta = 'E' then 
          if Not vUsuarioAutorizador then
                update t_arm_coleta c
                  set  c.arm_coletaocor_codigo      = '65'
                  where c.arm_coleta_ncompra  = pColetaNumero
                     and c.arm_coleta_ciclo    = pColetaCiclo;
                 commit;

               vIsExpressaAguardando := true; 
               vMensagemEfeticacao   := vMensagemEfeticacao || '<b>Atenção: </b> <span style="color: red">Coleta Solicitada como Expressa.<br/>';
               vMensagemEfeticacao   := vMensagemEfeticacao || 'Coleta Aguardando Autorização da Votorantim Zinco!</span><hr/>';
          else
                update t_arm_coleta c
                  set  c.arm_coletaocor_codigo      = null,
                       c.arm_coleta_dtautoriza      = sysdate,
                       c.usu_usuario_codigoautoriza = vColetaRowType.Usu_Usuario_Codigo_Cad
                  where c.arm_coleta_ncompra  = pColetaNumero
                     and c.arm_coleta_ciclo    = pColetaCiclo;
                 commit;

               vMensagemEfeticacao := vMensagemEfeticacao || '<b>Atenção: </b> <span style="color: red">Coleta Solicitada como Expressa.<br/>';
               vMensagemEfeticacao := vMensagemEfeticacao || 'Por Usuário '|| trim(vColetaRowType.Usu_Usuario_Codigo_Cad) ||' Autorizador da Votorantim Zinco!</span><hr/>';            
          end if;
      else
           update t_arm_coleta c
              set  c.arm_coletaocor_codigo      = null,
                   c.arm_coleta_dtautoriza      = sysdate,
                   c.usu_usuario_codigoautoriza = vColetaRowType.Usu_Usuario_Codigo_Cad
              where c.arm_coleta_ncompra  = pColetaNumero
                 and c.arm_coleta_ciclo    = pColetaCiclo;
             commit;
      end if;

      pMensagemEfeticacao := vMensagemEfeticacao;

      ---------------------------------------------------------------------------------------------------------
      -- EMAIL EFETIVAÇÃO
      -- obtenho os emails do usuário e os envolvidos na coleta para copia
      -- Sp_Get_EmailColeta vai popular:
      -- ==> vEmailUsuario com o email do usuário que cadastrou a Coleta
      -- ==> vEmailsCopia com os emails do Armazem
      ---------------------------------------------------------------------------------------------------------
      Sp_Get_EmailColeta(pColetaNumero, pColetaCiclo, vEmailUsuario, vEmailsCopia, pStatus, pMessage);
      
      ---------------------------------------------------------------------------------------------------------
      -- Fabiano - 26/06/2017
      -- Conforme email enviado por: Robson Barros / robson.barros@vmetais.com.br
      -- Foi solicitado que todas as Coletas que entrarem = Expressa E Aguardando
      -- Deveria ser enviado uma notificação via email para o mesmo. 
      -- A solicitação foi Autorizado pelo Marques em: 26/06/2017 e aplicada nessa data.
      ---------------------------------------------------------------------------------------------------------
      if( vIsExpressaAguardando = true ) then
          vEmailsCopia := 'fabio.rocco@nexaresources.com;joao.ferreira.jf1@nexaresources.com;' || vEmailsCopia;
      end if;

      pMensagemEfeticacao  := pMensagemEfeticacao || '<br/><b>E-mails enviados para:</b>'|| vEmailUsuario||';'||vEmailsCopia||'<br/>';

      vEmailsCopia := case
                        when length(vEmailsCopia) > 5 then vEmailsCopia -- ||';fgoes@dellavolpe.com.br;ddamaceno@dellavolpe.com.br'
                        ---else 'fgoes@dellavolpe.com.br;ddamaceno@dellavolpe.com.br'
                      end;

      begin
        wservice.pkg_glb_email.SP_ENVIAEMAIL(vAssunto,
                                             vCorpoEmail,
                                             vEmailOrigem,
                                             vEmailUsuario,
                                             vEmailsCopia);
      exception when others then
        vAssunto    := 'ERRO ao tentar enviar Email da Coleta: '||pColetaNumero||' - '||pColetaCiclo;
        vCorpoEmail := 'ERRO ao tentar enviar Email da Coleta: '||pColetaNumero||' - '||pColetaCiclo||
                     ' - Usuario: '||vColetaRowType.Usu_Usuario_Codigo_Cad||' - '||sqlerrm;
        wservice.pkg_glb_email.SP_ENVIAEMAIL(vAssunto,
                                             vCorpoEmail,
                                             vEmailOrigem
                                             ------------'fgoes@dellavolpe.com.br',
                                             ------------'ddamaceno@dellavolpe.com.br'
                                             );
      end;

      pStatus   := Status_normal;
      pMessage  := vMensagemEfeticacao;
    exception when others then
      pStatus   := Status_normal;
      pMessage  := 'Erro ao processar Pkg_Col_Coleta.Sp_VLI_EfetivarColeta. Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;

  end Sp_VZI_EfetivarColeta;
   
   /*********************************************************************************************
  * Data..: 02/01/2016
  * Autor.: Fabiano Góes
  * Versão: 1.9.2
  * Validações de Campos:
  * Regra Tipo Carga(Fcf_Tpcarga_Codigo):
  **********************************************************************************************/
  Function Fn_HYD_ValidaCampos(pColetaRowType in t_arm_coleta%RowType,
                               pStatus        out char,
                               pMessage       out varchar2)
    return boolean
  as
    vIsValid boolean := true;
  begin

    if ( Fn_HYD_IsColetaHYD(pColetaRowType) = true ) then
      
       IF(pColetaRowType.Arm_Coleta_Dtprogramacao = trunc(sysdate) 
                              and to_char(sysdate,'hh24:mi:ss') > '14:00:00') then
               vIsValid := false;
               pStatus := 'W';
               pMessage := 'Voce não pode programar essa coleta para hoje apos as 14 horas';
               return vIsValid;                       
       end if;

    end if;

    pStatus := 'N';
    pMessage:= null;

    return vIsValid;
  end Fn_HYD_ValidaCampos;
  
 /*********************************************************************************************
  * Data..: 09/02/2018
  * Autor.: G.Vocatore - F.Sedevitiz 
  * Versão: 1.9.2
  * Validações de Campos:
  * Regra Tipo Carga(Fcf_Tpcarga_Codigo):
  **********************************************************************************************/
  Function Fn_ALB_ValidaCampos(pColetaRowType in t_arm_coleta%RowType,
                               pStatus        out char,
                               pMessage       out varchar2)
    return boolean
  as
    vIsValid boolean := true;
  begin

    if ( Fn_ALB_IsColetaALB(pColetaRowType) = true ) then
      
       pStatus := 'N';
       pMessage:= null;
       return vIsValid;
       
       /*
          Diego Lirio | Comentado validacao de Carga LOTACAO, todos podem pedir.. 
                         citado por Tiago Faturamento | Bruno Bernardo via email 26/04/2017 07:58
       ---------------------------------------------------------------------------------------------------------
       -- Fcf_Tpcarga_Codigo = 01 >> LOTAÇÃO | Fcf_Tpcarga_Codigo = 02 >> FRACIONADO
       -- TESTE SE É UMA COLETA LOTAÇÃO
       ---------------------------------------------------------------------------------------------------------
       if ( trim(nvl(pColetaRowType.Fcf_Tpcarga_Codigo,'02')) = '01' ) then

          ------------------------------------------------------------------------------------------------------
          -- TESTE SE O CNPJ DO SOLICITANTE NÃO ESTÁ NA LISTA DE CNPJs LIBERADOS
          ------------------------------------------------------------------------------------------------------
          if ( instr(vCNPJsLiberadosLotacao, trim(pColetaRowType.Arm_Coleta_Cnpjsolicitante)) = 0 ) then
            vIsValid := false;
            pStatus  := 'W';
            pMessage := 'Usuário não tem permissão para solicitar Carga Lotação!';
          end if;

         return vIsValid;
       end if;
       
       */
       
    end if;

    pStatus := 'N';
    pMessage:= null;

    return vIsValid;
  end Fn_ALB_ValidaCampos;
  
  /************************************************************************************************
   * PROGRAMA         : ColetaWebUSI
   * DESENVOLVEDOR    : F.Sedevitiz
   * DATA DE CRIACAO  : 28/02/2018
   * Versão           :
   * FUNCIONALIDADE   : 
   * PARTICULARIDADES : 
   *                    
   *                    
   * OBS..............: 
   * PARAM. OBRIGAT.  : 
   *                    
   *                    
   * 
   ************************************************************************************************/
   Procedure Sp_PARANA_EfetivarColeta(pColetaNumero       in t_arm_coleta.arm_coleta_ncompra%type,
                                   pColetaCiclo        in t_arm_coleta.arm_coleta_ciclo%type,
                                   pMensagemEfeticacao out varchar2,
                                   pStatus             out varchar2,
                                   pMessage            out varchar2)
   as
    vEmailUsuario        varchar2(1000);
    vEmailsCopia         varchar2(2000);
    vCorpoEmail          varchar2(4000) := '';
    vMensagemEfeticacao  varchar2(4000) := '';
    vAssunto             Varchar2(1000) := 'Coleta gerada/efetivada com sucesso[ '||pColetaNumero||' - '||pColetaCiclo||' ]';
    vEmailOrigem         varchar2(1000) := 'coletaweb@dellavolpe.com.br';
    vUsuPodeAutorizar    boolean := false;
    vAguardarAutorizacao boolean := false;
    vOcorrencia          tdvadm.t_arm_coletaocor.arm_coletaocor_codigo%type := null;
    vColetaRowType       t_arm_Coleta%RowType;
  begin

    begin
      ----------------------------------------------------------------------------------------------------------------------------------
      -- Obtenho a linha da Coleta que deve ser Efetivada
      ----------------------------------------------------------------------------------------------------------------------------------
      vColetaRowType := Fn_Get_ColetaRowType(pColetaNumero, pColetaCiclo);


      
       vUsuPodeAutorizar := Fn_Get_PodeAutorizarColeta(vColetaRowType.Usu_Usuario_Codigo_Cad, vColetaRowType.Arm_Coleta_Cnpjsolicitante);

        ----------------------------------------------------------------------------------------------------------------------------------
        -- Update necessátio conforme regra de Autorização
        ----------------------------------------------------------------------------------------------------------------------------------
        if vUsuPodeAutorizar = false then
            vAguardarAutorizacao := true;
            vOcorrencia := '65 ';
        end if;

                     
      update t_arm_coleta col
      set col.arm_coletaocor_codigo      = vOcorrencia,
          col.arm_coleta_dtautoriza      = Case when Nvl(vOcorrencia, '-1') = '-1' Then sysdate
                                             else vColetaRowType.arm_coleta_dtautoriza
                                           End,
          col.usu_usuario_codigoautoriza = Case when Nvl(vOcorrencia, '-1') = '-1' Then vColetaRowType.usu_usuario_codigo_cad -- TODO: Diego | usuario nao passa na efetiva, usa o usuario cadastro
                                             else vColetaRowType.usu_usuario_codigoautoriza
                                           End
      where col.arm_coleta_ncompra    = pColetaNumero
        and col.arm_coleta_ciclo      = LPAD(pColetaCiclo,3,000)
        and col.arm_coletaorigem_cod  = 4;
      commit;

      ----------------------------------------------------------------------------------------------------------------------------------
      -- Monta Mensagem do Email de Efeticação
      -- a mesma mensagem de Email será exibida no front-end no momento da Efetivação
      ----------------------------------------------------------------------------------------------------------------------------------
      vMensagemEfeticacao := vMensagemEfeticacao || '<h3>Aguardando autorização da coleta aprovador: jcandido@paranapanema.com.br</h3>';
      vMensagemEfeticacao := vMensagemEfeticacao || 'Coleta Numero.: ' || pColetaNumero || ' - ' || pColetaCiclo || '<hr/>';
      vMensagemEfeticacao := case when vAguardarAutorizacao = true then vMensagemEfeticacao || '<h3 style="color:red;">AGUARDANDO AUTORIZAÇÃO</h3>'
                               else vMensagemEfeticacao
                             end;

      ---------------------------------------------------------------------------------------------------------
      -- EMAIL EFETIVAÇÃO VLI
      -- obtenho os emails do usuário e os envolvidos na coleta para copia
      -- Sp_Get_EmailColeta vai popular:
      -- ==> vEmailUsuario com o email do usuário que cadastrou a Coleta
      -- ==> vEmailsCopia com os emails do Armazem
      ---------------------------------------------------------------------------------------------------------
      Sp_Get_EmailColeta(pColetaNumero, pColetaCiclo, vEmailUsuario, vEmailsCopia, pStatus, pMessage);

      pMensagemEfeticacao  := vMensagemEfeticacao || pMensagemEfeticacao || '<br/><b>E-mails enviados para:</b>'|| vEmailUsuario||';'||vEmailsCopia||'<br/>';

      vCorpoEmail := vMensagemEfeticacao || Fn_Get_MessageInfoColeta(pColetaNumero, pColetaCiclo, vAguardarAutorizacao);

      vEmailsCopia := case
                        when length(vEmailsCopia) > 5 then vEmailsCopia --||';fgoes@dellavolpe.com.br;ddamaceno@dellavolpe.com.br'
                        --else 'fgoes@dellavolpe.com.br;ddamaceno@dellavolpe.com.br'
                      end;

      begin
        wservice.pkg_glb_email.SP_ENVIAEMAIL(vAssunto,
                                             vCorpoEmail,
                                             vEmailOrigem,
                                             vEmailUsuario,
                                             vEmailsCopia);
      exception when others then
        vAssunto    := 'ERRO ao tentar enviar Email da Coleta: '||pColetaNumero||' - '||pColetaCiclo;
        vCorpoEmail := 'ERRO ao tentar enviar Email da Coleta: '||pColetaNumero||' - '||pColetaCiclo||
                     ' - Usuario: '||vColetaRowType.Usu_Usuario_Codigo_Cad||' - '||sqlerrm;
        wservice.pkg_glb_email.SP_ENVIAEMAIL(vAssunto,
                                             vCorpoEmail,
                                             vEmailOrigem
                                             --'fgoes@dellavolpe.com.br',
                                             --'ddamaceno@dellavolpe.com.br'
                                             );
      end;

      pStatus   := Status_normal;
      pMessage  := vMensagemEfeticacao;
    exception when others then
      pStatus   := Status_normal;
      pMessage  := 'Erro ao processar Pkg_Col_Coleta.Sp_PARANA_EfetivarColeta. Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;
  end Sp_PARANA_EfetivarColeta;
  
   /************************************************************************************************
   * PROGRAMA         : ColetaWebUSI
   * DESENVOLVEDOR    : F.Sedevitiz
   * DATA DE CRIACAO  : 28/02/2018
   * Versão           :
   * FUNCIONALIDADE   : 
   * PARTICULARIDADES : 
   *                    
   *                    
   * OBS..............: 
   * PARAM. OBRIGAT.  : 
   *                    
   *                    
   * 
   ************************************************************************************************/
   Procedure Sp_OXI_EfetivarColeta(pColetaNumero       in t_arm_coleta.arm_coleta_ncompra%type,
                                   pColetaCiclo        in t_arm_coleta.arm_coleta_ciclo%type,
                                   pMensagemEfeticacao out varchar2,
                                   pStatus             out varchar2,
                                   pMessage            out varchar2)
   as
    vEmailUsuario        varchar2(1000);
    vEmailsCopia         varchar2(2000);
    vCorpoEmail          varchar2(4000) := '';
    vMensagemEfeticacao  varchar2(4000) := '';
    vAssunto             Varchar2(1000) := 'Coleta gerada/efetivada com sucesso[ '||pColetaNumero||' - '||pColetaCiclo||' ]';
    vEmailOrigem         varchar2(1000) := 'coletaweb@dellavolpe.com.br';
    vUsuPodeAutorizar    number := 0;
    vAguardarAutorizacao boolean := false;
    vOcorrencia          tdvadm.t_arm_coletaocor.arm_coletaocor_codigo%type := null;
    vColetaRowType       t_arm_Coleta%RowType;
  begin

    begin
      ----------------------------------------------------------------------------------------------------------------------------------
      -- Obtenho a linha da Coleta que deve ser Efetivada
      ----------------------------------------------------------------------------------------------------------------------------------
      vColetaRowType := Fn_Get_ColetaRowType(pColetaNumero, pColetaCiclo);

      SELECT COUNT(*)
             INTO vUsuPodeAutorizar
       FROM TDVADM.T_ARM_PERMITEAUTORIZAR T
       WHERE T.USU_USUARIO_CODIGO = vColetaRowType.Usu_Usuario_Codigo_Cad
       AND T.FCF_TPCARGA_CODIGO  = vColetaRowType.Fcf_Tpcarga_Codigo
       AND T.ARM_COLETA_TPCOLETA = vColetaRowType.Arm_Coleta_Tpcoleta
       AND T.GLB_GRUPOECONOMICO_CODIGO = GrupoEconomicoOXI;


        ----------------------------------------------------------------------------------------------------------------------------------
        -- Update necessátio conforme regra de Autorização
        ----------------------------------------------------------------------------------------------------------------------------------
        if vUsuPodeAutorizar = 0 then
            vAguardarAutorizacao := true;
            vOcorrencia := '65 ';
        end if;

                     
      update t_arm_coleta col
      set col.arm_coletaocor_codigo      = vOcorrencia,
          col.arm_coleta_dtautoriza      = Case when Nvl(vOcorrencia, '-1') = '-1' Then sysdate
                                             else vColetaRowType.arm_coleta_dtautoriza
                                           End,
          col.usu_usuario_codigoautoriza = Case when Nvl(vOcorrencia, '-1') = '-1' Then vColetaRowType.usu_usuario_codigo_cad -- TODO: Diego | usuario nao passa na efetiva, usa o usuario cadastro
                                             else vColetaRowType.usu_usuario_codigoautoriza
                                           End
      where col.arm_coleta_ncompra    = pColetaNumero
        and col.arm_coleta_ciclo      = LPAD(pColetaCiclo,3,000)
        and col.arm_coletaorigem_cod  = 4;
      commit;

      ----------------------------------------------------------------------------------------------------------------------------------
      -- Monta Mensagem do Email de Efeticação
      -- a mesma mensagem de Email será exibida no front-end no momento da Efetivação
      ----------------------------------------------------------------------------------------------------------------------------------
      vMensagemEfeticacao := vMensagemEfeticacao || '';
      vMensagemEfeticacao := vMensagemEfeticacao || 'Coleta Numero.: ' || pColetaNumero || ' - ' || pColetaCiclo || '<hr/>';
      vMensagemEfeticacao := case when vAguardarAutorizacao = true then vMensagemEfeticacao || '<h3 style="color:red;">AGUARDANDO AUTORIZAÇÃO</h3>'
                               else vMensagemEfeticacao
                             end;

      ---------------------------------------------------------------------------------------------------------
      -- EMAIL EFETIVAÇÃO VLI
      -- obtenho os emails do usuário e os envolvidos na coleta para copia
      -- Sp_Get_EmailColeta vai popular:
      -- ==> vEmailUsuario com o email do usuário que cadastrou a Coleta
      -- ==> vEmailsCopia com os emails do Armazem
      ---------------------------------------------------------------------------------------------------------
      Sp_Get_EmailColeta(pColetaNumero, pColetaCiclo, vEmailUsuario, vEmailsCopia, pStatus, pMessage);

      pMensagemEfeticacao  := vMensagemEfeticacao || pMensagemEfeticacao || '<br/><b>E-mails enviados para:</b>'|| vEmailUsuario||';'||vEmailsCopia||'<br/>';

      vCorpoEmail := vMensagemEfeticacao || Fn_Get_MessageInfoColeta(pColetaNumero, pColetaCiclo, vAguardarAutorizacao);

      vEmailsCopia := case
                        when length(vEmailsCopia) > 5 then vEmailsCopia --||';fgoes@dellavolpe.com.br;ddamaceno@dellavolpe.com.br'
                        --else 'fgoes@dellavolpe.com.br;ddamaceno@dellavolpe.com.br'
                      end;

      begin
        wservice.pkg_glb_email.SP_ENVIAEMAIL(vAssunto,
                                             vCorpoEmail,
                                             vEmailOrigem,
                                             vEmailUsuario,
                                             vEmailsCopia);
      exception when others then
        vAssunto    := 'ERRO ao tentar enviar Email da Coleta: '||pColetaNumero||' - '||pColetaCiclo;
        vCorpoEmail := 'ERRO ao tentar enviar Email da Coleta: '||pColetaNumero||' - '||pColetaCiclo||
                     ' - Usuario: '||vColetaRowType.Usu_Usuario_Codigo_Cad||' - '||sqlerrm;
        wservice.pkg_glb_email.SP_ENVIAEMAIL(vAssunto,
                                             vCorpoEmail,
                                             vEmailOrigem
                                             --'fgoes@dellavolpe.com.br',
                                             --'ddamaceno@dellavolpe.com.br'
                                             );
      end;

      pStatus   := Status_normal;
      pMessage  := vMensagemEfeticacao;
    exception when others then
      pStatus   := Status_normal;
      pMessage  := 'Erro ao processar Pkg_Col_Coleta.Sp_OXI_EfetivarColeta. Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;
  end Sp_OXI_EfetivarColeta;
  
   /************************************************************************************************
   * PROGRAMA         : ColetaWebENE
   * DESENVOLVEDOR    : Gustavo  e Tati
   * DATA DE CRIACAO  : 28/12/2020
   * Versão           :
   * FUNCIONALIDADE   : 
   * PARTICULARIDADES : 
   *                    
   *                    
   * OBS..............: 
   * PARAM. OBRIGAT.  : 
   *                    
   *                    
   * 
   ************************************************************************************************/
   Procedure Sp_ENE_EfetivarColeta(pColetaNumero       in t_arm_coleta.arm_coleta_ncompra%type,
                                   pColetaCiclo        in t_arm_coleta.arm_coleta_ciclo%type,
                                   pMensagemEfeticacao out varchar2,
                                   pStatus             out varchar2,
                                   pMessage            out varchar2)
   as
    vEmailUsuario        varchar2(1000);
    vEmailsCopia         varchar2(2000);
    vCorpoEmail          varchar2(4000) := '';
    vMensagemEfeticacao  varchar2(4000) := '';
    vAssunto             Varchar2(1000) := 'Coleta gerada/efetivada com sucesso[ '||pColetaNumero||' - '||pColetaCiclo||' ]';
    vEmailOrigem         varchar2(1000) := 'coletaweb@dellavolpe.com.br';
    vUsuPodeAutorizar    number := 0;
    vAguardarAutorizacao boolean := false;
    vOcorrencia          tdvadm.t_arm_coletaocor.arm_coletaocor_codigo%type := null;
    vColetaRowType       t_arm_Coleta%RowType;
  begin

    begin
      ----------------------------------------------------------------------------------------------------------------------------------
      -- Obtenho a linha da Coleta que deve ser Efetivada
      ----------------------------------------------------------------------------------------------------------------------------------
      vColetaRowType := Fn_Get_ColetaRowType(pColetaNumero, pColetaCiclo);

      SELECT COUNT(*)
             INTO vUsuPodeAutorizar
       FROM TDVADM.T_ARM_PERMITEAUTORIZAR T
       WHERE T.USU_USUARIO_CODIGO = vColetaRowType.Usu_Usuario_Codigo_Cad
       AND T.GLB_GRUPOECONOMICO_CODIGO = GrupoEconomicoENE;


        ----------------------------------------------------------------------------------------------------------------------------------
        -- Update necessátio conforme regra de Autorização
        ----------------------------------------------------------------------------------------------------------------------------------
        if vUsuPodeAutorizar = 0 then
            vAguardarAutorizacao := true;
            vOcorrencia := '65 ';
        end if;

                     
      update t_arm_coleta col
      set col.arm_coletaocor_codigo      = vOcorrencia,
          col.arm_coleta_dtautoriza      = Case when Nvl(vOcorrencia, '-1') = '-1' Then sysdate
                                             else vColetaRowType.arm_coleta_dtautoriza
                                           End,
          col.usu_usuario_codigoautoriza = Case when Nvl(vOcorrencia, '-1') = '-1' Then vColetaRowType.usu_usuario_codigo_cad -- TODO: Diego | usuario nao passa na efetiva, usa o usuario cadastro
                                             else vColetaRowType.usu_usuario_codigoautoriza
                                           End
      where col.arm_coleta_ncompra    = pColetaNumero
        and col.arm_coleta_ciclo      = LPAD(pColetaCiclo,3,000)
        and col.arm_coletaorigem_cod  = 4;
      commit;

      ----------------------------------------------------------------------------------------------------------------------------------
      -- Monta Mensagem do Email de Efeticação
      -- a mesma mensagem de Email será exibida no front-end no momento da Efetivação
      ----------------------------------------------------------------------------------------------------------------------------------
      vMensagemEfeticacao := vMensagemEfeticacao || '';
      vMensagemEfeticacao := vMensagemEfeticacao || 'Coleta Numero.: ' || pColetaNumero || ' - ' || pColetaCiclo || '<hr/>';
      vMensagemEfeticacao := case when vAguardarAutorizacao = true then vMensagemEfeticacao || '<h3 style="color:red;">AGUARDANDO AUTORIZAÇÃO</h3>'
                               else vMensagemEfeticacao
                             end;

      ---------------------------------------------------------------------------------------------------------
      -- EMAIL EFETIVAÇÃO VLI
      -- obtenho os emails do usuário e os envolvidos na coleta para copia
      -- Sp_Get_EmailColeta vai popular:
      -- ==> vEmailUsuario com o email do usuário que cadastrou a Coleta
      -- ==> vEmailsCopia com os emails do Armazem
      ---------------------------------------------------------------------------------------------------------
      Sp_Get_EmailColeta(pColetaNumero, pColetaCiclo, vEmailUsuario, vEmailsCopia, pStatus, pMessage);

      pMensagemEfeticacao  := vMensagemEfeticacao || pMensagemEfeticacao || '<br/><b>E-mails enviados para:</b>'|| vEmailUsuario||';'||vEmailsCopia||'<br/>';

      vCorpoEmail := vMensagemEfeticacao || Fn_Get_MessageInfoColeta(pColetaNumero, pColetaCiclo, vAguardarAutorizacao);

      vEmailsCopia := case
                        when length(vEmailsCopia) > 5 then vEmailsCopia --||';fgoes@dellavolpe.com.br;ddamaceno@dellavolpe.com.br'
                        --else 'fgoes@dellavolpe.com.br;ddamaceno@dellavolpe.com.br'
                      end;

      begin
        wservice.pkg_glb_email.SP_ENVIAEMAIL(vAssunto,
                                             vCorpoEmail,
                                             vEmailOrigem,
                                             vEmailUsuario,
                                             vEmailsCopia);
      exception when others then
        vAssunto    := 'ERRO ao tentar enviar Email da Coleta: '||pColetaNumero||' - '||pColetaCiclo;
        vCorpoEmail := 'ERRO ao tentar enviar Email da Coleta: '||pColetaNumero||' - '||pColetaCiclo||
                     ' - Usuario: '||vColetaRowType.Usu_Usuario_Codigo_Cad||' - '||sqlerrm;
        wservice.pkg_glb_email.SP_ENVIAEMAIL(vAssunto,
                                             vCorpoEmail,
                                             vEmailOrigem
                                             --'fgoes@dellavolpe.com.br',
                                             --'ddamaceno@dellavolpe.com.br'
                                             );
      end;

      pStatus   := Status_normal;
      pMessage  := vMensagemEfeticacao;
    exception when others then
      pStatus   := Status_normal;
      pMessage  := 'Erro ao processar Pkg_Col_Coleta.Sp_ENE_EfetivarColeta. Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;
  end Sp_ENE_EfetivarColeta;
  
    /*********************************************************************************************
  * Data..: 18/10/2019
  * Autor.: Jonatas Veloso
  * Validações de Campos:
  * Regra Tipo Carga(Fcf_Tpcarga_Codigo):
  **********************************************************************************************/
  Function Fn_PAR_ValidaCampos(pColetaRowType in t_arm_coleta%RowType,
                               pStatus        out char,
                               pMessage       out varchar2)return boolean
  as
    vGrupoEconomicoPagadorFrete t_glb_cliente.glb_grupoeconomico_codigo%Type;
      
  begin
    Begin
          begin
            Select c.glb_grupoeconomico_codigo
               Into vGrupoEconomicoPagadorFrete
               From t_glb_cliente c
               where trim(c.glb_cliente_cgccpfcodigo) = trim(pColetaRowType.Arm_Coleta_Cnpjpagadorferete);
          exception when no_data_found then
            pStatus := Status_Erro;
            pMessage:= 'CNPJ não encontrado na base de Dados';
            return false;
          end;
          
    if(vGrupoEconomicoPagadorFrete = GrupoEconomicoPAR ) then  
	      if ( trim(nvl(pColetaRowType.Fcf_Tpcarga_Codigo, 'null')) in ('02') and pColetaRowType.Arm_Coleta_Tpcoleta = 'E')then
             pStatus  := Status_warning;
             pMessage := 'Para tipo de Carga Fracionado não pode ser selecionado a prioridade expresso'||chr(13);
            return false;
        end if;       
     end if;
     
     pStatus  := Status_normal;
     pMessage := 'Processamento Normal';
     return true;
     
    exception when others then
      pStatus  := Status_erro;
      pMessage := 'Erro ao validar Fn_PAR_ValidaCampos Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
      return   false;
    end;
  end Fn_PAR_ValidaCampos;


   /*********************************************************************************************
  * Data..: 09/02/2018
  * Autor.: F.Sedevitiz 
  * Versão: 1.9.2
  * Validações de Campos:
  * Regra Tipo Carga(Fcf_Tpcarga_Codigo):
  **********************************************************************************************/
  Function Fn_SUZ_ValidaCampos(pColetaRowType in tdvadm.t_arm_coleta%RowType,
                               pStatus        out char,
                               pMessage       out varchar2)
    return boolean
  as
    vIsValid boolean := true;
    vUsuarioLiberado integer;
  begin

    if ( Fn_SUZ_IsColetaSUZ(pColetaRowType) = true ) then
      
         SELECT COUNT(*)
                into vUsuarioLiberado
         FROM TDVADM.T_USU_APLICACAOPERFIL P
         WHERE P.USU_APLICACAO_CODIGO      = 'jcoleta'
         AND   P.USU_PERFIL_CODIGO         = 'SUZ_SOLICITA_EXPRESSO'
         AND   upper(P.USU_USUARIO_CODIGO) = upper(pColetaRowType.Usu_Usuario_Codigo_Cad);
    
          if (pColetaRowType.Arm_Coleta_Pedido is null) then             
               vIsValid := false;
               pStatus := 'W';
               pMessage := 'Numero de pedido não pode estar vazio ';
               return vIsValid;                       
          end if;
          
          if(pColetaRowType.Arm_Coleta_Tpcoleta = 'E' and vUsuarioLiberado = 0) then
              vIsValid := false;
               pStatus := 'W';
               pMessage := 'Fornecedor não pode gerar coleta expressa ';
               return vIsValid;     
          end if;
          
          
       pStatus := 'N';
       pMessage:= null;
       return vIsValid;

    end if;
    
    pStatus := 'N';
    pMessage:= null;

    return vIsValid;
  end Fn_SUZ_ValidaCampos;

  Function Fn_RAI_ValidaCamposGeral(pColetaRowType in t_arm_coleta%rowType,
                                    pStatus        out char,
                                    pMessage       out varchar2)
    return boolean
  as
    vIsValid boolean := true;
  begin

    if ( Fn_RAI_IsColetaRAI(pColetaRowType) = true ) then
      
         IF(pColetaRowType.Arm_Coleta_Dtprogramacao = trunc(sysdate) 
                              and to_char(sysdate,'hh24:mi:ss') > '12:00:00') then
               vIsValid := false;
               pStatus := 'W';
               pMessage := 'Voce não pode programar essa coleta para hoje apos as 12 horas';
               return vIsValid;                       
         end if;
      
        if ( TRIM(pColetaRowType.Arm_Coleta_Tpcoleta) = 'E' ) then      
           pStatus := Status_Warning;
           vIsValid := false;
           pMessage := 'Coleta expressa não pode ser solicitada';
           return vIsValid;
       end if;
    
       if(TRIM(pColetaRowType.FCF_TPCARGA_CODIGO) = '38'  and trim(pColetaRowType.FCF_TPVEICULO_CODIGO) is null) then
           pStatus := Status_Warning;
           vIsValid := false;
           pMessage := 'Quando o tipo de carga for Lotação o tipo de veiculo não pode ser nulo';
           return vIsValid;                                             
       end if;
       
        if(TRIM(pColetaRowType.ARM_COLETA_PEDIDO) IS NULL) then
           pStatus := Status_Warning;
           vIsValid := false;
           pMessage := 'O campo pedido é obrigatório';
           return vIsValid;                                             
       end if;                        
    end if;
    
    pStatus := 'N';
    pMessage:= null;
    return vIsValid;
  end Fn_RAI_ValidaCamposGeral;
  
 /*********************************************************************************************
  * Data..: 28/02/2018
  * Autor.: F.Sedevitiz 
  * Versão: 1.9.2
  * Validações de Campos:
  * Regra Tipo Carga(Fcf_Tpcarga_Codigo):
  **********************************************************************************************/
  Function Fn_USI_ValidaCampos(pColetaRowType in t_arm_coleta%RowType,
                               pStatus        out char,
                               pMessage       out varchar2)
    return boolean
  as
    vIsValid boolean := true;
  begin

    if ( Fn_USI_IsColetaUSI(pColetaRowType) = true ) then
      
       pStatus := 'N';
       pMessage:= null;
       return vIsValid;
       
    end if;

    pStatus := 'N';
    pMessage:= null;

    return vIsValid;
  end Fn_USI_ValidaCampos;
  
   /*********************************************************************************************
  * Data..: 25/ABR/2018
  * Autor.: F.Sedevitiz 
  * Versão: 1.9.2
  * Validações de Campos:
  * Regra Tipo Carga(Fcf_Tpcarga_Codigo):
  **********************************************************************************************/
  Function Fn_VTC_ValidaCampos(pColetaRowType in t_arm_coleta%RowType,
                               pStatus        out char,
                               pMessage       out varchar2)return boolean
  as
    vGrupoEconomicoPagadorFrete t_glb_cliente.glb_grupoeconomico_codigo%Type;
    
    RegraVotorantimCimento           integer;
    TotalRegras                      integer;
    
  begin
    Begin
          begin
            Select c.glb_grupoeconomico_codigo
               Into vGrupoEconomicoPagadorFrete
               From t_glb_cliente c
               where trim(c.glb_cliente_cgccpfcodigo) = trim(pColetaRowType.Arm_Coleta_Cnpjpagadorferete);
          exception when no_data_found then
            pStatus := Status_Erro;
            pMessage:= 'CNPJ não encontrado na base de Dados';
            return false;
          end;
          
    if(vGrupoEconomicoPagadorFrete = GrupoEconomicoVTC ) then  
       if(Fn_VTC_LiberaVTC(pColetaRowType,pStatus,pMessage)) then
           select count(*)
           into RegraVotorantimCimento
           from tdvadm.t_usu_aplicacaoperfil p
           where p.usu_aplicacao_codigo = 'jcoleta'
           and p.usu_perfil_codigo = 'LIBERA_VOTORANTIM_CIMENTO'
           and lower(trim(p.usu_usuario_codigo)) = lower(trim(pColetaRowType.usu_usuario_codigo_cad));                     
       end if;   
       
       TotalRegras := nvl(RegraVotorantimCimento,0);       

        if(TotalRegras = 0) then 
                  
           pStatus  := Status_warning;
           pMessage := 'Você não tem permissão para solicitar coleta com o CNPJ ' || trim(pColetaRowType.arm_coleta_cnpjpagadorferete) || ' como pagador' ;
           return false;
        end if;   
              
     end if;
     
     pStatus  := Status_normal;
     pMessage := 'Processamento Normal';
     return true;
     
    exception when others then
      pStatus  := Status_erro;
      pMessage := 'Erro ao validar Fn_vale_validacampos Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
      return   false;
    end;
  end Fn_VTC_ValidaCampos;
  
 /*===================================================================================================*/ 
    function Fn_VTC_LiberaVTC(pColetaRowType in tdvadm.t_arm_coleta%RowType,
                                              pStatus        in out char,
                                              pMessage       in out varchar2)
    return boolean
  as
    vIsVTC             boolean := false;
  begin
    /*RANGE    NOME
      01637895 VOTORANTIM CIMENTOS S/A
      10656452 VOTORANTIM CIMENTOS N/NE S/A
      96824594 VOTORANTIM CIMENTOS BRASIL LTDA
    */
    if (rpad(trim(pColetaRowType.Arm_Coleta_Cnpjpagadorferete), 8,0) IN ('01637895', '10656452', '96824594')) then  
       vIsVTC := true;
       pStatus := 'N';
       pMessage := 'Usuario CNPJ liberado VOTORANTIM CIMENTOS';
    end if;
    return vIsVTC;
  end Fn_VTC_LiberaVTC;
  /*===================================================================================================*/
  
  
  /*********************************************************************************************
   * Pega um unico registro do ColetaItem/t_arm_coletancompra (busca por PK)
   * @autor Diego
   * @data 24/09/2015
   * @param pColeta    -> numero da coleta
   * @param pCiclo     -> ciclo da coleta
   * @param pSequencia -> sequencia do item da coleta
   * @param pCursor    -> retorna o item
   * @param pStatus    -> Status da transação
   * @param pMessage   -> Mensagem da transação
   *********************************************************************************************/
  Procedure Sp_Get_Item(pColeta    in t_arm_coleta.arm_coleta_ncompra%type,
                        pCiclo     in t_arm_coleta.arm_coleta_ciclo%type,
                        pSequencia in t_arm_coletancompra.arm_coleta_seqitem%type,
                        pCursor    out T_CURSOR,
                        pStatus    out varchar2,
                        pMessage   out varchar2) as
  vExisteColeta integer;
  begin

    begin
      -- Se existe a ColetaItem
      select count(*)
        into vExisteColeta
        from t_arm_coletancompra n
       where n.arm_coletancompra = pColeta
         and n.arm_coleta_ciclo  = LPAD(pCiclo,3,000)
         and n.arm_coleta_seqitem = pSequencia;

      open pCursor for
        select n.*,
               e.glb_embalagem_descricao GLB_EMBALAGEM_DESCRICAO
          from t_arm_coletancompra n,
               t_glb_embalagem e
         where n.arm_coletancompra = pColeta
           and n.arm_coleta_ciclo  = LPAD(pCiclo,3,000)
           and n.arm_coleta_seqitem = pSequencia
           and n.glb_embalagem_codigo = e.glb_embalagem_codigo(+);

      if (vExisteColeta > 0 ) then
          pStatus  := Status_normal;
          pMessage := 'Processamento Normal.';
      else
          pStatus  := Status_warning;
          pMessage := 'Item da Coleta não existe';
      end if;

    exception when others then
      pStatus  := Status_Erro;
      pMessage := 'Erro ao Executar Pkg_Col_Coleta.Sp_Get_Item. Erro.: '||sqlerrm||' - '||dbms_utility.format_error_backtrace;
    end;

  end Sp_Get_Item;

  /*********************************************************************************************
   * Grava o parceiro da coleta
   * @autor Klayton / fabiano
   * @data 01/10/2015
   * @param pColeta        -> numero da coleta
   * @param pCiclo         -> ciclo da coleta
   * @param pCnpj          -> cnpj
   * @param pTpEndereco    -> tipo de endereço
   * @param pTpParceiro    -> tipo do parceiro
   * @param pStatus        -> Status da transação
   * @param pMessage       -> Mensagem da transação
   *********************************************************************************************/
  Procedure Sp_Set_IncluiParceiro(pColetaNumero in  t_arm_coleta.arm_coleta_ncompra%type,
                                  pColetaCiclo  in  t_arm_coleta.arm_coleta_ciclo%type,
                                  pCnpj         in  t_glb_cliente.glb_cliente_cgccpfcodigo%type,
                                  pTpEndereco   in  t_glb_cliend.glb_tpcliend_codigo%type,
                                  pTpParceiro   in  t_arm_coletaparceiro.arm_coletatppar_codigo%type,
                                  pStatus       out varchar2,
                                  pMessage      out varchar2)as
    vExisteCnpj     integer;
    vParceiro       integer;
    vExisteParceiro integer;
  begin

    begin

      -- Se existe o CNPJ com o Tipo de endereço
      select count(*)
        into vExisteCnpj
        from t_glb_cliend c
       where c.glb_cliente_cgccpfcodigo = pCnpj
         and c.glb_tpcliend_codigo      = pTpEndereco;

      -- Se existe o tipo de parceiro cadastrado!
      select count(*)
        into vExisteParceiro
        from t_arm_coletatppar l
       where l.arm_coletatppar_codigo = pTpParceiro;

      -- Se não existe ja retorna.
      if (vExisteParceiro = 0) then
        pStatus  := pkg_col_coleta.Status_Warning;
        pMessage := 'Tipo de parceiro informado não encontrado!';
        return;
      end if;

      -- Se existir o CNPJ tento cadastrar!
      if (vExisteCnpj > 0 ) then

          -- Se ja existe aquele tipo de parceiro para aquela coleta.
          select count(*)
            into vParceiro
            from t_arm_coletaparceiro c
           where c.arm_coleta_ncompra          = pColetaNumero
             and c.arm_coleta_ciclo            = pColetaCiclo
             and c.glb_cliente_cgccpfpar       = pCnpj
             and c.glb_tpcliend_codigopar      = pTpEndereco
             and c.arm_coletatppar_codigo      = pTpParceiro;

          -- Se não existir
          if (vParceiro = 0) then
             insert into t_arm_coletaparceiro(arm_coleta_ncompra,
                                              glb_cliente_cgccpfpar,
                                              glb_tpcliend_codigopar,
                                              arm_coletatppar_codigo,
                                              arm_coleta_ciclo)
                                       values(pColetaNumero,
                                              pCnpj,
                                              pTpEndereco,
                                              pTpParceiro,
                                              pColetaCiclo);
          else
            pStatus  := pkg_col_coleta.Status_Warning;
            pMessage := 'Coleta ja possue esse parceiro cadastrado!!';
            return;
          end if;

      else
        pStatus  := pkg_col_coleta.Status_Warning;
        pMessage := 'CNPJ não encontrado!';
        return;
      end if;

      commit;
      pStatus  := pkg_col_coleta.Status_Normal;
      pMessage := 'Processamento Normal!';
    Exception when others then
      pStatus  := pkg_col_coleta.Status_Erro;
      pMessage := 'Erro ao executar Pkg_Col_Coleta.Sp_Set_IncluiParceiros Erro.: '||dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;
  end Sp_Set_IncluiParceiro;

  Function Fn_Get_TipoEndereco(pCnpj         in  t_glb_cliente.glb_cliente_cgccpfcodigo%type,
                               pTpEndereco   out t_glb_cliend.glb_tpcliend_codigo%type,
                               pStatus       out char,
                               pMessage      out varchar2)return boolean as
    vTipoEsperado  t_glb_cliend.glb_tpcliend_codigo%type := 'X';
    vTipoObtido    t_glb_cliend.glb_tpcliend_codigo%type;
    vExisteTpEnd   integer;
    vExisteCliente integer;
  begin

    begin

      -- Se existe tipo de endereço
      select count(*)
        into vExisteCliente
        from t_glb_cliente k
       where k.glb_cliente_cgccpfcodigo = pCnpj;

      if (vExisteCliente = 0) then
          pStatus     := pkg_col_coleta.Status_Warning;
          pMessage    := 'Cnpj não esta cadastrado na base de dados!';
          return false;
      end if;

      -- Se existe tipo de endereço
      select count(*)
        into vExisteTpEnd
        from t_glb_cliend k
       where k.glb_cliente_cgccpfcodigo = pCnpj
         and k.glb_tpcliend_codigo      = vTipoEsperado;

      if (vExisteTpEnd > 0) then
          pTpEndereco := vTipoEsperado;
          pStatus     := pkg_col_coleta.Status_Normal;
          pMessage    := 'Processamento normal.';
      else
        -- Se não existir o tipo de endereço esperado, analiso se existe algum
        select count(*)
          into vExisteTpEnd
          from t_glb_cliend k
         where k.glb_cliente_cgccpfcodigo = pCnpj;

        if (vExisteTpEnd > 0) then

          -- Se existir pego o maior
          select max(k.glb_tpcliend_codigo)
            into vTipoObtido
            from t_glb_cliend k
           where k.glb_cliente_cgccpfcodigo = pCnpj;

          pTpEndereco := vTipoObtido;
          pStatus     := pkg_col_coleta.Status_Normal;
          pMessage    := 'Processamento normal.';
        else
          -- Retorno a mensagem se não existir.
          pStatus     := pkg_col_coleta.Status_Warning;
          pMessage    := 'Cnpj não possue tipo de endereço!';
          return      false;
        end if;

      end if;

      return true;

    exception when others then
      pStatus     := pkg_col_coleta.Status_Erro;
      pMessage    := 'Erro ao obter tipo de endereço do Cnpj.: '||pCnpj;
      return      false;
    end;

  end Fn_Get_TipoEndereco;

/*  Procedure Sp_Set_InsereParceirosColeta(pTipoColeta in  TpColetaNova,
                                         pStatus     out char,
                                         pMessage    out varchar2)
  as
    vTipoEndPagador t_glb_cliend.glb_tpcliend_codigo%type;
    vCnpjPagador    t_glb_cliente.glb_cliente_cgccpfcodigo%type;
  begin
    begin

      \************************************************************************\
      \**   insere os parceiros Origem e Destino que já vem do Front-End     **\
      \************************************************************************\
     delete from t_arm_coletaparceiro p
     where p.arm_coleta_ncompra = pTipoColeta.nCompra
       and p.arm_coleta_ciclo   = pTipoColeta.ciclo;

      begin
        For i In 1..pTipoColeta.parceiros.count Loop
            Sp_Set_IncluiParceiro(pTipoColeta.nCompra,
                                  pTipoColeta.ciclo,
                                  pTipoColeta.parceiros(i).cnpj,
                                  pTipoColeta.parceiros(i).tpEnd,
                                  pTipoColeta.parceiros(i).tpParceiro,
                                  pStatus,
                                  pMessage);

            if pStatus != pkg_col_coleta.Status_Normal then
               return;
            end if;

        end loop;
      end;


      \************************************************************************\
      \**   Inserção do parceiro pagador da coleta                           **\
      \************************************************************************\
      if (pTipoColeta.pagadorFrete = 'S') then

         if Fn_Get_TipoEndereco(pTipoColeta.cnpjSolicitante, vTipoEndPagador, pStatus, pMessage) = false then
            pStatus := pStatus;
            pMessage:= pMessage;
            return;
         end if;

         vCnpjPagador := pTipoColeta.cnpjSolicitante;
      else

        vCnpjPagador := case when pTipoColeta.pagadorFrete = 'R' then pTipoColeta.clienteEndColetaCnpj
                             when pTipoColeta.pagadorFrete = 'D' then pTipoColeta.clienteEndEntregaCnpj
                        end;
        vTipoEndPagador := case when pTipoColeta.pagadorFrete = 'R' then pTipoColeta.clienteEndColetaTp
                                when pTipoColeta.pagadorFrete = 'D' then pTipoColeta.clienteEndEntregaTp
                           end;

      end if;

      Sp_Set_IncluiParceiro(pTipoColeta.nCompra,
                            pTipoColeta.ciclo,
                            vCnpjPagador,
                            vTipoEndPagador,
                            TipoEnderecoPagador,
                            pStatus,
                            pMessage);

      if pStatus != pkg_col_coleta.Status_Normal then
         return;
      end if;

      pStatus  := pkg_col_coleta.Status_Normal;
      pMessage := 'Parceiros incluidos com sucesso!';
    exception when others then
      pStatus  := pkg_col_coleta.Status_Erro;
      pMessage := dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;
  end Sp_Set_InsereParceirosColeta;
*/
  Procedure Sp_Set_InsereParceirosColeta(pColetaRowType  in t_arm_coleta%RowType,
                                         pListaParceiros in tListaParceiros,
                                         pStatus         out char,
                                         pMessage        out varchar2)
  as
    vTipoEndPagador t_glb_cliend.glb_tpcliend_codigo%type;
    vCnpjPagador    t_glb_cliente.glb_cliente_cgccpfcodigo%type;
  begin
    begin

      /************************************************************************/
      /**   insere os parceiros Origem e Destino que já vem do Front-End     **/
      /************************************************************************/
     delete from t_arm_coletaparceiro p
     where p.arm_coleta_ncompra = pColetaRowType.Arm_Coleta_Ncompra
       and p.arm_coleta_ciclo   = pColetaRowType.Arm_Coleta_Ciclo;

      begin
        For i In 1..pListaParceiros.count Loop
            Sp_Set_IncluiParceiro(pColetaRowType.Arm_Coleta_Ncompra,
                                  pColetaRowType.Arm_Coleta_Ciclo,
                                  pListaParceiros(i).cnpj,
                                  pListaParceiros(i).tpEnd,
                                  pListaParceiros(i).tpParceiro,
                                  pStatus,
                                  pMessage);

            if pStatus != pkg_col_coleta.Status_Normal then
               return;
            end if;

        end loop;
      end;


      /************************************************************************/
      /**   Inserção do parceiro pagador da coleta                           **/
      /************************************************************************/
      if (pColetaRowType.Arm_Coleta_Pagadorfrete = 'S') then

         if Fn_Get_TipoEndereco(pColetaRowType.Arm_Coleta_Cnpjsolicitante, vTipoEndPagador, pStatus, pMessage) = false then
            pStatus := pStatus;
            pMessage:= pMessage;
            return;
         end if;

         vCnpjPagador := pColetaRowType.arm_coleta_cnpjSolicitante;
      else

            vCnpjPagador := case when pColetaRowType.Arm_Coleta_Pagadorfrete = 'R' then pColetaRowType.Glb_Cliente_Cgccpfcodigocoleta
                                 when pColetaRowType.Arm_Coleta_Pagadorfrete = 'D' then pColetaRowType.Glb_Cliente_Cgccpfcodigoentreg
                                 when pColetaRowType.Arm_Coleta_Pagadorfrete = 'O' then pColetaRowType.Arm_Coleta_Cnpjpagadorferete
                            end;

            -- se for outros o pagador, pega o tipoEndereco
            if pColetaRowType.Arm_Coleta_Pagadorfrete = 'O' then
                if Fn_Get_TipoEndereco(pColetaRowType.Arm_Coleta_Cnpjpagadorferete, vTipoEndPagador, pStatus, pMessage) = false then
                   pStatus := pStatus;
                   pMessage:= pMessage;
                   return;
                end if;
            else
                  vTipoEndPagador := case when pColetaRowType.Arm_Coleta_Pagadorfrete = 'R' then pColetaRowType.Glb_Tpcliend_Codigocoleta
                                          when pColetaRowType.Arm_Coleta_Pagadorfrete = 'D' then pColetaRowType.Glb_Tpcliend_Codigoentrega
                                     end;
            end if;
      end if;

      Sp_Set_IncluiParceiro(pColetaRowType.Arm_Coleta_Ncompra,
                            pColetaRowType.Arm_Coleta_ciclo,
                            vCnpjPagador,
                            vTipoEndPagador,
                            TipoEnderecoPagador,
                            pStatus,
                            pMessage);

      if pStatus != pkg_col_coleta.Status_Normal then
         return;
      end if;

      pStatus  := pkg_col_coleta.Status_Normal;
      pMessage := 'Parceiros incluidos com sucesso!';
    exception when others then
      pStatus  := pkg_col_coleta.Status_Erro;
      pMessage := dbms_utility.format_error_backtrace||' - '||sqlerrm;
    end;
  end Sp_Set_InsereParceirosColeta;


  /*********************************************************************************************
  * Data..: 02/10/2015
  * Autor.: Diego
  * Versão: 1.0
  * > Monta Descricao da Mercadoria atraves do Precoleta
  **********************************************************************************************/
  Function Fn_Get_MercadoriaDescPreCol(pPreColetaRowType In t_Edi_Arcelormittal%RowType) return Varchar2
  As
    vDescrItemColeta varchar2(100);
  Begin
      vDescrItemColeta := 'Pedido/item:'||pPreColetaRowType.Edi_Arcelormittal_Pedido||'/'||pPreColetaRowType.Edi_Arcelormittal_Itempedido||' - ';
      vDescrItemColeta := vDescrItemColeta || subStr(pPreColetaRowType.Edi_Arcelormittal_Descmaterial,1,50-length(vDescrItemColeta));
      return vDescrItemColeta;
  End Fn_Get_MercadoriaDescPreCol;

  /************************************************************************************************
  * PROGRAMA         : ColetaWeb
  * DESENVOLVEDOR    : Diego Lirio
  * DATA DE CRIACAO  : 02/10/2015
  * FUNCINALIDADE    : Pegar PreColeta(T_Edi_Arcemormittal) por item da coleta
  * PARTICULARIDADES : Excption NO_DATA_FOUND, quem usa que trata
  ************************************************************************************************/
  Function Fn_Get_PreColetaPorItemCol(pColetaNCompra In t_arm_coletancompra.arm_coletancompra%Type,
                                      pColetaCiclo   In t_arm_coletancompra.arm_coleta_ciclo%Type,
                                      pSequencia     In t_arm_coletancompra.arm_coleta_seqitem%Type) return t_Edi_Arcelormittal%Rowtype
  As
  vPreColetaRowType t_Edi_Arcelormittal%RowType;
  Begin
        Select a.*
          into vPreColetaRowType
          from t_arm_coletapedidoitem cpi,
               t_edi_arcelormittal a
           where cpi.edi_arcelormittal_pedido = a.edi_arcelormittal_pedido
             and cpi.edi_arcelormittal_itempedido = a.edi_arcelormittal_itempedido
             and cpi.arm_coleta_ncompra = pColetaNCompra
             and cpi.arm_coleta_ciclo   = pColetaCiclo
             and cpi.arm_coleta_seqitem = pSequencia;
     return vPreColetaRowType;
  End Fn_Get_PreColetaPorItemCol;

  /************************************************************************************************
  * PROGRAMA         : ColetaWeb
  * DESENVOLVEDOR    : Diego Lirio
  * DATA DE CRIACAO  : 19/10/2015
  * FUNCINALIDADE    : Pega os pedidos por Coleta
  ************************************************************************************************/
  Procedure Sp_Get_ColetaPedidos(pColeta In t_arm_coleta.arm_coleta_ncompra%Type,
                                 pCiclo  In t_arm_coleta.arm_coleta_ciclo%Type,
                                 pCursor  Out types.cursorType,
                                 pStatus       Out Char,
                                 pMessage      Out Varchar2)
  As
  Begin
     Open pCursor For
       Select p.arm_coleta_ncompra,
              p.arm_coleta_ciclo,
              p.arm_coletapedido_pedido
         from t_arm_coletapedido p
         where p.arm_coleta_ncompra = pColeta
           and p.arm_coleta_ciclo   = pCiclo;
     pStatus := 'N';
     pMessage := 'OK';
  End Sp_Get_ColetaPedidos;

  /************************************************************************************************
  * PROGRAMA         : ColetaWeb
  * DESENVOLVEDOR    : Diego Lirio
  * DATA DE CRIACAO  : 20/10/2015
  * FUNCINALIDADE    : Salva coleta pedido
  ************************************************************************************************/
  Procedure Sp_Set_SaveColetaPedido(pColeta In t_arm_coleta.arm_coleta_ncompra%Type,
                                    pCiclo  In t_arm_coleta.arm_coleta_ciclo%Type,
                                    pPedido In Varchar2,
                                    pUsuario in Varchar2,
                                    pStatus       Out Char,
                                    pMessage      Out Varchar2)
  As
  Begin

     dbms_output.put_line(pUsuario);
     insert into t_arm_coletapedido(arm_coleta_ncompra,arm_coleta_ciclo,arm_coletapedido_pedido) values(pColeta, pCiclo, pPedido);
     commit;
     pStatus := 'N';
     pMessage := 'CREATE';

  End Sp_Set_SaveColetaPedido;

  /************************************************************************************************
  * PROGRAMA         : ColetaWeb
  * DESENVOLVEDOR    : Diego Lirio
  * DATA DE CRIACAO  : 20/10/2015
  * FUNCINALIDADE    : Exclui coleta pedido
  ************************************************************************************************/
  Procedure Sp_DeleteColetaPedido(pColeta In t_arm_coleta.arm_coleta_ncompra%Type,
                                  pCiclo  In t_arm_coleta.arm_coleta_ciclo%Type,
                                  pPedido In Varchar2,
                                  pUsuario in Varchar2,
                                  pStatus       Out Char,
                                  pMessage      Out Varchar2)
  As
  Begin

     dbms_output.put_line(pUsuario);
     delete from t_arm_coletapedido
        where arm_coleta_ncompra = pColeta
          and arm_coleta_ciclo = pCiclo
          and arm_coletapedido_pedido = pPedido;
     commit;
     pStatus := 'N';
     pMessage := 'Delete OK';

  End Sp_DeleteColetaPedido;


  Procedure Sp_Set_ColetaAcompGerada(pColetaRowType In t_Arm_Coleta%RowType,
                                     pStatus        Out Char,
                                     pMessage       Out Varchar2)
  As
  Begin
    -- altera realizada para S e data do evento/acao data de gravacao da coleta
    Begin
      Update T_arm_coletaacompanhamento ca
        set ca.arm_coletaacompanhamento_real = 'S',
            ca.arm_coletaacompanhamento_dthr = pColetaRowType.Arm_Coleta_Dtgravacao
        where ca.arm_coleta_ncompra = pColetaRowType.Arm_Coleta_Ncompra
          and ca.arm_coleta_ciclo   = pColetaRowType.Arm_Coleta_Ciclo
          and ca.arm_coletaevento_id = 1;                           
    Exception
      When Others Then
        pStatus := 'E';
        pMessage := sqlerrm;
    End;  
  End Sp_Set_ColetaAcompGerada;

  Function Fn_Get_PlacaCavalo(pConj In tdvadm.t_frt_conteng.frt_conjveiculo_codigo%Type) return Varchar2
  As
    vPlaca Varchar2(10);
  Begin
     select v.frt_veiculo_placa
      into vPlaca
      from tdvadm.t_frt_conteng c,
           tdvadm.t_frt_veiculo v,
           tdvadm.t_frt_tpveiculo t,
           tdvadm.t_frt_marmodveic m
      where v.frt_marmodveic_codigo = m.frt_marmodveic_codigo
        and v.frt_veiculo_codigo = c.frt_veiculo_codigo
        and m.frt_tpveiculo_codigo = t.frt_tpveiculo_codigo
        and t.frt_tpveiculo_tracao = 'S'
        and c.frt_conjveiculo_codigo = pConj;
     return vPlaca;       
  End Fn_Get_PlacaCavalo;

  Procedure Sp_Get_ColetaAcompanhamentos(pColeta  In  t_Arm_Coleta.Arm_Coleta_Ncompra%Type,
                                         pCiclo   In  t_Arm_Coleta.Arm_Coleta_ciclo%Type,
                                         pCursor  Out types.cursorType,
                                         pStatus  Out Char,
                                         pMessage Out Varchar2)
  As
    vCount Integer;
    vColetaRowType t_Arm_Coleta%RowType;
    vCountAcompEvento Integer;
    --vVeiculo Varchar(10);
    vIsTransferencia varchar2(2000) := 'null';
  Begin

     Begin
         -- Pega a linha (Tipo) da coleta
         vColetaRowType := Pkg_Col_Coleta.Fn_Get_ColetaRowType(pColeta, lPad(pCiclo, 3, '0'));

         Select Count(*)
           Into vCount
           From t_arm_Coletaacompanhamento ca
           where ca.arm_coleta_ncompra = vColetaRowType.Arm_Coleta_Ncompra
             and ca.arm_coleta_ciclo   = vColetaRowType.Arm_Coleta_Ciclo;

         -- Se não existe Acompanhamento da Coleta e se coleta foi não está pendente de efetivação
         if (vCount = 0) and (nvl(Trim(vColetaRowType.Arm_Coletaocor_Codigo),'00') Not In('64','68')) then
             -- insere todos os evento necessarios do acompanhamento da coleta
             For evento in ( select * from t_arm_coletaevento e )
             Loop
               Insert Into t_arm_Coletaacompanhamento(Arm_Coleta_Ncompra,Arm_Coleta_Ciclo,Arm_Coletaevento_Id)
                 values(vColetaRowType.Arm_Coleta_Ncompra,  vColetaRowType.Arm_Coleta_Ciclo, evento.arm_coletaevento_id);
             end Loop;

             -- Para evento Coleta Gerada altera para realizada
             Sp_Set_ColetaAcompGerada(vColetaRowType, pStatus, pMessage);
             vCount := 1;
         end if;

         -- entregue
         select count(*)
           Into vCountAcompEvento
           from t_arm_coletaacompanhamento ca
           where ca.arm_coleta_ncompra = vColetaRowType.Arm_Coleta_Ncompra
             and ca.arm_coleta_ciclo   = vColetaRowType.Arm_Coleta_ciclo
             and ca.arm_coletaevento_id = 5
             and nvl(ca.arm_coletaacompanhamento_real,'N') = 'S'; -- Em entregue

         -- se existe acompanhamento e se ainda nao foi entregue
         if (vCount > 0) and (vCountAcompEvento = 0) then

             -- Em Coleta
             select count(*)
               Into vCountAcompEvento
               from t_arm_coletaacompanhamento ca
               where ca.arm_coleta_ncompra = vColetaRowType.Arm_Coleta_Ncompra
                 and ca.arm_coleta_ciclo   = vColetaRowType.Arm_Coleta_ciclo
                 and ca.arm_coletaevento_id = 2
                 and nvl(ca.arm_coletaacompanhamento_real,'N') = 'S'; -- em coleta/add placa
             if vCountAcompEvento = 0 then

                 select Count(*)
                   Into vCountAcompEvento
                   from t_arm_coleta_motorista cm
                   where cm.arm_coleta_ncompra = vColetaRowType.Arm_Coleta_Ncompra
                     and cm.arm_coleta_ciclo   = vColetaRowType.Arm_Coleta_Ciclo;
                 if vCountAcompEvento > 0 then
                       Update t_Arm_Coletaacompanhamento a
                         set a.arm_coletaacompanhamento_dthr = ( select max(cm.arm_coleta_motorista_cadastro)
                                                                       from t_arm_coleta_motorista cm
                                                                        where cm.arm_coleta_ncompra = vColetaRowType.Arm_Coleta_Ncompra
                                                                          and cm.arm_coleta_ciclo   = vColetaRowType.Arm_Coleta_Ciclo),
                             a.arm_coletaacompanhamento_real = 'S'
                        Where a.arm_coleta_ncompra = vColetaRowType.Arm_Coleta_Ncompra
                          and a.arm_coleta_ciclo   = vColetaRowType.Arm_Coleta_Ciclo
                          and a.arm_coletaevento_id = 2;
                 end if;
             end if;
             -- fim em coleta

             -- Em armazem
             select count(*)
               Into vCountAcompEvento
               from t_arm_coletaacompanhamento ca
               where ca.arm_coleta_ncompra = vColetaRowType.Arm_Coleta_Ncompra
                 and ca.arm_coleta_ciclo   = vColetaRowType.Arm_Coleta_ciclo
                 and ca.arm_coletaevento_id = 3
                 and nvl(ca.arm_coletaacompanhamento_real,'N') = 'S'; -- Em armazem
             if vCountAcompEvento = 0 then
                   Select Count(*)
                      Into vCountAcompEvento
                      From t_Arm_Nota n
                      Where n.arm_coleta_ncompra = vColetaRowType.Arm_Coleta_Ncompra
                        and n.arm_coleta_ciclo   = vColetaRowType.Arm_Coleta_Ciclo;
                   if vCountAcompEvento > 0 then
                       Update t_Arm_Coletaacompanhamento a
                         set a.arm_coletaacompanhamento_dthr = ( Select Min(n.arm_nota_dtinclusao)
                                                                  From t_Arm_Nota n
                                                                  Where n.arm_coleta_ncompra = vColetaRowType.Arm_Coleta_Ncompra
                                                                    and n.arm_coleta_ciclo   = vColetaRowType.Arm_Coleta_Ciclo ),
                             a.arm_coletaacompanhamento_real = 'S'
                        Where a.arm_coleta_ncompra = vColetaRowType.Arm_Coleta_Ncompra
                          and a.arm_coleta_ciclo   = vColetaRowType.Arm_Coleta_Ciclo
                          and a.arm_coletaevento_id = 3;
                   Else
                         -- VERIFICA atraves do CTRC se tem nota
                         SELECT COUNT(*)
                           INTO vCountAcompEvento
                           FROM TDVADM.T_CON_CONHECIMENTO CT,
                                TDVADM.T_ARM_NOTA N
                           WHERE CT.CON_CONHECIMENTO_CODIGO = N.CON_CONHECIMENTO_CODIGO
                             AND CT.CON_CONHECIMENTO_SERIE  = N.CON_CONHECIMENTO_SERIE
                             AND CT.GLB_ROTA_CODIGO         = N.GLB_ROTA_CODIGO
                             AND CT.ARM_COLETA_NCOMPRA = vColetaRowType.Arm_Coleta_Ncompra
                             AND CT.ARM_COLETA_CICLO   = vColetaRowType.Arm_Coleta_Ciclo;
                         if vCountAcompEvento > 0 then
                             Update t_Arm_Coletaacompanhamento a
                               set a.arm_coletaacompanhamento_dthr = ( SELECT Min(n.arm_nota_dtinclusao)
                                                                         FROM TDVADM.T_CON_CONHECIMENTO CT,
                                                                              TDVADM.T_ARM_NOTA N
                                                                         WHERE CT.CON_CONHECIMENTO_CODIGO = N.CON_CONHECIMENTO_CODIGO
                                                                           AND CT.CON_CONHECIMENTO_SERIE  = N.CON_CONHECIMENTO_SERIE
                                                                           AND CT.GLB_ROTA_CODIGO         = N.GLB_ROTA_CODIGO
                                                                           AND CT.ARM_COLETA_NCOMPRA = vColetaRowType.Arm_Coleta_Ncompra
                                                                           AND CT.ARM_COLETA_CICLO   = vColetaRowType.Arm_Coleta_Ciclo ),
                                   a.arm_coletaacompanhamento_real = 'S'
                              Where a.arm_coleta_ncompra = vColetaRowType.Arm_Coleta_Ncompra
                                and a.arm_coleta_ciclo   = vColetaRowType.Arm_Coleta_Ciclo
                                and a.arm_coletaevento_id = 3;
                         Else
                             -- VERIFICA atraves do CTRC se tem nota na NF-Transporta
                            SELECT Count(*)
                              Into vCountAcompEvento
                              FROM TDVADM.T_CON_CONHECIMENTO CT,
                                   TDVADM.T_CON_NFTRANSPORTA N
                              WHERE CT.CON_CONHECIMENTO_CODIGO = N.CON_CONHECIMENTO_CODIGO
                                AND CT.CON_CONHECIMENTO_SERIE  = N.CON_CONHECIMENTO_SERIE
                                AND CT.GLB_ROTA_CODIGO         = N.GLB_ROTA_CODIGO
                                AND CT.ARM_COLETA_NCOMPRA = vColetaRowType.Arm_Coleta_Ncompra
                                AND CT.ARM_COLETA_CICLO   = vColetaRowType.Arm_Coleta_Ciclo
                                and n.con_nftransportada_dtemissao = ( select max( nft2.con_nftransportada_dtemissao )
                                                                           from tdvadm.t_con_nftransporta nft2
                                                                           where nft2.con_nftransportada_numnfiscal = n.con_nftransportada_numnfiscal
                                                                             and nft2.glb_cliente_cgccpfcodigo = n.glb_cliente_cgccpfcodigo);
                             if vCountAcompEvento > 0 then
                                 Update t_Arm_Coletaacompanhamento a
                                   set a.arm_coletaacompanhamento_dthr = ( SELECT Min(N.CON_NFTRANSPORTADA_DTEMISSAO)
                                                                            FROM TDVADM.T_CON_CONHECIMENTO CT,
                                                                                 TDVADM.T_CON_NFTRANSPORTA N
                                                                            WHERE CT.CON_CONHECIMENTO_CODIGO = N.CON_CONHECIMENTO_CODIGO
                                                                              AND CT.CON_CONHECIMENTO_SERIE  = N.CON_CONHECIMENTO_SERIE
                                                                              AND CT.GLB_ROTA_CODIGO         = N.GLB_ROTA_CODIGO
                                                                              AND CT.ARM_COLETA_NCOMPRA = vColetaRowType.Arm_Coleta_Ncompra
                                                                              AND CT.ARM_COLETA_CICLO   = vColetaRowType.Arm_Coleta_Ciclo
                                                                              and n.con_nftransportada_dtemissao = ( select max( nft2.con_nftransportada_dtemissao )
                                                                                                                         from tdvadm.t_con_nftransporta nft2
                                                                                                                         where nft2.con_nftransportada_numnfiscal = n.con_nftransportada_numnfiscal
                                                                                                                           and nft2.glb_cliente_cgccpfcodigo = n.glb_cliente_cgccpfcodigo) ),
                                       a.arm_coletaacompanhamento_real = 'S'
                                  Where a.arm_coleta_ncompra = vColetaRowType.Arm_Coleta_Ncompra
                                    and a.arm_coleta_ciclo   = vColetaRowType.Arm_Coleta_Ciclo
                                    and a.arm_coletaevento_id = 3;
                             end if;

                         end if;

                    end if;
             end if;
             -- fim Em armazem


             -- Em viagem
             select count(*)
               Into vCountAcompEvento
               from t_arm_coletaacompanhamento ca
               where ca.arm_coleta_ncompra = vColetaRowType.Arm_Coleta_Ncompra
                 and ca.arm_coleta_ciclo   = vColetaRowType.Arm_Coleta_ciclo
                 and ca.arm_coletaevento_id = 4
                 and nvl(ca.arm_coletaacompanhamento_real,'N') = 'S'; -- Em viagem

             if vCountAcompEvento = 0 then
                  select Count(*)
                    Into vCountAcompEvento
                    from t_arm_nota n,
                         tdvadm.t_con_nftransporta nft,
                         t_con_conhecimento co,
                         t_con_vfreteconhec vc
                    where n.arm_coleta_ncompra = vColetaRowType.Arm_Coleta_Ncompra
                      and n.arm_coleta_ciclo   = vColetaRowType.Arm_Coleta_ciclo
                      and lpad(n.arm_nota_numero,9,'0') = nft.con_nftransportada_numnfiscal
                      and trim(n.glb_cliente_cgccpfremetente) = trim(nft.glb_cliente_cgccpfcodigo)
                      and trim(n.arm_nota_serie) = trim(nft.con_nftransportada_serienf)
                      and co.con_conhecimento_codigo = nft.con_conhecimento_codigo
                      and co.con_conhecimento_serie  = nft.con_conhecimento_serie
                      and co.glb_rota_codigo         = nft.glb_rota_codigo
                      and co.con_conhecimento_codigo = vc.con_conhecimento_codigo
                      and co.con_conhecimento_serie  = vc.con_conhecimento_serie
                      and co.glb_rota_codigo         = vc.glb_rota_codigo
                      and nft.con_nftransportada_dtemissao = ( select max( nft2.con_nftransportada_dtemissao )
                                                                 from tdvadm.t_con_nftransporta nft2
                                                                 where nft2.con_nftransportada_numnfiscal = nft.con_nftransportada_numnfiscal
                                                                   and nft2.glb_cliente_cgccpfcodigo = nft.glb_cliente_cgccpfcodigo);



                  if vCountAcompEvento > 0 then
                        /*******************************************************
                         * Diego | Felipe - 13/04/2016
                         * Verifica se tem Vale Frete gerado pela coleta,
                         *  verificação feita desde a nota > ctrc > vf,
                         *  porque 1 ctrc pode ter varias notas
                         *******************************************************/

                         -- verifico se não existe o evento de transferencia
                         vIsTransferencia := tdvadm.pkg_col_coleta.Fn_Col_IsColetaTransferencia(vColetaRowType.Arm_Coleta_Ncompra, vColetaRowType.Arm_Coleta_ciclo);


                         Update tdvadm.t_Arm_Coletaacompanhamento a
                               set a.arm_coletaacompanhamento_dthr = ( select min(vc.con_vfreteconhec_dtgravacao)
                                                                          from t_arm_nota n,
                                                                               tdvadm.t_con_nftransporta nft,
                                                                               t_con_conhecimento co,
                                                                               t_con_vfreteconhec vc
                                                                          where n.arm_coleta_ncompra = vColetaRowType.Arm_Coleta_Ncompra
                                                                            and n.arm_coleta_ciclo   = vColetaRowType.Arm_Coleta_ciclo
                                                                            and lpad(n.arm_nota_numero,9,'0') = nft.con_nftransportada_numnfiscal
                                                                            and trim(n.glb_cliente_cgccpfremetente) = trim(nft.glb_cliente_cgccpfcodigo)
                                                                            and trim(n.arm_nota_serie) = trim(nft.con_nftransportada_serienf)
                                                                            and co.con_conhecimento_codigo = nft.con_conhecimento_codigo
                                                                            and co.con_conhecimento_serie  = nft.con_conhecimento_serie
                                                                            and co.glb_rota_codigo         = nft.glb_rota_codigo
                                                                            and co.con_conhecimento_codigo = vc.con_conhecimento_codigo
                                                                            and co.con_conhecimento_serie  = vc.con_conhecimento_serie
                                                                            and co.glb_rota_codigo         = vc.glb_rota_codigo
                                                                            and nft.con_nftransportada_dtemissao = ( select max( nft2.con_nftransportada_dtemissao )
                                                                                                                       from tdvadm.t_con_nftransporta nft2
                                                                                                                       where nft2.con_nftransportada_numnfiscal = nft.con_nftransportada_numnfiscal
                                                                                                                         and nft2.glb_cliente_cgccpfcodigo = nft.glb_cliente_cgccpfcodigo)                                                                             ),
                               a.arm_coletaacompanhamento_real = 'S',
                               a.arm_coletaacompanhamento_obs = case nvl(vIsTransferencia, 'null')
                                                                  when 'null' then ''
                                                                  else 'Transferencia para ' || vIsTransferencia
                                                                end
                          Where a.arm_coleta_ncompra = vColetaRowType.Arm_Coleta_Ncompra
                            and a.arm_coleta_ciclo   = vColetaRowType.Arm_Coleta_Ciclo
                            --and a.arm_coletaevento_id = case nvl(vIsTransferencia, 'N')
                            --                              when 'S' then 7
                            --                              else 4
                            --                            end;
                            and a.arm_coletaevento_id = case nvl(vIsTransferencia, 'null')
                                                          when 'null' then 4
                                                          else 7
                                                        end;
                   else
                        /*******************************************************
                         * Diego | Felipe - 13/04/2016
                         * Bloco else implementado porque coleta pode nao ter
                         *   nota mas poderá ter conhecimento,
                         *   (Situacoes citadas por Bruno e Klayton)
                         *******************************************************/
                            Select Count(*)
                              Into vCountAcompEvento
                              From t_con_conhecimento co,
                                   t_con_vfreteconhec vc
                              where co.arm_coleta_ncompra = vColetaRowType.Arm_Coleta_Ncompra
                                and co.arm_coleta_ciclo   = vColetaRowType.Arm_Coleta_ciclo
                                and co.con_conhecimento_codigo = vc.con_conhecimento_codigo
                                and co.con_conhecimento_serie  = vc.con_conhecimento_serie
                                and co.glb_rota_codigo         = vc.glb_rota_codigo;

                         if vCountAcompEvento > 0 then
                           Update t_Arm_Coletaacompanhamento a
                               set a.arm_coletaacompanhamento_dthr = ( Select min(vc.con_vfreteconhec_dtgravacao)
                                                                          From t_con_conhecimento co,
                                                                               t_con_vfreteconhec vc
                                                                          where co.arm_coleta_ncompra = vColetaRowType.Arm_Coleta_Ncompra
                                                                            and co.arm_coleta_ciclo   = vColetaRowType.Arm_Coleta_ciclo
                                                                            and co.con_conhecimento_codigo = vc.con_conhecimento_codigo
                                                                            and co.con_conhecimento_serie  = vc.con_conhecimento_serie
                                                                            and co.glb_rota_codigo         = vc.glb_rota_codigo ),
  /*                               set a.arm_coletaacompanhamento_dthr = ( select min(vc.con_vfreteconhec_dtgravacao)
                                                                            from t_arm_nota n,
                                                                                 t_con_conhecimento co,
                                                                                 t_con_vfreteconhec vc
                                                                            where n.arm_coleta_ncompra = vColetaRowType.Arm_Coleta_Ncompra
                                                                              and n.arm_coleta_ciclo   = vColetaRowType.Arm_Coleta_ciclo
                                                                              and n.con_conhecimento_codigo = co.con_conhecimento_codigo
                                                                              and n.con_conhecimento_serie  = co.con_conhecimento_serie
                                                                              and n.glb_rota_codigo         = co.glb_rota_codigo
                                                                              and co.con_conhecimento_codigo = vc.con_conhecimento_codigo
                                                                              and co.con_conhecimento_serie  = vc.con_conhecimento_serie
                                                                              and co.glb_rota_codigo         = vc.glb_rota_codigo ),   */
                                 a.arm_coletaacompanhamento_real = 'S'
                            Where a.arm_coleta_ncompra = vColetaRowType.Arm_Coleta_Ncompra
                              and a.arm_coleta_ciclo   = vColetaRowType.Arm_Coleta_Ciclo
                              and a.arm_coletaevento_id = 4;
                         end if;
                   end if;
             end if;
             -- fim em viagem

             -- Prazo Para Entrega | Data Inputada manualmente
             select count(*)
               Into vCountAcompEvento
               from t_arm_coletaacompanhamento ca
               where ca.arm_coleta_ncompra = vColetaRowType.Arm_Coleta_Ncompra
                 and ca.arm_coleta_ciclo   = vColetaRowType.Arm_Coleta_ciclo
                 and ca.arm_coletaevento_id = 6
                 and nvl(ca.arm_coletaacompanhamento_real,'N') = 'S';
                /*
                 * Busca da prevista indo através da Nota -> CTe -> VF, se não achar, busca através de CTe -> VF
                 */
             if (vCountAcompEvento = 0) then
               
               select count(*)
                 into vCountAcompEvento
                 from tdvadm.t_con_vfreteentrega a,
                      tdvadm.t_con_vfreteconhec v,
                      tdvadm.t_con_conhecimento co,
                      tdvadm.t_glb_cliend d
                where a.con_conhecimento_codigo                              = v.con_valefrete_codigo
                  and a.glb_rota_codigo                                      = v.glb_rota_codigovalefrete
                  and a.con_conhecimento_serie                               = v.con_valefrete_serie
                  and a.con_valefrete_saque                                  = v.con_valefrete_saque
                  and v.con_conhecimento_codigo                              = co.con_conhecimento_codigo
                  and v.glb_rota_codigo                                      = co.glb_rota_codigo
                  and v.con_conhecimento_serie                               = co.con_conhecimento_serie
                  and trim(co.glb_cliente_cgccpfdestinatario)                = trim(d.glb_cliente_cgccpfcodigo)
                  and co.glb_tpcliend_codigodestinatari                      = d.glb_tpcliend_codigo
                  and TDVADM.fn_limpa_campo3(d.glb_cliend_codcliente)       = a.con_vfreteentrega_codcli
                  and a.CON_VFRETEENTREGA_DTENTREGA                          is not null
                  and nvl(v.con_vfreteconhec_transfchekin,'Nao')             != 'Sim'
                  and co.arm_coleta_ncompra                                  = vColetaRowType.Arm_Coleta_Ncompra
                  and co.arm_coleta_ciclo                                    = vColetaRowType.Arm_Coleta_Ciclo;
               
               if (vCountAcompEvento > 0) then
                 
                 update t_arm_Coletaacompanhamento a
                    set a.arm_coletaacompanhamento_dthr = (SELECT Max(To_Date(To_Char(A.CON_VFRETEENTREGA_DTENTREGA, 'dd/MM/yyyy')||' '||A.CON_VFRETEENTREGA_HORAENTREGA , 'dd/MM/yyyy hh24:mi')) Max_
                                                             from tdvadm.t_con_vfreteentrega a,
                                                                  tdvadm.t_con_vfreteconhec v,
                                                                  tdvadm.t_con_conhecimento co,
                                                                  tdvadm.t_glb_cliend d
                                                            where a.con_conhecimento_codigo                               = v.con_valefrete_codigo
                                                              and a.glb_rota_codigo                                       = v.glb_rota_codigovalefrete
                                                              and a.con_conhecimento_serie                                = v.con_valefrete_serie
                                                              and a.con_valefrete_saque                                   = v.con_valefrete_saque
                                                              and v.con_conhecimento_codigo                               = co.con_conhecimento_codigo
                                                              and v.glb_rota_codigo                                       = co.glb_rota_codigo
                                                              and v.con_conhecimento_serie                                = co.con_conhecimento_serie
                                                              and trim(co.glb_cliente_cgccpfdestinatario)                 = trim(d.glb_cliente_cgccpfcodigo)
                                                              and co.glb_tpcliend_codigodestinatari                       = d.glb_tpcliend_codigo
                                                              and TDVADM.fn_limpa_campo3(d.glb_cliend_codcliente)         = a.con_vfreteentrega_codcli
                                                              and a.CON_VFRETEENTREGA_DTENTREGA                           is not null
                                                              and nvl(v.con_vfreteconhec_transfchekin,'Nao')              != 'Sim'
                                                              and co.arm_coleta_ncompra                   = vColetaRowType.Arm_Coleta_Ncompra
                                                              and co.arm_coleta_ciclo                     = vColetaRowType.Arm_Coleta_Ciclo ),
                                                                 
                        a.arm_coletaacompanhamento_real = 'S'
                  Where a.arm_coleta_ncompra            = vColetaRowType.Arm_Coleta_Ncompra
                    and a.arm_coleta_ciclo              = vColetaRowType.Arm_Coleta_Ciclo
                    and a.arm_coletaevento_id           = 6;
               
               else
                 -- busca através de CTe -> VF
                 SELECT Count(*)
                   INTO vCountAcompEvento
                   FROM TDVADM.T_CON_CONHECIMENTO CT,
                        TDVADM.T_CON_VFRETECONHEC VC,
                        TDVADM.T_CON_VALEFRETE VF
                   WHERE CT.CON_CONHECIMENTO_CODIGO                               = VC.CON_CONHECIMENTO_CODIGO
                     AND CT.CON_CONHECIMENTO_SERIE                                = VC.CON_CONHECIMENTO_SERIE
                     AND CT.GLB_ROTA_CODIGO                                       = VC.GLB_ROTA_CODIGO
                     AND VF.CON_CONHECIMENTO_CODIGO                               = VC.CON_VALEFRETE_CODIGO
                     AND VF.CON_CONHECIMENTO_SERIE                                = VC.CON_VALEFRETE_SERIE
                     AND VF.GLB_ROTA_CODIGO                                       = VC.GLB_ROTA_CODIGOVALEFRETE
                     AND VF.CON_VALEFRETE_SAQUE                                   = VC.CON_VALEFRETE_SAQUE
                     AND VF.CON_VALEFRETE_DATAPRAZOMAX                            IS NOT NULL
                     and nvl(vc.con_vfreteconhec_transfchekin,'Nao')              != 'Sim'
                     AND CT.arm_coleta_ncompra = vColetaRowType.Arm_Coleta_Ncompra
                     AND CT.arm_coleta_ciclo   = vColetaRowType.Arm_Coleta_Ciclo;
                     
                     
                 if (vCountAcompEvento > 0) then
                   
                   Update t_Arm_Coletaacompanhamento a
                      set a.arm_coletaacompanhamento_dthr = ( SELECT Max( To_Date(To_Char(VF.CON_VALEFRETE_DATAPRAZOMAX, 'dd/MM/yyyy') || ' ' || To_char(VF.Con_Valefrete_Horaprazomax, 'hh24:mi'), 'dd/MM/yyyy hh24:mi') ) Max_
                                                                from tdvadm.t_con_conhecimento ct,
                                                                     tdvadm.t_con_vfreteconhec vc,
                                                                     tdvadm.t_con_valefrete vf
                                                               where ct.con_conhecimento_codigo                              = vc.con_conhecimento_codigo
                                                                 and ct.con_conhecimento_serie                               = vc.con_conhecimento_serie
                                                                 and ct.glb_rota_codigo                                      = vc.glb_rota_codigo
                                                                 and vf.con_conhecimento_codigo                              = vc.con_valefrete_codigo
                                                                 and vf.con_conhecimento_serie                               = vc.con_valefrete_serie
                                                                 and vf.glb_rota_codigo                                      = vc.glb_rota_codigovalefrete
                                                                 and vf.con_valefrete_saque                                  = vc.con_valefrete_saque
                                                                 and vf.con_valefrete_dataprazomax                           is not null
                                                                 and nvl(vc.con_vfreteconhec_transfchekin,'Nao')             != 'Sim'
                                                                 and ct.arm_coleta_ncompra         = vColetaRowType.Arm_Coleta_Ncompra
                                                                 and ct.arm_coleta_ciclo           = vColetaRowType.Arm_Coleta_Ciclo ),
                          a.arm_coletaacompanhamento_real = 'S'
                    Where a.arm_coleta_ncompra            = vColetaRowType.Arm_Coleta_Ncompra
                      and a.arm_coleta_ciclo              = vColetaRowType.Arm_Coleta_Ciclo
                      and a.arm_coletaevento_id           = 6;
                      
                 end if;
               
               end if;
             
             end if;
             -- fim Prazo de Entrega

             -- Entregue
             select count(*)
                into vCountAcompEvento
                from t_con_conhecimento co
                Where co.arm_coleta_ncompra = vColetaRowType.Arm_Coleta_Ncompra
                  and co.arm_coleta_ciclo   = vColetaRowType.Arm_Coleta_Ciclo
                  and co.con_conhecimento_entrega is not null;
             if vCountAcompEvento > 0 then
                   Update t_Arm_Coletaacompanhamento a
                     set a.arm_coletaacompanhamento_dthr = ( select min(co.con_conhecimento_entrega)
                                                              from t_con_conhecimento co
                                                              Where co.arm_coleta_ncompra = vColetaRowType.Arm_Coleta_Ncompra
                                                                and co.arm_coleta_ciclo   = vColetaRowType.Arm_Coleta_Ciclo ),
                         a.arm_coletaacompanhamento_real = 'S'
                    Where a.arm_coleta_ncompra = vColetaRowType.Arm_Coleta_Ncompra
                      and a.arm_coleta_ciclo   = vColetaRowType.Arm_Coleta_Ciclo
                      and a.arm_coletaevento_id = 5;
             else
               /*******************************************************
               * Diego | Felipe - 13/04/2016
               * Verifica se tem Vale Frete gerado pela coleta,
               *  verificação feita desde a nota > ctrc,
               *  porque 1 ctrc pode ter varias notas
               *******************************************************/
                select count(*)
                  into vCountAcompEvento
                  from t_arm_nota n,
                       TDVADM.T_CON_NFTRANSPORTA NFT,
                       t_con_conhecimento co
                 where n.arm_coleta_ncompra = vColetaRowType.Arm_Coleta_Ncompra
                   and n.arm_coleta_ciclo   = vColetaRowType.Arm_Coleta_ciclo
                   AND lpad(n.arm_nota_numero,9,'0') = nft.con_nftransportada_numnfiscal
                   and trim(n.glb_cliente_cgccpfremetente) = trim(nft.glb_cliente_cgccpfcodigo)
                   and trim(n.arm_nota_serie) = trim(nft.con_nftransportada_serienf)
                   and CO.con_conhecimento_codigo = nft.con_conhecimento_codigo
                   and CO.con_conhecimento_serie  = nft.con_conhecimento_serie
                   and CO.glb_rota_codigo         = nft.glb_rota_codigo
                   and nft.con_nftransportada_dtemissao = ( select max( nft2.con_nftransportada_dtemissao )
                                                             from tdvadm.t_con_nftransporta nft2
                                                             where nft2.con_nftransportada_numnfiscal = nft.con_nftransportada_numnfiscal
                                                               and nft2.glb_cliente_cgccpfcodigo = nft.glb_cliente_cgccpfcodigo)
                   and co.con_conhecimento_entrega is not null;

                 if vCountAcompEvento > 0 then
                   Update t_Arm_Coletaacompanhamento a
                     set a.arm_coletaacompanhamento_dthr = ( select min(co.con_conhecimento_entrega)
                                                               from t_arm_nota n,
                                                                    TDVADM.T_CON_NFTRANSPORTA NFT,
                                                                    t_con_conhecimento co
                                                              where n.arm_coleta_ncompra = vColetaRowType.Arm_Coleta_Ncompra
                                                                and n.arm_coleta_ciclo   = vColetaRowType.Arm_Coleta_ciclo
                                                                AND lpad(n.arm_nota_numero,9,'0') = nft.con_nftransportada_numnfiscal
                                                                and trim(n.glb_cliente_cgccpfremetente) = trim(nft.glb_cliente_cgccpfcodigo)
                                                                and CO.con_conhecimento_codigo = nft.con_conhecimento_codigo
                                                                and CO.con_conhecimento_serie  = nft.con_conhecimento_serie
                                                                and CO.glb_rota_codigo         = nft.glb_rota_codigo
                                                                and nft.con_nftransportada_dtemissao = ( select max( nft2.con_nftransportada_dtemissao )
                                                                                                           from tdvadm.t_con_nftransporta nft2
                                                                                                           where nft2.con_nftransportada_numnfiscal = nft.con_nftransportada_numnfiscal
                                                                                                             and nft2.glb_cliente_cgccpfcodigo = nft.glb_cliente_cgccpfcodigo)
                                                            ),
                         a.arm_coletaacompanhamento_real = 'S'
                    Where a.arm_coleta_ncompra = vColetaRowType.Arm_Coleta_Ncompra
                      and a.arm_coleta_ciclo   = vColetaRowType.Arm_Coleta_Ciclo
                      and a.arm_coletaevento_id = 5;
                 end if;

             end if;
             -- fim entregue

         end if;

         /*
         Begin
             vVeiculo := Fn_GetPlacaValeFrete(vColetaRowType.Arm_Coleta_Ncompra, vColetaRowType.Arm_Coleta_Ciclo);
             Begin
                 vVeiculo := lpad(To_Number(vVeiculo), 7, '0');
                 vVeiculo := Fn_Get_PlacaCavalo(vVeiculo);
             Exception
               When Others Then
                 vVeiculo := vVeiculo;
             End;
         Exception
           When Others Then
             vVeiculo := 'Erro';
         End;
         */

         -- retorna todos os acompanhamentos realizados
         Open pCursor For
           Select ca.arm_coleta_ncompra,
                  ca.arm_coleta_ciclo,
                  To_Char(ca.arm_coletaacompanhamento_dthr, 'dd/MM/yyyy hh24:mi:ss') arm_coletaacompanhamento_dthr,
                  ca.arm_coletaevento_id,
                  ca.arm_coletaacompanhamento_obs, -- || ' Veiculo: ' || vVeiculo arm_coletaacompanhamento_obs,
                  ca.arm_coletaacompanhamento_real,
                  ce.arm_coletaevento_descricao,
                  ce.arm_coletaevento_acao
             From t_arm_Coletaacompanhamento ca,
                  t_arm_coletaevento ce
             where ca.arm_coletaevento_id = ce.arm_coletaevento_id
               and ca.arm_coleta_ncompra = vColetaRowType.Arm_Coleta_nCompra
               and ca.arm_coleta_ciclo   = vColetaRowType.Arm_Coleta_Ciclo
               and ca.arm_coletaacompanhamento_real = 'S'
             order by ce.arm_coletaevento_ordem desc;--ca.arm_coletaacompanhamento_dthr desc;

         pStatus := 'N';
         pMessage := 'Eventos retornados com sucesso';

         Commit;

     Exception
       When Others Then
          Rollback;
          -- retorna todos os acompanhamentos realizados
          Open pCursor For Select sysdate from dual;
          pStatus := 'E';
          pMessage := 'Sp_Get_ColetaAcompanhamentos('||pColeta||','||pCiclo||') -> '||sqlerrm || ' - ' || dbms_utility.format_error_backtrace;
     End;
  End Sp_Get_ColetaAcompanhamentos;
  Function Fn_GetPlaca(pPlacaConj In Varchar2) return varchar2
    As
    vPlaca Varchar2(10);
    vCount Integer;
  Begin
        vPlaca := pPlacaConj;
        
        SELECT COUNT(*)
          Into vCount
          FROM T_FRT_CONTENG C
          WHERE C.FRT_CONJVEICULO_CODIGO = pPlacaConj;


        if vCount > 0 then
                
              SELECT V.FRT_VEICULO_PLACA
                Into vPlaca
                FROM T_FRT_CONTENG C,
                     T_FRT_VEICULO V
                WHERE C.FRT_VEICULO_CODIGO = V.FRT_VEICULO_CODIGO
                  AND C.FRT_CONJVEICULO_CODIGO = pPlacaConj
                  AND C.FRT_CONTENG_DATAENGATE = ( SELECT MAX(CC.FRT_CONTENG_DATAENGATE)
                                                     FROM T_FRT_CONTENG CC
                                                     WHERE CC.FRT_CONJVEICULO_CODIGO = C.FRT_CONJVEICULO_CODIGO );
        end if;
        return vPlaca;
                                                             
  End Fn_GetPlaca;
  
  Function Fn_GetPlacaValeFrete(pColetaCodigo In Tdvadm.t_arm_Coleta.Arm_Coleta_Ncompra%Type,
                                pColetaCiclo  In Tdvadm.t_arm_coleta.Arm_Coleta_Ciclo%Type) return varchar2
    As
    vPlaca Varchar2(10);
  Begin
    
/*       Select distinct vf.con_valefrete_placa placavf
          into vPlaca
          from tdvadm.t_arm_coleta cm,
               tdvadm.t_con_conhecimento c,
               tdvadm.t_con_vfreteconhec vfc,
               tdvadm.t_con_valefrete vf,
               tdvadm.t_arm_coleta_motorista mc
          where cm.arm_coleta_ncompra = mc.arm_coleta_ncompra (+)
            and cm.arm_coleta_ciclo = mc.arm_coleta_ciclo (+)
            and cm.arm_coleta_ncompra = c.arm_coleta_ncompra (+)
            and cm.arm_coleta_ciclo = c.arm_coleta_ciclo (+)
            and c.con_conhecimento_codigo = vfc.con_conhecimento_codigo (+)
            and c.con_conhecimento_serie = vfc.con_conhecimento_serie (+)
            and c.glb_rota_codigo = vfc.glb_rota_codigo (+)
            and vfc.con_valefrete_codigo = vf.con_conhecimento_codigo (+)
            and vfc.con_valefrete_serie = vf.con_conhecimento_serie (+)
            and vfc.glb_rota_codigovalefrete = vf.glb_rota_codigo (+)
            and vfc.con_valefrete_saque = vf.con_valefrete_saque (+)
            and cm.arm_coleta_ncompra = pColetaCodigo
            and cm.arm_coleta_ciclo = pColetaCiclo;*/
       Begin     
             Select distinct vf.con_valefrete_placa placavf
                into vPlaca
                from tdvadm.t_arm_coleta cm,
                     tdvadm.t_con_conhecimento c,
                     tdvadm.t_con_vfreteconhec vfc,
                     tdvadm.t_con_valefrete vf,
                     tdvadm.t_arm_coleta_motorista mc
                where cm.arm_coleta_ncompra = mc.arm_coleta_ncompra (+)
                  and cm.arm_coleta_ciclo = mc.arm_coleta_ciclo (+)
                  and cm.arm_coleta_ncompra = c.arm_coleta_ncompra (+)
                  and cm.arm_coleta_ciclo = c.arm_coleta_ciclo (+)
                  and c.con_conhecimento_codigo = vfc.con_conhecimento_codigo (+)
                  and c.con_conhecimento_serie = vfc.con_conhecimento_serie (+)
                  and c.glb_rota_codigo = vfc.glb_rota_codigo (+)
                  and vfc.con_valefrete_codigo = vf.con_conhecimento_codigo (+)
                  and vfc.con_valefrete_serie = vf.con_conhecimento_serie (+)
                  and vfc.glb_rota_codigovalefrete = vf.glb_rota_codigo (+)
                  and vfc.con_valefrete_saque = vf.con_valefrete_saque (+)
                  and cm.arm_coleta_ncompra = pColetaCodigo
                  and cm.arm_coleta_ciclo = pColetaCiclo
                  
                  and vf.con_valefrete_datacadastro = (            
                                                       Select max(vf2.con_valefrete_datacadastro)
                                                          from tdvadm.t_arm_coleta cm2,
                                                               tdvadm.t_con_conhecimento c2,
                                                               tdvadm.t_con_vfreteconhec vfc2,
                                                               tdvadm.t_con_valefrete vf2,
                                                               tdvadm.t_arm_coleta_motorista mc2
                                                          where cm2.arm_coleta_ncompra = mc2.arm_coleta_ncompra (+)
                                                            and cm2.arm_coleta_ciclo = mc2.arm_coleta_ciclo (+)
                                                            and cm2.arm_coleta_ncompra = c2.arm_coleta_ncompra (+)
                                                            and cm2.arm_coleta_ciclo = c2.arm_coleta_ciclo (+)
                                                            and c2.con_conhecimento_codigo = vfc2.con_conhecimento_codigo (+)
                                                            and c2.con_conhecimento_serie = vfc2.con_conhecimento_serie (+)
                                                            and c2.glb_rota_codigo = vfc2.glb_rota_codigo (+)
                                                            and vfc2.con_valefrete_codigo = vf2.con_conhecimento_codigo (+)
                                                            and vfc2.con_valefrete_serie = vf2.con_conhecimento_serie (+)
                                                            and vfc2.glb_rota_codigovalefrete = vf2.glb_rota_codigo (+)
                                                            and vfc2.con_valefrete_saque = vf2.con_valefrete_saque (+)
                                                            and cm2.arm_coleta_ncompra = pColetaCodigo
                                                            and cm2.arm_coleta_ciclo = pColetaCiclo
                                                        );            
        Exception 
          When No_Data_Found Then
            vPlaca := null;
        End;
        
        if vPlaca is not null then
            return vPlaca;
        end if;  
        
       Select distinct vf.con_valefrete_placa placavf
          into vPlaca
          from tdvadm.t_arm_coleta cm,
               tdvadm.t_arm_nota n,
               tdvadm.t_con_nftransporta nft,
               tdvadm.t_con_conhecimento c,
               tdvadm.t_con_vfreteconhec vfc,
               tdvadm.t_con_valefrete vf
          where cm.arm_coleta_ncompra = n.arm_coleta_ncompra
            and cm.arm_coleta_ciclo   = n.arm_coleta_ciclo
            and lpad(n.arm_nota_numero,9,'0') = nft.con_nftransportada_numnfiscal(+)
            and trim(n.glb_cliente_cgccpfremetente) = trim(nft.glb_cliente_cgccpfcodigo(+))
            and nft.con_conhecimento_codigo = c.con_conhecimento_codigo(+)
            and nft.con_conhecimento_serie  = c.con_conhecimento_serie(+)
            and nft.glb_rota_codigo         = c.glb_rota_codigo(+)
            and c.con_conhecimento_codigo = vfc.con_conhecimento_codigo (+)
            and c.con_conhecimento_serie = vfc.con_conhecimento_serie (+)
            and c.glb_rota_codigo = vfc.glb_rota_codigo (+)
            and vfc.con_valefrete_codigo = vf.con_conhecimento_codigo (+)
            and vfc.con_valefrete_serie = vf.con_conhecimento_serie (+)
            and vfc.glb_rota_codigovalefrete = vf.glb_rota_codigo (+)
            and vfc.con_valefrete_saque = vf.con_valefrete_saque (+)
            and cm.arm_coleta_ncompra = pColetaCodigo
            and cm.arm_coleta_ciclo = pColetaCiclo
            and vf.con_valefrete_datacadastro = (            
                                                 Select max(vf2.con_valefrete_datacadastro)
                                                    from tdvadm.t_arm_coleta cm2,
                                                         tdvadm.t_arm_nota n2,
                                                         tdvadm.t_con_nftransporta nft2,
                                                         tdvadm.t_con_conhecimento c2,
                                                         tdvadm.t_con_vfreteconhec vfc2,
                                                         tdvadm.t_con_valefrete vf2
                                                    where cm2.arm_coleta_ncompra = n2.arm_coleta_ncompra
                                                      and cm2.arm_coleta_ciclo   = n2.arm_coleta_ciclo
                                                      and lpad(n2.arm_nota_numero,9,'0') = nft2.con_nftransportada_numnfiscal(+)
                                                      and trim(n2.glb_cliente_cgccpfremetente) = trim(nft2.glb_cliente_cgccpfcodigo(+))
                                                      and nft2.con_conhecimento_codigo = c2.con_conhecimento_codigo(+)
                                                      and nft2.con_conhecimento_serie  = c2.con_conhecimento_serie(+)
                                                      and nft2.glb_rota_codigo         = c2.glb_rota_codigo(+)
                                                      and c2.con_conhecimento_codigo = vfc2.con_conhecimento_codigo (+)
                                                      and c2.con_conhecimento_serie = vfc2.con_conhecimento_serie (+)
                                                      and c2.glb_rota_codigo = vfc2.glb_rota_codigo (+)
                                                      and vfc2.con_valefrete_codigo = vf2.con_conhecimento_codigo (+)
                                                      and vfc2.con_valefrete_serie = vf2.con_conhecimento_serie (+)
                                                      and vfc2.glb_rota_codigovalefrete = vf2.glb_rota_codigo (+)
                                                      and vfc2.con_valefrete_saque = vf2.con_valefrete_saque (+)
                                                      and cm2.arm_coleta_ncompra = pColetaCodigo
                                                      and cm2.arm_coleta_ciclo = pColetaCiclo
                                                  );                    
        
        return vPlaca;
                                                             
  End Fn_GetPlacaValeFrete;  
  
  Procedure Sp_Get_ColetaTracking(pColeta In Varchar2,
                                  pCiclo  In Varchar,
                                  pCursor Out Types.cursorType,
                                  pStatus Out Char,
                                  pMessage Out Varchar2)
  as
  vRowType tdvadm.T_arm_Coleta%RowType;
  vPlaca   Varchar2(10);
  vCodigo  Varchar2(20);
  Begin
      Begin
  
         vRowType := Fn_Get_ColetaRowType(pColeta, lPad(pCiclo, 3, '0'));      
         
         /*************************************************************************
          * Analista: Diego Lirio
          * Data: 19/08/2016
          * Alteração: Busca Placa no Vale Frete passando a Coleta como parametro.
          ************************************************************************/ 
         -- vPlaca := Fn_GetPlaca(vRowType.Arm_Coleta_Placa);
         Begin
           vPlaca := Fn_GetPlacaValeFrete(vRowType.Arm_Coleta_Ncompra, vRowType.Arm_Coleta_Ciclo);
           Begin
               vPlaca := lpad(To_Number(vPlaca), 7, '0');
               -- Diego / Felipe Santaniello
               -- 28/09/2016 - Converte Conj. Veiculo para Placa (Cavalo)
               vPlaca := Fn_Get_PlacaCavalo(vPlaca);              
           Exception
             When Others Then
               vPlaca := vPlaca;                   
           End;  
         Exception
           When No_Data_Found Then
             pStatus := 'E';
             pMessage := 'Veículo não encontrado para está Coleta!';
             Open pCursor For select sysdate from dual;
             return;
           When Too_many_Rows Then
             pStatus := 'E';
             pMessage := 'Mais de um veículo foi encontrado.';
             Open pCursor For select sysdate from dual;
             return;
         End;  

         Begin
           SELECT m.atr_marcamodelo_codigo
             Into vCodigo
             FROM t_atr_terminal t,
                  t_atr_marcamodelo m
             where t.atr_marcamodelo_codigo = m.atr_marcamodelo_codigo 
               and t.atr_terminal_placa = vPlaca;
         Exception
           When No_Data_Found Then
             vCodigo := ''; --> Sem Código = Sem Rastreador
         End;  
         
         Open pCursor For
          Select vRowType.arm_coleta_ncompra arm_coleta_ncompra,
                 vRowType.arm_coleta_ciclo arm_coleta_ciclo, 
                 vPlaca arm_coleta_placa,
                 vCodigo codigo,
                 ce.glb_cliend_endereco,
                 1 numero,
                 ce.glb_cliend_cidade,
                 ce.glb_estado_codigo,
                 cd.glb_cliend_endereco remet_endereco,
                 cd.glb_cliend_cidade remet_cidade,
                 cd.glb_estado_codigo remet_estado
            From tdvadm.t_glb_cliend ce,
                 tdvadm.t_glb_cliend cd
            where ce.glb_cliente_cgccpfcodigo = vRowType.glb_cliente_cgccpfcodigoentreg
              and ce.glb_tpcliend_codigo      = vRowType.glb_tpcliend_codigoentrega
              and cd.glb_cliente_cgccpfcodigo = vRowType.Glb_Cliente_Cgccpfcodigocoleta
              and cd.glb_tpcliend_codigo      = vRowType.Glb_Tpcliend_Codigocoleta;
          pStatus := 'N';
          pMessage := 'OK';
      Exception
        When Others Then
          pStatus := 'E';
          pMessage := sqlerrm;
      End;  
  End Sp_Get_ColetaTracking;       

  Procedure Sp_Get_NotasPorColeta(pColeta  In T_arm_Coleta.Arm_Coleta_Ncompra%Type,
                                  pCiclo   In T_arm_Coleta.arm_coleta_ciclo%Type,
                                  pCursor  Out Types.cursorType,
                                  pStatus  Out Char,
                                  pMessage Out Varchar2)
  As
  Begin
      Pkg_arm_Nota.Sp_Get_NotasPorColeta(pColeta, pCiclo, pCursor, pStatus, pMessage);      
  End Sp_Get_NotasPorColeta; 
  
  PROCEDURE SP_GET_CTRCSPORCOLETA(PCOLETA  IN T_ARM_COLETA.ARM_COLETA_NCOMPRA%TYPE,
                                  PCICLO   IN T_ARM_COLETA.ARM_COLETA_CICLO%TYPE,
                                  PCURSOR  OUT TYPES.CURSORTYPE,
                                  PSTATUS  OUT CHAR,
                                  PMESSAGE OUT VARCHAR2)
  AS
    VCOUNT INTEGER;
  BEGIN 
      SELECT COUNT(*)
        INTO VCOUNT
        FROM T_CON_CONHECIMENTO CO,
             T_ARM_NOTA NT
       WHERE CO.CON_CONHECIMENTO_CODIGO = NT.CON_CONHECIMENTO_CODIGO
         AND CO.CON_CONHECIMENTO_SERIE  = NT.CON_CONHECIMENTO_SERIE
         AND CO.GLB_ROTA_CODIGO         = NT.GLB_ROTA_CODIGO
         AND NT.ARM_COLETA_NCOMPRA      = PCOLETA
         AND NT.ARM_COLETA_CICLO        = PCICLO;
      /**************************************************************
      * Solution Coleta - #649
      * Felipe B - 14/04/2016
      * Motivo: Foi acrescentado para retornar coletas que tenham notas
      * atreladas a um conhecimento, mas a coleta não está diretamente
      * ligada ao conhecimento
      ****************************************************************/
      IF(VCOUNT > 0) THEN
        OPEN PCURSOR FOR
          SELECT CO.CON_CONHECIMENTO_CODIGO,
                 CO.CON_CONHECIMENTO_SERIE,
                 CO.GLB_ROTA_CODIGO,
                 PKG_CON_CONHECIMENTO.Fn_Get_UrlImagemConhecimentoNovo(CO.CON_CONHECIMENTO_CODIGO, CO.CON_CONHECIMENTO_SERIE,CO.GLB_ROTA_CODIGO) URL
            FROM T_CON_CONHECIMENTO CO,
                 T_ARM_NOTA NT
           WHERE CO.CON_CONHECIMENTO_CODIGO = NT.CON_CONHECIMENTO_CODIGO
             AND CO.CON_CONHECIMENTO_SERIE  = NT.CON_CONHECIMENTO_SERIE
             AND CO.GLB_ROTA_CODIGO         = NT.GLB_ROTA_CODIGO
             AND NT.ARM_COLETA_NCOMPRA      = PCOLETA
             AND NT.ARM_COLETA_CICLO        = PCICLO ;     
      ELSE
        OPEN PCURSOR FOR
          SELECT C.CON_CONHECIMENTO_CODIGO,
                 C.CON_CONHECIMENTO_SERIE,
                 C.GLB_ROTA_CODIGO,
                 PKG_CON_CONHECIMENTO.Fn_Get_UrlImagemConhecimentoNovo(C.CON_CONHECIMENTO_CODIGO, C.CON_CONHECIMENTO_SERIE,C.GLB_ROTA_CODIGO) URL
            FROM T_CON_CONHECIMENTO C
            WHERE TRIM(C.ARM_COLETA_NCOMPRA) = PCOLETA
              AND TRIM(C.ARM_COLETA_CICLO)   = PCICLO;
      END IF;
      PSTATUS := 'N';
      PMESSAGE := 'OK';            
  END SP_GET_CTRCSPORCOLETA;
                   
  Function Fn_Get_IsUsuarioComercial(pUsuario in tdvadm.t_usu_usuario.usu_usuario_codigo%type,
                                     pCnpj    in  varchar2)
    return boolean
  as
    vHabilitar char(1) := 'N';
    vStatus    char(1) := 'N';
    vMessage   varchar2(1000);
  begin
    Sp_Get_Habiltar( pUsuario, pCnpj, 'USUARIO_COMERCIAL', vHabilitar, vStatus, vMessage );
    return (vHabilitar = 'S') and (vStatus = 'N'); -- status = N/Normal
  end Fn_Get_IsUsuarioComercial;    

 /*********************************************************************************************
  * Data..: 06/06/2016
  * Autor.: Fabiano Góes / Felipe Bispo / Diego
  * A procedure deve receber um login de usuário e devolver uma string que será convertida para um Token na Base64,
  * essa string deve ter os dados do usuário por chave=valor seprados por ":" com os parametros de direitos do usuário no sistema Coleta
  * os dados do Usuário deve ser separado dos parametros através de ";"
  * será feito split no backend para obter os dados por chave=valor
  **********************************************************************************************/
  Procedure Sp_Get_TokenLogin(pLogin in  varchar2,
                              pToken out varchar2,
                              pStatus  Out Char,
                              pMessage Out Varchar2)
  as
    vRowUsu t_usu_usuario%Rowtype;
    vToken varchar2(4000);
      --  login
      --nome completo
      --cnpj
      --email
      --rota
      --telefoneComercial
      --telefoneCelular
  begin
    begin
      
      select *
        into vRowUsu
       from t_usu_usuario u
       where lower(trim(u.usu_usuario_login)) = lower(trim(pLogin))
         and u.usu_usuario_ativo = 'S';    
      
      vToken := vToken || 'codigo='||trim(vRowUsu.Usu_Usuario_Codigo)||':';
      vToken := vToken || 'login='||trim(vRowUsu.Usu_Usuario_Login)||':';
      vToken := vToken || 'nome='||Pkg_Glb_Common.Fn_Limpa_Campo(vRowUsu.Usu_Usuario_Nome)||':';
      vToken := vToken || 'cnpj='||trim(vRowUsu.Usu_Usuario_Cnpjlogin)||':';
      vToken := vToken || 'email='||trim(vRowUsu.Usu_Usuario_Email)||':';
      vToken := vToken || 'rota='||trim(vRowUsu.Glb_Rota_Codigo)||':';
      vToken := vToken || 'telefone='||trim(vRowUsu.Usu_Usuario_Ramal)||':';
      vToken := vToken || 'celular='||trim(vRowUsu.Usu_Usuario_Celular)||';';
      
      
      
      For paramValues in ( select distinct *
                            from (select p.usu_perfil_codigo, 
                                   'S' ParamValue  
                              from TDVADM.t_usu_perfil p
                              where p.usu_aplicacao_codigo = rpad('jcoleta',10, ' ')
                                and instr(lower(p.usu_perfil_parat), lower(vRowUsu.Usu_Usuario_Codigo)) > 0
                            union
                            Select pe.usu_perfil_codigo, 
                                   pe.usu_aplicacaoperfil_ativo ParamValue
                              from tdvadm.t_usu_aplicacaoperfil pe
                             where pe.usu_aplicacao_codigo = rpad('jcoleta',10, ' ')
                               and trim(pe.usu_usuario_codigo) = lower(trim(vRowUsu.Usu_Usuario_Codigo))
                               and pe.usu_aplicacaoperfil_ativo = 'S'
                            union
                            Select pp.usu_perfil_codigo,
                                   'N' ParamValue
                              from tdvadm.t_usu_perfil pp
                             where pp.usu_perfil_codigo not in
                                   (select ppp.usu_perfil_codigo
                                      from TDVADM.t_usu_perfil ppp
                                     where ppp.usu_aplicacao_codigo = rpad('jcoleta',10, ' ')
                                       and instr(lower(ppp.usu_perfil_parat), lower(vRowUsu.Usu_Usuario_Codigo)) > 0
                                     union
                                    Select pep.usu_perfil_codigo
                                      from tdvadm.t_usu_aplicacaoperfil pep
                                     where pep.usu_aplicacao_codigo = rpad('jcoleta',10, ' ')
                                       and trim(pep.usu_usuario_codigo) = lower(trim(vRowUsu.Usu_Usuario_Codigo))
                                       and pep.usu_aplicacaoperfil_ativo = 'S')
                               and pp.usu_aplicacao_codigo = 'jcoleta'))
      Loop
          vToken := vToken || paramValues.Usu_Perfil_Codigo||'='||paramValues.Paramvalue||':';
      End Loop;
        
      pToken := vToken;    
      --vToken := Pkg_Glb_Common.Fn_Limpa_Campo(vToken);
      --pToken := utl_raw.cast_to_varchar2(utl_encode.base64_encode(utl_raw.cast_to_raw(vToken)));
      --pToken := replace(pToken,'\n','');
      pStatus := 'N';
      pMessage := 'OK';    
        
    exception when others then
      pStatus := 'E';
      pMessage := sqlerrm;
    End; 
  end Sp_Get_TokenLogin; 
                   
  /*********************************************************************************************
  * Data..: 07/07/2016
  * Autor.: Felipe Bispo
  * A Procedure deve retornar o maior Ciclo da coleta 
  **********************************************************************************************/
  Procedure Sp_Get_CicloMax(pNCompra in  varchar2,
                            pCiclo   out varchar2,
                            pStatus  Out Char,
                            pMessage Out Varchar2)
  as
    vCiclo varchar2(4000);
  begin
    begin
      
      select max(co.arm_coleta_ciclo)
        into vCiclo
       from tdvadm.t_arm_coleta co
       where co.arm_coleta_ncompra = pNCompra;    
      
      pCiclo := vCiclo;
      pStatus := 'N';
      pMessage := 'OK';    
        
    exception when others then
      pStatus := 'E';
      pMessage := sqlerrm;
    End; 
  end Sp_Get_CicloMax; 

  Function Fn_Col_IsUsuarioTDV(pColetaRowType tdvadm.t_Arm_Coleta%RowType,
                               pStatus     out char,
                               pMessage    out varchar2)return boolean
  as
    vRota  tdvadm.t_usu_usuario.glb_rota_codigo%type;    
    vGrupo tdvadm.t_glb_cliente.glb_grupoeconomico_codigo%type;
    vIsUsuarioTdv boolean := false; -- inicia como usuário NÃO TDV até que se prove contrário
  begin
    begin
      select u.glb_rota_codigo
        into vRota
        from tdvadm.t_usu_usuario u
       where u.usu_usuario_codigo = pColetaRowType.Usu_Usuario_Codigo_Cad
        and nvl(u.usu_usuario_ativo,'S') = 'S';  
    exception when no_data_found then
      vRota := '000';  
    end;
    
    begin
      select c.glb_grupoeconomico_codigo
        into vGrupo 
        from tdvadm.t_glb_cliente c
       where c.glb_cliente_cgccpfcodigo = pColetaRowType.Arm_Coleta_Cnpjsolicitante;  
    exception when no_data_found then
      vRota := '';  
    end;
        
    pStatus  := 'N';
    pMessage := 'OK';
     vIsUsuarioTdv := (vRota != '000' and vGrupo = GrupoEconomicoTDV); 
    return vIsUsuarioTdv;
  end Fn_Col_IsUsuarioTDV;
  
  /*********************************************************************************************
  * Data..: 29/07/2016
  * Autor.: Klayton Anselmo
  * Versão: 
  * Validações de Campos: Valida os Dados da ASN Nimbi
  **********************************************************************************************/
  Procedure Sp_Col_ValidaAsnNimbi(p_idasn    in t_col_asn.col_asn_id%type,
                                  p_coleta   in tdvadm.t_arm_coleta.arm_coleta_ncompra%type,
                                  p_ciclo    in tdvadm.t_arm_coleta.arm_coleta_ciclo%type,
                                  p_status   out char,
                                  p_message  in out varchar2) as
                             
  vIndiceErro              integer := 0;
  vAnaliseInconterm        integer;
  vAnaliseTipoTransporte   integer;
  vMessagem                varchar2(5000);
  vStatus                  char(1) := 'N';
  vVeiculos                tdvadm.PKG_GLB_COMMON.tliststring;
  vQtdeVeiculos            integer := 0;
  vAnaliseVeiculo          integer := 0;
  vQtdHorasAsn             integer := '1440';
  vLocalidadeOrigem        tdvadm.t_glb_localidade.glb_localidade_codigo%type;
  vLocalidadeDestino       tdvadm.t_glb_localidade.glb_localidade_codigo%type;
  vCnpjOrigem              tdvadm.t_col_asnparceiro.col_asnparceiro_cnpj%type;
  vCnpjDestino             tdvadm.t_col_asnparceiro.col_asnparceiro_cnpj%type;
  vContadorGfL             integer;
  vContadorGfF             integer;
  vContadorBfL             integer;
  vContadorBfF             integer;
  vContadorPt              integer;
  vPrimeiroVeiculo         varchar2(30);
  vTipoNimbi               tdvadm.t_col_asntipoveiculo.col_asntipoveiculo_id%type;
  vClienteLiberado         integer;
  vExisteCliente           integer :=0;
  vContadorOri             integer :=0;
  vContadorDes             integer :=0;
  vExisteEmbalagem         integer :=0;
  vContadorItem            integer :=0;
  vExisteAsn               integer :=0;
  vQuantidade              integer :=0;
  vExisteCompanhia         integer :=0;
  vPodeAlterarColeta       integer :=0;
  vStatusLog               char(1) := 'N';
  vMessagemLog             varchar2(5000);
  vLocalidadeArmazem       tdvadm.t_arm_armazem.glb_localidade_codigo%type;
  vExisteArmIbge           integer := 0;
  vOrigemGrupo0020         char(1) := 'N';
  vDestinoGrupo0020        char(1) := 'N';
  --vExisteCenarioLiberado   integer := 0;
  vOperacaoVale            char(1);
  vTipoValidacao           varchar2(5);
  vContrato                tdvadm.t_slf_contrato.slf_contrato_codigo%type;
  vIbgeOrigem              tdvadm.t_glb_localidade.glb_localidade_codigoibge%type;
  vIbgeDestino             tdvadm.t_glb_localidade.glb_localidade_codigoibge%type;
  vIbgeEntregaFca          tdvadm.t_glb_localidade.glb_localidade_codigoibge%type:= null;
  vVeiculoTdv              tdvadm.t_col_asntipoveiculo.col_asntipoveiculo_id%type;
  vUfOrigem                tdvadm.t_glb_estado.glb_estado_codigo%type;
  vUfDestino               tdvadm.t_glb_estado.glb_estado_codigo%type;
  vUfOrigemFca             tdvadm.t_glb_estado.glb_estado_codigo%type := null;
  vAsnNovoContrato         integer:= 0;
  vIsCnpjBloq              integer:= 0;
  begin

    begin
      

      
      /**************************************************************/  
      /** ANALISE DO ID DA ASN                                     **/
      /**************************************************************/
      begin
        
        if (p_idasn is null) then
          
          vIndiceErro := vIndiceErro + 1;
          vStatus     := 'W';    
          vMessagem   := vMessagem|| TO_CHAR(vIndiceErro) ||' - '||'Id da ASN nao informado. ';
                
        else
          
          select count(*)
            into vExisteAsn
            from tdvadm.t_col_asn l
            where l.col_asn_id = p_idasn; 
          
          if (vExisteAsn = 0) then
          
            vIndiceErro := vIndiceErro + 1;
            vStatus     := 'W';    
            vMessagem   := vMessagem|| TO_CHAR(vIndiceErro) ||' - '||'Id da Asn.: '||p_idasn||' inexistente. ';
          
          end if;    
          
        end if;  
       
      end;
      /**************************************************************/
      
      /**************************************************************/
      /** VALIDAÇÃO SE COLETA PODE SER ALTERADA                    **/
      /**************************************************************/ 
      begin
        
        if (p_coleta is not null) and (p_ciclo is not null) then
          
           vPodeAlterarColeta := Fn_Xml_PodeAlterarColetaNimbi(p_coleta, p_ciclo);
           
           if (vPodeAlterarColeta > 0) then
             
             vIndiceErro := vIndiceErro + 1;
             vStatus     := 'W';    
             vMessagem   := vMessagem|| TO_CHAR(vIndiceErro) ||' - '||'Coleta ja possue Nota Digitada, não pode ser alterada. ';
             
             tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'1',vStatusLog, vMessagemLog);  
             
           end if;
        
        end if;  
      
      end;
      /**************************************************************/ 
        
      For p_cursor in (select *
                         from tdvadm.t_col_asn l
                        where l.col_asn_id = p_idasn)
      Loop
        
        -- Klayton em 30/03/2019
        vAsnNovoContrato := 1;
         
        /**************************************************************/ 
        /** Contador para bloq. os CNPJ da MBR, solcitação do Guila  **/ 
        /**************************************************************/   
        BEGIN
          -- Contador do CNPJ
          select count(*)
            into vIsCnpjBloq
            from tdvadm.t_col_asnparceiro p
           where p.col_asn_id                   = p_cursor.col_asn_id
             and p.col_asntipoparceiro_id       in (1,2)
             and trim(p.col_asnparceiro_cnpj)   in ('33417445000120','33417445000201','33417445001798','33417445000805','33417445000716','33417445002336');
            
          -- bloqueio do CNPJ
          if (vIsCnpjBloq > 0 ) then
           
           vIndiceErro := vIndiceErro + 1;
           vStatus    := 'W';                         
           vMessagem  := vMessagem|| TO_CHAR(vIndiceErro) ||' - '||'CNPJ Bloqueado para solicitação de Coleta!';
           
           tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'17',vStatusLog, vMessagemLog);
         
         end if;  
          
        END; 
        /**************************************************************/
        
        /**************************************************************/                  
        /** VALIDAÇaO DA CAMPANHIA / COMPRADOR                       **/
        /**************************************************************/
        BEGIN
          
          IF (substr(p_cursor.col_asn_numero,1,3) = 'V18') and (p_cursor.col_asn_pesoestimado = '1.01') THEN
            
            vIndiceErro := vIndiceErro + 1;
            vStatus     := 'W';    
            vMessagem   := vMessagem|| TO_CHAR(vIndiceErro) ||' - '||'ASN de ajuste da vale, não sera aceita. ';
            
            tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'61',vStatusLog, vMessagemLog);
             
          END IF;  
          
        END;
        /**************************************************************/  
      
        /**************************************************************/                  
        /** VALIDAÇaO DA CAMPANHIA / COMPRADOR                       **/
        /**************************************************************/
        begin
          
          select count(*)
            into vExisteCompanhia
            from tdvadm.t_col_asnparceiro p
           where p.col_asn_id             = p_cursor.col_asn_id
             and p.col_asntipoparceiro_id = 4;
          
          if (vExisteCompanhia = 0) then
            
            vIndiceErro := vIndiceErro + 1;
            vStatus     := 'W';    
            vMessagem   := vMessagem|| TO_CHAR(vIndiceErro) ||' - '||'Asn nao possue Companhia. ';
            
            tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'2',vStatusLog, vMessagemLog);  

          else 
               
            for r_cursor in (select *
                               from tdvadm.t_col_asnparceiro p
                              where p.col_asn_id             = p_cursor.col_asn_id
                                and p.col_asntipoparceiro_id = 4) 
            loop
              
              vLocalidadeOrigem := r_cursor.glb_localidade_codigo;
              vCnpjOrigem       := r_cursor.col_asnparceiro_cnpj;
              
              -- Analise se companhia existe
              select count(*)
                into vExisteCliente
                from tdvadm.t_glb_cliente k
               where k.glb_cliente_cgccpfcodigo = rpad(r_cursor.col_asnparceiro_cnpj,20,' ') ; 
              
              if (vExisteCliente = 0) then
                
                vIndiceErro := vIndiceErro + 1;
                vStatus    := 'W';    
                vMessagem  := vMessagem|| TO_CHAR(vIndiceErro) ||' - '||'Companhia.: '||r_cursor.col_asnparceiro_cnpj||' - '||r_cursor.col_asnparceiro_razaosocial||' nao cadastrado na base de dados da Della Volpe, solicite o cadastro atraves do e-mail.: tdv.cadastro@dellavolpe.com.br. ';
                
                tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'3',vStatusLog, vMessagemLog);  
                
                
              end if;  
              
              vExisteCliente := 0;  
              
              -- Analise Razao Social
              if (trim(r_cursor.col_asnparceiro_razaosocial) IS NULL) then
                
                vIndiceErro := vIndiceErro + 1;
                vStatus    := 'W';    
                vMessagem  := vMessagem|| TO_CHAR(vIndiceErro) ||' - '||'Nome do fornecedor..(Em Branco). ';
                
                tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'4',vStatusLog, vMessagemLog);
              
              else
               
               if (length(trim(r_cursor.col_asnparceiro_razaosocial)) > 100) then
               
                 vIndiceErro := vIndiceErro + 1;
                 vStatus    := 'W';    
                 vMessagem  := vMessagem|| TO_CHAR(vIndiceErro) ||' - '||'Nome do fornecedor..(Invalido). ';
                 
                 tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'5',vStatusLog, vMessagemLog);
               
               end if;
               
              end if;

              -- Analise Cnpj da companhia
              if (trim(r_cursor.col_asnparceiro_cnpj) IS NULL) then
                
                vIndiceErro := vIndiceErro + 1;
                vStatus     := 'W';    
                vMessagem   := vMessagem|| TO_CHAR(vIndiceErro) ||' - '||'CNPJ do fornecedor..(Em Branco). ';
                
                tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'6',vStatusLog, vMessagemLog);
                
              else
                
                if (length(trim(r_cursor.col_asnparceiro_cnpj)) <> '14') then
                  
                  vIndiceErro := vIndiceErro + 1;
                  vStatus     := 'W';    
                  vMessagem   := vMessagem|| TO_CHAR(vIndiceErro) ||' - '||'CNPJ do fornecedor..(Invalido). ';
                  
                  tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'7',vStatusLog, vMessagemLog);
                  
                end if;

              end if;
                        
            end loop;
          
          end if;
          
        end;  
        /**************************************************************/
        
        /**************************************************************/                  
        /** VALIDAÇaO DO REMETENTE                                   **/
        /**************************************************************/
        begin
          
          for r_cursor in (select *
                             from tdvadm.t_col_asnparceiro p
                            where p.col_asn_id             = p_cursor.col_asn_id
                              and p.col_asntipoparceiro_id = 1) 
          loop
            
            vLocalidadeOrigem := r_cursor.glb_localidade_codigo;
            vCnpjOrigem       := r_cursor.col_asnparceiro_cnpj;
            vIbgeOrigem       := r_cursor.col_asnparceiro_ibge;
            vUfOrigem         := r_cursor.col_asnparceiro_uf; 
            
            
            -- Indicador se a origem é vale.
            if (r_cursor.glb_grupoeconomico_codigo) = '0020' then
              
              vOrigemGrupo0020 := 'S';
           
            end if;
             
            -- Analise do tipo de endereço, se não achar, recusamos a coleta
            if (r_cursor.glb_tpcliend_codigo is null) then
                                        
               vIndiceErro := vIndiceErro + 1;
               vStatus     := 'W';   
               vMessagem  := vMessagem|| TO_CHAR(vIndiceErro) ||' - '||'Endereço do Remetente nao foi identificado no sistema Della Volpe. ';
               
               tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'8',vStatusLog, vMessagemLog);
              
            end if;  
            
            -- Analise se fornecedor existe
            select count(*)
              into vExisteCliente
              from tdvadm.t_glb_cliente k
             where k.glb_cliente_cgccpfcodigo = rpad(r_cursor.col_asnparceiro_cnpj,20,' ') ; 
            
            if (vExisteCliente = 0) then
               
               vIndiceErro := vIndiceErro + 1;
               vStatus     := 'W';
               vMessagem  := vMessagem|| TO_CHAR(vIndiceErro) ||' - '||'Fornecedor.: '||r_cursor.col_asnparceiro_cnpj||' - '||r_cursor.col_asnparceiro_razaosocial||' nao cadastrado na base de dados da Della Volpe, solicite o cadastro atraves do e-mail.: tdv.cadastro@dellavolpe.com.br. ';
               
               tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'9',vStatusLog, vMessagemLog);
               
            end if;  
            
            vExisteCliente := 0;  
            
            -- Analise Razao Social
            if (trim(r_cursor.col_asnparceiro_razaosocial) IS NULL) then
              
              vIndiceErro := vIndiceErro + 1;
              vStatus    := 'W';    
   
              vMessagem  := vMessagem|| TO_CHAR(vIndiceErro) ||' - '||'Nome do fornecedor..(Em Branco). ';
              
              tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'10',vStatusLog, vMessagemLog);
            
            else
             
             if (length(trim(r_cursor.col_asnparceiro_razaosocial)) > 100) then
             
               vIndiceErro := vIndiceErro + 1;
               vStatus    := 'W';    
               vMessagem  := vMessagem|| TO_CHAR(vIndiceErro) ||' - '||'Nome do fornecedor..(Invalido). ';
               
               tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'11',vStatusLog, vMessagemLog);
             
             end if;
             
            end if;

            -- Analsie Cnpj Fornecedor
            if (trim(r_cursor.col_asnparceiro_cnpj) IS NULL) then
              
              vIndiceErro := vIndiceErro + 1;
              vStatus     := 'W';    
              vMessagem   := vMessagem|| TO_CHAR(vIndiceErro) ||' - '||'CNPJ do fornecedor..(Em Branco). ';
              
              tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'12',vStatusLog, vMessagemLog);
              
            else
              
              if (length(trim(r_cursor.col_asnparceiro_cnpj)) <> '14') then
                
                vIndiceErro := vIndiceErro + 1;
                vStatus     := 'W';    
                vMessagem   := vMessagem|| TO_CHAR(vIndiceErro) ||' - '||'CNPJ do fornecedor..(Invalido). ';
                
                tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'13',vStatusLog, vMessagemLog);
                
              end if;

            end if;

            -- Analise Endereço
            if (trim(r_cursor.col_asnparceiro_endereco) IS NULL) then
              
              vIndiceErro := vIndiceErro + 1;
              vStatus    := 'W';    
              vMessagem  := vMessagem|| TO_CHAR(vIndiceErro) ||' - '||'Endereço do fornecedor..(Em Branco). ';
              
              tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'14',vStatusLog, vMessagemLog);
             
            end if;

            -- Analise Cidade
            if (trim(r_cursor.col_asnparceiro_cidade) IS NULL) then
              
              vIndiceErro := vIndiceErro + 1;
              vStatus    := 'W';    
              vMessagem  := vMessagem|| TO_CHAR(vIndiceErro) ||' - '||'Cidade do fornecedor..(Em Branco). ';
              
              tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'15',vStatusLog, vMessagemLog);
           
            end if;
           
            -- Analise Uf
            if (trim(r_cursor.col_asnparceiro_uf) IS NULL) then
              
              vIndiceErro := vIndiceErro + 1;
              vStatus    := 'W';    
              vMessagem  := vMessagem|| TO_CHAR(vIndiceErro) ||' - '||'Estado do fornecedor..(Em Branco). ';
              
              tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'16',vStatusLog, vMessagemLog);
             
            end if;
          
          end loop;

        end;  
        /**************************************************************/
        
        /**************************************************************/                  
        /** VALIDAÇaO DO DESTINATARIO                                **/
        /**************************************************************/
        begin
          
          for d_cursor in (select *
                             from tdvadm.t_col_asnparceiro p
                            where p.col_asn_id             = p_cursor.col_asn_id
                              and p.col_asntipoparceiro_id = 2)
          loop
            
            vLocalidadeDestino := d_cursor.glb_localidade_codigo;
            vCnpjDestino       := d_cursor.col_asnparceiro_cnpj;
            vIbgeDestino       := d_cursor.col_asnparceiro_ibge;
            vUfDestino         := d_cursor.col_asnparceiro_uf;
            
            -- Indicador se o Destino é vale.
            if (d_cursor.glb_grupoeconomico_codigo) = '0020' then
              
              vDestinoGrupo0020 := 'S';
           
            end if;
            
            -- Analise do tipo de endereço, se não achar, recusamos a coleta
            if (d_cursor.glb_tpcliend_codigo is null) then
              
              vIndiceErro := vIndiceErro + 1;
              vStatus    := 'W';                         
              vMessagem  := vMessagem|| TO_CHAR(vIndiceErro) ||' - '||'Endereço do Destinatario nao foi identificado no sistema Della Volpe. ';
              
              tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'17',vStatusLog, vMessagemLog);
              
            end if;  
            
            -- Analise se Destino existe
            select count(*)
              into vExisteCliente
              from tdvadm.t_glb_cliente k
             where k.glb_cliente_cgccpfcodigo = rpad(d_cursor.col_asnparceiro_cnpj,20,' ') ; 
            
            if (vExisteCliente = 0) then
              
              vIndiceErro := vIndiceErro + 1;
              vStatus    := 'W';    
              vMessagem  := vMessagem|| TO_CHAR(vIndiceErro) ||' - '||'Destinatario.: '||d_cursor.col_asnparceiro_cnpj||' - '||d_cursor.col_asnparceiro_razaosocial||' nao cadastrado na base de dados da Della Volpe, solicite o cadastro atraves do e-mail.: tdv.cadastro@dellavolpe.com.br';
              
              tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'18',vStatusLog, vMessagemLog);
              
            end if;  
            
            vExisteCliente := 0;  
            
            -- Analise Razao Social
            if (trim(d_cursor.col_asnparceiro_razaosocial) IS NULL) then
              
              vIndiceErro := vIndiceErro + 1;
              vStatus    := 'W';    
              vMessagem  := vMessagem|| TO_CHAR(vIndiceErro) ||' - '||'Nome do destino..(Em Branco). ';
              
              tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'19',vStatusLog, vMessagemLog);
            
            else
              
              if (length(trim(d_cursor.col_asnparceiro_razaosocial)) > 100) then
                
                vIndiceErro := vIndiceErro + 1;
                vStatus    := 'W';    
                vMessagem  := vMessagem|| TO_CHAR(vIndiceErro) ||' - '||'Nome do destino..(Invalido). ';
                
                tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'20',vStatusLog, vMessagemLog);
              
              end if;
            
            end if;

            -- Analise Cnpj origem
            if (trim(d_cursor.col_asnparceiro_cnpj) IS NULL) then
              
                vIndiceErro := vIndiceErro + 1;
                vStatus    := 'W';    
                vMessagem  := vMessagem|| TO_CHAR(vIndiceErro) ||' - '||'CNPJ do destino..(Em Branco). ';
                
                tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'21',vStatusLog, vMessagemLog);
            
            else

              if (length(trim(d_cursor.col_asnparceiro_cnpj)) <> '14') then
              
                 vIndiceErro := vIndiceErro + 1;
                 vStatus    := 'W';    
                 vMessagem  := vMessagem|| TO_CHAR(vIndiceErro) ||' - '||'CNPJ do destino..(Invalido). ';
                 
                 tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'22',vStatusLog, vMessagemLog);
              
              end if;

            end if;

            -- Analise Endereço
            if (trim(d_cursor.col_asnparceiro_endereco) IS NULL) then
              
              vIndiceErro := vIndiceErro + 1;
              vStatus    := 'W';    
              vMessagem  := vMessagem|| TO_CHAR(vIndiceErro) ||' - '||'Endereço do destino..(Em Branco). ';
              
              tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'23',vStatusLog, vMessagemLog);
            
            end if;

            -- Analise Cidade
            if (trim(d_cursor.col_asnparceiro_cidade) IS NULL) then
              
               vIndiceErro := vIndiceErro + 1;
               vStatus    := 'W';    
               vMessagem  := vMessagem|| TO_CHAR(vIndiceErro) ||' - '||'Cidade do destino..(Em Branco). ';
               
               tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'24',vStatusLog, vMessagemLog);
              
            end if;
            
            -- Analise uf
            if (trim(d_cursor.col_asnparceiro_uf) IS NULL) then
              
               vIndiceErro := vIndiceErro + 1;
               vStatus    := 'W';    
               vMessagem  := vMessagem|| TO_CHAR(vIndiceErro) ||' - '||'Estado do destino..(Em Branco). ';
               
               tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'25',vStatusLog, vMessagemLog);
            
            end if;

            -- Analise Cep
            if (trim(d_cursor.col_asnparceiro_cep ) IS NULL) then
              
              vIndiceErro := vIndiceErro + 1;
              vStatus    := 'W';    
              vMessagem  := vMessagem|| TO_CHAR(vIndiceErro) ||' - '||'Cep do destino..(Em Branco). ';
              
              tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'26',vStatusLog, vMessagemLog);
              
            end if;

          end loop;    
               
        end;
        /**************************************************************/
        
        /**************************************************************/
        /** VALIDAÇaO DE DATA DE EMISSAO                             **/
        /**************************************************************/
        begin
          
           if p_cursor.col_asn_dtemissao is null then
             
             -- Se Data for nulla
             vIndiceErro := vIndiceErro + 1;
             vStatus    := 'W';    
             vMessagem  := vMessagem|| TO_CHAR(vIndiceErro) ||' - '|| 'Data emissao...(Em Branco). ';
             
             tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'27',vStatusLog, vMessagemLog);
             
           end if;
                   
        end;  
        /**************************************************************/
        
        /**************************************************************/
        /** VALIDAÇaO DE ESTIMADA COLETA                             **/
        /**************************************************************/
        begin
          
          if p_cursor.col_asn_dtprogcoleta is null then
             
             vIndiceErro := vIndiceErro + 1;
             vStatus    := 'W';    
             vMessagem  := vMessagem|| TO_CHAR(vIndiceErro) ||' - '|| 'Data estimada...(Invalida). ';
             
             tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'28',vStatusLog, vMessagemLog);
             
          end if;
          
        end;
        /**************************************************************/
        
        /**************************************************************/
        /** DATA ESTIMADA x DATA EMISSAO                             **/
        /**************************************************************/
        --begin
          
          -- Data estimada X Data emissao      
          -- Validação desabilitada em 13/09/2016 10:30 a pedido da vale.
          -- executada por ksouza
          /*          
          if ( p_cursor.col_asn_dtemissao >  p_cursor.col_asn_dtprogcoleta) then
            
            vIndiceErro := vIndiceErro + 1;
            vStatus    := 'W';    
            vMessagem  := vMessagem|| TO_CHAR(vIndiceErro) ||' - '|| 'Data estimada...(Menor que a Data emissao). ';
            
            tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'29',vStatusLog, vMessagemLog);
         
          end if;         
          */
          
          -- Data estimada X data de processamento da ASN 
          -- Validação desabilitada em 13/09/2016 09:30 a pedido da vale.
          -- executada por ksouza
          
          /*
          if (SYSDATE > p_cursor.col_asn_dtprogcoleta) then
            
            vIndiceErro := vIndiceErro + 1;
            vStatus     := 'W';    
            vMessagem   := vMessagem|| TO_CHAR(vIndiceErro) ||' - '|| 'Data estimada...(Menor que a data de processamento da ASN). ';
            
            tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'30',vStatusLog, vMessagemLog);
            
          end if;
          */
        
        --end;
        /**************************************************************/
        
        /**************************************************************/
        /** VALIDAÇaO DA DATA DE ENTREGA                             **/
        /**************************************************************/
        begin
          
          if ( p_cursor.col_asn_dtemissao is not null) then
            
            if round((tdvadm.FN_CALCULA_TEMPODECORRIDO(p_cursor.col_asn_dtemissao, sysdate,'M')/60)) > vQtdHorasAsn then
              
              vIndiceErro := vIndiceErro + 1;
              vStatus     := 'W';    
              vMessagem   := vMessagem|| TO_CHAR(vIndiceErro) ||' - '|| 'Entrega da Coleta supera '||trim(to_char(vQtdHorasAsn))||' horas da data de emissao. ';
              
              tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'31',vStatusLog, vMessagemLog);
              
            end if;

          end if;
        
        end;
        /**************************************************************/
        
        /**************************************************************/
        /** VALIDAÇaO PESO ESTIMADO                                  **/
        /**************************************************************/
        begin
          
          if (NVL(p_cursor.col_asn_pesoestimado,0)  = 0) then
            
            vIndiceErro := vIndiceErro + 1;
            vStatus     := 'W';    
            vMessagem   := vMessagem|| TO_CHAR(vIndiceErro) ||' - '|| 'Peso estimado_KG...(Em Branco). ';
            
            tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'32',vStatusLog, vMessagemLog);

          end if;

        end;
        /**************************************************************/
        
        /**************************************************************/
        /** VALIDAÇaO VALOR ESTIMADO                                 **/
        /**************************************************************/
        begin
          
          if p_cursor.Col_Asn_Valorestimado IS NOT NULL then
            
            select length(round(p_cursor.Col_Asn_Valorestimado))
              into vQuantidade
              from DUAL;
              
            if vQuantidade > 8 then
              vIndiceErro := vIndiceErro + 1;
              vStatus     := 'W';    
              vMessagem   := vMessagem|| TO_CHAR(vIndiceErro) ||' - '|| 'Valor estimado da Coleta...(Inválido). ';
              
              tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'33',vStatusLog, vMessagemLog);
              
            end if;
            
          end if;

        end;
        /**************************************************************/
        
        /**************************************************************/
        /** VALIDAÇaO DE INCOTERMS                                   **/
        /**************************************************************/
        begin
        
        select count(*)
          into vAnaliseInconterm
          from tdvadm.t_col_asnincoterm k
         where k.col_asnincoterm_codnimbi = p_cursor.col_asn_incoterms;
        
        If (vAnaliseInconterm = 0 ) then
          
           -- Se nao existir o Icoterms, Recusamos.
           vIndiceErro := vIndiceErro + 1;
           vStatus    := 'W';    
           vMessagem  := vMessagem|| TO_CHAR(vIndiceErro) ||' - '|| 'Incoterm nao cadastrado na nossa base de dados, '||p_cursor.col_asn_incoterms||'. ';
           
           tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'34',vStatusLog, vMessagemLog);
           
        else
          
          -- CIF nao esta liberado
          if (p_cursor.col_asn_incoterms = 'CIF') then
            
            vIndiceErro := vIndiceErro + 1;
            vStatus    := 'W';    
            vMessagem  := vMessagem|| TO_CHAR(vIndiceErro) ||' - '|| 'Incorterms do Tipo CIF nao esta autorizado para coleta. ';
            
            tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'35',vStatusLog, vMessagemLog);

          end if;
          
          
          if (p_cursor.col_asn_incoterms = 'FCA') then
             
           begin
             
            select l.glb_localidade_codigo
              into vLocalidadeArmazem
              from tdvadm.t_arm_armazem l
             where l.arm_armazem_codigo = p_cursor.arm_armazem_codigo
               and l.glb_localidade_codigo is not null;
           
           exception when others then
            vLocalidadeArmazem := null;
           end;      
           
           if (vLocalidadeArmazem is not null) then
           
            vLocalidadeOrigem := vLocalidadeArmazem;
           
           end if;
           
          end if;
          
          -- REGRA SÓ SE APLICA PARA ASN´S FCA NÃO VALE
          if (p_cursor.col_asn_incoterms = 'FCA') and ( instr(trim(p_cursor.col_asn_numero),'V') = 0) then
            
          
            if (p_cursor.col_asn_shipcitytaxcode is null) then
              
              vIndiceErro := vIndiceErro + 1;
              vStatus     := 'W';    
              vMessagem   := vMessagem|| TO_CHAR(vIndiceErro) ||' - '|| 'Coleta FCA é obrigatorio informar o municipio de entrega!, '||p_cursor.col_asn_tipocarga||'. ';
             
              tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'63',vStatusLog, vMessagemLog);
            
            else
              
              vIbgeEntregaFca := p_cursor.col_asn_shipcitytaxcode;
              
              -- Busca 
              begin
                
                select ll.ufsigla
                  into vUfOrigemFca 
                  from ibge.v_glb_ibge ll
                 where ll.codmun = vIbgeEntregaFca; 
              
              exception when others then
                vUfOrigemFca := null;
              end;
              
              select count(*)
                into vExisteArmIbge 
                from tdvadm.t_arm_armazem ar,
                     tdvadm.t_glb_localidade lo
               where nvl(upper(ar.arm_armazem_ativo),'N') = 'S'
                 and nvl(ar.arm_armazem_atendefca,'N')    = 'S'
                 and ar.glb_localidade_codigo             = lo.glb_localidade_codigo
                 and lo.glb_localidade_codigoibge         = trim(p_cursor.col_asn_shipcitytaxcode);  
              
              
              if (vExisteArmIbge = 0) then
                
                 vIndiceErro := vIndiceErro + 1;
                 vStatus     := 'W';    
                 vMessagem   := vMessagem|| TO_CHAR(vIndiceErro) ||' - '|| 'Na cidade informada para a entrega, a Della Volpe não possue armazem!, '||p_cursor.col_asn_tipocarga||'. ';
                
                 tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'64',vStatusLog, vMessagemLog);
              
              end if;        
              
            end if;  
          
          
          end if;  
            
          
        end if;
        
        end;
        /**************************************************************/
        
        /**************************************************************/
        /** VALIDAÇaO TIPO DE FRETE                                  **/
        /**************************************************************/
        begin
        
        select count(*)
          into vAnaliseTipoTransporte
          from tdvadm.t_col_asntipofrete k
         where k.col_asntipofrete_codnimbi = p_cursor.col_asn_tipocarga;
        
        If ( vAnaliseTipoTransporte = 0 ) then
          
           -- Tipo de Frete tem que existir, caso contrario, Recusamos.
           vIndiceErro := vIndiceErro + 1;
           vStatus     := 'W';    
           vMessagem   := vMessagem|| TO_CHAR(vIndiceErro) ||' - '|| 'Tipo de Frete nao cadastrado na nossa base de dados, '||p_cursor.col_asn_tipocarga||'. ';
           
           tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'36',vStatusLog, vMessagemLog);
           
        else   
          
          if (vAsnNovoContrato = 0) then          
          -- Validando carga Lotaçao
          If ( p_cursor.col_asn_tipocarga = '7') Then
            
           -- Analise para saber se acha regra para Grande Fluxo
           select count(*)
             into vContadorGfL
             from t_xml_clientelib lib
            where lib.glb_cliente_cgccpfcodigo          = rpad(vCnpjOrigem,20,' ')
              and nvl(lib.xml_clientelib_ativo,'N')     = 'S'
              and nvl(lib.xml_clientelib_flaggf,'N')   = 'S'
              and lib.fcf_tpcarga_codigo                = '11' -- Lotacao
              and lib.xml_clientelib_dtvigencia       = (select max(lib1.xml_clientelib_dtvigencia)
                                                           from t_xml_clientelib lib1
                                                          where lib1.glb_cliente_cgccpfcodigo = lib.glb_cliente_cgccpfcodigo
                                                            and lib1.xml_clientelib_ativo     = lib.xml_clientelib_ativo
                                                            and lib1.xml_clientelib_flaggf    = lib.xml_clientelib_flaggf
                                                            and lib1.fcf_tpcarga_codigo       = lib.fcf_tpcarga_codigo
                                                            and lib1.glb_localidade_codigoori = lib.glb_localidade_codigoori
                                                            and lib1.xml_clientelib_tpcodori  = lib.xml_clientelib_tpcodori
                                                            and lib1.glb_localidade_codigodes = lib.glb_localidade_codigodes
                                                            and lib1.xml_clientelib_tpcoddes  = lib.xml_clientelib_tpcoddes
                                                            and trunc(lib1.xml_clientelib_dtvigencia) <= sysdate)
                  and trim(lib.glb_localidade_codigoori)  = trim(fn_busca_codigoibge1(trim(vLocalidadeOrigem),lib.xml_clientelib_tpcodori))
                  and trim(lib.glb_localidade_codigodes)  = trim(decode(trim(lib.glb_localidade_codigodes),'99999','99999',fn_busca_codigoibge1(trim(vLocalidadeDestino),lib.xml_clientelib_tpcoddes)));
           
           -- Analise para saber se acha regra para Baixo Fluxo
           select count(*)
             into vContadorBfL
             from tdvadm.t_xml_clientelib lib
            where lib.glb_cliente_cgccpfcodigo          = rpad(vCnpjOrigem,20,' ')
              and nvl(lib.xml_clientelib_ativo,'N')     = 'S'
              and nvl(lib.xml_clientelib_flagbf,'N')    = 'S'
              and lib.fcf_tpcarga_codigo                = '11' -- Lotacao
              and lib.xml_clientelib_dtvigencia       = (select max(lib1.xml_clientelib_dtvigencia)
                                                           from t_xml_clientelib lib1
                                                          where lib1.glb_cliente_cgccpfcodigo = lib.glb_cliente_cgccpfcodigo
                                                            and lib1.xml_clientelib_ativo     = lib.xml_clientelib_ativo
                                                            and lib1.xml_clientelib_flagbf    = lib.xml_clientelib_flagbf
                                                            and lib1.fcf_tpcarga_codigo       = lib.fcf_tpcarga_codigo
                                                            and lib1.glb_localidade_codigoori = lib.glb_localidade_codigoori
                                                            and lib1.xml_clientelib_tpcodori  = lib.xml_clientelib_tpcodori
                                                            and lib1.glb_localidade_codigodes = lib.glb_localidade_codigodes
                                                            and lib1.xml_clientelib_tpcoddes  = lib.xml_clientelib_tpcoddes
                                                            and trunc(lib1.xml_clientelib_dtvigencia) <= sysdate)
                  and trim(lib.glb_localidade_codigoori)  = trim(fn_busca_codigoibge1(trim(vLocalidadeOrigem),lib.xml_clientelib_tpcodori))
                  and trim(lib.glb_localidade_codigodes)  = trim(decode(trim(lib.glb_localidade_codigodes),'99999','99999',fn_busca_codigoibge1(trim(vLocalidadeDestino),lib.xml_clientelib_tpcoddes)));
       
           
           -- Analise para saber se acha para Porto
           select count(*)
             into vContadorPt
             from t_xml_clientelib lib
            where lib.glb_cliente_cgccpfcodigo          = rpad(substr(trim(vCnpjOrigem),-14),20,' ')
              and nvl(lib.xml_clientelib_ativo,'N')     = 'S'
              and nvl(lib.xml_clientelib_flagporto,'N') = 'S';

           -- Atribuindo mensagem
           if ((vContadorGfL = 0) and (vContadorBfL = 0) and (vContadorPt = 0)) then
             
              vIndiceErro := vIndiceErro + 1;
              vStatus     := 'W';
              vMessagem   := vMessagem|| TO_CHAR(vIndiceErro) ||' - '|| 'Nao encontrada regra de Grande Fluxo e Porto / Aeroporto para carga Lotaçao. Cnpj Analise.: '||vCnpjOrigem||'. ';
              
              tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'37',vStatusLog, vMessagemLog);
              
           end if;
            
          -- Validadno carga Fracinada 
          elsif ( p_cursor.col_asn_tipocarga = '5' ) then
          
           -- Conta Grande Fluxo Fracionado
           select count(*)
             into vContadorGfF
             from t_xml_clientelib lib
            where lib.glb_cliente_cgccpfcodigo          = rpad(vCnpjOrigem,20,' ')
              and nvl(lib.xml_clientelib_ativo,'N')     = 'S'
              and nvl(lib.xml_clientelib_flaggf,'N')    = 'S'
              and lib.fcf_tpcarga_codigo                = '12' -- Fracionado
              and lib.xml_clientelib_dtvigencia       = (select max(lib1.xml_clientelib_dtvigencia)
                                                           from t_xml_clientelib lib1
                                                          where lib1.glb_cliente_cgccpfcodigo = lib.glb_cliente_cgccpfcodigo
                                                            and lib1.xml_clientelib_ativo     = lib.xml_clientelib_ativo
                                                            and lib1.xml_clientelib_flaggf    = lib.xml_clientelib_flaggf
                                                            and lib1.fcf_tpcarga_codigo       = lib.fcf_tpcarga_codigo
                                                            and lib1.glb_localidade_codigoori = lib.glb_localidade_codigoori
                                                            and lib1.xml_clientelib_tpcodori  = lib.xml_clientelib_tpcodori
                                                            and lib1.glb_localidade_codigodes = lib.glb_localidade_codigodes
                                                            and lib1.xml_clientelib_tpcoddes  = lib.xml_clientelib_tpcoddes
                                                            and trunc(lib1.xml_clientelib_dtvigencia) <= sysdate)
              and trim(lib.glb_localidade_codigoori)  = trim(fn_busca_codigoibge1(trim(vLocalidadeOrigem),lib.xml_clientelib_tpcodori))
              and trim(lib.glb_localidade_codigodes)  = trim(decode(trim(lib.glb_localidade_codigodes),'99999','99999',fn_busca_codigoibge1(trim(vLocalidadeDestino),lib.xml_clientelib_tpcoddes)));
              
           
           -- Conta Grande Baixo Fracionado
           select count(*)
             into vContadorBfF
             from t_xml_clientelib lib
            where lib.glb_cliente_cgccpfcodigo          = rpad(vCnpjOrigem,20,' ')
              and nvl(lib.xml_clientelib_ativo,'N')     = 'S'
              and nvl(lib.xml_clientelib_flagbf,'N')    = 'S'
              and lib.fcf_tpcarga_codigo                = '12' -- Fracionado
              and lib.xml_clientelib_dtvigencia       = (select max(lib1.xml_clientelib_dtvigencia)
                                                           from t_xml_clientelib lib1
                                                          where lib1.glb_cliente_cgccpfcodigo = lib.glb_cliente_cgccpfcodigo
                                                            and lib1.xml_clientelib_ativo     = lib.xml_clientelib_ativo
                                                            and lib1.xml_clientelib_flagbf    = lib.xml_clientelib_flagbf
                                                            and lib1.fcf_tpcarga_codigo       = lib.fcf_tpcarga_codigo
                                                            and lib1.glb_localidade_codigoori = lib.glb_localidade_codigoori
                                                            and lib1.xml_clientelib_tpcodori  = lib.xml_clientelib_tpcodori
                                                            and lib1.glb_localidade_codigodes = lib.glb_localidade_codigodes
                                                            and lib1.xml_clientelib_tpcoddes  = lib.xml_clientelib_tpcoddes
                                                            and trunc(lib1.xml_clientelib_dtvigencia) <= sysdate)
              and trim(lib.glb_localidade_codigoori)  = trim(fn_busca_codigoibge1(trim(vLocalidadeOrigem),lib.xml_clientelib_tpcodori))
              and trim(lib.glb_localidade_codigodes)  = trim(decode(trim(lib.glb_localidade_codigodes),'99999','99999',fn_busca_codigoibge1(trim(vLocalidadeDestino),lib.xml_clientelib_tpcoddes)));
 
           
           -- Conta Grande Fluxo Lotacao  
           select count(*)
             into vContadorGfL
             from t_xml_clientelib lib
            where lib.glb_cliente_cgccpfcodigo        = rpad(vCnpjOrigem,20,' ')
              and nvl(lib.xml_clientelib_ativo,'N')   = 'S'
              and nvl(lib.xml_clientelib_flaggf,'N')  = 'S'
              and lib.fcf_tpcarga_codigo              = '11' -- Lotacao
              and lib.xml_clientelib_dtvigencia       = (select max(lib1.xml_clientelib_dtvigencia)
                                                           from t_xml_clientelib lib1
                                                          where lib1.glb_cliente_cgccpfcodigo = lib.glb_cliente_cgccpfcodigo
                                                            and lib1.xml_clientelib_ativo     = lib.xml_clientelib_ativo
                                                            and lib1.xml_clientelib_flaggf    = lib.xml_clientelib_flaggf
                                                            and lib1.fcf_tpcarga_codigo       = lib.fcf_tpcarga_codigo
                                                            and lib1.glb_localidade_codigoori = lib.glb_localidade_codigoori
                                                            and lib1.xml_clientelib_tpcodori  = lib.xml_clientelib_tpcodori
                                                            and lib1.glb_localidade_codigodes = lib.glb_localidade_codigodes
                                                            and lib1.xml_clientelib_tpcoddes  = lib.xml_clientelib_tpcoddes
                                                            and trunc(lib1.xml_clientelib_dtvigencia) <= sysdate)
              and trim(lib.glb_localidade_codigoori)  = trim(fn_busca_codigoibge1(trim(vLocalidadeOrigem),lib.xml_clientelib_tpcodori))
              and trim(lib.glb_localidade_codigodes)  = trim(decode(trim(lib.glb_localidade_codigodes),'99999','99999',fn_busca_codigoibge1(trim(vLocalidadeDestino),lib.xml_clientelib_tpcoddes)));
              
           -- Conta se o parceiro e PORTO pelo nosso cadastro
           select count(*)
             into vContadorPt
             from t_xml_clientelib lib
            where lib.glb_cliente_cgccpfcodigo          = rpad(substr(trim(vCnpjOrigem),-14),20,' ')
              and nvl(lib.xml_clientelib_ativo,'N')     = 'S'
              and nvl(lib.xml_clientelib_flagporto,'N') = 'S';   

           -- Se achar praca para Grande Fluxo Fracionado Deixa passar 
           If ( vContadorGfF = 0) and (vContadorBfF = 0) and  ( (vContadorGfL > 0) or (vContadorPt > 0) ) then
             
             -- Tipo de Frete tem que existir, caso contrario, Recusamos.
             vIndiceErro := vIndiceErro + 1;
             vStatus     := 'W';    
             vMessagem   := vMessagem|| TO_CHAR(vIndiceErro) ||' - '||'Parceiro de Origem esta cadastrado com o ramo de atividade Incorreto para o Tipo de Carga FRACIONADA. '||vCnpjOrigem||'. ';
             
             tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'38',vStatusLog, vMessagemLog);
             
           end if;   
              
          end if;     
          
          -- Validando tipo cd carga Quimico / Perigoso
          if ( p_cursor.col_asn_tipocarga = '6' ) then
            
            -- Se for Quimico / Perigoso e nao tiver Onu, recusamos
            if (p_cursor.COL_ASN_NUMEROONU is null) then
              
              vIndiceErro := vIndiceErro + 1;
              vStatus     := 'W';    
              vMessagem   := vMessagem|| TO_CHAR(vIndiceErro) ||' - '|| 'Quando  o tipo da carga for Quimico / Perigoso e obrigatorio o numero da Onu. ';
              
              tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'39',vStatusLog, vMessagemLog);
              
            end if;    
          
          end if;  
          
          end if;
                  
        end if;
        
        end;
        /**************************************************************/
        
        /**************************************************************/
        /** VALIDAÇaO TIPO DE VEICULO                                **/
        /**************************************************************/
        begin
          
          -- Analisando o Array de Veiculo
          vVeiculos := tdvadm.pkg_glb_common.fn_split(p_cursor.col_asn_tipoveiculo,'+');   
             
          For i In vVeiculos.first .. vVeiculos.last Loop
            
            If  (nvl(trim(vVeiculos(i).pString),'nullo') <> 'nullo') Then
              
              --Pego o primeiro veiculo
              if (i= 1) then
                vPrimeiroVeiculo := vVeiculos(i).pString;
              end if;  
              
              vQtdeVeiculos := vQtdeVeiculos + 1;
              
              select count(*)
                into vAnaliseVeiculo
                from tdvadm.t_col_asntipoveiculo l
               where l.col_asntipoveiculo_codnimbi = trim(vVeiculos(i).pString);
               
              -- Se nao existi, Recusamos
              If (vAnaliseVeiculo = 0 ) then
                
                vIndiceErro := vIndiceErro + 1;
                vStatus    := 'W';    
                vMessagem  := vMessagem|| TO_CHAR(vIndiceErro) ||' - '||'Tipo de Veiculo nao cadastrado na nossa base de dados, '||trim(vVeiculos(i).pString)||'. ';
                
                tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'40',vStatusLog, vMessagemLog);
                
              end if; 
                 
            End if;
              
          End Loop;
          
          -- Analisando se para a ASN mais que um Veiculo foi informado, Recusamos.
          If (vQtdeVeiculos > 1) Then
            
           vIndiceErro := vIndiceErro + 1;
           vStatus    := 'W';    
           vMessagem  := vMessagem||TO_CHAR(vIndiceErro)||' - '||'Informado mais que um veiculo para a ASN, '||p_cursor.col_asn_tipoveiculo||'. ';
           
           tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'41',vStatusLog, vMessagemLog);
          
          elsif (vQtdeVeiculos = 0 ) then
          
           vIndiceErro := vIndiceErro + 1;
           vStatus    := 'W';    
           vMessagem  := vMessagem||TO_CHAR(vIndiceErro)||' - '||'Tipo de Transporte...(Invalido) para tipo de carga diferente de Fracionado. ';
           
           tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'42',vStatusLog, vMessagemLog);
          
          End if;
          
          if (vAsnNovoContrato = 0) then
          -- Analise para validar se o tipo de veiculo pode ser usado para aquele Contrato
          If (vPrimeiroVeiculo in ('BR00000007','BR00000008','BR00000009','BR00000010','BR00000011')) Then
            
            -- Klayton em 06/09/2016
            -- Validação de carga Fracionada.
            if (p_cursor.col_asn_tipocarga = '5') then
              
              vIndiceErro   := vIndiceErro + 1;
              vStatus       := 'W';    
              vMessagem     := vMessagem||TO_CHAR(vIndiceErro)||' - '||'Veiculo informado, nao esta liberado para o tipo de carga FRACIONADA!';
              tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'60',vStatusLog, vMessagemLog);
            
            end if;  
             
            -- Busco o tipo de veiculo cadastrado na nosa tabela
            begin
              
              select l.col_asntipoveiculo_id
                into vTipoNimbi
                from tdvadm.t_col_asntipoveiculo l
               where upper(l.col_asntipoveiculo_codnimbi) = vPrimeiroVeiculo;
             
            exception when others then
              vTipoNimbi := 0;
            end;    
                   
            -- Faço analise na nossa tabela de liberaçao.
            select count(*)
              into vClienteLiberado
              from tdvadm.t_xml_clientetransp l
             where trim(l.glb_cliente_cgccpfcodigo)   = substr(trim(vCnpjOrigem),-14)
               and l.xml_clientetransp_ibgeo          = trim(fn_busca_codigoibge1(trim(vLocalidadeOrigem),'IB'))
               and l.xml_clientetransp_ibged          = trim(fn_busca_codigoibge1(trim(vLocalidadeDestino),'IB'))
               and l.col_asntipoveiculo_id            = vTipoNimbi
               and nvl(l.xml_clientetransp_ativo,'N') = 'S';                         
                                  
            -- Recusado a coleta caso o cliente nao tenha esse veiculo cadastrado para ele.
            if (vClienteLiberado = 0) then
              
              vIndiceErro  := vIndiceErro + 1;
              vStatus      := 'W';    
              vMessagem    := vMessagem||TO_CHAR(vIndiceErro)||' - '||'Veiculo informado, nao esta liberado para o conjunto tipo de carga / cnpj / origem e destino. ';
              
              tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'43',vStatusLog, vMessagemLog);
                 
            end if;
                          
          End if;
          
          
          -- validação para cargar do baixo fluxo, somente aceitamos veiculo truck, carreta e bi-trem
          if ((vContadorBfL >0) or (vContadorBfF>0)) then
          
             if (vPrimeiroVeiculo not in ('BR00000001','BR00000002','BR00000005')) then
               
               vIndiceErro  := vIndiceErro + 1;
               vStatus      := 'W';    
               vMessagem    := vMessagem||TO_CHAR(vIndiceErro)||' - '||'Veiculo informado, nao esta liberado para cargas do baixo fluxo!';
              
               tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'43',vStatusLog, vMessagemLog);

             end if;  
          
          end if;  
          
          end if;
              
        End;  
        /**************************************************************/
        
        /**************************************************************/
        /** VALIDAÇaO DAS DIMENÇÕES DA CARGA                         **/
        /**************************************************************/
        begin
          
          -- Se nao for Asn Vale
          if ( instr(trim(p_cursor.col_asn_numero),'V') = 0 ) then
            
            -- Fracionado
            if (nvl(p_cursor.col_asn_tipocarga,'0') <> '5') then              
              
              -- validaçao largura TRUCK
              if (Upper(vPrimeiroVeiculo) = 'BR00000005' ) and (to_number(p_cursor.col_asn_larguratotal) > 240 ) then
              
                vIndiceErro  := vIndiceErro + 1;
                vStatus      := 'W';    
                vMessagem    := vMessagem||TO_CHAR(vIndiceErro)||' - '||'Largura maxima permitida para TRUCK ('||Upper(vPrimeiroVeiculo)||') 240 cm (2,40 mts)... ';
                
                tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'44',vStatusLog, vMessagemLog);
              
              end if;
              
              -- validaçao comprimento TRUCK
              if (Upper(vPrimeiroVeiculo) = 'BR00000005' ) and (to_number(p_cursor.col_asn_comprimentototal) > 750 ) then
              
                vIndiceErro  := vIndiceErro + 1;
                vStatus      := 'W';    
                vMessagem    := vMessagem||TO_CHAR(vIndiceErro)||' - '||'Comprimento maximo permitido para TRUCK ('||Upper(vPrimeiroVeiculo)||') 750 cm (7,50 mts)... ';
                
                tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'45',vStatusLog, vMessagemLog);
              
              end if;
              
              -- validaçao altura TRUCK
              if (Upper(vPrimeiroVeiculo) = 'BR00000005' ) and ( to_number(p_cursor.col_asn_alturatotal) > 290 ) then
                
                vIndiceErro  := vIndiceErro + 1;
                vStatus      := 'W';    
                vMessagem    := vMessagem||TO_CHAR(vIndiceErro)||' - '||'Altura maxima permitida para TRUCK ('||Upper(vPrimeiroVeiculo)||') 290 cm (2,90 mts)... ';
                
                tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'46',vStatusLog, vMessagemLog);
              
              end if;
              
              -- validaçao largura Carreta
              if (Upper(vPrimeiroVeiculo) = 'BR00000002' ) and (to_number(p_cursor.col_asn_larguratotal) > 250 ) then
                
                vIndiceErro  := vIndiceErro + 1;
                vStatus      := 'W';    
                vMessagem    := vMessagem||TO_CHAR(vIndiceErro)||' - '||'Largura maxima permitida para CARRETA ('||Upper(vPrimeiroVeiculo)||') 250 cm (2,50 mts)... ';
                
                tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'47',vStatusLog, vMessagemLog);
              
              end if;
              
              -- validaçao comprimento Carreta
              if (Upper(vPrimeiroVeiculo) = 'BR00000002' ) and (to_number(p_cursor.col_asn_comprimentototal) > 1250 ) then
                
                vIndiceErro  := vIndiceErro + 1;
                vStatus      := 'W';    
                vMessagem    := vMessagem||TO_CHAR(vIndiceErro)||' - '||'Comprimento maximo permitido para CARRETA ('||Upper(vPrimeiroVeiculo)||') 120 cm (12,50 mts)... ';
                
                tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'48',vStatusLog, vMessagemLog);
              
              end if;
              
              -- validaçao altura Carreta
              if (Upper(vPrimeiroVeiculo) = 'BR00000002' ) and (to_number(p_cursor.col_asn_alturatotal) > 290 ) then
                
                vIndiceErro  := vIndiceErro + 1;
                vStatus      := 'W';    
                vMessagem    := vMessagem||TO_CHAR(vIndiceErro)||' - '||'Altura maxima permitida para CARRETA ('||Upper(vPrimeiroVeiculo)||') 290 cm (2,90 mts)... ';
                
                tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'49',vStatusLog, vMessagemLog);
              
              end if;

              -- validaçao largura bi-trem
              if (Upper(vPrimeiroVeiculo) = 'BR00000001' ) and (to_number(p_cursor.col_asn_larguratotal) > 240 ) then
                
                vIndiceErro  := vIndiceErro + 1;
                vStatus      := 'W';    
                vMessagem    := vMessagem||TO_CHAR(vIndiceErro)||' - '||'Largura maxima permitida para BI-TREM ('||Upper(vPrimeiroVeiculo)||') 240 cm (2,40 mts)... ';
                
                tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'47',vStatusLog, vMessagemLog);
              
              end if;
              
              -- validaçao comprimento bi-trem
              if (Upper(vPrimeiroVeiculo) = 'BR00000001' ) and (to_number(p_cursor.col_asn_comprimentototal) > 1400 ) then
                
                vIndiceErro  := vIndiceErro + 1;
                vStatus      := 'W';    
                vMessagem    := vMessagem||TO_CHAR(vIndiceErro)||' - '||'Comprimento maximo permitido para BI-TREM('||Upper(vPrimeiroVeiculo)||') 1400 cm (14,00 mts)... ';
                
                tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'48',vStatusLog, vMessagemLog);
              
              end if;
              
              -- validaçao altura bi-trem
              if (Upper(vPrimeiroVeiculo) = 'BR00000001' ) and (to_number(p_cursor.col_asn_alturatotal) > 290 ) then
                
                vIndiceErro  := vIndiceErro + 1;
                vStatus      := 'W';    
                vMessagem    := vMessagem||TO_CHAR(vIndiceErro)||' - '||'Altura maxima permitida para BI-TREM ('||Upper(vPrimeiroVeiculo)||') 290 cm (2,90 mts)... ';
                
                tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'49',vStatusLog, vMessagemLog);
              
              end if;
              
              -- validaçao largura toco
              if (Upper(vPrimeiroVeiculo) = 'BR00000004' ) and (to_number(p_cursor.col_asn_larguratotal) > 240 ) then
                
                vIndiceErro  := vIndiceErro + 1;
                vStatus      := 'W';    
                vMessagem    := vMessagem||TO_CHAR(vIndiceErro)||' - '||'Largura maxima permitida para TOCO ('||Upper(vPrimeiroVeiculo)||') 240 cm (2,40 mts)... ';
                
                tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'47',vStatusLog, vMessagemLog);
              
              end if;
              
              -- validaçao comprimento toco
              if (Upper(vPrimeiroVeiculo) = 'BR00000004' ) and (to_number(p_cursor.col_asn_comprimentototal) > 600 ) then
                
                vIndiceErro  := vIndiceErro + 1;
                vStatus      := 'W';    
                vMessagem    := vMessagem||TO_CHAR(vIndiceErro)||' - '||'Comprimento maximo permitido para TOCO('||Upper(vPrimeiroVeiculo)||') 600 cm (6,00 mts)... ';
                
                tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'48',vStatusLog, vMessagemLog);
              
              end if;
              
              -- validaçao altura toco
              if (Upper(vPrimeiroVeiculo) = 'BR00000004' ) and (to_number(p_cursor.col_asn_alturatotal) > 290 ) then
                
                vIndiceErro  := vIndiceErro + 1;
                vStatus      := 'W';    
                vMessagem    := vMessagem||TO_CHAR(vIndiceErro)||' - '||'Altura maxima permitida para TOCO('||Upper(vPrimeiroVeiculo)||') 290 cm (2,90 mts)... ';
                
                tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'49',vStatusLog, vMessagemLog);
              
              end if;


            else
              
              if  to_number(p_cursor.col_asn_alturatotal) > 290 then
                
                vIndiceErro  := vIndiceErro + 1;
                vStatus      := 'W';    
                vMessagem    := vMessagem||TO_CHAR(vIndiceErro)||' - '||'Altura maxima permitida e de 290 cm (2,90 mts)... ';
                
                tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'50',vStatusLog, vMessagemLog);
              
              end if;

              if (to_number(p_cursor.col_asn_comprimentototal) > 1200 ) then
                
                vIndiceErro  := vIndiceErro + 1;
                vStatus      := 'W';    
                vMessagem    := vMessagem||TO_CHAR(vIndiceErro)||' - '||'Comprimento maximo permitido e de 1200 cm (12,00 mts)... ';
                
                tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'51',vStatusLog, vMessagemLog);
              
              end if;
              
             end if;

          end if;
        
        end;
        /**************************************************************/
        
        /**************************************************************/
        /**  VALIDANDO V_XML_NOVOCONTRATO                            **/
        /**************************************************************/
        begin
          
        
          if (vAsnNovoContrato = 0) then
          
          select count(*)
            into vContadorOri
            from T_GLB_CLIENTECONTRATO vv
           where trim(vv.GLB_CLIENTE_CGCCPFCODIGO) = trim(vCnpjOrigem);

          select count(*)
            into vContadorDes
            from T_GLB_CLIENTECONTRATO vv
           where trim(vv.GLB_CLIENTE_CGCCPFCODIGO) = trim(vCnpjDestino);

          if (vContadorOri = 0) and (vContadorDes = 0) then
            
            vIndiceErro  := vIndiceErro + 1;
            vStatus       := 'W';    
            vMessagem    := vMessagem||TO_CHAR(vIndiceErro)||' - '||'CNPJ´s da ASN nao constam no contrato. ';
            
            tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'52',vStatusLog, vMessagemLog);
            
          end if;
          
          end if;

        end;    
        /**************************************************************/ 
        
        /**************************************************************/
        /**  VALIDANDO ITENS DA COLETA                               **/ 
        /**************************************************************/
        begin
          
          for i_cursor in (select * 
                             from tdvadm.t_col_asnitem k 
                            where k.col_asn_id = p_idasn)
          loop
            
            vContadorItem := vContadorItem + 1;
            
            /**************************************************************/
            /**  VALIDANDO TIPO DE EMBALAGEM                             **/
            /**************************************************************/
            begin
              
              select count(*)
                into vExisteEmbalagem 
                from tdvadm.t_col_asntipoembalagem e
               where e.col_asntipoembalagem_codnimbi = i_cursor.col_asnitem_embalagem;
              
              if (vExisteEmbalagem = 0) then
                
                vIndiceErro  := vIndiceErro + 1;
                vStatus      := 'W';    
                vMessagem    := vMessagem||TO_CHAR(vIndiceErro)||' - '||'Tipo de Embalagem...(Invalida). Embalagem enviada: '||trim(i_cursor.col_asnitem_embalagem||'. ');
                
                tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'53',vStatusLog, vMessagemLog);
              
              end if;
                  
            end;
            /**************************************************************/
            
            /**************************************************************/
            /**   NUMERO LINHA FORNECEDOR                                **/
            /**************************************************************/
            begin

              if (trim(i_cursor.col_asnitem_itemnumforn) IS NULL) then
              
                vIndiceErro  := vIndiceErro + 1;
                vStatus      := 'W';    
                vMessagem    := vMessagem||TO_CHAR(vIndiceErro)||' - '||'Numero de Linha Fornecedor..(Em Branco). ';
                
                tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'54',vStatusLog, vMessagemLog);

              end if;

            end;
            /**************************************************************/
            
            /**************************************************************/
            /**   NUMERO DE DOC DE ORIGEM PO                             **/
            /**************************************************************/
            begin
              
              if (trim(i_cursor.col_asnitem_ponumber) IS NULL) then
                
                vIndiceErro  := vIndiceErro + 1;
                vStatus      := 'W';    
                vMessagem    := vMessagem||TO_CHAR(vIndiceErro)||' - '||'Numero de Doc. Origem(PO)..(Em Branco). ';
                
                tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'55',vStatusLog, vMessagemLog);
                
              end if;
            
            end;
            /**************************************************************/
            
            /**************************************************************/
            /**   NUMERO DA LINHDA DA PO                                 **/
            /**************************************************************/
            begin
              
              if (trim(i_cursor.col_asnitem_poitemnumero) IS NULL) then
                
                vIndiceErro  := vIndiceErro + 1;
                vStatus      := 'W';    
                vMessagem    := vMessagem||TO_CHAR(vIndiceErro)||' - '||'Numero do item Doc. Origem(PO)..(Em Branco). ';
                
                tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'56',vStatusLog, vMessagemLog);
                
              end if;
            
            end;
            /**************************************************************/
            
            /**************************************************************/
            /**   QUANTIDADE                                             **/
            /**************************************************************/
            begin
            
            if (trim(i_cursor.col_asnitem_quantidade) IS NULL) then
            
              vIndiceErro  := vIndiceErro + 1;
              vStatus      := 'W';    
              vMessagem    := vMessagem||TO_CHAR(vIndiceErro)||' - '||'Quantidade do item nao pode ser nula. ';
              
              tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'57',vStatusLog, vMessagemLog);
            
            end if;
            
            end;
            /**************************************************************/
            
            /**************************************************************/
            /**   UOM                                                    **/
            /**************************************************************/
            begin
              
              if (trim(i_cursor.col_asnitem_uom) IS NULL) then
               
               vIndiceErro  := vIndiceErro + 1;
               vStatus      := 'W';    
               vMessagem    := vMessagem||TO_CHAR(vIndiceErro)||' - '||'Linha de UOM...em branco. ';
               
               tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'58',vStatusLog, vMessagemLog);
              
              end if;
            
            end;
            /**************************************************************/
          end loop;
          
          /**************************************************************/
          /** LINHAS EM BRANCO                                         **/
          /**************************************************************/
          begin
            
            if vContadorItem = 0 then
              
              vIndiceErro  := vIndiceErro + 1;
              vStatus      := 'W';    
              vMessagem    := vMessagem||TO_CHAR(vIndiceErro)||' - '||'Coleta Sem Linhas. ';
             
              tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'59',vStatusLog, vMessagemLog);  
            
            end if;
          
          end;
          /**************************************************************/
          
        end;  
        /**************************************************************/
        
        /**************************************************************/
        /** VALIDAÇÃO DO CENARIO BR07 DA VALE                        **/
        /**************************************************************/
 /*       begin
          
         -- Desabilitado pelo Klayton dia 30/04/2019 a pedido do Erick da vale
         
          if (p_cursor.col_asn_specialprocesscode = 'BR07') then
          
            -- conto para saber se tem cenario liberado
            -- regra incluida pela a vale em 12/12/2018
            select count(*)
              into vExisteCenarioLiberado
              from tdvadm.t_xml_clientecenario l
             where l.glb_cliente_cgccpfcodigoori = rpad(vCnpjOrigem,20,' ')
               and l.glb_cliente_cgccpfcodigodes = rpad(vCnpjDestino,20,' '); 
            
            -- analise para saber se recuso ou não a asn
            if ((substr(UPPER(p_cursor.col_asn_numero),1,3) = 'V83') and
                (vOrigemGrupo0020 = 'S')                             and
                (vDestinoGrupo0020 = 'S')                            and
                (vExisteCenarioLiberado = 0))Then
                
                
                  vIndiceErro  := vIndiceErro + 1;
                  vStatus      := 'W';    
                  vMessagem    := vMessagem||TO_CHAR(vIndiceErro)||' - '||'Cenario BR07, não pode ser usado para origem e destino Vale!';
                  
                  tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'63',vStatusLog, vMessagemLog);
                
            end if;
            
          end if;
         
        end;  */
        /**************************************************************/
        
        /**************************************************************/
        /** Validação novo Contrato Vale 01/04/2019                  **/
        /**************************************************************/
        begin
          
         if ( vAsnNovoContrato > 0) then
          -- Variavel indica o tipo de operação da asn vale(Imboumd, Outbound e Transferencia)
          vOperacaoVale  := fn_col_getOperacaoVale(p_cursor.col_asn_id);
          
          if (vOperacaoVale not in('I','O','T')) then
            vIndiceErro  := vIndiceErro + 1;
            vStatus      := 'W';    
            vMessagem    := vMessagem||TO_CHAR(vIndiceErro)||' - '||'Operação Vale não valida. Operacao.: '||vOperacaoVale;        
            tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'63',vStatusLog, vMessagemLog);
          end if;  
          
          -- Variavel indica o tipo de validação em que essa asn se encaixara(Lotes, fracionado / Lotação)
          vTipoValidacao := fn_col_getTpValidacao(trim(p_cursor.col_asn_tipocarga),
                                                  trim(p_cursor.col_asn_fragileload),
                                                  trim(p_cursor.col_asn_selfsupportingload));
         
          
          if (vTipoValidacao not in('1','2','3','4')) then
            vIndiceErro  := vIndiceErro + 1;
            vStatus      := 'W';    
            vMessagem    := vMessagem||TO_CHAR(vIndiceErro)||' - '||'Tipo de validação da ASN não identificada. Tipo Validacao.: '||vTipoValidacao;        
            tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'63',vStatusLog, vMessagemLog);
          end if;                                          
          
          
          if nvl(vPrimeiroVeiculo,'nullo') <> 'nullo' then
            
            -- Variavel indica o tipo do veiculo enviado pela a nimbi
            vVeiculoTdv	 := fn_col_getVeiclo(vPrimeiroVeiculo);
            
             if (vVeiculoTdv = '0') then
              vIndiceErro  := vIndiceErro + 1;
              vStatus      := 'W';    
              vMessagem    := vMessagem||TO_CHAR(vIndiceErro)||' - '||'Tipo de Veiculo não identificado. Veiculo.: '||vVeiculoTdv;        
              tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'63',vStatusLog, vMessagemLog);                                    
            end if;
          
          end if;
          
          -- 1 - Lotes
          if (vTipoValidacao = '1') then
             
            if (upper(trim(p_cursor.col_asn_tipocarga)) in ('6','7','9','A')) then
              
              -- T_COL_ASNLOTESRT
              begin
                
                select trim(sl.col_asnlotesrt_nrocontrato)
                  into vContrato
                  from tdvadm.t_Col_Asnlotesrt sl
                 where sl.col_asnlotesrt_ibgeorig = NVL(vIbgeEntregaFca,vIbgeOrigem)
                   and sl.col_asnlotesrt_ibgedest = vIbgeDestino
                   and sl.col_asnlotesrt_tt       = trim(p_cursor.col_asn_tipocarga)
                   and sl.col_asnlotesrt_fl       = trim(p_cursor.col_asn_fragileload);
             
              exception when others then
                vContrato := 'X';
              end;       

            elsif (upper(trim(p_cursor.col_asn_tipocarga)) in ('B')) then
              
              -- T_COL_ASNLOTESRV
              begin
                
                select sl.col_asnlotesrv_nrocontrato
                  into vContrato
                  from t_col_asnlotesrv sl
                 where sl.col_asnlotesrv_ibgeorig = NVL(vIbgeEntregaFca,vIbgeOrigem)                
                   and sl.col_asnlotesrv_ibgedest = vIbgeDestino
                   and sl.col_asnlotesrv_veiculo  = vVeiculoTdv;
               
               exception when others then
                vContrato := 'X';
              end;
               
            end if;  
          
          --2 - Fracionado / Lotação
          elsif (vTipoValidacao = 2) then
            
            -- 1º T_COL_ASNFRACIRT
            if (upper(trim(p_cursor.col_asn_tipocarga)) in ('4','A','6')) then
              
              begin
                
                select sl.col_asnfracirt_nrocontrato
                  into vContrato
                  from tdvadm.t_col_asnfracirt sl
                 where sl.col_asnfracirt_ibgeorig = NVL(vIbgeEntregaFca,vIbgeOrigem)
                   and sl.col_asnfracirt_ibgedest = vIbgeDestino 
                   and sl.col_asnfracirt_operacao = vOperacaoVale
                   and sl.col_asnfracirtt_tt      = trim(p_cursor.col_asn_tipocarga);
              
              exception when no_data_found then
                -- 2º T_COL_ASNFRACIRTKM
                begin
                  
                  select sl.col_asnfracirtkm_nrocontrato 
                    into vContrato
                    from tdvadm.t_col_asnfracirtkm sl
                   where sl.col_asnfracirtkm_uforig   = nvl(vUfOrigemFca,vUfOrigem)
                     and sl.col_asnfracirtkm_ufdest   = vUfDestino
                     and sl.col_asnfracirtkm_operacao = vOperacaoVale
                     and sl.col_asnfracirtkm_tt       = trim(p_cursor.col_asn_tipocarga);
                     
                exception when others then
                  vContrato := 'X';
                end;  
              
              end;       
              
            -- T_COL_ASNLOTACRKM
            elsif (upper(trim(p_cursor.col_asn_tipocarga)) in ('7','C')) then
            
              begin
                
                select kk.col_asnlotacrkm_nrocontrato
                  into vContrato
                  from tdvadm.t_col_asnlotacrkm kk
                 where kk.col_asnlotacrkm_uforig  = nvl(vUfOrigemFca,vUfOrigem)
                   and kk.col_asnlotacrkm_ufdest  = vUfDestino
                   and kk.col_asnlotacrkm_veiculo = vVeiculoTdv
                   and kk.col_asnlotacrkm_tt      = trim(p_cursor.col_asn_tipocarga);
                  
              exception when others then
                 vContrato := 'X';
              end;
              
              -- Analise de Icoterms FCA, quanto lotação não habilitada.
              if (p_cursor.col_asn_incoterms = 'FCA') then
                vIndiceErro  := vIndiceErro + 1;
                vStatus      := 'W';    
                vMessagem    := vMessagem||TO_CHAR(vIndiceErro)||' - '||' Incoterms FCA não pode ser usado no tipo de carga Lotação!';
                tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'63',vStatusLog, vMessagemLog);            
              end if;   
            
            end if;  
            
          --3 - Nitrato  
          elsif (vTipoValidacao = 3) then
          
              -- 6º T_COL_ASNNITRATO
              begin
                
                select sl.col_asnnitrato_nrocontrato
                  into vContrato
                  from tdvadm.t_col_asnnitrato sl
                 where sl.col_asnnitrato_ibgeorigem  = NVL(vIbgeEntregaFca,vIbgeOrigem)
                   and sl.col_asnnitrato_ibgedestino = vIbgeDestino;
              
              exception when no_data_found then
                vContrato := 'X';
              end;  
          
           --4 - Nitrato S11D
          elsif (vTipoValidacao = 4) then
            
             -- 7º T_COL_ASNNITRATOS11D
              begin
                
                select sl.col_asnnitratos11d_nrocontrato
                  into vContrato
                  from tdvadm.t_col_asnnitratos11d sl
                 where sl.col_asnnitratos11d_ibgeorigem  = NVL(vIbgeEntregaFca,vIbgeOrigem)
                   and sl.col_asnnitratos11d_ibgedestino = vIbgeDestino;
              
              exception when no_data_found then
                vContrato := 'X';
              end;  
            
          end if;
          
          
          if (nvl(vContrato,'X') = 'X') then
            
            vIndiceErro  := vIndiceErro + 1;
            vStatus      := 'W';    
            vMessagem    := vMessagem||TO_CHAR(vIndiceErro)||' - '||' Contrato não identificado!';
            tdvadm.pkg_col_coleta.Sp_Xml_InsereRejeicaoNimbi(p_idasn,'63',vStatusLog, vMessagemLog);                                    
          
          else
            
            update tdvadm.t_col_asn dd
               set dd.slf_contrato_numero = vContrato,
                   dd.col_asn_operacao    = vOperacaoVale
             where dd.col_asn_id          = p_cursor.col_asn_id;
          
          end if;
          
          end if;
          
        end;
        /**************************************************************/
        
      End loop;    

      p_status  := vStatus;
      p_message := p_message||' - '||vMessagem;

    exception when others then

      p_status  := 'E';
      p_message := SQLERRM;

    end;

  end Sp_Col_ValidaAsnNimbi;
  
  /*********************************************************************************************
  * Data..: 29/07/2016
  * Autor.: Klayton Anselmo
  * Versão: 
  * Insere as rejeições por asn
  **********************************************************************************************/
  Procedure Sp_Xml_InsereRejeicaoNimbi(pIdAsn        in tdvadm.t_col_asn.col_asn_id%type,
                                       pIdRejeicao   in tdvadm.t_col_asntiporej.col_asntiporej_id%type,
                                       pStatus       out char,
                                       pMessage      out varchar2) as
  vIdAsnRejeicao           tdvadm.t_col_asnrejeicao.col_asnrejeicao_id%type;
  Begin
    
    Begin
      
      vIdAsnRejeicao := tdvadm.SEQ_COL_ASNREJEICAO.nextval;
          
      insert into tdvadm.t_col_asnrejeicao
        (col_asnrejeicao_id,
         col_asnrejeicao_dtgravacao,
         col_asn_id,
         col_asntiporej_id)
      values
        (vIdAsnRejeicao, SYSDATE, pIdAsn, pIdRejeicao);
      
      commit;
    
      pStatus  := 'N'; 
      pMessage := 'Processamento Normal.';
    
    Exception when others then
      
      pStatus  := 'E'; 
      pMessage := 'Erro ao incluir log, Erro.: '||sqlerrm; 
      
    End ;
      

  End Sp_Xml_InsereRejeicaoNimbi;         

  /*********************************************************************************************
  * Data..: 29/07/2016
  * Autor.: Klayton Anselmo
  * Versão: 
  * Valida datas da nimbi
  **********************************************************************************************/
  Function Fnp_Xml_ValidaDataNimbi(p_Data in varchar2) return char as
  vData       date;
  vDataIsOk   boolean;
  vRetorno    char(1);
  begin

    begin

      vDataIsOk := Fn_Xml_FormataDataNimbi(substr(p_data,1,17), vData);

      if (vDataIsOk = true) then
         vRetorno := 'S';
      else
         vRetorno := 'N';
      end if;

      return vRetorno;

    exception
      when others then
        return 'N';
    end;

  end Fnp_Xml_ValidaDataNimbi;
  
  /*********************************************************************************************
  * Data..: 29/07/2016
  * Autor.: Klayton Anselmo
  * Versão: 
  * Formata datas da nimbi
  **********************************************************************************************/
  Function Fn_Xml_FormataDataNimbi(pDataStr in varchar2,
                              pDateRet out date)return boolean is
  --v_date        date;
  vDatefor     varchar2(20);
  vDia          varchar2(2);
  vMes          varchar2(2);
  vAno          varchar2(4);
  vHoramiss     varchar2(8);
  begin

      begin

        vDia      := substr(pDataStr,7,2);
        vMes      := substr(pDataStr,5,2);
        vAno      := substr(pDataStr,1,4);
        vHoramiss := substr(pDataStr,10,8);

        if length(vDia) <> 2 then
           return false;
        elsif length(vMes) <> 2 then
           return false;
        elsif length(vAno) <> 4 then
           return false;
        elsif length(vHoramiss) <> 8 then
           return false;
        end if;

        vDatefor  := vDia||'/'||vMes||'/'||vAno||' '||vHoramiss;

        select to_date(vDatefor,'DD/MM/YYYY HH24:MI:SS')
          into pDateRet
          from dual;

        return true;

     exception when others then
       return false;
     end;

  END Fn_Xml_FormataDataNimbi;
  
  /*********************************************************************************************
  * Data..: 29/07/2016
  * Autor.: Klayton Anselmo
  * Versão: 
  * Verifica se aquela coleta pode sofrer alterações.
  **********************************************************************************************/
  Function Fn_Xml_PodeAlterarColetaNimbi(p_coleta in tdvadm.t_arm_coleta.arm_coleta_ncompra%type,
                                         p_ciclo  in tdvadm.t_arm_coleta.arm_coleta_ciclo%type) return integer as
   vExisteNotaDigitada integer;
   begin
     
     select count(*)
       into vExisteNotaDigitada
       from tdvadm.t_arm_nota ar
      where ar.arm_coleta_ncompra     = p_coleta
        and ar.arm_coleta_ciclo       = p_ciclo;

     return vExisteNotaDigitada;

  end Fn_Xml_PodeAlterarColetaNimbi;
    
  /*********************************************************************************************
  * Data..: 29/07/2016
  * Autor.: Klayton Anselmo
  * Versão: 
  * Insere as rejeições por asn
  **********************************************************************************************/
  Function Fn_Xml_RetornaCnpjFilialNimbi(p_armcoleta      t_arm_coleta.arm_coleta_ncompra%type,
                                         p_armcoletaciclo t_arm_coleta.arm_coleta_ciclo%type)return varchar2 as
   vCnpjFilial t_glb_rota.glb_rota_cgc%type;
   begin

     begin

       select rt.glb_rota_cgc
         into vCnpjFilial
         from t_arm_coleta ar,
              t_arm_armazem am,
              t_glb_rota rt
        where ar.arm_coleta_ncompra = p_armcoleta
          and ar.arm_coleta_ciclo   = p_armcoletaciclo
          and ar.arm_armazem_codigo = am.arm_armazem_codigo
          and am.glb_rota_codigo    = rt.glb_rota_codigo;

     exception when others then

       vCnpjFilial := '61139432000172';

     end;

     return trim(vCnpjFilial);

   end Fn_Xml_RetornaCnpjFilialNimbi;
  
  /*********************************************************************************************
  * Data..: 29/07/2016
  * Autor.: Klayton Anselmo
  * Versão: 
  * Insere as rejeições por asn
  **********************************************************************************************/
  Function Fn_Xml_RetNumeroNotaNimbi(p_armcoleta      t_arm_coleta.arm_coleta_ncompra%type,
                                     p_armcoletaciclo t_arm_coleta.arm_coleta_ciclo%type) return varchar2 as
   vArmNotaNumero   varchar2(30);
   begin


     if p_armcoleta is not null then

        for p_cursor in (select ar.arm_nota_numero,
                                ar.arm_nota_serie
                           from t_arm_nota ar
                          where ar.arm_coleta_ncompra                      = p_armcoleta
                            and ar.arm_coleta_ciclo                        = p_armcoletaciclo
                       order by ar.arm_nota_valormerc )
        loop

           vArmNotaNumero := lpad(p_cursor.arm_nota_numero,9,0)||'-'||lpad(trim(p_cursor.arm_nota_serie),3,0);

        end loop;


     end if;

     return nvl(vArmNotaNumero,'1-0');

   end Fn_Xml_RetNumeroNotaNimbi;  
  
  /*********************************************************************************************
  * Data..: 29/07/2016
  * Autor.: Klayton Anselmo
  * Versão: 
  * Insere as rejeições por asn
  **********************************************************************************************/
  Function Fn_Xml_RetPesoRealNotaNimbi(p_armcoleta      t_arm_coleta.arm_coleta_ncompra%type,
                                       p_armcoletaciclo t_arm_coleta.arm_coleta_ciclo%type) return varchar2 as
                                  
  vArmNotaPeso     t_arm_nota.arm_nota_peso%type;
  vOcorrencia      t_arm_coletaocor.arm_coletaocor_codigo%type;
   begin


     begin

       select ar.arm_coletaocor_codigo
         into vOcorrencia
         from tdvadm.t_arm_coleta ar
        where ar.arm_coleta_ncompra   = p_armcoleta
          and ar.arm_coleta_ciclo     = p_armcoletaciclo;

     exception when others then
       vOcorrencia := null;
     end;

     if p_armcoleta is not null then
        
        If vOcorrencia = '55' Then
            for p_cursor in (select ar.arm_nota_numero,
                                    ar.arm_nota_serie,
                                    ar.arm_nota_peso,
                                    ar.arm_nota_pesobalanca
                               from t_arm_nota ar,
                                    t_con_conhecimento ch
                              where ar.arm_coleta_ncompra                      = p_armcoleta
                                and ar.arm_coleta_ciclo                        = p_armcoletaciclo
                                and ar.con_conhecimento_codigo                 = ch.con_conhecimento_codigo
                                and ar.con_conhecimento_serie                  = ch.con_conhecimento_serie
                                and ar.glb_rota_codigo                         = ch.glb_rota_codigo
                                and nvl(ch.con_conhecimento_flagcancelado,'N') = 'N')
            loop

               vArmNotaPeso := p_cursor.arm_nota_pesobalanca;

            end loop;
        Else
            for p_cursor in (select ar.arm_nota_numero,
                                    ar.arm_nota_serie,
                                    ar.arm_nota_peso,
                                    ar.arm_nota_pesobalanca
                               from t_arm_nota ar
                              where ar.arm_coleta_ncompra                      = p_armcoleta
                                and ar.arm_coleta_ciclo                        = p_armcoletaciclo)
             loop

               vArmNotaPeso := p_cursor.arm_nota_pesobalanca;

            end loop;
        End If;


     else
       vArmNotaPeso := 0;
     end if;

     return trim(to_char(nvl(vArmNotaPeso,'1'),'999990.00'));

   end Fn_Xml_RetPesoRealNotaNimbi; 
  
  /*********************************************************************************************
  * Data..: 03/08/2016
  * Autor.: Klayton Anselmo
  * Versão: 
  * Procedure responsavel por Cancelar as ASN´s da Nimbi
  **********************************************************************************************/       
  Procedure Sp_Col_CancelaAsnNimbi(pColetaNumero    in tdvadm.t_arm_coleta.arm_coleta_ncompra%type,
                                   pColetaCiclo     in tdvadm.t_arm_coleta.arm_coleta_ciclo%type,
                                   pObsCancelamento in varchar2,
                                   pUsuario         in tdvadm.t_usu_usuario.usu_usuario_codigo%type,
                                   pStatus          out char,
                                   pMessage         out varchar2) as
  vIdAsn     tdvadm.t_col_asn.col_asn_id%type;
  vIdArquivo tdvadm.t_col_asnarquivo.col_asnarquivo_id%type;
  vIdEvento  tdvadm.t_col_asnevento.col_asnevento_id%type;
 -- vIncoteAsn tdvadm.t_col_asn.col_asn_incoterms%type;
 -- vDataGravacao   date;
  begin
    
    begin
          
      -- Busca do Codigo da ASN
      select max(l.col_asn_id)
        into vIdAsn
        from tdvadm.t_col_asn l
       where l.arm_coleta_ncompra = pColetaNumero
         and l.arm_coleta_ciclo   = pColetaCiclo;
         
      if (vIdAsn is not null) then
        
        -- Busca do id do Arquivo da ASN, vai ser usado para gravar o Evento.
        select max(k.col_asnarquivo_id)
          into vIdArquivo
          from tdvadm.t_col_asnarquivo k
          where k.col_asn_id = vIdAsn;
        
        if (vIdArquivo is not null) then
         
          -- Vinculando a Obs do cancelamento a ASN 
          update tdvadm.t_col_asn a
             set a.col_asn_obscancelamento = pObsCancelamento
           where a.col_asn_id              = vIdAsn;  
              
          
          -- Registrando o evendo para ser transmitido no quadrem.
          vIdEvento := tdvadm.seq_col_asnevento.nextval;
          
          insert into tdvadm.t_col_asnevento
            (col_asnevento_id,
             col_asnevento_dtgravacao,
             usu_usuario_codigo,
             col_asnarquivo_id,
             col_asnstatusevt_id,
             col_asntpevento_id)
          values
            (vIdEvento,
             sysdate,
             pUsuario,
             vIdArquivo,
             null,
             4);-- Evento especifico de cancelamento.
          
          pStatus  := 'N'; 
          pMessage := 'Processamento Normal!';
      
        else
          
          pStatus  := 'W'; 
          pMessage := 'Id do arquivo não identificado.';
        
        end if;    
        
      else
        
        pStatus  := 'W'; 
        pMessage := 'Coleta não tem uma asn nimbi vinculada a ela.';
        
      end if;     
    
    exception when others then
      
      pStatus  := 'E'; 
      pMessage := 'Erro ao processar. Erro.: '||sqlerrm;
    
    end;

  end Sp_Col_CancelaAsnNimbi; 
          
  
  /*********************************************************************************************
  * Data..: 03/08/2016
  * Autor.: Klayton Anselmo
  * Versão: 
  * Procedure responsavel por registar o evento de coletado nas ASN´s da Nimbi
  **********************************************************************************************/
  Procedure Sp_Col_ColetadoAsnNimbi(pColetaNumero     in tdvadm.t_arm_coleta.arm_coleta_ncompra%type,
                                    pColetaCiclo      in tdvadm.t_arm_coleta.arm_coleta_ciclo%type,
                                    pDataRealColetado in varchar2,
                                    pUsuario          in tdvadm.t_usu_usuario.usu_usuario_codigo%type,
                                    pStatus           out char,
                                    pMessage          out varchar2) as
  vIdAsn         tdvadm.t_col_asn.col_asn_id%type;
  vIdArquivo     tdvadm.t_col_asnarquivo.col_asnarquivo_id%type;
  vIdEvento      tdvadm.t_col_asnevento.col_asnevento_id%type;
 -- vIncoteAsn     tdvadm.t_col_asn.col_asn_incoterms%type;
 -- vDataGravacao   date;
  begin

    begin

      -- Busca do Codigo da ASN
      select max(l.col_asn_id)
        into vIdAsn
        from tdvadm.t_col_asn l
       where l.arm_coleta_ncompra = pColetaNumero
         and l.arm_coleta_ciclo   = pColetaCiclo;

      if (vIdAsn is not null) then
          
        -- Busca do id do Arquivo da ASN, vai ser usado para gravar o Evento.
        select max(k.col_asnarquivo_id)
          into vIdArquivo
          from tdvadm.t_col_asnarquivo k
          where k.col_asn_id = vIdAsn;

        -- Se o Id do arquivo da Asn não estiver null.
        if (vIdArquivo is not null) then
          
          -- Vinculando a data real de coleta na ASN
          update tdvadm.t_col_asn a
             set a.col_asn_dtrealcoleta    = to_date(pDataRealColetado,'dd/mm/yyyy hh24:mi:ss')
           where a.col_asn_id              = vIdAsn;
                    
          -- Registrando o evendo para ser transmitido no quadrem.
          vIdEvento := tdvadm.seq_col_asnevento.nextval;

          insert into tdvadm.t_col_asnevento
            (col_asnevento_id,
             col_asnevento_dtgravacao,
             usu_usuario_codigo,
             col_asnarquivo_id,
             col_asnstatusevt_id,
             col_asntpevento_id)
          values
            (vIdEvento,
             sysdate,
             pUsuario,
             vIdArquivo,
             null,
             3);-- Evento especifico de Coletado.

          pStatus  := 'N';
          pMessage := 'Processamento Normal!';

        else

          pStatus  := 'W';
          pMessage := 'Id do arquivo não identificado.';

        end if;

      else

        pStatus  := 'W';
        pMessage := 'Coleta não tem uma asn nimbi vinculada a ela.';

      end if;

    exception when others then

      pStatus  := 'E';
      pMessage := 'Erro ao processar. Erro.: '||sqlerrm;

    end;

  end Sp_Col_ColetadoAsnNimbi;

  Procedure Sp_Col_InformaAsnQuadrem(pColetaNumero     in tdvadm.t_arm_coleta.arm_coleta_ncompra%type,
                                     pColetaCiclo      in tdvadm.t_arm_coleta.arm_coleta_ciclo%type,
                                     pStatus           out char,
                                     pMessage          out varchar2) as

  vPesoNota        tdvadm.t_arm_nota.arm_nota_peso%type;
  vCubagem         tdvadm.t_arm_coleta.arm_coleta_cubagem%type;
  vVolumes         tdvadm.t_arm_coleta.arm_coleta_volumes%type;
  vValorColeta     tdvadm.t_arm_nota.arm_nota_valormerc%type;
  vOcorrencia      tdvadm.t_arm_coleta.arm_coletaocor_codigo%type;
  vDataFechamento  tdvadm.t_arm_coleta.arm_coleta_dtfechamento%type;
  vDataChegaCli    tdvadm.t_arm_coleta.arm_coleta_datachegadacli%type;
  vHoraChegaCli    tdvadm.t_arm_coleta.arm_coleta_horachegadacli%type;
  vDataColeta      tdvadm.t_arm_coleta.arm_coleta_dtcoleta%type;
  vDatasolicitacao tdvadm.t_arm_coleta.arm_coleta_dtsolicitacao%type;

  xmlcoleta       t_xml_coleta.xml_coleta_numero%type;
  xmlseqorig      t_xml_coleta.xml_coleta_sequencia%type;
  xmlseq          t_xml_coleta.xml_coleta_sequencia%type;
  vxmlcoletaseq   t_xml_coleta.xml_coleta_seqasn%type;
  inserted        boolean;
  obs             t_xml_coleta.xml_coleta_obs%type;
  vreceived       t_xml_coleta.xml_coleta_tipocoleta%type;
  --vstatus         t_xml_coleta.xml_coleta_status%type;

  Begin


     select sum(ar.arm_nota_pesobalanca),
            sum(ar.arm_nota_valormerc)
       into vPesoNota,
            vValorColeta
     from tdvadm.t_arm_nota ar
     where ar.arm_coleta_ncompra = pColetaNumero
       and ar.arm_coleta_ciclo   = pColetaCiclo;
       
     vPesoNota    := nvl(vPesoNota,0);  
     vValorColeta := nvl(vValorColeta,0);

     select co.arm_coletaocor_codigo,
            co.arm_coleta_dtfechamento,
            co.arm_coleta_datachegadacli,
            co.arm_coleta_horachegadacli,
            co.arm_coleta_dtcoleta,
            co.arm_coleta_dtsolicitacao
       into vOcorrencia,
            vDataFechamento,
            vDataChegaCli,
            vHoraChegaCli,
            vDataColeta,
            vDatasolicitacao
     from tdvadm.t_arm_coleta co
     where co.arm_coleta_ncompra = pColetaNumero
       and co.arm_coleta_ciclo = pColetaCiclo;


   Begin    
      select c.xml_coleta_numero,
             c.xml_coleta_seqasn,
             max(c.xml_coleta_sequencia) xml_coleta_sequencia
        into xmlcoleta,
             vxmlcoletaseq,
             xmlseqorig
      from t_xml_coleta c
      where c.arm_coleta_ncompra = pColetaNumero
        and c.arm_coleta_ciclo   = pColetaCiclo
        and c.xml_coleta_tipodoc = 'ASN'
        and nvl(c.xml_coleta_seqasn,'00') = nvl((select max(nvl(cx.xml_coleta_seqasn,'00'))
                                                 from t_xml_coleta cx
                                                 where cx.xml_coleta_numero  = c.xml_coleta_numero
                                                   and cx.xml_coleta_tipodoc = c.xml_coleta_tipodoc
                                                   and cx.arm_coleta_ncompra = pColetaNumero
                                                   and cx.arm_coleta_ciclo   = pColetaCiclo),'00')
      group by c.xml_coleta_numero,
               c.xml_coleta_seqasn;
         
   Exception
     when no_data_found then
        Begin
           select distinct c.xml_coleta_numero
             into xmlcoleta
           from t_xml_coleta c,
                t_arm_coletaderivada d
           where d.arm_coleta_derivada         = pColetaNumero
             and c.arm_coleta_ncompra          = d.arm_coleta_original
             and c.arm_coleta_ciclo            = d.arm_coleta_ciclooriginal
             and c.xml_coleta_tipodoc          = 'ASN'
             and nvl(c.xml_coleta_seqasn,'00') = nvl((select max(nvl(cx.xml_coleta_seqasn,'00'))
                                                      from t_xml_coleta cx
                                                      where cx.xml_coleta_numero = c.xml_coleta_numero
                                                        and cx.xml_coleta_tipodoc = c.xml_coleta_tipodoc),'00');
        Exception
           when no_data_found then
             xmlcoleta := null;
        End;
          
     when Others Then
        begin
           RAISE_APPLICATION_ERROR(-20001, 'verifique coleta [' || pColetaNumero || '] ciclo ['|| pColetaCiclo || ']' || chr(10) || 'erro:' || SQLERRM);
        end;   
     End;

     if nvl(vOcorrencia,'XX') in ('55','01') then
       
       begin
         
         select cc.arm_coletaocor_descricao
           into obs
           from t_arm_coletaocor cc
          where cc.arm_coletaocor_codigo = vOcorrencia;
          
       exception when others then
         obs:= 'coletado'||chr(13);
       end;

       vreceived := 'Received';
       --vstatus   := 'CS';
       
     Else
       
       begin
         
         select cc.arm_coletaocor_desccliente
           into obs
           from t_arm_coletaocor cc
           where cc.arm_coletaocor_codigo = vOcorrencia;

       exception when others then
         
         obs:= 'não coletado'||chr(13);
       
       end;
                
       vreceived := 'Rejected';
       --vstatus   := 'CR';
       
     End if;

     select nvl(max(nvl(c.xml_coleta_sequencia,0)),0)
       into xmlseq
       from t_xml_coleta c
      where c.xml_coleta_numero = xmlcoleta
        and c.xml_coleta_tipodoc = 'ASNR';

     update t_xml_coleta
        set --xml_coleta_status     = vstatus,
            xml_coleta_valorreal  = vValorColeta,
            xml_coleta_pesorealkg = vPesoNota, 
            xml_coleta_retorno    = sysdate
      where xml_coleta_numero = xmlcoleta
        and xml_coleta_tipodoc = 'ASN'
        and xml_coleta_status = 'AR'
        and arm_coleta_ncompra = pColetaNumero
        and arm_coleta_ciclo = pColetaCiclo;

     inserted := false;

     for r_nota in ( select xml_nota_numero,
                            xml_nota_emissao,
                            xml_nota_status,
                            xml_nota_response,
                            xml_nota_dtinclusao,
                            xml_nota_envio,
                            xml_nota_retorno,
                            initcap(xml_nota_erro) xml_nota_erro
                       from t_xml_nota nf 
                      where nf.xml_nota_nota       = 'S' 
                        and nf.xml_coleta_numero   = xmlcoleta) 
     loop
       
       if instr(obs,'( NOTAS )') = 0 Then
         
         OBS := OBS||CHR(13)||'( NOTAS )';
       
       end if;

       OBS := OBS||CHR(13)||'NF?: '||r_nota.xml_nota_numero||' Emiss?o: '||r_nota.xml_nota_emissao;
       
       if ( R_NOTA.XML_NOTA_STATUS='EX' ) then
         
         OBS := OBS||' Status: Removida do processo Quadrem - Motivo: '||r_nota.xml_nota_erro;
       
       elsif ( R_NOTA.XML_NOTA_RESPONSE='S' ) then
       
         OBS := OBS||' Status: Recebida eletronicamente as '||TO_CHAR(R_NOTA.XML_NOTA_DTINCLUSAO,'dd/mm/yyyy hh24:mi:ss');
       
       elsif ( R_NOTA.XML_NOTA_RESPONSE='N' ) then
       
         OBS := OBS||' Status: Enviada a CVRD as '||TO_CHAR(R_NOTA.XML_NOTA_ENVIO,'dd/mm/yyyy hh24:mi:ss')||' com retorno as '||TO_CHAR(R_NOTA.XML_NOTA_RETORNO,'dd/mm/yyyy hh24:mi:ss');
       
       End if;
         
     end loop;

     while not inserted loop
       
       xmlseq := xmlseq + 1;
       
       begin
         
         insert into t_xml_coleta
           (xml_coleta_numero,
            xml_coleta_tipocoleta,
            xml_coleta_tipodoc,
            xml_coleta_sequencia,
            xml_coleta_emissao,
            xml_coleta_controle,
            xml_coleta_estcoleta,
            xml_coleta_estchegada,
            xml_coleta_realcoleta,
            xml_coleta_realchegada,
            xml_coleta_tracking,
            xml_coleta_meiotransp,
            xml_coleta_instrucoes,
            xml_coleta_incoterms,
            xml_coleta_obs,
            xml_coleta_proposito,
            xml_coleta_pesoestimado,
            xml_coleta_valorestimado,
            xml_coleta_tipotransporte,
            xml_coleta_qtdnotasfiscais,
            xml_coleta_volumem3,
            xml_coleta_qtdvolumes,
            xml_coleta_tipocarga,
            xml_coleta_cargaespecial,
            xml_coleta_tipoembalagem,
            xml_coleta_pesorealkg,
            xml_coleta_email,
            xml_coleta_valorreal,
            xml_coleta_arquivo,
            xml_coleta_gravado,
            arm_coleta_ncompra,
            arm_coleta_ciclo,
            xml_coleta_dtinclusao,
            xml_coleta_status,
            xml_coleta_dimensaocomprim,
            xml_coleta_dimensaolargura,
            xml_coleta_dimensaoaltura,
            xml_coleta_dimensaouom,
            xml_coleta_carroceria,
            xml_coleta_obsentrega,
            xml_coleta_centrocusto,
            xml_coleta_unidadatect,
            xml_coleta_numeroembimp,
            xml_coleta_cenario,
            xml_coleta_nrfornulario,
            xml_coleta_codigoonu,
            xml_coleta_nrcontainer,
            xml_coleta_dtprogcoleta,
            xml_coleta_tptranspcompl,
            xml_coleta_cargarodante,
            xml_coleta_cargasensi,
            xml_coleta_cargaatport,
            xml_coleta_pneu,
            xml_coleta_cargadivi,
            xml_coleta_seguroroubo,
            xml_coleta_nrcolint,
            xml_coleta_stasn,
            xml_coleta_pesobrutoreal,
            xml_coleta_dtcolaet,
            xml_coleta_dtemisaoet,
            xml_coleta_placaveic,
            xml_coleta_placaeqp,
            xml_coleta_placaimp,
            xml_coleta_vlrbatpf,
            xml_coleta_vlrservext,
            xml_coleta_vlrlicencas,
            xml_coleta_qtdebatedor,
            xml_coleta_idviagem,
            xml_coleta_seqasn)
           select xmlcoleta,
                  vreceived,
                  'ASNR',
                  xmlseq,
                  nvl(c.xml_coleta_emissao, sysdate),
                  c.xml_coleta_controle,
                  nvl(c.xml_coleta_estcoleta, sysdate),
                  nvl(c.xml_coleta_estchegada, sysdate),
                  vDataFechamento,

                  to_date(to_char(nvl(vDataChegaCli,
                                      nvl(vDataColeta,
                                          vDatasolicitacao))) || ' ' ||
                          nvl(trim(vHoraChegaCli), '12:00'),
                          'DD/MM/YYYY HH24:MI'),
                  pColetaNumero,
                  c.xml_coleta_meiotransp,
                  c.xml_coleta_instrucoes,
                  c.xml_coleta_incoterms,
                  obs,
                  'Original',
                  vPesoNota, --c.xml_coleta_pesoestimado,
                  c.xml_coleta_valorestimado,
                  c.xml_coleta_tipotransporte,
                  c.xml_coleta_qtdnotasfiscais,
                  vCubagem,
                  vVolumes,
                  -- Klayton em 04/08/2015 desabilitado a linha abaixo, para retornar o tipo da carga da ultima linha da ASN.
                  --DECODE(SUBSTR(:NEW.GLB_TPCARGA_CODIGO, 1, 1), 'F', 'FRACIONADA', DECODE(SUBSTR(:NEW.GLB_TPCARGA_CODIGO, 1, 1), 'E', 'EXPRESSA', 'LOTACAO')),
                  c.xml_coleta_tipocarga,
                  c.xml_coleta_cargaespecial,
                  c.xml_coleta_tipoembalagem,
                  vPesoNota, --:new.arm_coleta_peso,
                  null,
                  vValorColeta,
                  null,
                  'TDV',
                  pColetaNumero,
                  pColetaCiclo,
                  sysdate,
                  'DE',
                  c.xml_coleta_dimensaocomprim,
                  c.xml_coleta_dimensaolargura,
                  c.xml_coleta_dimensaoaltura,
                  c.xml_coleta_dimensaouom,
                  c.xml_coleta_carroceria,
                  c.xml_coleta_obsentrega,
                  c.xml_coleta_centrocusto,
                  c.xml_coleta_unidadatect,
                  c.xml_coleta_numeroembimp,
                  c.xml_coleta_cenario,
                  c.xml_coleta_nrfornulario,
                  c.xml_coleta_codigoonu,
                  c.xml_coleta_nrcontainer,
                  c.xml_coleta_dtprogcoleta,
                  c.xml_coleta_tptranspcompl,
                  c.xml_coleta_cargarodante,
                  c.xml_coleta_cargasensi,
                  c.xml_coleta_cargaatport,
                  c.xml_coleta_pneu,
                  c.xml_coleta_cargadivi,
                  c.xml_coleta_seguroroubo,
                  c.xml_coleta_nrcolint,
                  c.xml_coleta_stasn,
                  vPesoNota, --c.xml_coleta_pesobrutoreal,
                  c.xml_coleta_dtcolaet,
                  c.xml_coleta_dtemisaoet,
                  c.xml_coleta_placaveic,
                  c.xml_coleta_placaeqp,
                  c.xml_coleta_placaimp,
                  c.xml_coleta_vlrbatpf,
                  c.xml_coleta_vlrservext,
                  c.xml_coleta_vlrlicencas,
                  c.xml_coleta_qtdebatedor,
                  c.xml_coleta_idviagem,
                  c.xml_coleta_seqasn
             from t_xml_coleta c
            where c.xml_coleta_numero             = xmlcoleta
              and c.xml_coleta_tipodoc            = 'ASN'
              and c.xml_coleta_sequencia          = xmlseqorig
              and nvl(c.xml_coleta_seqasn, '00')  = nvl(vXmlColetaSeq, '00');

         inserted := true;
         
       exception
         
         when dup_val_on_index then
           inserted := false;
         when others then
           raise_application_error(-20001, 'erro ao gerar resposta de coleta xml. ' || sqlerrm);
       end;
     
     end loop;

     begin
       
       insert into t_xml_coletaparceiro
         (xml_coleta_numero,
          xml_tipoparceiro_codigo,
          xml_coleta_tipodoc,
          xml_coletaparceiro_orgid,
          xml_coleta_sequencia,
          xml_coletaparceiro_tpid,
          xml_coletaparceiro_idinterno,
          xml_coletaparceiro_nome,
          xml_coletaparceiro_cnpj,
          xml_coletaparceiro_endereco,
          xml_coletaparceiro_complemento,
          xml_coletaparceiro_cidade,
          xml_coletaparceiro_estado,
          xml_coletaparceiro_cep,
          xml_coletaparceiro_contato,
          xml_coletaparceiro_email,
          xml_coletaparceiro_telefone,
          xml_coletaparceiro_fax,
          glb_localidade_regiaocvrd)
         select xmlcoleta,
                p.xml_tipoparceiro_codigo,
                'ASNR',
                p.xml_coletaparceiro_orgid,
                xmlseq,
                p.xml_coletaparceiro_tpid,
                p.xml_coletaparceiro_idinterno,
                p.xml_coletaparceiro_nome,
                p.xml_coletaparceiro_cnpj,
                p.xml_coletaparceiro_endereco,
                p.xml_coletaparceiro_complemento,
                p.xml_coletaparceiro_cidade,
                p.xml_coletaparceiro_estado,
                p.xml_coletaparceiro_cep,
                p.xml_coletaparceiro_contato,
                p.xml_coletaparceiro_email,
                p.xml_coletaparceiro_telefone,
                p.xml_coletaparceiro_fax,
                null
           from t_xml_coletaparceiro p
          where p.xml_coleta_numero = xmlcoleta
            and p.xml_coleta_tipodoc = 'ASN'
            and not p.xml_tipoparceiro_codigo in ('DS', 'OR')
            and p.xml_coleta_sequencia = xmlseqorig;

     exception
            
            when others then
                raise_application_error(-20001, 'erro ao gravar parceiro. coleta-seq-' || xmlcoleta || '-' || xmlseqorig  || sqlerrm);
     End ; 

     insert into t_xml_coletaparceiro
            (xml_coleta_numero,
             xml_tipoparceiro_codigo,
             xml_coleta_tipodoc,
             xml_coletaparceiro_orgid,
             xml_coleta_sequencia,
             xml_coletaparceiro_tpid,
             xml_coletaparceiro_idinterno,
             xml_coletaparceiro_nome,
             xml_coletaparceiro_cnpj,
             xml_coletaparceiro_endereco,
             xml_coletaparceiro_complemento,
             xml_coletaparceiro_cidade,
             xml_coletaparceiro_estado,
             xml_coletaparceiro_cep,
             xml_coletaparceiro_contato,
             xml_coletaparceiro_email,
             xml_coletaparceiro_telefone,
             xml_coletaparceiro_fax,
             glb_localidade_regiaocvrd)
            select xmlcoleta,
                   p.xml_tipoparceiro_codigo,
                   'ASNR',
                   p.xml_coletaparceiro_orgid,
                   xmlseq,
                   p.xml_coletaparceiro_tpid,
                   p.xml_coletaparceiro_idinterno,
                   p.xml_coletaparceiro_nome,
                   p.xml_coletaparceiro_cnpj,
                   p.xml_coletaparceiro_endereco,
                   p.xml_coletaparceiro_complemento,
                   p.xml_coletaparceiro_cidade,
                   p.xml_coletaparceiro_estado,
                   p.xml_coletaparceiro_cep,
                   p.xml_coletaparceiro_contato,
                   p.xml_coletaparceiro_email,
                   p.xml_coletaparceiro_telefone,
                   p.xml_coletaparceiro_fax,
                   fn_regiaocvrd(p.xml_coletaparceiro_cidade,
                                 p.xml_coletaparceiro_estado)
              from t_xml_coletaparceiro p
             where p.xml_coleta_numero    = xmlcoleta
               and p.xml_coleta_tipodoc   = 'ASN'
               and p.xml_tipoparceiro_codigo in ('DS', 'OR')
               and p.xml_coleta_sequencia = xmlseqorig;
     
     insert into t_xml_coletalinha
            (xml_coleta_numero,
             xml_coletalinha_linha,
             xml_coleta_tipodoc,
             xml_coletalinha_numdoc,
             xml_coleta_sequencia,
             xml_coletalinha_datadoc,
             xml_coletalinha_lindoc,
             xml_coletalinha_codmatforn,
             xml_coletalinha_codmatcomp,
             xml_coletalinha_ncm,
             xml_coletalinha_descricao,
             xml_coletalinha_entrega,
             xml_coletalinha_quantidade,
             xml_coletalinha_uom,
             xml_coletalinha_embalagem,
             xml_coletalinha_licenca,
             xml_coletalinha_barra_caixa,
             xml_coletalinha_barra_emba)
            select xmlcoleta,
                   l.xml_coletalinha_linha,
                   'ASNR',
                   l.xml_coletalinha_numdoc,
                   xmlseq,
                   l.xml_coletalinha_datadoc,
                   l.xml_coletalinha_lindoc,
                   l.xml_coletalinha_codmatforn,
                   l.xml_coletalinha_codmatcomp,
                   l.xml_coletalinha_ncm,
                   l.xml_coletalinha_descricao,
                   l.xml_coletalinha_entrega,
                   l.xml_coletalinha_quantidade,
                   l.xml_coletalinha_uom,
                   l.xml_coletalinha_embalagem,
                   l.xml_coletalinha_licenca,
                   l.xml_coletalinha_barra_caixa,
                   l.xml_coletalinha_barra_emba
              from t_xml_coletalinha l
             where l.xml_coleta_numero = xmlcoleta
               and l.xml_coleta_tipodoc = 'ASN'
               and l.xml_coleta_sequencia = xmlseqorig;      
               
        pStatus   := 'N';      
        pMessage  := 'Processamento Normal.';
    
  end Sp_Col_InformaAsnQuadrem;
  
  
  Procedure Sp_Col_InformaCliente(pStatus           out char,
                                  pMessage          out varchar2) as

  vString         varchar2(2000);
  vInformaCli     char(1) := 'N';
  vStatus         char(1);
  vMessage        varchar2(2000);
begin
   
   begin
     
     who_called_me2;
    
     for c_msg in (select co.arm_armazem_codigo,
                          co.arm_coleta_ncompra,
                          co.arm_coleta_ciclo,
                          co.arm_coleta_dtclienteinformado,
                          co.arm_coletaocor_codigo,
                          co.arm_coletaorigem_cod,
                          nvl(oc.arm_coletaocor_cancelacoleta,'N') arm_coletaocor_cancelacoleta,
                          nvl(co.usu_usuario_codigofecha,'jsantos') usu_usuario_codigofecha,
                          to_char(co.arm_coleta_dtfechamento,'dd/mm/yyyy hh24:mi:ss') arm_coleta_dtfechamento,
                          oc.arm_coletaocor_desccliente
                     from tdvadm.t_arm_coleta co,
                          tdvadm.t_arm_coletaocor oc
                    where NVL(co.arm_coleta_clienteinformado,'N')                 = 'N'
                      and co.arm_coletaocor_codigo                                = oc.arm_coletaocor_codigo
                      and to_char(nvl(co.arm_coleta_dtfechamento,sysdate),'yyyymmddhh24miss') <= to_char(sysdate,'yyyymmddhh24miss')
                      and co.arm_coletaorigem_cod                                 = 8 
                      and nvl(oc.arm_coletaocor_informacliente,'N')               = 'S'
                      and co.arm_coletaocor_codigo                                not in('65'))
     Loop
       
       vInformaCli := 'N';
                      
       vString := c_msg.arm_coletaocor_codigo;

     
       If ((trim(c_msg.arm_coletaocor_codigo) in ('01','55')) OR (c_msg.arm_coletaocor_cancelacoleta = 'S') ) then
           vInformaCli := 'S';
       End If;
      
       If (vInformaCli = 'S') Then
         
         If (c_msg.arm_coletaocor_cancelacoleta = 'N') Then
             
                tdvadm.pkg_col_coleta.Sp_Col_ColetadoAsnNimbi(c_msg.arm_coleta_ncompra, 
                                                              c_msg.arm_coleta_ciclo,
                                                              c_msg.arm_coleta_dtfechamento, 
                                                              c_msg.usu_usuario_codigofecha, 
                                                              vStatus,
                                                              vMessage);
             
         ElsIf (c_msg.arm_coletaocor_cancelacoleta = 'S') Then
             
                tdvadm.pkg_col_coleta.Sp_Col_CancelaAsnNimbi(c_msg.arm_coleta_ncompra, 
                                                             c_msg.arm_coleta_ciclo, 
                                                             c_msg.arm_coletaocor_desccliente,
                                                             c_msg.usu_usuario_codigofecha,
                                                             vStatus,
                                                             vMessage);
             
         End If;
         
         if (trim(vStatus) = 'N') then
           
           update tdvadm.t_arm_coleta co
              set co.arm_coleta_clienteinformado    = 'S',
                  co.arm_coleta_dtclienteinformado  = sysdate                        
            where co.arm_coleta_ncompra             = c_msg.arm_coleta_ncompra 
              and co.arm_coleta_ciclo               = c_msg.arm_coleta_ciclo;
         
         end if; 
         
       End If;

     End Loop;
     
     Commit;
     
     pStatus   := 'N';      
     pMessage  := 'Processamento Normal.';
     
   exception when others then
     
     pStatus   := 'E';      
     pMessage  := 'Erro ao Executar tdvadm.pkg_col_coleta.Sp_Col_InformaCliente Erro.: '||sqlerrm;
   
   end;  

end Sp_Col_InformaCliente;
  
    
  Procedure Sp_Col_ColetaPart(pColetaNumero in tdvadm.t_arm_coleta.arm_coleta_ncompra%type,
                              pCiclo        in tdvadm.t_arm_coleta.arm_coleta_ciclo%type,
                              pIdAsnNimbi   in tdvadm.t_col_asn.col_asn_id%type,
                              pStatus       out char,
                              pMessage      out varchar2) as
  vExisteRegistro integer;
  vOrigemColeta   tdvadm.t_arm_coletaorigem.arm_coletaorigem_cod%type;
  vAsnNumero      tdvadm.t_col_asn.col_asn_numero%type;
  vIncoterms      tdvadm.t_col_asn.col_asn_incoterms%type;
  vTipoVeiculo    tdvadm.t_col_asn.col_asn_tipoveiculo%type;
  vTipoCarga      tdvadm.t_col_asn.col_asn_tipocarga%type;
  vStatusId       tdvadm.t_col_asn.col_asnstatus_id%type;
  vNumeroNfe      tdvadm.t_col_asn.col_asn_numeronfe%type;
  vCnpjParceiro   tdvadm.t_col_asnparceiro.col_asnparceiro_cnpj%type;
  vNumeroContrato tdvadm.t_slf_contrato.slf_contrato_codigo%type:= null;
  vOperacaoVale   tdvadm.t_col_asn.col_asn_operacao%type        := null;       
  begin
    
    begin
      /*      insert into tdvadm.t_glb_sql
        (glb_sql_dtgravacao, glb_sql_programa, glb_sql_observacao)
      values
        (sysdate,
         'coletanimbi',
         'pColetaNumero.: ' || pColetaNumero || ' pCiclo.:' || pCiclo ||
         'pIdAsnNimbi.: ' || pIdAsnNimbi);
      
      Commit;   
      */
       

      -- Busca da origem da Coleta
      select k.arm_coletaorigem_cod
        into vOrigemColeta
        from tdvadm.t_arm_coleta k
       where k.arm_coleta_ncompra = pColetaNumero
         and k.arm_coleta_ciclo   = pCiclo;
          
      -- Analise para saber se a linha dessa tabela ja existe   
      select count(*)
        into vExisteRegistro
        from tdvadm.t_arm_coletapart ll
       where ll.arm_coleta_ncompra = pColetaNumero
         and ll.arm_coleta_ciclo   = pCiclo;
           
      -- Coleta de origem Nimbi
      if (vOrigemColeta = 8) then
        
        -- Recuperação do nuemro da ASN
        select a.col_asn_numero,
               a.col_asn_incoterms,
               a.col_asn_tipoveiculo,
               a.col_asn_tipocarga,
               a.col_asnstatus_id,
               pa.col_asnparceiro_cnpj,
               a.col_asn_numeronfe,
               a.slf_contrato_numero,
               a.col_asn_operacao
          into vAsnNumero,
               vIncoterms,
               vTipoVeiculo,
               vTipoCarga,
               vStatusId,
               vCnpjParceiro,
               vNumeroNfe,
               vNumeroContrato,
               vOperacaoVale  
          from tdvadm.t_col_asn a,
               tdvadm.t_col_asnparceiro pa
         where a.col_asn_id              = pIdAsnNimbi
           and a.col_asn_id              = pa.col_asn_id
           and pa.col_asntipoparceiro_id = '1';
      
        -- Criando / Atualizando o registro tdvadm.t_arm_coletapart  
        if (vExisteRegistro = 0) then
          
          -- Se não existe, eu crio o registro
          insert into tdvadm.t_arm_coletapart
            (arm_coleta_ncompra          ,
             arm_coleta_ciclo            ,
             arm_coletapart_codigo       ,
             arm_coletapart_tipofrete    , 
             arm_coletapart_tipocarga    , 
             arm_coletapart_veiculo      , 
             arm_coletapart_remetente    , 
             arm_coletapart_status       , 
             arm_coletapart_dtgravacao   ,
             arm_coletapart_nfe          ,
             slf_contrato_codigo         ,
             arm_coletapart_operacao )
          values
            (pColetaNumero               ,
             pCiclo                      ,
             vAsnNumero                  ,
             vIncoterms                  ,
             vTipoCarga                  ,
             vTipoVeiculo                ,
             vCnpjParceiro               ,
             vStatusId                   ,
             sysdate                     ,
             vNumeroNfe                  ,
             vNumeroContrato             ,
             vOperacaoVale);
               
        else
          
          -- Se Existe somente atualizo.
          update tdvadm.t_arm_coletapart a
             set a.arm_coletapart_codigo       = vAsnNumero,
                 a.arm_coletapart_tipofrete    = vIncoterms,
                 a.arm_coletapart_tipocarga    = vTipoCarga,
                 a.arm_coletapart_veiculo      = vTipoVeiculo,
                 a.arm_coletapart_remetente    = vCnpjParceiro,
                 a.arm_coletapart_status       = vStatusId,
                 a.arm_coletapart_dtgravacao   = sysdate,
                 a.arm_coletapart_nfe          = vNumeroNfe,
                 a.slf_contrato_codigo         = vNumeroContrato,
                 a.arm_coletapart_operacao     = vOperacaoVale
           where a.arm_coleta_ncompra          = pColetaNumero
             and a.arm_coleta_ciclo            = pCiclo;

        end if;
        
        commit;     
        
        pStatus   := 'N';      
        pMessage  := 'Processamento Normal.';
        
      end if;  

    exception when others then
      pStatus    := 'E';      
      pMessage  := 'Erro ao gerar';
    end;
        
  end Sp_Col_ColetaPart;                               

  Procedure Sp_SaveImportExport(pAgenciaNaveg  In Varchar2,
                                pDiReserva     In Varchar2,
                                pCodCli        In Varchar2,
                                pCodDesp       In Varchar2,
                                pNavio         In Varchar2,
                                pTerminalCol   In Varchar2,
                                pTerminalEnt   In Varchar2,
                                pPorto         In Varchar2,
                                pContainerCod  In Varchar2,
                                pContainerTam  In Varchar2,
                                pContainerTp   In varchar2,
                                pContainerTara In Varchar2,
                                pNormalImpExp  In Char,
                                pColeta        In Tdvadm.t_arm_coleta.Arm_Coleta_Ncompra%Type,
                                pCiclo         In Tdvadm.t_arm_coleta.Arm_Coleta_Ciclo%Type,
                                pStatus        Out Char,
                                pMessage       Out Varchar2)
  As
  Begin
                
  
      Update Tdvadm.t_arm_coleta c
        set c.arm_coleta_agencianaveg = pAgenciaNaveg,
            c.arm_coleta_direserva    = pDiReserva,
            c.arm_coleta_codcli       = pCodCli,
            c.arm_coleta_coddesp      = pCodDesp,
            c.arm_coleta_navio        = pNavio,
            c.arm_coleta_terminalcol  = substr(pTerminalCol,1,50),
            c.arm_coleta_terminalent  = substr(pTerminalEnt,1,50),
            c.arm_coleta_porto        = pPorto,
            c.arm_coleta_containerCod = pContainerCod,
            c.arm_coleta_containertam = pContainerTam,
            c.arm_coleta_containertp  = pContainerTp,
            c.arm_coleta_containertara= pContainerTara,
            c.arm_coleta_normalimpexp = pNormalImpExp
       Where c.arm_coleta_ncompra = pColeta
         and c.arm_coleta_ciclo   = pCiclo; 
     
      Commit;
      pStatus := 'N';
      pMessage := 'OK';
            
  End Sp_SaveImportExport;
  

  /*********************************************************************************************
  * Data..: 06/06/2017
  * Autor.: Diego Lirio
  **********************************************************************************************/
  Function Fn_XmlToColetaImpExpRowType(pXml In Clob)
    return T_Arm_Coletaimpexp%Rowtype
  As
    vColetaimpexpRowType tdvadm.T_Arm_Coletaimpexp%Rowtype;
  Begin

        for p_cursor in( SELECT extractValue(VALUE(TAB2), '/coletaImportExport/coleta/nCompra')coleta,
                                extractValue(VALUE(TAB2), '/coletaImportExport/coleta/ciclo')ciclo,
                                extractValue(VALUE(TAB2), '/coletaImportExport/normalImportacaoExportacao')normalImportacaoExportacao,
                                extractValue(VALUE(TAB2), '/coletaImportExport/agencia/cnpj') agencia,
                                extractValue(VALUE(TAB2), '/coletaImportExport/diReserva') diReserva,
                                extractValue(VALUE(TAB2), '/coletaImportExport/refCliente') refCliente,
                                extractValue(VALUE(TAB2), '/coletaImportExport/despachante/cnpj') despachante,
                                extractValue(VALUE(TAB2), '/coletaImportExport/refDespachante') refDespachante,
                                extractValue(VALUE(TAB2), '/coletaImportExport/navio') navio,
                                extractValue(VALUE(TAB2), '/coletaImportExport/container') container,
                                extractValue(VALUE(TAB2), '/coletaImportExport/containerTamanho') containerTamanho,
                                extractValue(VALUE(TAB2), '/coletaImportExport/containerTipo') containerTipo,
                                extractValue(VALUE(TAB2), '/coletaImportExport/containerTara') containerTara,
                                extractValue(VALUE(TAB2), '/coletaImportExport/enderecoColeta/cliente/cnpj') enderecoCnpjColeta,
                                extractValue(VALUE(TAB2), '/coletaImportExport/enderecoColeta/tipo') enderecoTipoColeta,
                                extractValue(VALUE(TAB2), '/coletaImportExport/dataContainerColeta') dataContainerColeta,
                                extractValue(VALUE(TAB2), '/coletaImportExport/horaContainerColeta') horaContainerColeta,
                                extractValue(VALUE(TAB2), '/coletaImportExport/enderecoEntrega/cliente/cnpj') enderecoCnpjEntrega,
                                extractValue(VALUE(TAB2), '/coletaImportExport/enderecoEntrega/tipo') enderecoTipoEntrega,
                                extractValue(VALUE(TAB2), '/coletaImportExport/dataContainerEntrega') dataContainerEntrega,
                                extractValue(VALUE(TAB2), '/coletaImportExport/horaContainerEntrega') horaContainerEntrega,
                                extractValue(VALUE(TAB2), '/coletaImportExport/dataDemurragem') dataDemurragem,
                                extractValue(VALUE(TAB2), '/coletaImportExport/dataArmazenagem') dataArmazenagem,
                                extractValue(VALUE(TAB2), '/coletaImportExport/dataDraft') dataDraft,
                                extractValue(VALUE(TAB2), '/coletaImportExport/horaDraft') horaDraft,
                                extractValue(VALUE(TAB2), '/coletaImportExport/observacao') obs,
                                extractValue(VALUE(TAB2), '/coletaImportExport/portoDestino') portoDestino,
                                extractValue(VALUE(TAB2), '/coletaImportExport/lacre') lacre,
                                extractValue(VALUE(TAB2), '/coletaImportExport/usuarioCadastro/codigo') usuarioCadastro,
                                extractValue(VALUE(TAB2), '/coletaImportExport/usuarioAlterou/codigo') usuarioAlterou                                
                           FROM TABle(XMLSequence(extract(xmltype.createXML(pXml), '/coletaImportExport'))) TAB2
                          WHERE 0 = 0)
           loop
               vColetaimpexpRowType.Arm_Coleta_Ncompra            := p_cursor.coleta;
               vColetaimpexpRowType.Arm_Coleta_Ciclo              := p_cursor.ciclo;
               vColetaimpexpRowType.Arm_Coletaimpexp_Normalimpexp := p_cursor.normalImportacaoExportacao;
               vColetaimpexpRowType.Glb_Cliente_Agencia           := Replace(Replace(Replace(p_cursor.agencia,'.',''),'/',''),'-','');
               vColetaimpexpRowType.Arm_Coletaimpexp_Direserva    := p_cursor.direserva;
               vColetaimpexpRowType.Arm_Coletaimpexp_Refcliente   := p_cursor.refcliente;
               vColetaimpexpRowType.Glb_Cliente_Despachante       := Replace(Replace(Replace(p_cursor.despachante,'.',''),'/',''),'-','');
               vColetaimpexpRowType.Arm_Coletaimpexp_Refdespach   := p_cursor.refDespachante;
               vColetaimpexpRowType.Arm_Coletaimpexp_Navio        := p_cursor.navio;
               vColetaimpexpRowType.Arm_Coletaimpexp_Container    := p_cursor.container;
               vColetaimpexpRowType.Arm_Coletaimpexp_Contamanho   := p_cursor.containerTamanho;
               vColetaimpexpRowType.Arm_Coletaimpexp_Contipo      := p_cursor.containerTipo;
               vColetaimpexpRowType.Arm_Coletaimpexp_Contara      := p_cursor.containerTara;
               vColetaimpexpRowType.Glb_Cliente_Cgccpfcoleta      := Replace(Replace(Replace(p_cursor.enderecocnpjcoleta,'.',''),'/',''),'-','');
               vColetaimpexpRowType.Glb_Tpcliend_Codigocoleta     := p_cursor.enderecotipocoleta;
               vColetaimpexpRowType.Arm_Coletaimpexp_Datacoleta   := p_cursor.dataContainerColeta;
               vColetaimpexpRowType.Arm_Coletaimpexp_Horacoleta   := p_cursor.horaContainerColeta;
               vColetaimpexpRowType.Glb_Cliente_Cgccpfentrega     := Replace(Replace(Replace(p_cursor.enderecocnpjentrega,'.',''),'/',''),'-','');
               vColetaimpexpRowType.Glb_Tpcliend_Codigoentrega    := p_cursor.enderecotipoentrega;
               vColetaimpexpRowType.Arm_Coletaimpexp_Dataentrega  := p_cursor.dataContainerentrega;
               vColetaimpexpRowType.Arm_Coletaimpexp_Horaentrega  := p_cursor.horaContainerentrega;               
               vColetaimpexpRowType.Arm_Coletaimpexp_Dtdemurragem := p_cursor.datademurragem;
               vColetaimpexpRowType.Arm_Coletaimpexp_Dtarmazenagem:= p_cursor.dataarmazenagem;
               vColetaimpexpRowType.Arm_Coletaimpexp_Dtdraft      := p_cursor.datadraft;
               vColetaimpexpRowType.Arm_Coletaimpexp_Horadraft    := p_cursor.horadraft;
               vColetaimpexpRowType.Arm_Coletaimpexp_Obs          := p_cursor.obs;
               vColetaimpexpRowType.Arm_Coletaimpexp_Portodest    := p_cursor.portodestino;
               vColetaimpexpRowType.Arm_Coletaimpexp_Lacre        := p_cursor.lacre;
               vColetaimpexpRowType.Usu_Usuario_Cadastro          := p_cursor.usuariocadastro;
               vColetaimpexpRowType.Usu_Usuario_Alterou           := p_cursor.usuarioalterou;
           end loop;
           return vColetaimpexpRowType;
  End Fn_XmlToColetaImpExpRowType;  
  
 Procedure Sp_SaveImpExp( pXml           In Clob,
                          pStatus        Out Char,
                          pMessage       Out Varchar2)
  As
  vColetaImpoExpRowType Tdvadm.t_Arm_Coletaimpexp%RowType;
  vCount Integer;
  vRazaoColeta Varchar2(200);
  vRazaoEntrega Varchar2(200);
  Begin

      vColetaImpoExpRowType := Fn_XmlToColetaImpExpRowType(pXml);
 
      if vColetaImpoExpRowType.Arm_Coletaimpexp_Normalimpexp = 'I' then
          if nvl(vColetaImpoExpRowType.Arm_Coletaimpexp_Contara,-1) = -1 then 
              pStatus := 'W';
              pMessage := 'Tara Obrigatório para Importação';
              return;
          end if;
          if nvl(vColetaImpoExpRowType.Arm_Coletaimpexp_Container,'NULL') = 'NULL' then 
              pStatus := 'W';
              pMessage := 'Container Obrigatório';
              return;
          end if;
          if nvl(vColetaImpoExpRowType.Arm_Coletaimpexp_Lacre,'NULL') = 'NULL' then 
              pStatus := 'W';
              pMessage := 'Lacre Obrigatório';
              return;
          end if;          
          if nvl(vColetaImpoExpRowType.Arm_Coletaimpexp_Lacre,'NULL') = 'NULL' then 
              pStatus := 'W';
              pMessage := 'Lacre Obrigatório';
              return;
          end if;       
          if vColetaImpoExpRowType.Arm_Coletaimpexp_Dtdemurragem is NULL then 
              pStatus := 'W';
              pMessage := 'Derrumagem Obrigatório';
              return;
          end if;                              
          if vColetaImpoExpRowType.Arm_Coletaimpexp_Dtarmazenagem is NULL then 
              pStatus := 'W';
              pMessage := 'Armazenagem Obrigatório';
              return;
          end if;                              
      end if;
      
      SELECT count(*)
             into vCount
        FROM TDVADM.T_ARM_COLETAIMPEXP IE
        WHERE IE.ARM_COLETA_NCOMPRA = vColetaImpoExpRowType.Arm_Coleta_Ncompra
          AND IE.ARM_COLETA_CICLO   = vColetaImpoExpRowType.Arm_Coleta_Ciclo;

      if vCount = 0 then
            vColetaImpoExpRowType.ARM_COLETAIMPEXP_DTCAD := sysdate;
            vColetaImpoExpRowType.Usu_Usuario_Alterou    := null;
            INSERT INTO TDVADM.T_ARM_COLETAIMPEXP values vColetaImpoExpRowType;
      else 
            UPDATE TDVADM.T_ARM_COLETAIMPEXP CIE
              SET  ARM_COLETAIMPEXP_NORMALIMPEXP = vColetaImpoExpRowType.Arm_Coletaimpexp_Normalimpexp,
                   GLB_CLIENTE_AGENCIA = vColetaImpoExpRowType.Glb_Cliente_Agencia,
                   ARM_COLETAIMPEXP_DIRESERVA = vColetaImpoExpRowType.Arm_Coletaimpexp_Direserva,
                   ARM_COLETAIMPEXP_REFCLIENTE = vColetaImpoExpRowType.Arm_Coletaimpexp_Refcliente,
                   GLB_CLIENTE_DESPACHANTE = vColetaImpoExpRowType.Glb_Cliente_Despachante,
                   ARM_COLETAIMPEXP_REFDESPACH = vColetaImpoExpRowType.Arm_Coletaimpexp_Refdespach,
                   ARM_COLETAIMPEXP_NAVIO = vColetaImpoExpRowType.Arm_Coletaimpexp_Navio,
                   ARM_COLETAIMPEXP_CONTAINER = vColetaImpoExpRowType.Arm_Coletaimpexp_Container,
                   ARM_COLETAIMPEXP_CONTAMANHO = vColetaImpoExpRowType.Arm_Coletaimpexp_Contamanho,
                   ARM_COLETAIMPEXP_CONTIPO = vColetaImpoExpRowType.Arm_Coletaimpexp_Contipo,
                   ARM_COLETAIMPEXP_CONTARA = vColetaImpoExpRowType.Arm_Coletaimpexp_Contara,
                   GLB_CLIENTE_CGCCPFCOLETA = vColetaImpoExpRowType.Glb_Cliente_Cgccpfcoleta,
                   GLB_TPCLIEND_CODIGOCOLETA = vColetaImpoExpRowType.Glb_Tpcliend_Codigocoleta,
                   ARM_COLETAIMPEXP_DATACOLETA = vColetaImpoExpRowType.Arm_Coletaimpexp_Datacoleta,
                   ARM_COLETAIMPEXP_HORACOLETA = vColetaImpoExpRowType.Arm_Coletaimpexp_Horacoleta,
                   GLB_CLIENTE_CGCCPFENTREGA = vColetaImpoExpRowType.Glb_Cliente_Cgccpfentrega,
                   GLB_TPCLIEND_CODIGOENTREGA = vColetaImpoExpRowType.Glb_Tpcliend_Codigoentrega,
                   ARM_COLETAIMPEXP_DATAENTREGA = vColetaImpoExpRowType.Arm_Coletaimpexp_Dataentrega,
                   ARM_COLETAIMPEXP_HORAENTREGA = vColetaImpoExpRowType.Arm_Coletaimpexp_Horaentrega,
                   ARM_COLETAIMPEXP_DTDEMURRAGEM = vColetaImpoExpRowType.Arm_Coletaimpexp_Dtdemurragem,
                   ARM_COLETAIMPEXP_DTARMAZENAGEM = vColetaImpoExpRowType.Arm_Coletaimpexp_Dtarmazenagem,
                   ARM_COLETAIMPEXP_DTDRAFT = vColetaImpoExpRowType.Arm_Coletaimpexp_Dtdraft,
                   ARM_COLETAIMPEXP_HORADRAFT = vColetaImpoExpRowType.Arm_Coletaimpexp_Horadraft,
                   ARM_COLETAIMPEXP_OBS = vColetaImpoExpRowType.Arm_Coletaimpexp_Obs,
                   ARM_COLETAIMPEXP_PORTODEST = vColetaImpoExpRowType.Arm_Coletaimpexp_Portodest,
                   ARM_COLETAIMPEXP_LACRE = vColetaImpoExpRowType.Arm_Coletaimpexp_Lacre,
                   ARM_COLETAIMPEXP_DTALT = sysdate,
                   USU_USUARIO_ALTEROU = vColetaImpoExpRowType.Usu_Usuario_Alterou
             WHERE cie.arm_coleta_ncompra = vColetaImpoExpRowType.Arm_Coleta_Ncompra
               AND cie.arm_coleta_ciclo   = vColetaImpoExpRowType.Arm_Coleta_Ciclo;                                         
      end if;
      
      SELECT c.glb_cliente_razaosocial
        INTO vRazaoColeta
        FROM TDVADM.T_GLB_CLIENTE C
        WHERE TRIM(C.GLB_CLIENTE_CGCCPFCODIGO) = trim(vColetaImpoExpRowType.Glb_Cliente_Cgccpfcoleta);

      SELECT c.glb_cliente_razaosocial
        INTO vRazaoEntrega
        FROM TDVADM.T_GLB_CLIENTE C
        WHERE TRIM(C.GLB_CLIENTE_CGCCPFCODIGO) = trim(vColetaImpoExpRowType.Glb_Cliente_Cgccpfentrega);
      
      Sp_SaveImportExport(vColetaImpoExpRowType.Glb_Cliente_Agencia,
                          vColetaImpoExpRowType.Arm_Coletaimpexp_Direserva,
                          vColetaImpoExpRowType.Arm_Coletaimpexp_Refcliente,
                          vColetaImpoExpRowType.Arm_Coletaimpexp_Refdespach,
                          vColetaImpoExpRowType.Arm_Coletaimpexp_Navio,
                          vRazaoColeta,
                          vRazaoEntrega,
                          vColetaImpoExpRowType.Arm_Coletaimpexp_Portodest,
                          vColetaImpoExpRowType.Arm_Coletaimpexp_Container,
                          vColetaImpoExpRowType.Arm_Coletaimpexp_Contamanho,
                          vColetaImpoExpRowType.Arm_Coletaimpexp_Contipo,
                          vColetaImpoExpRowType.Arm_Coletaimpexp_Contara,
                          vColetaImpoExpRowType.Arm_Coletaimpexp_Normalimpexp,
                          vColetaImpoExpRowType.Arm_Coleta_Ncompra,
                          vColetaImpoExpRowType.Arm_Coleta_Ciclo,
                          pStatus,
                          pMessage);
      
      Commit;
      pStatus := 'N';
      pMessage := 'OK';
            
  End Sp_SaveImpExp;  
                              
  Procedure Sp_Find_ColetaImpExp(pColeta  In T_arm_coleta.Arm_Coleta_Ncompra%Type,
                                 pCiclo   In T_arm_coleta.Arm_Coleta_ciclo%Type,
                                 pCursor  Out Types.cursorType,
                                 pStatus  Out Char,
                                 pMessage Out Varchar2)
  As
  Begin
     Open pCursor For
       Select c.arm_coletaimpexp_normalimpexp,
              c.glb_cliente_agencia,
              c.arm_coletaimpexp_direserva,
              c.arm_coletaimpexp_refcliente,
              c.glb_cliente_despachante,
              c.arm_coletaimpexp_refdespach,
              c.arm_coletaimpexp_navio,
              c.arm_coletaimpexp_container,
              c.arm_coletaimpexp_contamanho,
              c.arm_coletaimpexp_contipo,
              c.arm_coletaimpexp_contara,
              c.glb_cliente_cgccpfcoleta,
              c.glb_tpcliend_codigocoleta,
              to_char(c.arm_coletaimpexp_datacoleta,'dd/MM/yyyy') arm_coletaimpexp_datacoleta,
              c.arm_coletaimpexp_horacoleta,
              c.glb_cliente_cgccpfentrega,
              c.glb_cliente_cgccpfentrega,
              c.glb_tpcliend_codigoentrega,
              to_char(c.arm_coletaimpexp_dataentrega,'dd/MM/yyyy') arm_coletaimpexp_dataentrega,
              c.arm_coletaimpexp_horaentrega,
              to_char(c.arm_coletaimpexp_dtdemurragem,'dd/MM/yyyy') arm_coletaimpexp_dtdemurragem,
              to_char(c.arm_coletaimpexp_dtarmazenagem,'dd/MM/yyyy') arm_coletaimpexp_dtarmazenagem,
              to_char(c.arm_coletaimpexp_dtdraft,'dd/MM/yyyy') arm_coletaimpexp_dtdraft,
              c.arm_coletaimpexp_horadraft,
              c.arm_coletaimpexp_obs,
              to_char(c.arm_coletaimpexp_dtcad,'dd/MM/yyyy hh:mm') arm_coletaimpexp_dtcad,
              c.usu_usuario_cadastro,
              c.arm_coletaimpexp_portodest,
              c.arm_coletaimpexp_lacre,
              ag.glb_cliente_razaosocial agencia_razao,
              de.glb_cliente_razaosocial despachante_razao,
              cliCo.Glb_Cliente_Razaosocial coleta_razao,              
              cliEn.Glb_Cliente_Razaosocial entrega_razao
           From tdvadm.t_arm_coletaimpexp c,
                TDVADM.t_Glb_Cliente ag,
                TDVADM.t_Glb_Cliente de,
                Tdvadm.t_Glb_Cliente cliCo,
                Tdvadm.t_Glb_Cliente cliEn
           Where c.glb_cliente_agencia = ag.glb_cliente_cgccpfcodigo(+)
             and c.glb_cliente_despachante = de.glb_cliente_cgccpfcodigo(+)
             and c.glb_cliente_cgccpfcoleta = cliCo.glb_cliente_cgccpfcodigo(+)
             and c.glb_cliente_cgccpfcoleta = cliEn.glb_cliente_cgccpfcodigo(+)
             and c.arm_coleta_ncompra = pColeta
             and c.arm_coleta_ciclo = pCiclo;
      pStatus := 'N';
      pMessage := 'OK';       
  End Sp_Find_ColetaImpExp;   
  
  Procedure Sp_Get_DadosImpExp(pColeta  In T_arm_coleta.Arm_Coleta_Ncompra%Type,
                               pCiclo   In T_arm_coleta.Arm_Coleta_ciclo%Type,
                               pCursor  Out Types.cursorType,
                               pStatus  Out Char,
                               pMessage Out Varchar2)
  As
  Begin
     Open pCursor For
       Select c.arm_coleta_ncompra,
              c.arm_coleta_ciclo,
              c.arm_coleta_agencianaveg,
              c.arm_coleta_direserva,
              c.arm_coleta_codcli,
              c.arm_coleta_coddesp,
              c.arm_coleta_navio,
              c.arm_coleta_terminalcol, 
              c.arm_coleta_terminalent,  
              c.arm_coleta_porto,       
              c.arm_coleta_containerCod,
              c.arm_coleta_containertam,
              c.arm_coleta_containertp,
              c.arm_coleta_containertara,
              c.arm_coleta_normalimpexp
           From tdvadm.t_arm_coleta c
           Where c.arm_coleta_ncompra = pColeta
             and c.arm_coleta_ciclo = pCiclo;
      pStatus := 'N';
      pMessage := 'OK';       
             
  End Sp_Get_DadosImpExp;  
  
                                                              
  Procedure Sp_Set_UpdateFlagDemandaFrota(pNCompra  in  varchar2,
                                          pCiclo    in  varchar2,
                                          pFlag     in  varchar2,
                                          pStatus   Out Char,
                                          pMessage  Out Varchar2)
  As
  Begin
    Begin
       update tdvadm.t_arm_coleta c
         set c.arm_coleta_flagdemandafrota = pFlag
       where c.arm_coleta_ncompra          = pNCompra
         and c.arm_coleta_ciclo            = pCiclo;           
       commit;
       pStatus := 'N';
       pMessage := 'OK';
    Exception When others then
       pStatus := 'E';
       pMessage := 'Erro ao executar o Update da Flag Demanda Frota - ' || sqlerrm;      
    end;
  End Sp_Set_UpdateFlagDemandaFrota;

  Procedure Sp_Set_UpdateFlagCargaDireta(pNCompra  in  varchar2,
                                         pCiclo    in  varchar2,
                                         pFlag     in  varchar2,
                                         pStatus   Out Char,
                                         pMessage  Out Varchar2)
  As
  Begin
    Begin
       update tdvadm.t_arm_coleta c
         set c.arm_coleta_flagcargadireta  = pFlag
       where c.arm_coleta_ncompra          = pNCompra
         and c.arm_coleta_ciclo            = pCiclo;           
       commit;
       pStatus := 'N';
       pMessage := 'OK';
    Exception When others then
       pStatus := 'E';
       pMessage := 'Erro ao executar o Update da Flag Carga Direta - ' || sqlerrm;      
    end;
  End Sp_Set_UpdateFlagCargaDireta;
    
  function Fn_Col_IsColetaTransferencia(pNCompra  in  varchar2,
                                        pCiclo   in  varchar2) 
    return char  
  is
    --vCountAcompEvento integer;
    vArmazemTransfCodigo char(2) := '00';
    vArmazemTransfDescricao Varchar2(2000);
  begin
    vArmazemTransfDescricao := 'null';
    Begin
       Select max(nvl(cd.arm_armazem_codigo_transf,'00'))
         into vArmazemTransfCodigo
         from tdvadm.t_arm_nota n,
              tdvadm.t_arm_embalagem e,
              tdvadm.t_arm_carregamentodet cd
         where n.arm_embalagem_numero = e.arm_embalagem_numero
           and n.arm_embalagem_flag   = e.arm_embalagem_flag
           and n.arm_embalagem_sequencia = e.arm_embalagem_sequencia
           and cd.arm_embalagem_numero = e.arm_embalagem_numero
           and cd.arm_embalagem_flag   = e.arm_embalagem_flag
           and cd.arm_embalagem_sequencia = e.arm_embalagem_sequencia
           and cd.arm_carregamento_codigo= e.arm_carregamento_codigo
           and cd.arm_carregamentodet_flagtrans = 'S'
           and n.arm_coleta_ncompra = pNCompra
           and n.arm_coleta_ciclo   = pCiclo;
     Exception
       When No_Data_Found Then
         vArmazemTransfCodigo := '00';
     End;            
     
     if vArmazemTransfCodigo != '00' then
          SELECT A.ARM_ARMAZEM_DESCRICAO
            INTO vArmazemTransfDescricao
            FROM TDVADM.T_ARM_ARMAZEM A
            WHERE A.ARM_ARMAZEM_CODIGO = vArmazemTransfCodigo;
     end if;
                                                                                                                                                                    
     return vArmazemTransfDescricao;       
  end Fn_Col_IsColetaTransferencia;  
  
  Function Fn_Col_GetOperacaoVale(pIdAsn in tdvadm.t_col_asn.col_asn_id%type) return char is 
  
  vGEOrigem  tdvadm.t_glb_grupoeconomico.glb_grupoeconomico_codigo%type;
  vGEDestino tdvadm.t_glb_grupoeconomico.glb_grupoeconomico_codigo%type;
  vRetorno   char(1);
  begin
    
    begin
      
      -- Grupo Economico Origem
      select nvl(k.glb_grupoeconomico_codigo,'XXXX')
        into vGEOrigem
        from tdvadm.t_col_asnparceiro k
       where k.col_asntipoparceiro_id = '1'
         and k.col_asn_id             = pIdAsn;
         
      -- Grupo Economico Destino
      select nvl(k.glb_grupoeconomico_codigo,'XXXX')
        into vGEDestino
        from tdvadm.t_col_asnparceiro k
       where k.col_asntipoparceiro_id = '2'
         and k.col_asn_id             = pIdAsn;
     
      
      --Origem Fornecedor, Destino Vale(Operação Imbound)
      if (vGEOrigem <> GrupoEconomicoVALE and vGEDestino = GrupoEconomicoVALE) then
         --(I) Imbound
         vRetorno := 'I';
      end if;  
      
      --Origem Vale, Destino Fornecedor(Operação Outbound)
      if (vGEOrigem = GrupoEconomicoVALE and vGEDestino <> GrupoEconomicoVALE) then
         --(O) Outbound
         vRetorno := 'O';
      end if; 
      
      --Origem Vale, Destino Vale(Operação Transferencia)
      if (vGEOrigem = GrupoEconomicoVALE and vGEDestino = GrupoEconomicoVALE) then
         --(T) Transferencia
         vRetorno := 'T';
      end if; 
     
    exception when others then
      -- (E) Erro
      vRetorno := 'E';
    end;
    
    return vRetorno;    
    
  End Fn_Col_GetOperacaoVale; 
  
    Function Fn_Col_GetOperacaoValeCnpj(pRemetente in tdvadm.t_glb_cliente.glb_cliente_cgccpfcodigo%type,
                                        pDestinatario in tdvadm.t_glb_cliente.glb_cliente_cgccpfcodigo%type) return char is 
  
  vGEOrigem  tdvadm.t_glb_grupoeconomico.glb_grupoeconomico_codigo%type;
  vGEDestino tdvadm.t_glb_grupoeconomico.glb_grupoeconomico_codigo%type;
  vRetorno   char(1);
  begin
    
    begin
      
       select nvl(TRIM(k.glb_grupoeconomico_codigo),'XXXX')
        into vGEOrigem
        from tdvadm.t_glb_cliente k
       where trim(k.glb_cliente_cgccpfcodigo) = trim(pRemetente); 
       
      select nvl(TRIM(k.glb_grupoeconomico_codigo),'XXXX')
        into vGEDestino
        from tdvadm.t_glb_cliente k
       where trim(k.glb_cliente_cgccpfcodigo) = trim(pDestinatario); 
      
      --Origem Fornecedor, Destino Vale(Operação Imbound)
      if (trim(vGEOrigem) <> trim(GrupoEconomicoVALE) and trim(vGEDestino) = trim(GrupoEconomicoVALE)) then
         --(I) Imbound
         vRetorno := 'I';
      end if;  
      
      --Origem Vale, Destino Fornecedor(Operação Outbound)
      if (vGEOrigem = GrupoEconomicoVALE and vGEDestino <> GrupoEconomicoVALE) then
         --(O) Outbound
         vRetorno := 'O';
      end if; 
      
      --Origem Vale, Destino Vale(Operação Transferencia)
      if (vGEOrigem = GrupoEconomicoVALE and vGEDestino = GrupoEconomicoVALE) then
         --(T) Transferencia
         vRetorno := 'T';
      end if; 
      
      if (vGEOrigem <> GrupoEconomicoVALE and vGEDestino <> GrupoEconomicoVALE) then
         --(T) Transferencia
         vRetorno := 'I';
      end if; 
    
    exception when others then
      -- (E) Erro
      vRetorno := 'E';
    end;
    
    return vRetorno;    
    
  End Fn_Col_GetOperacaoValeCnpj;       
  
  
  Function Fn_Col_GetTpValidacao(pTransportationType in varchar2,
                                 pFragileLoad        in varchar2,
                                 pSelfSupportingLoad in varchar2) return varchar2 is
  vRetorno tdvadm.t_col_asnconfig.col_asnconfig_tpvalidacao%type;
  Begin
    
    Begin
      
      -- Busca em qual regra de validação essa asn ira entrar
      select cc.col_asnconfig_tpvalidacao
        into vRetorno
        from tdvadm.t_col_asnconfig cc
       where trim(cc.col_asnconfig_tt)  = trim(pTransportationType)
         and trim(cc.col_asnconfig_fl)  = trim(pFragileLoad)       
         and trim(cc.col_asnconfig_ssl) = trim(pSelfSupportingLoad);
        
    Exception when others then
      -- se não achar mando um tipo de retorno não existente na tabela
      vRetorno := '0';
      
    End;    
    
    return vRetorno;
    
  End Fn_Col_GetTpValidacao;
  
  
  Function Fn_Col_GetVeiclo(pVeiculo in tdvadm.t_col_asntipoveiculo.col_asntipoveiculo_codnimbi%type) return number is
  vRetorno tdvadm.t_col_asntipoveiculo.col_asntipoveiculo_id%type;
  begin
    
    begin
      -- Busca o codigo do veiculo real na tdv
      select ll.col_asntipoveiculo_id
        into vRetorno
        from tdvadm.t_col_asntipoveiculo ll
       where ll.col_asntipoveiculo_codnimbi = pVeiculo;

    exception when others then
      -- se não achar mando um tipo de retorno não existente na tabela
      vRetorno := 0;
    end;    
    
    return vRetorno;
    
  end fn_col_getVeiclo;    
  
                           
  
  Begin
    execute immediate ( ' ALTER SESSION set NLS_DATE_FORMAT = "DD/MM/YYYY" '   ||
                                          ' NLS_LANGUAGE = AMERICAN '          ||
                                          ' NLS_TERRITORY = AMERICA  '         ||
                                          ' NLS_DUAL_CURRENCY = WE8ISO8859P1 ' ||
                                          ' NLS_NUMERIC_CHARACTERS = ".," ' );

end Pkg_Col_Coleta;
/
