CREATE OR REPLACE PACKAGE TDVADM.PKG_CFE_FRETE IS
  /***************************************************************************************************
  * ROTINA           :                                                                               *
  * DATA DE CRIACAO  :                                                                               *
  * BANCO            : ORACLE-TDP                                                                    *
  * EXECUTADO POR    :                                                                               *
  * ALIMENTA         :                                                                               *
  * FUNCINALIDADE    :                                                                               *
  * ATUALIZA         :                                                                               *
  * PARTICULARIDADES :                                                                               *
  * PARAM. OBRIGAT.  :                                                                               *
  ****************************************************************************************************/
  TYPE T_CURSOR IS REF CURSOR;
  
    --ContratanteNumero       Constant VARCHAR2(20) := '61139432002469';
    ContratanteNumero       Constant VARCHAR2(20) := '61139432000172';
    ContratanteNumeroNovo   Constant VARCHAR2(20) := '61139432000172';
    vTimeIntervaloPesqPed   Constant number       := 10;  -- tempo de espera entre as consultas
    vTimeOutPesqPed         Constant number       := 70; -- tempo em segundos
    
      --Constants privadas
  STATUS_OK       CONSTANT CHAR(02) := 'OK';
  STATUS_INVALIDO CONSTANT CHAR(02) := 'IV';
  STATUS_ERRO     CONSTANT CHAR(02) := 'ER';
  STATUS_E        Constant CHAR(1)  := 'E'; ------------------------------- Status de Erro usado de retorno nas procedures
  STATUS_N        Constant CHAR(1)  := 'N'; --------------------------------- Status Normal usado de retorno nas proceures  
 
  pgtoFrete_ContaCorrente  constant char(02) := 'CC';
  pgtoFrete_Cartao         constant char(02) := 'CT';
  pgtoFrete_Livre          constant char(02) := 'LV';  
  
  --Variáveis utilizadas para lançamento de exceções
  vEx_Select Exception;
  vEx_GetXml Exception;

  /***************************************************************************************************
  **                                                                                                **
  ***************************************************************************************************/
  
  TYPE TpRegTxt IS RECORD (con_freteoper_id    number, 
                           con_freteoper_rota  char(3), 
                           uti_vfintegra_seq   number, 
                           uti_vfintegra_chave varchar2(1000), 
                           uti_vfintegra_valor varchar2(1000)
                           );   
  
  TYPE TpRegRntrc IS RECORD (RegRntrcEquiparado   varchar2(100),
                             RegRntrcSituacao     varchar2(100),
                             RegRntrcTipo         varchar2(100),
                             RegRntrcValidade     DATE,
                             RegRntrcProprietario CHAR(20)
                             );   
                             
  TYPE TpInfValeFrete IS RECORD (valefrete_id            NUMBER              ,
                                 valefrete_contrato_numero varchar2(20)      ,                                
                                 con_conhecimento_codigo varchar2(8)         ,         
                                 con_conhecimento_serie varchar2(4)          ,
                                 glb_rota_codigo char(3)                     ,
                                 con_valefrete_saque char(1)                 , 
                                 con_valefrete_placasaque char(4)            ,
                                 con_valefrete_placa char(7)                 ,
                                 con_valefrete_kmprevista NUMBER             , 
                                 con_valefrete_pesoindicado number(14,3)     ,
                                 con_valefrete_obrigacoes varchar2(100)      ,
                                 con_valefrete_dataprazomax date             ,
                                 con_valefrete_datacadastro date             ,
                                 con_valefrete_datachegada date              ,
                                 con_valefrete_dataemissao DATE              ,
                                 con_valefrete_frete number(20,2)            , 
                                 con_valefrete_reembolso number(20,2)        , 
                                 con_valefrete_adiantamento number(20,2)     , 
                                 con_valefrete_multa number(20,2)            ,
                                 con_valefrete_valorliquido number(20,2)     , 
                                 glb_localidade_codigo char(8)               ,
                                 con_valefrete_irrf number(14,2)             , 
                                 con_valefrete_pedagio number(14,2)          , 
                                 glb_localidade_codigodes char(8)            ,
                                 glb_localidade_codigoori char(8)            ,
                                 con_valefrete_impresso char(1)              ,
                                 con_valefrete_valorcomdesconto number(20,2) , 
                                 con_catvalefrete_codigo char(2)             ,
                                 glb_tpmotorista_codigo char(2)              ,
                                 con_valefrete_enlonamento number(20,4)      ,
                                 con_valefrete_estadia number(20,4)          ,
                                 con_valefrete_outros number(20,4)           ,
                                 usu_usuario_codigo char(10)                 ,
                                 con_valefrete_inss number(14,2)             ,
                                 con_valefrete_cofins number(14,2)           ,
                                 con_valefrete_csll number(14,2)             ,
                                 con_valefrete_pis number(14,2)              ,
                                 con_valefrete_avaria number(14,2)           ,
                                 con_valefrete_sestsenat number(14,2)        ,
                                 con_valefrete_adtanterior number(14,2)      ,
                                 con_valefrete_fifo char(1)                  
                                 );                       
  
  TYPE TpPayParcelFavor IS RECORD ( FavorProprietario CHAR(1),
                                    FavorMotorista    CHAR(1),
                                    FavorResponsavel  CHAR(1));    
  
  
    
  TYPE TpInfViagem IS RECORD ( glb_rota_codigo char(3), 
                               vgm_viagem_codigo number, 
                               vgm_viagem_nuncontra varchar2(20), 
                               con_freteoper_id number, 
                               con_freteoper_rota char(3), 
                               vgm_viagem_qtdedocumentos number, 
                               vgm_viagem_qtdeparcelas NUMBER,
                               vgm_viagem_qtdeitensfrete number, 
                               vgm_viagem_dtpartida date, 
                               vgm_viagem_dttermino date, 
                               glb_localidade_codigoorigem char(8), 
                               glb_localidade_codigodestino char(8), 
                               vgm_viagem_cargatipo char(1), 
                               vgm_viagem_naturezacarga number, 
                               vgm_viagem_peso number(14,3), 
                               vgm_viagem_valorbruto number, 
                               vgm_viagem_pegadiovalor NUMBER
); 
  
  FUNCTION FN_GET_NEXTSEQREG(P_ID IN NUMBER, P_ROTA IN CHAR )RETURN NUMBER; 
  
  FUNCTION FN_GET_CONSRNTRC(P_ID IN NUMBER, P_XML IN CLOB ) RETURN TpRegRntrc;
  
  FUNCTION FN_GET_IDVALIDO(P_ID IN NUMBER, P_ROTA IN CHAR )RETURN VARCHAR2; 
    
  FUNCTION FN_GET_IBGE(P_LOCALIDADE IN T_GLB_LOCALIDADE.GLB_LOCALIDADE_CODIGO%TYPE )RETURN T_GLB_LOCALIDADE.GLB_LOCALIDADE_CODIGOIBGE%TYPE;
  
  FUNCTION FN_GET_CHAVEXML(P_XMLRETORNO  CLOB,
                           P_CHAVE       CHAR ) RETURN VARCHAR2;
  
  FUNCTION FN_GET_CATEGORIAVEIC(P_PLACA IN T_CAR_VEICULO.CAR_VEICULO_PLACA%TYPE, P_SAQUE IN T_CAR_VEICULO.CAR_VEICULO_SAQUE%TYPE)RETURN VARCHAR2;
  
  FUNCTION FN_GET_TIPOCARGA(P_VFRETE IN T_CON_VALEFRETE.CON_CONHECIMENTO_CODIGO%TYPE,
                            P_SERIE  IN T_CON_VALEFRETE.CON_CONHECIMENTO_SERIE%TYPE,
                            P_ROTA   IN T_CON_VALEFRETE.GLB_ROTA_CODIGO%TYPE,
                            P_SAQUE  IN T_CON_VALEFRETE.CON_VALEFRETE_SAQUE%TYPE,
                            P_TIPOVF IN CHAR)RETURN INTEGER;                         
                           
  FUNCTION FN_GET_PODEALTERAR(P_VFRETE IN T_CON_VALEFRETE.CON_CONHECIMENTO_CODIGO%TYPE,
                              P_SERIE  IN T_CON_VALEFRETE.CON_CONHECIMENTO_SERIE%TYPE,
                              P_ROTA   IN T_CON_VALEFRETE.GLB_ROTA_CODIGO%TYPE,
                              P_SAQUE  IN T_CON_VALEFRETE.CON_VALEFRETE_SAQUE%TYPE)RETURN CHAR;
  
  FUNCTION FN_GET_PAGAMENTOFAVORECIDO (P_VFRETE IN T_CON_VALEFRETE.CON_CONHECIMENTO_CODIGO%TYPE,
                                       P_SERIE  IN T_CON_VALEFRETE.CON_CONHECIMENTO_SERIE%TYPE,
                                       P_ROTA   IN T_CON_VALEFRETE.GLB_ROTA_CODIGO%TYPE,
                                       P_SAQUE  IN T_CON_VALEFRETE.CON_VALEFRETE_SAQUE%TYPE)RETURN TpPayParcelFavor;


  -- procedure utilizada para recuperar um cursor com os dados do arquivo xml de consulta de um rntrc
  PROCEDURE SP_GET_CONSRNTRC( P_ID      IN   TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ID%TYPE,
                              P_ROTA    IN   TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ROTA%TYPE,
                              P_STATUS  OUT  CHAR,
                              P_MESSAGE OUT  VARCHAR2,
                              P_CURSOR  OUT  TDVADM.PKG_GLB_COMMON.T_CURSOR
                            );

  
  PROCEDURE SP_GET_INTEGRACAO(P_APPCODIGO    IN  tdvadm.t_usu_aplicacao.usu_aplicacao_codigo%TYPE,
                              P_IPLOCAL      IN  tdvadm.t_cfe_introtaserver.cfe_introtaserver_ip%TYPE,
                              P_CURSOR       OUT T_CURSOR,
                              P_STATUS       OUT CHAR,
                              P_MESSAGE      OUT VARCHAR2); 

  PROCEDURE SP_GET_HISTORICO(P_DTINI    IN VARCHAR2,
                             P_DTFIM    IN VARCHAR2,
                             P_ROTA     IN TDVADM.T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,               
                             P_CURSOR   OUT T_CURSOR,
                             P_STATUS   OUT CHAR,
                             P_MESSAGE  OUT VARCHAR2); 
                              
  PROCEDURE SP_GET_RETORNOINTEGRACAO(P_ID          IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ID%TYPE,                                
                                     P_ROTA        IN  TDVADM.T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,      
                                     P_OPERACAOWS  IN  TDVADM.T_CON_FRETEOPER.CFE_OPERACOES_COD%TYPE,
                                     P_OPERACAOTDV IN  TDVADM.T_CON_FRETEOPER.CFE_INTEGRATDV_COD%TYPE,
                                     P_SEQUENCIA   IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_SEQ%TYPE,               
                                     P_CURSOR     OUT T_CURSOR,
                                     P_STATUS     OUT CHAR,
                                     P_MESSAGE    OUT VARCHAR2);                              

  PROCEDURE SP_GET_ENVIOINTEGRACAO(P_ID          IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ID%TYPE,                                
                                   P_ROTA        IN  TDVADM.T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,      
                                   P_OPERACAOWS  IN  TDVADM.T_CON_FRETEOPER.CFE_OPERACOES_COD%TYPE,
                                   P_OPERACAOTDV IN  TDVADM.T_CON_FRETEOPER.CFE_INTEGRATDV_COD%TYPE,
                                   P_SEQUENCIA   IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_SEQ%TYPE,               
                                   P_CURSOR     OUT T_CURSOR,
                                   P_STATUS     OUT CHAR,
                                   P_MESSAGE    OUT VARCHAR2);                                   

  PROCEDURE SP_GET_VALIDACAOTDV(P_ID          IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ID%TYPE,                                
                                P_ROTA        IN  TDVADM.T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,      
                                P_OPERACAOWS  IN  TDVADM.T_CON_FRETEOPER.CFE_OPERACOES_COD%TYPE,
                                P_OPERACAOTDV IN  TDVADM.T_CON_FRETEOPER.CFE_INTEGRATDV_COD%TYPE,
                                P_SEQUENCIA   IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_SEQ%TYPE,
                                P_CURSOR      OUT T_CURSOR,
                                P_STATUS      OUT CHAR,
                                P_MESSAGE     OUT VARCHAR2);              

                             
  PROCEDURE SP_GET_HISTORICOPORID(P_ID         IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ID%TYPE,
                                  P_ROTA       IN  TDVADM.T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,               
                                  P_CURSOR     OUT T_CURSOR,
                                  P_STATUS     OUT CHAR,
                                  P_MESSAGE    OUT VARCHAR2);  
                                   
  PROCEDURE SP_GET_IDINTEGRACAO(P_QryStr       IN  clob,
                                P_ROTA         IN  T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,
                                P_IDCONSULTA   OUT VARCHAR2,
                                P_STATUS       OUT CHAR,
                                P_MESSAGE      OUT VARCHAR2);       
                                
  PROCEDURE SP_SET_INTEGRAVF(P_QRYSTR      IN  VARCHAR2,
                             P_IDCONSULTA  IN  VARCHAR2,
                             P_ROTA        IN  CHAR, 
                             P_STATUS      OUT CHAR,
                             P_MESSAGE     OUT VARCHAR2);                             
                                                       
  
  PROCEDURE SP_SET_INTEGRAVGM(P_QRYSTR       IN  varchar2,
                              P_IDCONSULTA   IN  VARCHAR2,
                              P_ROTA         IN  CHAR, 
                              P_STATUS       OUT CHAR,
                              P_MESSAGE      OUT VARCHAR2);
  
  
  PROCEDURE SP_GET_CONSULTARNTRC(P_QryStr       IN  clob,
                                 P_IDCONSULTA   IN  NUMBER,
                                 P_ROTA         IN  CHAR,                           
                                 P_CURSOR       OUT T_CURSOR,
                                 P_STATUS       OUT CHAR,
                                 P_MESSAGE      OUT VARCHAR2);                                   
  
  PROCEDURE SP_GET_CONSULTACARTAO(P_QryStr       IN clob, 
                                  P_IDCONSULTA   IN  NUMBER,
                                  P_ROTA         IN  CHAR,
                                  P_CURSOR       OUT T_CURSOR,
                                  P_STATUS       OUT CHAR,
                                  P_MESSAGE      OUT VARCHAR2);       
  
  PROCEDURE SP_GET_CONSULTACARTAOPED(P_QryStr       IN clob, 
                                     P_IDCONSULTA   IN  NUMBER,
                                     P_ROTA         IN  CHAR,
                                     P_CURSOR       OUT T_CURSOR,
                                     P_STATUS       OUT CHAR,
                                     P_MESSAGE      OUT VARCHAR2);    
                                  
  PROCEDURE SP_GET_CONSULTACONTA(P_QryStr       IN  clob,
                                 P_IDCONSULTA   IN  NUMBER,
                                 P_ROTA         IN  CHAR,
                                 P_CURSOR       OUT T_CURSOR,
                                 P_STATUS       OUT CHAR,
                                 P_MESSAGE      OUT VARCHAR2);                                                                 
     
  PROCEDURE SP_GET_CONSULTAFROTA(P_QryStr       IN  clob,
                                 P_IDCONSULTA   IN  NUMBER,
                                 P_ROTA         IN  CHAR, 
                                 P_CURSOR       OUT T_CURSOR,                              
                                 P_STATUS       OUT CHAR,   
                                 P_MESSAGE      OUT VARCHAR2); 
  
  PROCEDURE SP_GET_CONSULTAFAVOR(P_QryStr       IN  clob,
                                 P_IDCONSULTA   IN  NUMBER,
                                 P_ROTA         IN  CHAR,
                                 P_CURSOR       OUT T_CURSOR,
                                 P_STATUS       OUT CHAR,
                                 P_MESSAGE      OUT VARCHAR2);   
  
  PROCEDURE SP_GET_CONSULTAFAVORMOT(P_QryStr       IN  clob,
                                    P_IDCONSULTA   IN  NUMBER,
                                    P_ROTA         IN  CHAR,
                                    P_CURSOR       OUT T_CURSOR,
                                    P_STATUS       OUT CHAR,
                                    P_MESSAGE      OUT VARCHAR2);                                  
                                 
  /*******************************************************/
  /*CONSIDERAR QUANDO MOTORISTA O ULTIMO SAQUE CADASTRADO*/
  /*******************************************************/
  PROCEDURE SP_GET_INSEREFAVORECIDO(P_QryStr       IN  clob,
                                    P_IDCONSULTA   IN  NUMBER,
                                    P_ROTA         IN  CHAR,
                                    P_CURSOR       OUT T_CURSOR,
                                    P_STATUS       OUT CHAR,
                                    P_MESSAGE      OUT VARCHAR2);   
  
  PROCEDURE SP_GET_INSERECARTAO(P_QryStr       IN  clob,
                                P_IDCONSULTA   IN  NUMBER,
                                P_ROTA         IN  CHAR,
                                P_CURSOR       OUT T_CURSOR,
                                P_STATUS       OUT CHAR,
                                P_MESSAGE      OUT VARCHAR2);      
                            
                                
  PROCEDURE SP_GET_INSERIRCONTA(P_QryStr       IN  clob,
                                P_IDCONSULTA   IN  NUMBER,
                                P_ROTA         IN  CHAR,
                                P_CURSOR       OUT T_CURSOR,
                                P_STATUS       OUT CHAR,
                                P_MESSAGE      OUT VARCHAR2);
                                                                                                                                                                                                                                                                                                                                                                                                     
                                 
  PROCEDURE SP_GET_INSERIRFRETE(P_QryStr       IN  clob,
                                P_IDCONSULTA   IN  NUMBER,
                                P_ROTA         IN  CHAR,
                                P_CURSOR       OUT T_CURSOR,                              
                                P_STATUS       OUT CHAR,   
                                P_MESSAGE      OUT VARCHAR2);  
    
  PROCEDURE SP_GET_STATUSPARCELA(P_QryStr       IN  clob,
                                 P_IDCONSULTA   IN  NUMBER,
                                 P_ROTA         IN  CHAR,
                                 P_CURSOR       OUT T_CURSOR,                              
                                 P_STATUS       OUT CHAR,   
                                 P_MESSAGE      OUT VARCHAR2);
                                 
  PROCEDURE SP_GET_ATUALIZAPARCELA(P_QryStr       IN  varchar2,
                                   P_IDCONSULTA   IN  NUMBER,
                                   P_ROTA         IN  CHAR,
                                   P_CURSOR       OUT T_CURSOR,                              
                                   P_STATUS       OUT CHAR,   
                                   P_MESSAGE      OUT VARCHAR2);
                                                                 
  PROCEDURE SP_GET_INSEREOPERACAO(P_QryStr       IN  clob,
                                  P_IDCONSULTA   IN  NUMBER,
                                  P_ROTA         IN  CHAR,
                                  P_CURSOR       OUT T_CURSOR,                              
                                  P_STATUS       OUT CHAR,   
                                  P_MESSAGE      OUT VARCHAR2);  
        
  PROCEDURE SP_GRAVALINHATXT(P_REGISTRO IN TpRegTxt,
                             P_STATUS       OUT CHAR,                            
                             P_MESSAGE      OUT VARCHAR2);   
                             
  PROCEDURE SP_GET_VALIDARETORNO(P_XMLENVIO     IN  CLOB,
                                 P_XMLRETORNO   IN  CLOB,
                                 P_OPERCOD      IN  TDVADM.T_CFE_OPERACOES.CFE_OPERACOES_COD%TYPE,
                                 P_TDVOPERCOD   IN  TDVADM.T_CFE_OPERATDV.CFE_INTEGRATDV_COD%TYPE,
                                 P_IDCONSULTA   IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ID%TYPE,
                                 P_ROTA         IN  TDVADM.T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,
                                 P_STATUS       OUT CHAR,                            
                                 P_MESSAGE      OUT VARCHAR2);   
                                 
  PROCEDURE SP_GET_OPERACOESUSUARIO(P_GERCODIGO IN TDVADM.T_CFE_GERENBCO.CFE_GERENBCO_COD%TYPE,
                                    P_CURSOR    OUT T_CURSOR,                              
                                    P_STATUS    OUT CHAR,   
                                    P_MESSAGE   OUT VARCHAR2,
                                    P_USUARIO   IN TDVADM.T_USU_USUARIO.USU_USUARIO_CODIGO%tYPE DEFAULT 'jsantos',
                                    P_ROTA      IN TDVADM.T_USU_USUARIO.GLB_ROTA_CODIGO%TYPE DEFAULT '010');

  PROCEDURE SP_GET_GERENCIADORAS(P_CURSOR       OUT T_CURSOR,                              
                                 P_STATUS       OUT CHAR,   
                                 P_MESSAGE      OUT VARCHAR2);                                  

  PROCEDURE SP_GET_PARAMPROC(P_OPERACAOCOD IN TDVADM.T_CFE_OPERACOES.CFE_OPERACOES_COD%TYPE,
                             P_CURSOR      OUT T_CURSOR,                              
                             P_STATUS      OUT CHAR,   
                             P_MESSAGE     OUT VARCHAR2);                                  


  PROCEDURE SP_ATUALIZA_MSGENV(P_XML        IN CLOB,
                               P_IDCONSULTA IN TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ID%TYPE,
                               P_STATUS     OUT CHAR,
                               P_MESSAGE    OUT VARCHAR2);
  
  procedure SP_DELETE_ID(p_ID      in  tdvadm.t_con_freteoper.con_freteoper_id%type,
                         p_OperWs  in  tdvadm.t_con_freteoper.cfe_operacoes_cod%type,
                         p_OperTdv in  tdvadm.t_con_freteoper.cfe_integratdv_cod%type,
                         P_Rota    in  tdvadm.t_con_freteoper.con_freteoper_rota%type,
                         p_Status  out char,
                         p_Message out varchar2);
  
  PROCEDURE SP_SET_STATUSOPER(P_ID         IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ID%TYPE,
                              P_OPERWS     IN  TDVADM.T_CON_FRETEOPER.CFE_OPERACOES_COD%TYPE,
                              P_OPERTDV    IN  TDVADM.T_CON_FRETEOPER.CFE_INTEGRATDV_COD%TYPE,                              
                              P_ROTA       IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ROTA%TYPE,
                              P_STATUSOPER IN  TDVADM.T_CON_FRETEOPER.CFE_STATUSFRETEOPER_STATUS%TYPE,
                              P_MSGSTATUS  IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_OBS%TYPE,
                              P_STATUS     OUT CHAR,
                              P_MESSAGE    OUT VARCHAR2);
                              
  PROCEDURE SP_SET_STATUSOPER2(P_ID         IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ID%TYPE,
                               P_OPERWS     IN  TDVADM.T_CON_FRETEOPER.CFE_OPERACOES_COD%TYPE,
                               P_OPERTDV    IN  TDVADM.T_CON_FRETEOPER.CFE_INTEGRATDV_COD%TYPE,                              
                               P_ROTA       IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ROTA%TYPE,
                               P_STATUSOPER IN  TDVADM.T_CON_FRETEOPER.CFE_STATUSFRETEOPER_STATUS%TYPE,
                               P_MSGSTATUS  IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_OBS%TYPE,
                               P_SEQ        IN TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_SEQ%TYPE,
                               P_STATUS     OUT CHAR,
                               P_MESSAGE    OUT VARCHAR2);                              
                              
  FUNCTION FN_TRADUZ_CODRETORNO(P_CHAVE VARCHAR2, P_VALOR VARCHAR2) RETURN VARCHAR2;
  
  PROCEDURE SP_GET_URLGERENCIADORA(P_IDGERENCIADORA IN TDVADM.T_CFE_GERENBCO.CFE_GERENBCO_COD%TYPE,
                                   P_WSCLASSNAME    IN TDVADM.T_CFE_GERENBCO.CFE_GERENBCO_CLASS%TYPE,
                                   P_CURSOR         OUT T_CURSOR,
                                   P_STATUS         OUT CHAR,
                                   P_MESSAGE        OUT VARCHAR2); 

  PROCEDURE TESTE;
  
  
--Procedure utilizada para validar o Xml de retorno da Consulta de RNTRC
procedure SP_VLD_CONSULTARNTRC( P_XMLRETORNO      IN CLOB,
                                P_IDCONSULTA      IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ID%TYPE,
                                P_ROTA            IN  TDVADM.T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,
                                P_CODOPERACAOTDV  IN  VARCHAR2,
                                P_CODOPERACAOWS   IN  VARCHAR2,
                                P_SEQUENCIA       IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_SEQ%TYPE
                                );
                                
-- Procedure utilizada para validar o Xml de retorno da Consulta de FROTA
procedure SP_VLD_CONSULTAFROTA( P_XMLRETORNO             IN CLOB,
                                P_IDCONSULTA      IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ID%TYPE,
                                P_ROTA            IN  TDVADM.T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,
                                P_CODOPERACAOTDV  IN  VARCHAR2,
                                P_CODOPERACAOWS   IN  VARCHAR2,
                                P_SEQUENCIA       IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_SEQ%TYPE
                               );
                                 
-- Procedure utilizada para validar o Xml de retorno da Consulta de Favorecido
procedure SP_VLD_CONSULTAFAVORECIDO( P_XMLRETORNO      IN CLOB,
                                     P_IDCONSULTA      IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ID%TYPE,
                                     P_ROTA            IN  TDVADM.T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,
                                     P_CODOPERACAOTDV  IN  VARCHAR2,
                                     P_CODOPERACAOWS   IN  VARCHAR2,
                                     P_SEQUENCIA       IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_SEQ%TYPE
                                    );
  
-- Procedure utilizada para validar o Xml de retorno da Consulta de Cartão de Pedáio
PROCEDURE SP_VLD_CONSULTACARTAOPEDAGIO( P_XMLRETORNO      IN CLOB,
                                        P_IDCONSULTA      IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ID%TYPE,
                                        P_ROTA            IN  TDVADM.T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,
                                        P_CODOPERACAOTDV  IN  VARCHAR2,
                                        P_CODOPERACAOWS   IN  VARCHAR2,
                                        P_SEQUENCIA       IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_SEQ%TYPE
                                       );                                    

-- Procedure utilizada para validar o Xml de retorno da Consulta de Cartão de Frete
PROCEDURE SP_VLD_CONSULTACARTAOFRETE( P_XMLRETORNO      IN CLOB,
                                      P_IDCONSULTA      IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ID%TYPE,
                                      P_ROTA            IN  TDVADM.T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,
                                      P_CODOPERACAOTDV  IN  VARCHAR2,
                                      P_CODOPERACAOWS   IN  VARCHAR2,
                                      P_SEQUENCIA       IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_SEQ%TYPE
                                     );
                                     
-- Procedure utilizada para validar o Xml de retorno da Consulta de Cartão de Frete para o motorista
PROCEDURE SP_VLD_CONSCARTAOFRETEMOTOR( P_XMLRETORNO      IN CLOB,
                                       P_IDCONSULTA      IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ID%TYPE,
                                       P_ROTA            IN  TDVADM.T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,
                                       P_CODOPERACAOTDV  IN  VARCHAR2,
                                       P_CODOPERACAOWS   IN  VARCHAR2,
                                       P_SEQUENCIA       IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_SEQ%TYPE
                                      );
                                     
-- Procedure utilizada para validar o Xml de retorno da Solicitação de CIOT para uma viagem                                                 --
Procedure SP_VLD_CONSULTACIOTVIAGEM( P_XMLRETORNO      IN CLOB,
                                     P_IDCONSULTA      IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ID%TYPE,
                                     P_ROTA            IN  TDVADM.T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,
                                     P_CODOPERACAOTDV  IN  VARCHAR2,
                                     P_CODOPERACAOWS   IN  VARCHAR2,
                                     P_SEQUENCIA       IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_SEQ%TYPE
                                    );
                                     
-- Procedure utilizada para validar o Xml de retorno da Consulta de CIOT                                                                    --
PROCEDURE SP_VLD_CONSULTACIOT( P_XMLRETORNO      IN CLOB,
                               P_IDCONSULTA      IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ID%TYPE,
                               P_ROTA            IN  TDVADM.T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,
                               P_CODOPERACAOTDV  IN  VARCHAR2,
                               P_CODOPERACAOWS   IN  VARCHAR2,
                               P_SEQUENCIA       IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_SEQ%TYPE
                              );
                              
PROCEDURE SP_VLD_CONSULTACIOT2( P_XMLRETORNO      IN CLOB,
                                P_IDCONSULTA      IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ID%TYPE,
                                P_ROTA            IN  TDVADM.T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,
                                P_CODOPERACAOTDV  IN  VARCHAR2,
                                P_CODOPERACAOWS   IN  VARCHAR2,
                                P_SEQUENCIA       IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_SEQ%TYPE
                              );                              


-- Procedure utilizada para validar o Xml de retorno da Consulta de CONTA BANCÁRIA                                                          --
PROCEDURE SP_VLD_CONSULTACONTA( P_XMLRETORNO      IN CLOB,
                                P_IDCONSULTA      IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ID%TYPE,
                                P_ROTA            IN  TDVADM.T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,
                                P_CODOPERACAOTDV  IN  VARCHAR2,
                                P_CODOPERACAOWS   IN  VARCHAR2,
                                P_SEQUENCIA       IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_SEQ%TYPE
                              ); 

PROCEDURE SP_VLD_ALTRSTATUSPARC( P_XMLRETORNO      IN CLOB,
                                 P_IDCONSULTA      IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ID%TYPE,
                                 P_ROTA            IN  TDVADM.T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,
                                 P_CODOPERACAOTDV  IN  VARCHAR2,
                                 P_CODOPERACAOWS   IN  VARCHAR2,
                                 P_SEQUENCIA       IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_SEQ%TYPE
                               );  

-- Procedure utilizada para validar o xml de retorno da operação "pagar parcela"                                                            --
PROCEDURE SP_VLD_PGTOPARCELA( P_XMLRETORNO      IN CLOB,
                              P_IDCONSULTA      IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ID%TYPE,
                              P_ROTA            IN  TDVADM.T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,
                              P_CODOPERACAOTDV  IN  VARCHAR2,
                              P_CODOPERACAOWS   IN  VARCHAR2,
                              P_SEQUENCIA       IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_SEQ%TYPE
                             );
                             
-- Procedure utilizada para validar o xml de retorno da operação "cancelar frete"                                                            --
PROCEDURE SP_VLD_CANCELFRETE( P_XMLRETORNO      IN CLOB,
                              P_IDCONSULTA      IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ID%TYPE,
                              P_ROTA            IN  TDVADM.T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,
                              P_CODOPERACAOTDV  IN  VARCHAR2,
                              P_CODOPERACAOWS   IN  VARCHAR2,
                              P_SEQUENCIA       IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_SEQ%TYPE
                            );  
                                                          
                                                                                                                                  
                                     
-- Procedure retorna Rotas que o usuario tem acesso...    
PROCEDURE SP_GETROTASUSUARIO(PUSUARIO IN T_USU_USUARIOROTA.USU_USUARIO_CODIGO%TYPE,
                             PCURSOR  OUT TYPES.CURSORTYPE,
                             PSTATUS  OUT CHAR,
                             PMESSAGE OUT VARCHAR2);                                                                
                             
-- Função utilizada para buscar um ID novo para operação.                
FUNCTION FN_GET_IDOPERACAO( P_ROTA       TDVADM.T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,
                            P_APLICACAO  TDVADM.T_USU_APLICACAO.USU_APLICACAO_CODIGO%Type,
                            P_QRYSTRING  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_PARAMQRYSTR%Type Default ''
                           ) RETURN INTEGER;

                  
-- Procedure utilizada para manter uma quantia pre-deteminada de números disponíveis para ID de operação                                    --
PROCEDURE SP_SET_IDOPERDISP( P_DATA    IN  DATE);

  /********************************************************/
  /*   PROCEDURE PARA CADASTRAMENTO DE FRETE ELETRONICO   */
  /********************************************************/
PROCEDURE SP_GET_INSEREFRETE(P_QRYSTR       IN  CLOB,
                             P_IDCONSULTA   IN  NUMBER,
                             P_ROTA         IN  CHAR,
                             P_CURSOR       OUT T_CURSOR,
                             P_STATUS       OUT CHAR,
                             P_MESSAGE      OUT VARCHAR2);   
                             
                             
  /********************************************************/
  /*   PROCEDURE PARA CADASTRAMENTO DE FRETE ELETRONICO   */
  /********************************************************/
  PROCEDURE SP_GET_INSEREVIAGEM(P_QRYSTR       IN  CLOB,
                                P_IDCONSULTA   IN  NUMBER,
                                P_ROTA         IN  CHAR,
                                P_CURSOR       OUT T_CURSOR,
                                P_STATUS       OUT CHAR,
                                P_MESSAGE      OUT VARCHAR2);                                     

-- Procedure utilizada para buscar um ID válido.                                                                   --
PROCEDURE SP_GETIDVALIDO( P_APLIACACAO     IN  TDVADM.T_USU_APLICACAO.USU_APLICACAO_CODIGO%TYPE,
                          P_ROTA           IN  TDVADM.T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,
                          P_USUARIO        IN  TDVADM.T_USU_USUARIO.USU_USUARIO_CODIGO%TYPE,
                          P_PLACA_CODIGO   IN  TDVADM.T_CAR_VEICULO.CAR_VEICULO_PLACA%TYPE,
                          P_PLACA_SAQUE    IN  TDVADM.T_CAR_CARRETEIRO.CAR_VEICULO_SAQUE%TYPE,
                          P_MOTORCPF       IN  TDVADM.T_CAR_CARRETEIRO.CAR_CARRETEIRO_CPFCODIGO%TYPE,
                          P_MOTORSAQUE     IN  TDVADM.T_CAR_CARRETEIRO.CAR_CARRETEIRO_SAQUE%TYPE,
                          P_IDOPER_CODIGO  OUT VARCHAR2,
                          P_IDOPER_ROTA    OUT TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ROTA%TYPE,
                          P_STS_IDOPER      OUT TDVADM.T_CFE_STATUSFRETEOPER.CFE_STATUSFRETEOPER_STATUS%TYPE,
                          P_TPPAGAMENTO    OUT CHAR,
                          P_TPPROPRIETARIO OUT TDVADM.T_CAR_PROPRIETARIO.CAR_PROPRIETARIO_CLASSANTT%TYPE,
                          P_STATUS         OUT CHAR,
                          P_MESSAGE        OUT VARCHAR2 
                        );


-- Procedure utilizada para retornar um ID através de um código de vale de Frete.                           
procedure sp_get_IdValeFrete( pValeFrete_codigo in  tdvadm.t_con_valefrete.con_conhecimento_codigo%type,
                              pValeFrete_Serie  in  tdvadm.t_con_valefrete.con_conhecimento_serie%type,
                              pValeFrete_Rota   in  tdvadm.t_con_valefrete.glb_rota_codigo%type,
                              pValeFrete_Saque  in  tdvadm.t_con_valefrete.con_valefrete_saque%type,
                              pPropCnpj         in tdvadm.t_car_proprietario.car_proprietario_cgccpfcodigo%type,
                              pMotor_CNPJ       in tdvadm.t_car_carreteiro.car_carreteiro_cpfcodigo%type,
                              pMotor_Saque      in tdvadm.t_car_carreteiro.car_carreteiro_saque%type,
                              pPlaca_codigo     in tdvadm.t_car_veiculo.car_veiculo_placa%type,
                              pPlaca_saque      in tdvadm.t_car_veiculo.car_veiculo_saque%type,
                              pIdRetorno        out tdvadm.t_con_freteoper.con_freteoper_id%type,
                              pIdRota           out tdvadm.t_con_freteoper.con_freteoper_rota%type,
                              pFlagId           out char,
                              pStatus           out char,
                              pMessage          out varchar2 
                             );
       

--Função utilizada para buscar um ID válido, não precisa estár validado, apenas solicitado e não utilizado 
procedure sp_get_idValidacao( pQtdeDiasValid   in  integer,
                              pProp_Cnpj       in  tdvadm.t_car_proprietario.car_proprietario_cgccpfcodigo%type,
                              pMotor_Cpf       in  tdvadm.t_car_carreteiro.car_carreteiro_cpfcodigo%type,
                              pMotor_saque     in  tdvadm.t_car_carreteiro.car_carreteiro_saque%type,
                              pPlaca_Codigo    in  tdvadm.t_car_veiculo.car_veiculo_placa%type,
                              pPlaca_saque     in  tdvadm.t_car_veiculo.car_veiculo_saque%type,
                              pIdRetorno       out tdvadm.t_con_freteoper.con_freteoper_id%type,
                              pIdRota          out tdvadm.t_con_freteoper.con_freteoper_rota%type,
                              pFlagId          out char,
                              pStatus          out char,
                              pMessage         out varchar2
                           ); 
                                  

Procedure Sp_GetIdValido2(p_apliacacao     in  tdvadm.t_usu_aplicacao.usu_aplicacao_codigo%type,
                            p_rota           in  tdvadm.t_glb_rota.glb_rota_codigo%type,
                            p_usuario        in  tdvadm.t_usu_usuario.usu_usuario_codigo%type,
                            p_placa_codigo   in  tdvadm.t_car_veiculo.car_veiculo_placa%type,
                            p_placa_saque    in  tdvadm.t_car_carreteiro.car_veiculo_saque%type,
                            p_motorcpf       in  tdvadm.t_car_carreteiro.car_carreteiro_cpfcodigo%type,
                            p_motorsaque     in  tdvadm.t_car_carreteiro.car_carreteiro_saque%type,
                            p_vfretecodigo   in tdvadm.t_con_valefrete.con_conhecimento_codigo%type,
                            p_vfreteserie    in tdvadm.t_con_valefrete.con_conhecimento_serie%type,
                            p_vfreterota     in tdvadm.t_glb_rota.glb_rota_codigo%type,
                            p_vfretesaque    in tdvadm.t_glb_rota.glb_rota_codigo%type,
                            p_idoper_codigo  out varchar2,
                            p_idoper_rota    out tdvadm.t_con_freteoper.con_freteoper_rota%type,
                            p_sts_idoper     out tdvadm.t_cfe_statusfreteoper.cfe_statusfreteoper_status%type,
                            p_tppagamento    out char,
                            p_tpproprietario out tdvadm.t_car_proprietario.car_proprietario_classantt%type,
                            p_status         out char,
                            p_message        out varchar2 );                                  

Procedure Sp_GetIdValidoGer(p_apliacacao     in  tdvadm.t_usu_aplicacao.usu_aplicacao_codigo%type,
                                p_rota           in  tdvadm.t_glb_rota.glb_rota_codigo%type,
                                p_usuario        in  tdvadm.t_usu_usuario.usu_usuario_codigo%type,
                                p_placa_codigo   in  tdvadm.t_car_veiculo.car_veiculo_placa%type,
                                p_placa_saque    in  tdvadm.t_car_carreteiro.car_veiculo_saque%type,
                                p_motorcpf       in  tdvadm.t_car_carreteiro.car_carreteiro_cpfcodigo%type,
                                p_motorsaque     in  tdvadm.t_car_carreteiro.car_carreteiro_saque%type,
                                p_vfretecodigo   in  tdvadm.t_con_valefrete.con_conhecimento_codigo%type,
                                p_vfreteserie    in  tdvadm.t_con_valefrete.con_conhecimento_serie%type,
                                p_vfreterota     in  tdvadm.t_glb_rota.glb_rota_codigo%type,
                                p_vfretesaque    in  tdvadm.t_glb_rota.glb_rota_codigo%type,
                                p_idoper_codigo  out varchar2,
                                p_idoper_rota    out tdvadm.t_con_freteoper.con_freteoper_rota%type,
                                p_Gererenciadora out varchar2,
                                p_sts_idoper     out tdvadm.t_cfe_statusfreteoper.cfe_statusfreteoper_status%type,
                                p_tppagamento    out char,
                                p_tpproprietario out tdvadm.t_car_proprietario.car_proprietario_classantt%type,
                                p_status         out char,
                                p_message        out varchar2 );
                                                                                     
-- Procedure utilizada para buscar um CIOT.
PROCEDURE SP_GETCIOT(P_APLIACACAO    IN  TDVADM.T_USU_APLICACAO.USU_APLICACAO_CODIGO%TYPE,
                     P_ROTA          IN  TDVADM.T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,
                     P_USUARIO       IN  TDVADM.T_USU_USUARIO.USU_USUARIO_CODIGO%TYPE,
                     P_IDOPER_CODIGO IN OUT VARCHAR2,
                     P_IDOPER_ROTA   IN OUT CHAR,
                     P_VFRETE        IN  T_CON_VALEFRETE.CON_CONHECIMENTO_CODIGO%TYPE,
                     P_VFSERIE       IN  T_CON_VALEFRETE.CON_CONHECIMENTO_SERIE%TYPE,
                     P_VFROTA        IN  T_CON_VALEFRETE.GLB_ROTA_CODIGO%TYPE,
                     P_VFSAQUE       IN  T_CON_VALEFRETE.CON_VALEFRETE_SAQUE%TYPE,
                     P_CIOT          OUT VARCHAR2,
                     P_TPPAGAMENTO   OUT VARCHAR2,
                     P_STATUS        OUT CHAR,
                     P_MESSAGE       OUT VARCHAR2);
 
 PROCEDURE SP_GET_ALTERARSTATUSPARCELA(P_QRYSTR       IN  CLOB,
                                       P_IDCONSULTA   IN  NUMBER,
                                       P_ROTA         IN  CHAR,                           
                                       P_CURSOR       OUT T_CURSOR,
                                       P_STATUS       OUT CHAR,
                                       P_MESSAGE      OUT VARCHAR2); 
 
 PROCEDURE SP_GET_PAGAMENTOPARCELA(P_QRYSTR       IN  CLOB,
                                   P_IDCONSULTA   IN  NUMBER,
                                   P_ROTA         IN  CHAR,                           
                                   P_CURSOR       OUT T_CURSOR,
                                   P_STATUS       OUT CHAR,
                                   P_MESSAGE      OUT VARCHAR2);     
                                   
 PROCEDURE SP_GET_CANCELAFRETE(P_QRYSTR       IN  CLOB,
                               P_IDCONSULTA   IN  NUMBER,
                               P_ROTA         IN  CHAR,                           
                               P_CURSOR       OUT T_CURSOR,
                               P_STATUS       OUT CHAR,
                               P_MESSAGE      OUT VARCHAR2);   
                               
 PROCEDURE SP_SET_ALTERARPARCELA(P_QRYSTR       IN  VARCHAR2,
                                 P_IDCONSULTA   IN  VARCHAR2,
                                 P_ROTA         IN  CHAR, 
                                 P_STATUS       OUT CHAR,
                                 P_MESSAGE      OUT VARCHAR2);
 
  
 PROCEDURE SP_SET_PAGARPARCELA(P_QRYSTR       IN  VARCHAR2,
                               P_IDCONSULTA   IN  VARCHAR2,
                               P_ROTA         IN  CHAR, 
                               P_STATUS       OUT CHAR,
                               P_MESSAGE      OUT VARCHAR2); 
                               
 PROCEDURE SP_SET_CANCELARCIOT(P_QRYSTR       IN  VARCHAR2,
                               P_IDCONSULTA   IN  VARCHAR2,
                               P_ROTA         IN  CHAR, 
                               P_STATUS       OUT CHAR,
                               P_MESSAGE      OUT VARCHAR2);                                                                                             
                  
 FUNCTION Get_RetornoDescricao(P_ID          TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ID%TYPE,                                
                               P_ROTA        TDVADM.T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,      
                               P_OPERACAOWS  TDVADM.T_CON_FRETEOPER.CFE_OPERACOES_COD%TYPE,
                               P_OPERACAOTDV TDVADM.T_CON_FRETEOPER.CFE_INTEGRATDV_COD%TYPE,
                               P_SEQUENCIA   TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_SEQ%TYPE) RETURN VARCHAR2;
  
 PROCEDURE SP_SET_CONSULTARRNTRC(P_QRYSTR       IN CLOB,
                                 P_IDCONSULTA   IN  NUMBER,
                                 P_ROTA         IN  CHAR, 
                                 P_STATUS       OUT CHAR,
                                 P_MESSAGE      OUT VARCHAR2);                                                                                             
                                 
  function fn_Get_MsgPedagio(P_VFRETE  IN  T_CON_VALEFRETE.CON_CONHECIMENTO_CODIGO%TYPE,
                             P_VFSERIE IN  T_CON_VALEFRETE.CON_CONHECIMENTO_SERIE%TYPE,
                             P_VFROTA  IN  T_CON_VALEFRETE.GLB_ROTA_CODIGO%TYPE,
                             P_VFSAQUE IN  T_CON_VALEFRETE.CON_VALEFRETE_SAQUE%TYPE) return varchar2;

  function fn_ExistVerbaCiot(P_VFRETE  IN  T_CON_VALEFRETE.CON_CONHECIMENTO_CODIGO%TYPE,
                             P_VFSERIE IN  T_CON_VALEFRETE.CON_CONHECIMENTO_SERIE%TYPE,
                             P_VFROTA  IN  T_CON_VALEFRETE.GLB_ROTA_CODIGO%TYPE,
                             P_VFSAQUE IN  T_CON_VALEFRETE.CON_VALEFRETE_SAQUE%TYPE) return integer;
                                 
  procedure sp_GravaLogErro(pMsgLog     in  tdvadm.t_log_system.log_system_message%type,
                            pCampoChave in  tdvadm.t_log_system.log_system_campochave%type,
                            pStatus     out char,
                            pMessage    out varchar2);
                                                        

  procedure sp_GetTimeOutRequest(pGerenciadoraCodigo in  tdvadm.t_cfe_gerenbco.cfe_gerenbco_cod%type,
                                 pWMethodoOperacao   in  tdvadm.t_cfe_operacoes.cfe_operacoes_wmethodo%type,
                                 pTimeOut            out VARCHAR2,
                                 pStatus             out char,
                                 pMessage            out varchar2);
                                                                                                              
  
  function fn_EnviaEmailLogErro(pMensagem in varchar2) return boolean;
  
   Procedure SP_VLD_TESTE( P_XMLRETORNO      IN CLOB,
                            P_IDCONSULTA      IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ID%TYPE,
                            P_ROTA            IN  TDVADM.T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,
                            P_CODOPERACAOTDV  IN  VARCHAR2,
                            P_CODOPERACAOWS   IN  VARCHAR2,
                            P_SEQUENCIA       IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_SEQ%TYPE
                          );
  

  -- DBTRANS
  PROCEDURE SP_GET_MANTERVIAGEM(P_QRYSTR       IN  CLOB,
                                P_IDCONSULTA   IN  NUMBER,
                                P_ROTA         IN  CHAR,                           
                                P_CURSOR       OUT T_CURSOR,
                                P_STATUS       OUT CHAR,
                                P_MESSAGE      OUT VARCHAR2);
                                
  PROCEDURE SP_SET_CANCELARCIOTVGM(P_QRYSTR       IN  VARCHAR2,
                                   P_IDCONSULTA   IN  VARCHAR2,
                                   P_ROTA         IN  CHAR, 
                                   P_STATUS       OUT CHAR,
                                   P_MESSAGE      OUT VARCHAR2);        
                                   
  /********************************************************/
  /*       FUNÇÃO PARA RETORNAR O CARTÃO DE PEDAGIO       */
  /********************************************************/
  FUNCTION FN_GET_CARTAOFRETE(P_VALEFRETE IN T_CON_VALEFRETE.CON_CONHECIMENTO_CODIGO%TYPE,
                              P_SERIE     IN T_CON_VALEFRETE.CON_CONHECIMENTO_SERIE%TYPE,
                              P_ROTA      IN T_CON_VALEFRETE.GLB_ROTA_CODIGO%TYPE,
                              P_SAQUE     IN T_CON_VALEFRETE.CON_VALEFRETE_SAQUE%TYPE,
                              P_TPPARCELA IN T_CON_CALCVALEFRETETP.CON_CALCVALEFRETETP_CODIGO%TYPE)RETURN VARCHAR;                                                      

  /********************************************************/
  /*   PROCEDURE PARA CANCELAR A PARCELA                  */
  /********************************************************/
  
  PROCEDURE SP_SET_CANCELARPARCELA(P_QRYSTR       IN  CLOB,
                                   P_IDCONSULTA   IN  NUMBER,
                                   P_ROTA         IN  CHAR,
                                   P_STATUS       OUT CHAR,
                                   P_MESSAGE      OUT VARCHAR2);
  
  
  /********************************************************/
  /*     ALTERAÇÃO DE VALORES DO CONTRATO DE FRETE        */
  /********************************************************/
  PROCEDURE SP_GET_ALTERFRETE(P_QRYSTR       IN  CLOB,
                              P_IDCONSULTA   IN  NUMBER,
                              P_ROTA         IN  CHAR,
                              P_CURSOR       OUT PKG_GLB_COMMON.T_CURSOR,
                              P_STATUS       OUT CHAR,
                              P_MESSAGE      OUT VARCHAR2); 
  
  /********************************************************/
  /*              SOLICITAÇÃO DE ALTERAÇAO CIOT           */
  /********************************************************/
  PROCEDURE SP_SET_ALTERARCIOT(P_QRYSTR       IN  VARCHAR2,
                               P_IDCONSULTA   IN  VARCHAR2,
                               P_ROTA         IN  CHAR, 
                               P_STATUS       OUT CHAR,
                               P_MESSAGE      OUT VARCHAR2);                                                            
                  
  procedure sp_Refresh;
  
  
  /********************************************************/
  /*              CONSULTA DE PEDAGIO NA PANCARY          */
  /********************************************************/
  PROCEDURE SP_SET_CONSULTAPEDROTA(P_QRYSTR       IN  CLOB,
                                   P_IDCONSULTA   IN  NUMBER,
                                   P_ROTA         IN  CHAR, 
                                   P_STATUS       OUT CHAR,
                                   P_MESSAGE      OUT VARCHAR2);
                                   
  /********************************************************/
  /*   GERA ARQUIVO DE CONSULTA DO PEDAGIO NA PANCARY     */
  /********************************************************/
 PROCEDURE SP_GET_CONSULTAPED(P_QryStr        IN  clob,
                               P_IDCONSULTA   IN  NUMBER,
                               P_ROTA         IN  CHAR,
                               P_CURSOR       OUT T_CURSOR,
                               P_STATUS       OUT CHAR,
                               P_MESSAGE      OUT VARCHAR2);   
                               

  /********************************************************/
  /*     VALIDA ASCONSULTA DE PEDAGIO NA PANCARY          */
  /********************************************************/
  procedure SP_VLD_CONSULTAPED( P_XMLRETORNO      IN  CLOB,
                                P_IDCONSULTA      IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ID%TYPE,
                                P_ROTA            IN  TDVADM.T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,
                                P_CODOPERACAOTDV  IN  VARCHAR2,
                                P_CODOPERACAOWS   IN  VARCHAR2,
                                P_SEQUENCIA       IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_SEQ%TYPE
                              );                                                               
  
  /********************************************************/
  /*           GERA AS CONSULTAS DO PEDAGIO NA PANCARY    */
  /********************************************************/
  PROCEDURE SP_SLF_ATUPEDAGIO;


  /****************************************************************/
  /*   PEGA O VALOR DO PEDAGIO SE NÃO ACHOU RETORNA -1 NO VALOR   */
  /****************************************************************/
  FUNCTION FN_GET_VALORPED(P_LOCORIGEM     IN CHAR,
                           P_LOCDESTINO    IN CHAR,
                           P_LOCPASSANDOPO IN CHAR,
                           P_DATA          IN CHAR DEFAULT trunc(sysdate))
      RETURN NUMBER;


  /****************************************************************/
  /*       INSERE UMA SOLICITAÇÃO OU PELA UMA ATUALIZACAO         */
  /****************************************************************/
 PROCEDURE SP_SET_SOLICITAPED(P_LOCORIGEM in char,
                              P_LOCDESTINO in char,
                              P_LOCPASSANDOPO in char);


  /****************************************************************/
  /*       SOLICITA UM APEDAGIO                                   */
  /****************************************************************/
 PROCEDURE sp_get_valorpedagio(P_LOCORIGEM     IN  CHAR,
                               P_LOCDESTINO    IN  CHAR,
                               P_LOCPASSANDOPO IN  CHAR,
                               P_DATA          IN  CHAR DEFAULT trunc(sysdate),
                               P_ESPERA        IN  CHAR DEFAULT 'N',
                               P_VALOR         OUT char,
                               P_STATUS        OUT CHAR,
                               P_MESSAGE       OUT VARCHAR2);   

  /****************************************************************/
  /*         CRIA  OS PARAMETRO DE INTEGRAÇÃO                     */
  /****************************************************************/
 PROCEDURE SP_GET_CONSULTASTFRETE(P_QryStr       IN  clob,
                                  P_IDCONSULTA   IN  NUMBER,
                                  P_ROTA         IN  CHAR,
                                  P_CURSOR       OUT PKG_CFE_FRETE.T_CURSOR,
                                  P_STATUS       OUT CHAR,
                                  P_MESSAGE      OUT VARCHAR2);

  /****************************************************************/
  /*         CRIA A INTEGRAÇÃO                                    */
  /****************************************************************/ 
 PROCEDURE SP_SET_CONSULTASTFRETE(P_QRYSTR       IN  CLOB,
                                  P_IDCONSULTA   IN  NUMBER,
                                  P_ROTA         IN  CHAR,
                                  P_STATUS       OUT CHAR,
                                  P_MESSAGE      OUT VARCHAR2);
                                  
  /****************************************************************/
  /*         VALIDA A INTEGRAÇÃO                                  */
  /****************************************************************/  
 PROCEDURE SP_VLD_CONSULTASEFRETE( P_XMLRETORNO      IN  CLOB,
                                   P_IDCONSULTA      IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ID%TYPE,
                                   P_ROTA            IN  TDVADM.T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,
                                   P_CODOPERACAOTDV  IN  VARCHAR2,
                                   P_CODOPERACAOWS   IN  VARCHAR2,
                                   P_SEQUENCIA       IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_SEQ%TYPE
                                  );    
 
  /****************************************************************/
  /*         VALIDA A INTEGRAÇÃO                                  */
  /****************************************************************/  
  PROCEDURE SP_GET_CONSULTASTPARCEL(P_QryStr       IN  clob,
                                    P_IDCONSULTA   IN  NUMBER,
                                    P_ROTA         IN  CHAR,
                                    P_CURSOR       OUT T_CURSOR,
                                    P_STATUS       OUT CHAR,
                                    P_MESSAGE      OUT VARCHAR2);   
 
 
  PROCEDURE SP_SET_STATUSPARCELA(P_QRYSTR       IN  VARCHAR2,
                                 P_IDCONSULTA   IN  VARCHAR2,
                                 P_ROTA         IN  CHAR,
                                 P_STATUS       OUT CHAR,
                                 P_MESSAGE      OUT VARCHAR2);
  
  
  PROCEDURE SP_VLD_STPARCELA( P_XMLRETORNO      IN CLOB,
                              P_IDCONSULTA      IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ID%TYPE,
                              P_ROTA            IN  TDVADM.T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,
                              P_CODOPERACAOTDV  IN  VARCHAR2,
                              P_CODOPERACAOWS   IN  VARCHAR2,
                              P_SEQUENCIA       IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_SEQ%TYPE
                            );   
                            
  PROCEDURE SP_GET_STATUSOPERACOES(P_CURSOR   OUT T_CURSOR,
                                   P_STATUS   OUT CHAR,
                                   P_MESSAGEM OUT VARCHAR2);
                                   
  PROCEDURE SP_GET_STATUSEMPRESA(P_CURSOR   OUT T_CURSOR,
                                 P_STATUS   OUT CHAR,
                                 P_MESSAGEM OUT VARCHAR2);
                                 
  PROCEDURE SP_SET_INTEGRAVFPED(P_QRYSTR       IN  varchar2,
                                P_IDCONSULTA   IN  VARCHAR2,
                                P_ROTA         IN  CHAR,
                                P_STATUS       OUT CHAR,
                                P_MESSAGE      OUT VARCHAR2);
  
  
 PROCEDURE SP_GET_INSERIRVIAGEMPED(P_QryStr       IN  clob,
                                    P_IDCONSULTA   IN  NUMBER,
                                    P_ROTA         IN  CHAR,
                                    P_CURSOR       OUT pkg_cfe_frete.T_CURSOR,
                                    P_STATUS       OUT CHAR,
                                    P_MESSAGE      OUT VARCHAR2);
 
  PROCEDURE SP_VLD_INSERIRVIAGEMPED(P_XMLRETORNO      IN CLOB,
                                    P_IDCONSULTA      IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ID%TYPE,
                                    P_ROTA            IN  TDVADM.T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,
                                    P_CODOPERACAOTDV  IN  VARCHAR2,
                                    P_CODOPERACAOWS   IN  VARCHAR2,
                                    P_SEQUENCIA       IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_SEQ%TYPE); 
  
  PROCEDURE SP_SET_CANCELARPED(P_QRYSTR       IN  VARCHAR2,
                               P_IDCONSULTA   IN  VARCHAR2,
                               P_ROTA         IN  CHAR,
                               P_STATUS       OUT CHAR,
                               P_MESSAGE      OUT VARCHAR2);
  
  PROCEDURE SP_GET_CANCELARVIAGEMPED(P_QryStr       IN  clob,
                                     P_IDCONSULTA   IN  NUMBER,
                                     P_ROTA         IN  CHAR,
                                     P_CURSOR       OUT PKG_CFE_FRETE.T_CURSOR,
                                     P_STATUS       OUT CHAR,
                                     P_MESSAGE      OUT VARCHAR2);
  
  PROCEDURE SP_VLD_CANCELARVIAGEMPED(P_XMLRETORNO      IN CLOB,
                                     P_IDCONSULTA      IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ID%TYPE,
                                     P_ROTA            IN  TDVADM.T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,
                                     P_CODOPERACAOTDV  IN  VARCHAR2,
                                     P_CODOPERACAOWS   IN  VARCHAR2,
                                     P_SEQUENCIA       IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_SEQ%TYPE); 
  
  PROCEDURE SP_SET_ALTERARPARCELAVGM(P_QRYSTR       IN  VARCHAR2,
                                     P_IDCONSULTA   IN  VARCHAR2,
                                     P_ROTA         IN  CHAR,
                                     P_STATUS       OUT CHAR,
                                     P_MESSAGE      OUT VARCHAR2);
  
  PROCEDURE SP_SET_PAGARPARCELAVGM(P_QRYSTR       IN  VARCHAR2,
                                   P_IDCONSULTA   IN  VARCHAR2,
                                   P_ROTA         IN  CHAR,
                                   P_STATUS       OUT CHAR,
                                   P_MESSAGE      OUT VARCHAR2);
                                   
  PROCEDURE SP_GET_PAGPARCELAVGM(P_QRYSTR       IN  CLOB,
                                 P_IDCONSULTA   IN  NUMBER,
                                 P_ROTA         IN  CHAR,
                                 P_CURSOR       OUT T_CURSOR,
                                 P_STATUS       OUT CHAR,
                                 P_MESSAGE      OUT VARCHAR2) ;
  
  PROCEDURE SP_VLD_PGTOPARCELAVGM( P_XMLRETORNO      IN  CLOB,
                                   P_IDCONSULTA      IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ID%TYPE,
                                   P_ROTA            IN  TDVADM.T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,
                                   P_CODOPERACAOTDV  IN  VARCHAR2,
                                   P_CODOPERACAOWS   IN  VARCHAR2,
                                   P_SEQUENCIA       IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_SEQ%TYPE
                                 );
  
  PROCEDURE SP_GET_ALTSTATUSPARCELAVGM(P_QRYSTR       IN  CLOB,
                                       P_IDCONSULTA   IN  NUMBER,
                                       P_ROTA         IN  CHAR,
                                       P_CURSOR       OUT T_CURSOR,
                                       P_STATUS       OUT CHAR,
                                       P_MESSAGE      OUT VARCHAR2);
  
  PROCEDURE SP_VLD_ALTRSTATUSPARCVGM( P_XMLRETORNO      IN  CLOB,
                                      P_IDCONSULTA      IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ID%TYPE,
                                      P_ROTA            IN  TDVADM.T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,
                                      P_CODOPERACAOTDV  IN  VARCHAR2,
                                      P_CODOPERACAOWS   IN  VARCHAR2,
                                      P_SEQUENCIA       IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_SEQ%TYPE
                                    );  
                                    
  PROCEDURE SP_GETPROPERTIES_FTP(P_TIPO_CODIGO NUMBER,
                                 P_STATUS OUT CHAR,
                                 P_MESSAGE OUT VARCHAR2,
                                 P_CURSOR  OUT TYPES.cursorType);
                                 
  PROCEDURE SP_GET_STATUSONOFF(P_IPLOCAL     IN  VARCHAR2,
                               P_STATUSONOFF OUT VARCHAR2,
                               P_STATUS      OUT CHAR,
                               P_MESSAGE     OUT VARCHAR2);
  
  PROCEDURE SP_GET_INCONTINGENCIA(P_IPLOCAL        IN  VARCHAR2,
                                  P_INCONTINGENCIA OUT CHAR,
                                  P_STATUS         OUT CHAR,
                                  P_MESSAGE        OUT VARCHAR2);  

  PROCEDURE SP_SET_MAQUINAONOFF(P_IPLOCAL        IN  VARCHAR2,
                                P_ONLINE         IN  CHAR,
                                P_STATUS         OUT CHAR,
                                P_MESSAGE        OUT VARCHAR2);   
  
  PROCEDURE SP_SET_CONTINGENCIA(P_IPLOCAL        IN  VARCHAR2,
                                P_STATUS         OUT CHAR,
                                P_MESSAGE        OUT VARCHAR2);
                                
  PROCEDURE SP_SET_RESTORECONTINGENCIA(P_IPLOCAL        IN  VARCHAR2,
                                       P_STATUS         OUT CHAR,
                                       P_MESSAGE        OUT VARCHAR2);                               
  
  Function Fn_GetCpfMotorista(pConjunto t_frt_conjveiculo.frt_conjveiculo_codigo%type) return varchar2;        
  
  Procedure Sp_Set_Integravffrota(p_qrystr       in  varchar2,
                                  p_idconsulta   in  varchar2,
                                  p_rota         in  char,
                                  p_status       out char,
                                  p_message      out varchar2);  
  
  Procedure Sp_Get_InserirViagemFrota(p_qrystr       in  clob,
                                      p_idconsulta   in  number,
                                      p_rota         in  char,
                                      p_cursor       out pkg_cfe_frete.t_cursor,
                                      p_status       out char,
                                      p_message      out varchar2);     
  
  procedure Sp_Vld_Consultaciotfrota(p_xmlretorno      in clob,
                                     p_idconsulta      in  tdvadm.t_con_freteoper.con_freteoper_id%type,
                                     p_rota            in  tdvadm.t_glb_rota.glb_rota_codigo%type,
                                     p_codoperacaotdv  in  varchar2,
                                     p_codoperacaows   in  varchar2,
                                     p_sequencia       in  tdvadm.t_con_freteoper.con_freteoper_seq%type); 
  
  Procedure Sp_Get_PgtoFrota(p_Frota   in  t_frt_conjveiculo.frt_conjveiculo_codigo%type,
                             p_Status  out char,
                             p_Message out varchar2);                                                                                                                             
  
  
  Procedure Sp_Get_IdValidacaoFrota(pQtdeDiasValid   in  integer,
                                    pProp_Cnpj       in  tdvadm.t_car_proprietario.car_proprietario_cgccpfcodigo%type,
                                    pMotor_Cpf       in  tdvadm.t_car_carreteiro.car_carreteiro_cpfcodigo%type,
                                    pMotor_saque     in  tdvadm.t_car_carreteiro.car_carreteiro_saque%type,
                                    pPlaca_Codigo    in  tdvadm.t_car_veiculo.car_veiculo_placa%type,
                                    pPlaca_saque     in  tdvadm.t_car_veiculo.car_veiculo_saque%type,
                                    pIdRetorno       out tdvadm.t_con_freteoper.con_freteoper_id%type,
                                    pIdRota          out tdvadm.t_con_freteoper.con_freteoper_rota%type,
                                    pFlagId          out char,
                                    pStatus          out char,
                                    pMessage         out varchar2);
  
  /********************************** Rotinas Frete Comum **********************************/                                    
                                    
  Procedure Sp_Set_InsereTpRegTxt(P_INSERT       In Out pkg_cfe_frete.TpRegTxt,
                                  P_IDCONSULTA   IN Number,
                                  P_ROTA         IN Char,
                                  P_INTEGRACHAVE IN Varchar2,
                                  P_INTEGRAVALOR IN Varchar2,
                                  P_STATUS       OUT CHAR,
                                  P_MESSAGE      OUT VARCHAR2);  
                                  
  Procedure Sp_Set_DeleteTpRegTxt(P_IDCONSULTA   IN Number,
                                  P_ROTA         IN Char,
                                  P_STATUS       OUT CHAR,
                                  P_MESSAGE      OUT VARCHAR2);   
                                  
  Procedure Sp_Get_CursorTpRegTxt(P_IDCONSULTA   IN  NUMBER,
                                  P_ROTA         IN  CHAR,
                                  P_CURSOR       OUT PKG_CFE_FRETE.T_CURSOR,
                                  P_STATUS       OUT CHAR,
                                  P_MESSAGE      OUT VARCHAR2);  
                                  
  Function Fn_Get_RNTRCProprietario(P_QryStr   IN  clob,
                                    P_CPFCNPJ  IN  T_CAR_PROPRIETARIO.CAR_PROPRIETARIO_CGCCPFCODIGO%Type) Return T_CAR_PROPRIETARIO.CAR_PROPRIETARIO_RNTRC%Type;  
                                     
  Function Fn_Get_CodigoTipoProprietario(P_CPFCNPJ T_CAR_PROPRIETARIO.CAR_PROPRIETARIO_CGCCPFCODIGO%Type) Return Varchar2;   
  
  Function Fn_Get_CodigoTipoRNTRC(P_CPFCNPJ T_CAR_PROPRIETARIO.CAR_PROPRIETARIO_CGCCPFCODIGO%Type)Return Varchar2;                                  
  
  Function Fn_Get_VlrTransfSaque(pValeFrete in t_con_valefrete.con_conhecimento_codigo%type,
                                 pSerie     in t_con_valefrete.con_conhecimento_serie%type,
                                 pRota      in t_con_valefrete.glb_rota_codigo%type,
                                 pSaque     in t_con_valefrete.con_valefrete_saque%type)return number;
                                 
  
  /*********************************************************/
  /*************  consulta e-social valida *****************/
  /*********************************************************/
  procedure Sp_Set_ConsultaESocial(pCpf     in tdvadm.t_car_proprietario.car_proprietario_cgccpfcodigo%type,
                                   pStatus  out char,
                                   pMessage out varchar2);
                                   
  /*********************************************************/
  /************* Parcelas antigas          *****************/
  /*********************************************************/
  procedure Sp_Get_Inserirviagempa(p_qrystr       in  clob,
                                   p_idconsulta   in  number,
                                   p_rota         in  char,
                                   p_cursor       out tdvadm.pkg_cfe_frete.t_cursor,
                                   p_status       out char,
                                   p_message      out varchar2);
  
  
  
  /*********************************************************/
  /************* Parcelas antigas          *****************/
  /*********************************************************/
  procedure Sp_Vld_InserirViagemPA(p_xmlretorno      in clob,
                                   p_idconsulta      in tdvadm.t_con_freteoper.con_freteoper_id%type,
                                   p_rota            in tdvadm.t_glb_rota.glb_rota_codigo%type,
                                   p_codoperacaotdv  in varchar2,
                                   p_codoperacaows   in varchar2,
                                   p_sequencia       in tdvadm.t_con_freteoper.con_freteoper_seq%type); 


  /*********************************************************/
  /************* Parcelas antigas          *****************/
  /*********************************************************/
  Procedure Sp_Set_Criaviagemavulsa(p_qrystr       in  varchar2,
                                    p_idconsulta   in  varchar2,
                                    p_rota         in  char,
                                    p_status       out char,
                                    p_message      out varchar2);                                                                                                     
                                  
END PKG_CFE_FRETE;

 
/
CREATE OR REPLACE PACKAGE BODY TDVADM.PKG_CFE_FRETE IS
  /***************************************************************************************************
  * ROTINA           :                                                                               *
  * PROGRAMA         :                                                                               *
  * ANALISTA         :                                                                               *
  * DESENVOLVEDOR    :                                                                               *
  * DATA DE CRIACAO  :                                                                               *
  * BANCO            : ORACLE-TDP                                                                    *
  * EXECUTADO POR    :                                                                               *
  * ALIMENTA         :                                                                               *
  * FUNCINALIDADE    :                                                                               *
  * ATUALIZA         :                                                                               *
  * PARTICULARIDADES :                                                                               *
  * PARAM. OBRIGAT.  :                                                                               *
  ****************************************************************************************************/

 

  FUNCTION FN_GET_NEXTSEQREG(P_ID IN NUMBER, P_ROTA IN CHAR )RETURN NUMBER IS
  V_SEQUENCIA NUMBER;
  BEGIN
 
    BEGIN

    SELECT NVL(MAX(L.UTI_VFINTEGRA_SEQ),0)+1
      INTO V_SEQUENCIA
      FROM T_UTI_VFINTEGRA L
     WHERE L.CON_FRETEOPER_ID = P_ID
       AND L.CON_FRETEOPER_ROTA = P_ROTA;

    EXCEPTION WHEN OTHERS THEN
      V_SEQUENCIA := 0;
    END;

    RETURN V_SEQUENCIA;

  END FN_GET_NEXTSEQREG;


  FUNCTION FN_GET_CONSRNTRC(P_ID IN NUMBER, P_XML IN CLOB) RETURN TpRegRntrc IS
  V_REGISTRO TpRegRntrc;
  V_STATUS   INTEGER;
  BEGIN
      FOR R_CURSOR IN (SELECT extractvalue(VALUE(Params), 'ResponseToRow/Chave') Chave,
                              extractvalue(VALUE(Params), 'ResponseToRow/Valor') Valor
                     FROM Table(XMLSequence(Extract(XMLTYPE.createXML(P_XML),'/ResponseTo/ResponseToRow'))) Params)
      LOOP
          IF (R_CURSOR.CHAVE = 'mensagem.codigo') AND (R_CURSOR.VALOR = '0') THEN
             V_STATUS := 1;
          END IF;

          IF (R_CURSOR.CHAVE = 'mensagem.codigo') AND (R_CURSOR.VALOR = '2') THEN
             RETURN V_REGISTRO;
          END IF;

          IF (R_CURSOR.CHAVE = 'mensagem.codigo') AND (R_CURSOR.VALOR = '4') THEN
             RETURN V_REGISTRO;
          END IF;

          IF (R_CURSOR.CHAVE = 'viagem.antt.rntrc.validade') AND (V_STATUS = 1) THEN
              V_REGISTRO.RegRntrcValidade :=  TO_DATE(R_CURSOR.VALOR,'DD/MM/YYYY');
          END IF;

          IF (R_CURSOR.CHAVE = 'viagem.antt.rntrc.tipo') AND (V_STATUS = 1) THEN
             V_REGISTRO.RegRntrcTipo := R_CURSOR.VALOR;
          END IF;

          IF (R_CURSOR.CHAVE = 'viagem.antt.rntrc.situacao') AND (V_STATUS = 1)  THEN
             V_REGISTRO.RegRntrcSituacao := R_CURSOR.VALOR;
          END IF;

          IF (R_CURSOR.CHAVE = 'viagem.antt.rntrc.equiparado.tac') AND (V_STATUS = 1)  THEN
             V_REGISTRO.RegRntrcEquiparado := substr(R_CURSOR.VALOR,1,1);
          END IF;
      END LOOP;

      RETURN V_REGISTRO;

  END FN_GET_CONSRNTRC;
  

  ---------------------------------------------------------------------------------------------------------------------   
  -- PROCEDURE UTILIZADA PARA RECUPERAR UM CURSOR COM OS DADOS DO ARQUIVO XML DE CONSULTA DE UM RNTRC                -- 
  --------------------------------------------------------------------------------------------------------------------- 
  PROCEDURE SP_GET_CONSRNTRC( P_ID      IN   TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ID%TYPE,
                              P_ROTA    IN   TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ROTA%TYPE,
                              P_STATUS  OUT  CHAR,
                              P_MESSAGE OUT  VARCHAR2,
                              P_CURSOR OUT  TDVADM.PKG_GLB_COMMON.T_CURSOR
                            ) AS 
   --Variável do tipo cLob, utilizada para recuperar o arquivo XML do freteOper.                         
   vXml cLob;
  BEGIN
    --Inicializo as variáveis utilizadas nessa procedure.
    vXml := empty_clob();
    
    begin
      Select 
        oper.con_freteoper_msgret 
      into   
        vXml
      from 
        t_con_freteoper oper
      where 0=0
       and oper.con_freteoper_id   = P_ID
       and oper.con_freteoper_rota = P_ROTA
-- original trocado hoje Sirlano 30/01/2012
--       and oper.cfe_integratdv_cod = 1
       and oper.cfe_integratdv_cod IN (1,19)
       and oper.cfe_operacoes_cod  = 16;  
      
    exception
      --caso ocorra algum erro durante a busca do arquivo xml.
      when others then
        P_STATUS := pkg_glb_common.Status_Erro;
        P_MESSAGE := 'Erro ao buscar Arquivo Xml para consulta' || chr(13) || sqlerrm;
        return;
    end;
    
    --Verifico se a variável xml retornou com conteudo.
    if (nvl( Trim(vXml), 'R') <> 'R') then
      --Seto as variável de retorno
      P_STATUS := pkg_glb_common.Status_Erro;
      P_MESSAGE := 'Arquivo XML não encontrado.';
      
      --Gero um cursor apenas para garantir que não terá erro no front-end.
      open P_CURSOR for 
        Select 
          'x'  chave,
          'x' Valor
         from dual; 
    end if;
      
    
    
    begin
      --abro o cursor a partir do arquivo XML que foi encontrado na tabela de operações.
      open P_CURSOR  for
        SELECT 
          extractvalue(VALUE(Params), 'ResponseToRow/Chave') Chave,
          extractvalue(VALUE(Params), 'ResponseToRow/Valor') Valor
        FROM 
          Table(XMLSequence(Extract(XMLTYPE.createXML(vXml),'/ResponseTo/ResponseToRows/ResponseToRow'))) Params; 
      
      P_STATUS := pkg_glb_common.Status_Nomal;
      P_MESSAGE := '';
    Exception
      when others then
        --caso ocorra algum erro durante a abertura do cursor.
        P_STATUS := pkg_glb_common.Status_Erro;
        P_MESSAGE := 'Erro ao gerar cursor. ' || chr(13) || sqlerrm;
        return;
    end;
    
  
 
  END SP_GET_CONSRNTRC;                             
                              

  FUNCTION FN_GET_IDVALIDO(P_ID IN NUMBER, P_ROTA IN CHAR )RETURN VARCHAR2 AS
  V_IDVALIDO CHAR(2);
  BEGIN
    BEGIN

      V_IDVALIDO := '';
      FOR R_CURSOR IN(SELECT K.CFE_STATUSFRETEOPER_STATUS,
                               K.CFE_INTEGRATDV_COD        ,
                               K.CFE_OPERACOES_COD
                          FROM T_CON_FRETEOPER K,
                               T_CFE_INTEGRATDV IT
                          WHERE K.CON_FRETEOPER_ID    = P_ID
                            AND K.CON_FRETEOPER_ROTA  = P_ROTA
                            AND IT.CFE_INTEGRATDV_COD = K.CFE_INTEGRATDV_COD
                            AND NVL(IT.CFE_INTEGRATDV_OPERUSUARIO,'S') = 'N')
      LOOP
         
         IF R_CURSOR.CFE_STATUSFRETEOPER_STATUS <> 'OK' THEN
            V_IDVALIDO := 'IV';
            RETURN V_IDVALIDO;
         ELSE
            IF NVL(V_IDVALIDO,'N') <> 'I' THEN
               V_IDVALIDO := 'OK';
            END IF;  
         END IF;
         
      END LOOP;
      
      RETURN NVL(V_IDVALIDO,'IV');
      
    exception when others then
      RETURN 'I';
    end;

  END FN_GET_IDVALIDO;
  
  FUNCTION FN_GET_IBGE(P_LOCALIDADE IN T_GLB_LOCALIDADE.GLB_LOCALIDADE_CODIGO%TYPE )RETURN T_GLB_LOCALIDADE.GLB_LOCALIDADE_CODIGOIBGE%TYPE AS
  V_IBGE  T_GLB_LOCALIDADE.GLB_LOCALIDADE_CODIGOIBGE%TYPE;
  
  BEGIN
      who_called_me2;


    BEGIN
      SELECT LO.GLB_LOCALIDADE_CODIGOIBGE
        INTO V_IBGE
        FROM T_GLB_LOCALIDADE LO
       WHERE LO.GLB_LOCALIDADE_CODIGO = P_LOCALIDADE
         AND LO.GLB_LOCALIDADE_CODIGOIBGE IS NOT NULL; 
    EXCEPTION WHEN OTHERS THEN
      V_IBGE := '0000000';
    END;
         
    RETURN V_IBGE;
  
  END FN_GET_IBGE;    

  FUNCTION FN_GET_CATEGORIAVEIC(P_PLACA IN T_CAR_VEICULO.CAR_VEICULO_PLACA%TYPE,
                                P_SAQUE IN T_CAR_VEICULO.CAR_VEICULO_SAQUE%TYPE)RETURN VARCHAR2 AS
  V_TPVEIC  T_CAR_TPVEICULO.CFE_CATEGORIAVEICULO_ID%TYPE;
  
  BEGIN
      who_called_me2;


    BEGIN
      
      SELECT TP.CFE_CATEGORIAVEICULO_ID
        INTO V_TPVEIC
        FROM T_CAR_VEICULO V,
             T_CAR_TPVEICULO TP
       WHERE V.CAR_TPVEICULO_CODIGO = TP.CAR_TPVEICULO_CODIGO
         AND V.CAR_VEICULO_PLACA    = P_PLACA   
         AND V.CAR_VEICULO_SAQUE    = P_SAQUE;
           
    EXCEPTION WHEN OTHERS THEN
      V_TPVEIC := '6';
    END;
         
    RETURN TRIM(V_TPVEIC);
  
  END FN_GET_CATEGORIAVEIC;
  
  FUNCTION FN_GET_TIPOCARGA(P_VFRETE IN T_CON_VALEFRETE.CON_CONHECIMENTO_CODIGO%TYPE,
                            P_SERIE  IN T_CON_VALEFRETE.CON_CONHECIMENTO_SERIE%TYPE,
                            P_ROTA   IN T_CON_VALEFRETE.GLB_ROTA_CODIGO%TYPE,
                            P_SAQUE  IN T_CON_VALEFRETE.CON_VALEFRETE_SAQUE%TYPE,
                            P_TIPOVF IN CHAR)RETURN INTEGER AS
  V_DATA         DATE;
  V_TPCARGA      INTEGER;
  V_REMETENTE    T_GLB_CLIENTE.GLB_CLIENTE_CGCCPFCODIGO%TYPE;
  V_DESTINATARIO T_GLB_CLIENTE.GLB_CLIENTE_CGCCPFCODIGO%TYPE;
  
  V_DIFERR         INTEGER;
  V_DIFDEST        INTEGER;
  
  BEGIN
   BEGIN
    
    V_DIFERR   := 0;
    V_DIFDEST  := 0;
    
    /**************  SE CONHECIMENTO **************/
    IF P_TIPOVF <> '18' THEN
    
    FOR R_CURSOR IN (SELECT C.CON_CONHECIMENTO_CODIGO        ,
                            C.CON_CONHECIMENTO_SERIE         ,
                            C.GLB_ROTA_CODIGO                ,
                            CH.GLB_CLIENTE_CGCCPFREMETENTE   ,
                            CH.GLB_CLIENTE_CGCCPFDESTINATARIO
                       FROM T_CON_VFRETECONHEC C,
                            T_CON_CONHECIMENTO CH
                       WHERE C.CON_VALEFRETE_CODIGO     = P_VFRETE
                         AND C.CON_VALEFRETE_SERIE      = P_SERIE 
                         AND C.GLB_ROTA_CODIGOVALEFRETE = P_ROTA  
                         AND C.CON_VALEFRETE_SAQUE      = P_SAQUE
                         AND C.CON_CONHECIMENTO_CODIGO  = CH.CON_CONHECIMENTO_CODIGO
                         AND C.CON_VALEFRETE_SERIE      = CH.CON_CONHECIMENTO_SERIE
                         AND C.GLB_ROTA_CODIGO          = CH.GLB_ROTA_CODIGO)
    LOOP

      -- REMETENTE
      IF V_REMETENTE IS NULL THEN
         V_REMETENTE := R_CURSOR.GLB_CLIENTE_CGCCPFREMETENTE;
      END IF;
      
      -- DESTINATARIO
      IF V_DESTINATARIO IS NULL THEN
         V_DESTINATARIO := R_CURSOR.GLB_CLIENTE_CGCCPFDESTINATARIO;
      END IF;

      -- SE TEM ALGUM DIFERENTE
      IF V_REMETENTE <> R_CURSOR.GLB_CLIENTE_CGCCPFREMETENTE THEN
         V_DIFERR := V_DIFERR + 1;
      END IF;
      
      -- SE TEM ALGUM DIFERENTE
      IF V_DESTINATARIO <> R_CURSOR.GLB_CLIENTE_CGCCPFDESTINATARIO THEN
         V_DIFDEST := V_DIFDEST + 1;
      END IF;
    
    END LOOP;    
    
    /**************  SE COLETA *****************/
    ELSE
      
    FOR R_CURSOR2 IN (SELECT AR.ARM_COLETA_NCOMPRA            ,
                             AR.ARM_ARMAZEM_CODIGO            ,
                            AR.GLB_CLIENTE_CGCCPFCODIGOCOLETA ,
                            AR.GLB_CLIENTE_CGCCPFCODIGOENTREG
                       FROM T_CON_VFRETECOLETA C,
                            T_ARM_COLETA AR
                       WHERE C.CON_VALEFRETE_CODIGO     = P_VFRETE
                         AND C.CON_VALEFRETE_SERIE      = P_SERIE 
                         AND C.GLB_ROTA_CODIGOVALEFRETE = P_ROTA  
                         AND C.CON_VALEFRETE_SAQUE      = P_SAQUE
                         AND C.ARM_COLETA_NCOMPRA       = AR.ARM_COLETA_NCOMPRA
                         and c.arm_coleta_ciclo = ar.arm_coleta_ciclo)
    LOOP

      -- REMETENTE
      IF V_REMETENTE IS NULL THEN
         V_REMETENTE := R_CURSOR2.GLB_CLIENTE_CGCCPFCODIGOCOLETA;
      END IF;
      
      -- DESTINATARIO
      IF V_DESTINATARIO IS NULL THEN
         V_DESTINATARIO := R_CURSOR2.GLB_CLIENTE_CGCCPFCODIGOENTREG;
      END IF;

      -- SE TEM ALGUM DIFERENTE
      IF V_REMETENTE <> R_CURSOR2.GLB_CLIENTE_CGCCPFCODIGOCOLETA THEN
         V_DIFERR := V_DIFERR + 1;
      END IF;
      
      -- SE TEM ALGUM DIFERENTE
      IF V_DESTINATARIO <> R_CURSOR2.GLB_CLIENTE_CGCCPFCODIGOENTREG THEN
         V_DIFDEST := V_DIFDEST + 1;
      END IF;
    
    END LOOP; 
     
    END IF;
    
    EXCEPTION WHEN OTHERS THEN
      
      V_TPCARGA := 2;
    
    END;
    
    
    IF (V_DIFERR > 0) THEN
       V_TPCARGA := 2;
    ELSIF (V_DIFERR = 0) AND (V_DIFDEST = 0) THEN        
       V_TPCARGA := 1;
    END IF;

    
    RETURN V_TPCARGA;
  
  END FN_GET_TIPOCARGA;
  
  /*******************************************************************/
  /************** FUNÇÃO RETORNA SE PODE ALTERAR O VALE DE FRETE *****/
  /*******************************************************************/
  
  FUNCTION FN_GET_PODEALTERAR(P_VFRETE IN T_CON_VALEFRETE.CON_CONHECIMENTO_CODIGO%TYPE,
                              P_SERIE  IN T_CON_VALEFRETE.CON_CONHECIMENTO_SERIE%TYPE,
                              P_ROTA   IN T_CON_VALEFRETE.GLB_ROTA_CODIGO%TYPE,
                              P_SAQUE  IN T_CON_VALEFRETE.CON_VALEFRETE_SAQUE%TYPE)RETURN CHAR AS
  vExisteBloq INTEGER;
  vTotalBloqueios Integer;
  vRetorno Char;
  BEGIN                  
    
    
    vExisteBloq := 0;
    vTotalBloqueios := 0;
    /**********************************************************/
    /**********SE EXISTE NA TABELA DE SOLICITAÇAO DE CIOT *****/
    /**********************************************************/
     SELECT COUNT(*)
       INTO vExisteBloq
       FROM T_CON_VFRETESOLCIOT L
      WHERE L.CON_CONHECIMENTO_CODIGO = P_VFRETE
        AND L.CON_CONHECIMENTO_SERIE  = P_SERIE
        AND L.GLB_ROTA_CODIGO         = P_ROTA
        AND L.CON_VALEFRETE_SAQUE     = P_SAQUE;
    /**********************************************************/    
    
     vTotalBloqueios := vTotalBloqueios + vExisteBloq;
    
    /**********************************************************/
    /**********SE EXISTE NA TABELA DE SOLICITAÇAO DE CIOT *****/
    /**********************************************************/
     SELECT COUNT(*)
       INTO vExisteBloq
       FROM T_CON_VFRETECIOT C
      WHERE C.CON_CONHECIMENTO_CODIGO = P_VFRETE
        AND C.CON_CONHECIMENTO_SERIE  = P_SERIE
        AND C.GLB_ROTA_CODIGO         = P_ROTA
        AND C.CON_VALEFRETE_SAQUE     = P_SAQUE
        And NVL(c.con_vfreteciot_flagaltera,'S') = 'N'; 
        -- verifica se o Flagaltera ou melhor ele será S quando tiver que enviar para a 
        -- Seguradora/gerenciadora e não tem que pedir para liberar a alteracao.
    /**********************************************************/    

     vTotalBloqueios := vTotalBloqueios + vExisteBloq;
    
    IF vTotalBloqueios > 0 THEN
       vRetorno := 'N';
    ELSE 
       vRetorno := 'S';
    END IF;
    
    Return vRetorno;         
    
  END FN_GET_PODEALTERAR; 
  
  /*******************************************************************/
  
  FUNCTION FN_GET_PAGAMENTOFAVORECIDO(P_VFRETE IN T_CON_VALEFRETE.CON_CONHECIMENTO_CODIGO%TYPE,
                                      P_SERIE  IN T_CON_VALEFRETE.CON_CONHECIMENTO_SERIE%TYPE,
                                      P_ROTA   IN T_CON_VALEFRETE.GLB_ROTA_CODIGO%TYPE,
                                      P_SAQUE  IN T_CON_VALEFRETE.CON_VALEFRETE_SAQUE%TYPE)RETURN TpPayParcelFavor AS
  V_DATA DATE;
  V_EXISTEPGTOPROP INTEGER;
  V_EXISTEPGTOMOT  INTEGER;
  
  V_FAVORECIDOREF TpPayParcelFavor;
  vExisteResponsavel INTEGER;    
  
  BEGIN
    
    
    BEGIN
     
   SELECT COUNT(*)
     INTO vExisteResponsavel     
     FROM T_CON_VALEFRETE VF,
          T_CAR_VEICULO   CV,
          T_CAR_PROPRESP  PR
    WHERE VF.CON_CONHECIMENTO_CODIGO       = P_VFRETE
      AND VF.CON_CONHECIMENTO_SERIE        = P_SERIE  
      AND VF.GLB_ROTA_CODIGO               = P_ROTA  
      AND VF.CON_VALEFRETE_SAQUE           = P_SAQUE
      AND VF.CON_VALEFRETE_PLACA           = CV.CAR_VEICULO_PLACA
      AND VF.CON_VALEFRETE_PLACASAQUE      = CV.CAR_VEICULO_SAQUE
      AND CV.CAR_PROPRIETARIO_CGCCPFCODIGO = PR.CAR_PROPRIETARIO_CGCCPFCODIGO;
      
      
      
   SELECT COUNT(*)
     INTO V_EXISTEPGTOPROP
     FROM T_CON_CALCVALEFRETE CAL
    WHERE CAL.CON_CONHECIMENTO_CODIGO             = P_VFRETE
      AND CAL.CON_CONHECIMENTO_SERIE              = P_SERIE 
      AND CAL.GLB_ROTA_CODIGO                     = P_ROTA  
      AND CAL.CON_VALEFRETE_SAQUE                 = P_SAQUE
      AND NVL(CAL.CON_CALCVALEFRETE_FLAGPGTO,'N') = 'S'
      AND CAL.CON_CALCVALEFRETE_TPPESSOA          = 'P'; 
    
   SELECT COUNT(*)
     INTO V_EXISTEPGTOMOT
     FROM T_CON_CALCVALEFRETE CAL
    WHERE CAL.CON_CONHECIMENTO_CODIGO             = P_VFRETE
      AND CAL.CON_CONHECIMENTO_SERIE              = P_SERIE 
      AND CAL.GLB_ROTA_CODIGO                     = P_ROTA  
      AND CAL.CON_VALEFRETE_SAQUE                 = P_SAQUE
      AND NVL(CAL.CON_CALCVALEFRETE_FLAGPGTO,'N') = 'S'
      AND CAL.CON_CALCVALEFRETE_TPPESSOA          = 'M'
      AND CAL.CON_CALCVALEFRETE_CODPAROPER        <> '02'; 
    
    
    -- SE EXISTE PGTO AO PROPRIETARIO
    IF V_EXISTEPGTOPROP > 0 THEN 
      V_FAVORECIDOREF.FavorProprietario := 'S';
    END IF;
      
    -- SE EXISTE PGTO AO MOTORISTA
    IF V_EXISTEPGTOMOT > 0 THEN 
      V_FAVORECIDOREF.FavorMotorista    := 'S';
    END IF;
    
    /*IF vExisteResponsavel > 0 THEN
       V_FAVORECIDOREF.FavorResponsavel  := 'S';
    END IF;  */
    
    EXCEPTION WHEN OTHERS THEN
      
      V_FAVORECIDOREF.FavorProprietario := 'N';
      V_FAVORECIDOREF.FavorMotorista    := 'N';
    
    END;    
  
    RETURN V_FAVORECIDOREF;
     
  END FN_GET_PAGAMENTOFAVORECIDO;                              
  
  FUNCTION FN_GET_PAGAMENTOFAVORECIDO2(P_VFRETE IN T_CON_VALEFRETE.CON_CONHECIMENTO_CODIGO%TYPE,
                                        P_SERIE  IN T_CON_VALEFRETE.CON_CONHECIMENTO_SERIE%TYPE,
                                        P_ROTA   IN T_CON_VALEFRETE.GLB_ROTA_CODIGO%TYPE,
                                        P_SAQUE  IN T_CON_VALEFRETE.CON_VALEFRETE_SAQUE%TYPE)RETURN TpPayParcelFavor AS
  V_DATA DATE;
  V_EXISTEPGTOPROP INTEGER;
  V_EXISTEPGTOMOT  INTEGER;
  
  V_FAVORECIDOREF TpPayParcelFavor;
  BEGIN
    
    
    BEGIN
     
   SELECT COUNT(*)
     INTO V_EXISTEPGTOPROP
     FROM T_CON_CALCVALEFRETE CAL
    WHERE CAL.CON_CONHECIMENTO_CODIGO             = P_VFRETE
      AND CAL.CON_CONHECIMENTO_SERIE              = P_SERIE 
      AND CAL.GLB_ROTA_CODIGO                     = P_ROTA  
      AND CAL.CON_VALEFRETE_SAQUE                 = P_SAQUE
      AND NVL(CAL.CON_CALCVALEFRETE_FLAGPGTO,'N') = 'S'
      AND CAL.CON_CALCVALEFRETE_TPPESSOA          = 'P'; 
    
   SELECT COUNT(*)
     INTO V_EXISTEPGTOMOT
     FROM T_CON_CALCVALEFRETE CAL
    WHERE CAL.CON_CONHECIMENTO_CODIGO             = P_VFRETE
      AND CAL.CON_CONHECIMENTO_SERIE              = P_SERIE 
      AND CAL.GLB_ROTA_CODIGO                     = P_ROTA  
      AND CAL.CON_VALEFRETE_SAQUE                 = P_SAQUE
      AND NVL(CAL.CON_CALCVALEFRETE_FLAGPGTO,'N') = 'S'
      AND CAL.CON_CALCVALEFRETE_TPPESSOA          = 'M'
      AND CAL.CON_CALCVALEFRETE_CODPAROPER        <> '02'; 
    
    
    -- SE EXISTE PGTO AO PROPRIETARIO
    IF V_EXISTEPGTOPROP > 0 THEN 
      V_FAVORECIDOREF.FavorProprietario := 'S';
    END IF;
      
    -- SE EXISTE PGTO AO MOTORISTA
    IF V_EXISTEPGTOMOT > 0 THEN 
      V_FAVORECIDOREF.FavorMotorista    := 'S';
    END IF;
    
    IF P_VFRETE = '036498' THEN
      V_FAVORECIDOREF.FavorMotorista    := 'S';
    END IF;
    
    V_FAVORECIDOREF.FavorProprietario := 'S';
    
    EXCEPTION WHEN OTHERS THEN
      
      V_FAVORECIDOREF.FavorProprietario := 'N';
      V_FAVORECIDOREF.FavorMotorista    := 'N';
    
    END;    
  
    RETURN V_FAVORECIDOREF;
     
  END FN_GET_PAGAMENTOFAVORECIDO2;
  
  PROCEDURE SP_GET_INTEGRACAO(P_APPCODIGO    IN  tdvadm.t_usu_aplicacao.usu_aplicacao_codigo%TYPE,
                              P_IPLOCAL      IN  tdvadm.t_cfe_introtaserver.cfe_introtaserver_ip%TYPE,
                              P_CURSOR       OUT T_CURSOR,
                              P_STATUS       OUT CHAR,
                              P_MESSAGE      OUT VARCHAR2)AS
  vRefresh date;                              
  BEGIN
    
    
    --insert into tdvadm.dropme(a,x) values('P_IPLOCAL',P_IPLOCAL); commit;  
    
    /***************************************************************************************/
    /* Fabiano, Klayton, Sirlano - 04/10/2012
    /* A execução dessa procedure [ sp_refresh ] é necessário apenas pra tratar o erro:
    /*    ORA-24338: statement handle not executed
    /* que acontece toda vez que compila a package tdvadm.pkg_glb_common 
    / ***************************************************************************************/
    --pkg_cfe_frete.sp_refresh;
  
    begin
       
       /* insert into tdvadm.t_glb_sql
          (glb_sql_programa, glb_sql_dtgravacao, glb_sql_observacao)
        values
          ('freteeletronico',
           sysdate,
           P_IPLOCAL);
        commit; */  
/* 
        IF (P_IPLOCAL <> '192.168.9.46') THEN
          
       OPEN P_CURSOR FOR
          SELECT *
          FROM (select FO.CON_FRETEOPER_ID,
                       FO.CON_FRETEOPER_ROTA,
                       GER.CFE_GERENBCO_COD                                                                                                                                              ||'-'||
                       GER.CFE_GERENBCO_DESC                                                                                                                                             ||'-'||
                       GER.CFE_GERENBCO_TPGER                                                                                                                                            ||'-'||
                       GER.CFE_GERENBCO_CLASS                                                                                                                                            ||'-'||
                       decode(ITDV.CFE_INTEGRATDV_IPSERVER,'172.16.0.215',
                       	                                   'https://www.roadcard.com.br/sistemapamcard/services/WSTransacional',
                                                           '10.0.2.15',
                       	                                   'https://www.roadcard.com.br/sistemapamcard/services/WSTransacional', GER.CFE_GERENBCO_URLPRODUCAO)                           ||'-'||
                                                           
                       decode(ITDV.CFE_INTEGRATDV_IPSERVER,'172.16.0.215',
                                                           'https://preproducao.roadcard.com.br/sistemapamcard/services/WSTransacional',
                                                           '10.0.2.15',
                                                           'https://preproducao.roadcard.com.br/sistemapamcard/services/WSTransacional', GER.CFE_GERENBCO_URLHOMOLOGACAO)                ||'-'||
                       GER.CFE_GERENBCO_TIMEOUTREQUEST                                                                                                                                   ||'-'|| 
                       decode(ITDV.CFE_INTEGRATDV_IPSERVER,'172.16.0.215',
                                                           '61139432000172_12078295_29052018.pfx',
                                                           '10.0.2.15',
                                                           '61139432000172_12078295_29052018.pfx',GER.CFE_GERENBCO_CERTIFICADO)    GEREMBCO,
                       ITDV.CFE_INTEGRATDV_COD||'-'||ITDV.CFE_INTEGRATDV_DESC INTEGRATDV,
                       OP.CFE_OPERACOES_COD                ||'-'||
                       OP.CFE_OPERACOES_DESC               ||'-'||
                       OP.CFE_OPERACOES_WMETHODO           ||'-'||
                       OP.CFE_OPERACOES_PROC               ||'-'||
                       OP.CFE_OPERACOES_TIMEOUTREQUEST     ||'-'|| 
                       OP.CFE_OPERACOES_METODOQUERSTR      ||'-'||
                       OP.CFE_OPERACOES_CONTROLLERCLASS OPERACOES,
                       FO.CFE_STATUSFRETEOPER_STATUS,
                       FO.CON_FRETEOPER_OBS,
                       FO.CON_FRETEOPER_MSGENV,
                       FO.CON_FRETEOPER_CONFENV,
                       FO.CON_FRETEOPER_MSGRET,
                       FO.CON_FRETEOPER_CONFRET,
                       FO.CON_FRETEOPER_PARAMQRYSTR,
                       nvl(FO.CON_FRETEOPER_SEQ,1) CON_FRETEOPER_SEQ
                  from T_CON_FRETEOPER             FO,
                       T_CFE_OPERATDV              OTDV,
                       T_CFE_INTEGRATDV            ITDV,
                       T_CFE_OPERACOES              OP,
                       T_CFE_GERENBCO               GER
                 WHERE FO.CFE_INTEGRATDV_COD             = OTDV.CFE_INTEGRATDV_COD
                   AND FO.CFE_OPERACOES_COD              = OTDV.CFE_OPERACOES_COD
                   AND OTDV.CFE_INTEGRATDV_COD           = ITDV.CFE_INTEGRATDV_COD
                   AND FO.CFE_OPERACOES_COD              = OP.CFE_OPERACOES_COD
                   AND OP.CFE_GERENBCO_COD               = GER.CFE_GERENBCO_COD
                   AND FO.CFE_STATUSFRETEOPER_STATUS     = 'AG'
                   AND NVL(GER.CFE_GERENBCO_ATIAVO,'N')  = 'S'
                   AND ITDV.cfe_integratdv_ipserver      = P_IPLOCAL
                   
                 ORDER BY fo.con_freteoper_prior,
                          fo.con_freteoper_dtcad,
                          fo.con_freteoper_id,
                          OTDV.CFE_OPERATDV_SEQOP) CON
                      
           WHERE ROWNUM <= 50;   
       
    ELSE
      
      OPEN P_CURSOR FOR
          SELECT *
          FROM (select FO.CON_FRETEOPER_ID,
                       FO.CON_FRETEOPER_ROTA,
                       GER.CFE_GERENBCO_COD                                                                                                                                              ||'-'||
                       GER.CFE_GERENBCO_DESC                                                                                                                                             ||'-'||
                       GER.CFE_GERENBCO_TPGER                                                                                                                                            ||'-'||
                       GER.CFE_GERENBCO_CLASS                                                                                                                                            ||'-'||
                       decode(ITDV.CFE_INTEGRATDV_IPSERVER,'192.168.9.4','https://www.roadcard.com.br/sistemapamcard/services/WSTransacional',GER.CFE_GERENBCO_URLPRODUCAO)              ||'-'||
                       decode(ITDV.CFE_INTEGRATDV_IPSERVER,'192.168.9.4','https://preproducao.roadcard.com.br/sistemapamcard/services/WSTransacional',GER.CFE_GERENBCO_URLHOMOLOGACAO)   ||'-'||
                       GER.CFE_GERENBCO_TIMEOUTREQUEST                                                                                                                                   ||'-'|| 
                       decode(ITDV.CFE_INTEGRATDV_IPSERVER,'192.168.9.4','61139432000172_12078295_29052018.pfx',GER.CFE_GERENBCO_CERTIFICADO)    GEREMBCO,
                       ITDV.CFE_INTEGRATDV_COD||'-'||ITDV.CFE_INTEGRATDV_DESC INTEGRATDV,
                       OP.CFE_OPERACOES_COD                ||'-'||
                       OP.CFE_OPERACOES_DESC               ||'-'||
                       OP.CFE_OPERACOES_WMETHODO           ||'-'||
                       OP.CFE_OPERACOES_PROC               ||'-'||
                       OP.CFE_OPERACOES_TIMEOUTREQUEST     ||'-'|| 
                       OP.CFE_OPERACOES_METODOQUERSTR      ||'-'||
                       OP.CFE_OPERACOES_CONTROLLERCLASS OPERACOES,
                       FO.CFE_STATUSFRETEOPER_STATUS,
                       FO.CON_FRETEOPER_OBS,
                       FO.CON_FRETEOPER_MSGENV,
                       FO.CON_FRETEOPER_CONFENV,
                       FO.CON_FRETEOPER_MSGRET,
                       FO.CON_FRETEOPER_CONFRET,
                       FO.CON_FRETEOPER_PARAMQRYSTR,
                       nvl(FO.CON_FRETEOPER_SEQ,1) CON_FRETEOPER_SEQ
                  from T_CON_FRETEOPER             FO,
                       T_CFE_OPERATDV              OTDV,
                       T_CFE_INTEGRATDV            ITDV,
                       T_CFE_OPERACOES              OP,
                       T_CFE_GERENBCO               GER
                 WHERE FO.CFE_INTEGRATDV_COD             = OTDV.CFE_INTEGRATDV_COD
                   AND FO.CFE_OPERACOES_COD              = OTDV.CFE_OPERACOES_COD
                   AND OTDV.CFE_INTEGRATDV_COD           = ITDV.CFE_INTEGRATDV_COD
                   AND FO.CFE_OPERACOES_COD              = OP.CFE_OPERACOES_COD
                   AND OP.CFE_GERENBCO_COD               = GER.CFE_GERENBCO_COD
                   AND FO.CFE_STATUSFRETEOPER_STATUS     = 'AG'
                   AND NVL(GER.CFE_GERENBCO_ATIAVO,'N')  = 'S'
                   AND ITDV.cfe_integratdv_ipserver      = P_IPLOCAL
                   
                 ORDER BY fo.con_freteoper_dtcad,
                          fo.con_freteoper_id,
                          OTDV.CFE_OPERATDV_SEQOP,
                          fo.con_freteoper_prior) CON
                      
           WHERE ROWNUM <= 100;   
    END IF;   
    
       
*/
      OPEN P_CURSOR FOR
      select t.*
        from tdvadm.t_cfe_aux t,
             tdvadm.t_con_freteoper op
       where t.con_freteoper_id   = op.con_freteoper_id
         and t.con_freteoper_rota = op.con_freteoper_rota
         and t.cfe_integratdv_cod = op.cfe_integratdv_cod
         and t.cfe_operacoes_cod  = op.cfe_operacoes_cod
         and t.con_freteoper_seq  = op.con_freteoper_seq
         and t.cfe_integratdv_ipserver = P_IPLOCAL
         and op.cfe_statusfreteoper_status = 'AG'
         AND ROWNUM <= 50
    ORDER BY OP.con_freteoper_dtcad,
             OP.con_freteoper_id,
             OP.con_freteoper_prior;
   
   
      P_STATUS  := tdvadm.pkg_glb_common.Status_Nomal;
      P_MESSAGE := 'Lista gerada com sucesso. Ip servidor.: '||P_IPLOCAL;
      
    exception when others then
      /********************************************************************/
      /* 22/11/2013: Fabiano/ Klayton
      /* esta ação serve para resolver o problema:
      /* ORA-24338: statement handle not executed
      /********************************************************************/      
      if sqlcode = -6508 then
        raise;
      end if;         
      P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
      P_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
    end;

  END SP_GET_INTEGRACAO;


  PROCEDURE SP_GET_HISTORICO(P_DTINI    IN VARCHAR2,
                             P_DTFIM    IN VARCHAR2,
                             P_ROTA     IN TDVADM.T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,               
                             P_CURSOR   OUT T_CURSOR,
                             P_STATUS   OUT CHAR,
                             P_MESSAGE  OUT VARCHAR2) AS
    V_DTINI DATE;
    V_DTFIM DATE;                             
  BEGIN
    BEGIN -- EXCEPTION GLOBAL DA PROCEDURE
      
      BEGIN -- tratamento de datas do periodo do histórico        
        V_DTINI := TO_DATE(P_DTINI,'DD/MM/YYYY');
        V_DTFIM := TO_DATE(P_DTFIM,'DD/MM/YYYY');   
        IF (V_DTINI IS NULL) OR (V_DTFIM IS NULL) THEN
          V_DTINI := TRUNC(SYSDATE);
          V_DTFIM := TRUNC(SYSDATE);              
        END IF;        
      EXCEPTION WHEN OTHERS THEN
        V_DTINI := TRUNC(SYSDATE);
        V_DTFIM := TRUNC(SYSDATE);        
      END; -- tratamento de datas do periodo do histórico
      
      BEGIN -- GERAÇÃO DO CURSOR COM O HISTÓRICO   
        OPEN P_CURSOR FOR      
        SELECT fo.con_freteoper_id IDCONSULTA,
               ger.cfe_gerenbco_cod||' - '||ger.cfe_gerenbco_desc Administradora,
               fo.con_freteoper_rota rota,
               lpad(fo.cfe_operacoes_cod,2,'0')||' - '||op.cfe_operacoes_desc operacao,
               fo.cfe_statusfreteoper_status status,
               fo.con_freteoper_dtcad cadastro,
               fo.con_freteoper_retorno retorno,
               fo.cfe_integratdv_cod idOperacaoTdv,
               FO.CON_FRETEOPER_SEQ sequencia,
               nvl(i.cfe_integratdv_operusuario,'N') operacaousuario,
               fo.con_freteoper_paramqrystr qrystr
          FROM t_con_freteoper fo,
               t_cfe_operacoes op,
               t_cfe_gerenbco ger,
               t_cfe_integratdv i
        where fo.cfe_operacoes_cod = op.cfe_operacoes_cod
          AND op.cfe_gerenbco_cod = ger.cfe_gerenbco_cod
          AND fo.con_freteoper_rota = P_ROTA
          AND fo.cfe_integratdv_cod = i.cfe_integratdv_cod 
          AND trunc(fo.con_freteoper_dtcad) >= V_DTINI and trunc(fo.con_freteoper_dtcad) <= V_DTFIM
        ORDER BY fo.con_freteoper_dtcad,
                 fo.con_freteoper_rota,
                 fo.con_freteoper_id,
                 fo.cfe_integratdv_cod,
                 fo.cfe_operacoes_cod,
                 fo.cfe_statusfreteoper_status;
      EXCEPTION WHEN OTHERS THEN
        P_STATUS  := TDVADM.PKG_GLB_COMMON.Status_Nomal;
        P_MESSAGE := 'ERRO AO ABRIR O CURSOR DO HISTÓRICO, '||SQLERRM;  
      END; -- GERAÇÃO DO CURSOR COM O HISTÓRICO        
    
      P_STATUS  := TDVADM.PKG_GLB_COMMON.Status_Nomal;
      P_MESSAGE := 'HISTÓRICO DE CONSULTAS GERADO COM SUCESSO!';
    EXCEPTION WHEN OTHERS THEN
      P_STATUS  := TDVADM.PKG_GLB_COMMON.Status_Erro;
      P_MESSAGE := 'ERRO AO GERAR HISTORICO DE CONSULTAS, '||SQLERRM;
    END; -- EXCEPTION GLOBAL DA PROCEDURE  
  END SP_GET_HISTORICO;                              

  PROCEDURE SP_GET_RETORNOINTEGRACAO(P_ID          IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ID%TYPE,                                
                                     P_ROTA        IN  TDVADM.T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,      
                                     P_OPERACAOWS  IN  TDVADM.T_CON_FRETEOPER.CFE_OPERACOES_COD%TYPE,
                                     P_OPERACAOTDV IN  TDVADM.T_CON_FRETEOPER.CFE_INTEGRATDV_COD%TYPE,
                                     P_SEQUENCIA   IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_SEQ%TYPE,               
                                     P_CURSOR     OUT T_CURSOR,
                                     P_STATUS     OUT CHAR,
                                     P_MESSAGE    OUT VARCHAR2) AS
  begin
    begin
      
      open p_Cursor for
      select extractvalue(VALUE(MsgEnv), '/ResponseToRow/Chave') chave,
             fn_Traduz_CodRetorno(extractvalue(VALUE(MsgEnv), '/ResponseToRow/Chave'), extractvalue(VALUE(MsgEnv), '/ResponseToRow/Valor') ) valor
        from t_con_freteoper fo,
             Table(XMLSequence(Extract(XMLTYPE.createXML(fo.con_freteoper_msgret),'/ResponseTo/ResponseToRows/ResponseToRow'))) MsgEnv
      where fo.con_freteoper_id   = p_Id
        and fo.con_freteoper_rota = p_Rota
        and fo.cfe_operacoes_cod  = p_OperacaoWs
        AND fo.cfe_integratdv_cod = P_OPERACAOTDV
        AND fo.con_freteoper_seq  = P_SEQUENCIA
      order by fo.con_freteoper_id; 
    
      p_Status  := tdvadm.pkg_glb_common.Status_Nomal;
      p_Message := 'Retorno de dados da Integração gerado com sucesso';
    exception when others then
      p_Status  := tdvadm.pkg_glb_common.Status_Erro;
      p_Message := sqlerrm;
    end;  
  END SP_GET_RETORNOINTEGRACAO;                                     

  PROCEDURE SP_GET_ENVIOINTEGRACAO(P_ID          IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ID%TYPE,                                
                                   P_ROTA        IN  TDVADM.T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,      
                                   P_OPERACAOWS  IN  TDVADM.T_CON_FRETEOPER.CFE_OPERACOES_COD%TYPE,
                                   P_OPERACAOTDV IN  TDVADM.T_CON_FRETEOPER.CFE_INTEGRATDV_COD%TYPE,
                                   P_SEQUENCIA   IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_SEQ%TYPE,               
                                   P_CURSOR     OUT T_CURSOR,
                                   P_STATUS     OUT CHAR,
                                   P_MESSAGE    OUT VARCHAR2) AS
  begin
    begin
      
      open p_Cursor for
      select extractvalue(VALUE(MsgEnv), '/RequestToRow/Chave') chave,
             fn_Traduz_CodRetorno(extractvalue(VALUE(MsgEnv), '/RequestToRow/Chave'), extractvalue(VALUE(MsgEnv), '/RequestToRow/Valor') ) valor
        from t_con_freteoper fo,
             Table(XMLSequence(Extract(XMLTYPE.createXML(fo.con_freteoper_msgenv),'/RequestTo/RequestToRows/RequestToRow'))) MsgEnv
      where fo.con_freteoper_id   = p_Id
        and fo.con_freteoper_rota = p_Rota
        and fo.cfe_operacoes_cod  = p_OperacaoWs
        AND fo.cfe_integratdv_cod = P_OPERACAOTDV
        AND fo.con_freteoper_seq  = P_SEQUENCIA
      order by fo.con_freteoper_id; 
    
      p_Status  := tdvadm.pkg_glb_common.Status_Nomal;
      p_Message := 'Envio de dados à Integração gerado com sucesso';
    exception when others then
      p_Status  := tdvadm.pkg_glb_common.Status_Erro;
      p_Message := sqlerrm;
    end;  
  END SP_GET_ENVIOINTEGRACAO;                                     

  PROCEDURE SP_GET_VALIDACAOTDV(P_ID          IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ID%TYPE,                                
                                P_ROTA        IN  TDVADM.T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,      
                                P_OPERACAOWS  IN  TDVADM.T_CON_FRETEOPER.CFE_OPERACOES_COD%TYPE,
                                P_OPERACAOTDV IN  TDVADM.T_CON_FRETEOPER.CFE_INTEGRATDV_COD%TYPE,
                                P_SEQUENCIA   IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_SEQ%TYPE,
                                P_CURSOR      OUT T_CURSOR,
                                P_STATUS      OUT CHAR,
                                P_MESSAGE     OUT VARCHAR2) AS
    vDescricao VARCHAR2(1000);                                
  begin
    
    begin      
      vDescricao := Get_RetornoDescricao(P_ID,P_ROTA,P_OPERACAOWS,P_OPERACAOTDV,P_SEQUENCIA);    
    
      OPEN p_Cursor FOR
      SELECT 'ValidacaoTdv' Chave,
             nvl(fo.con_freteoper_obs, vDescricao) Valor
        FROM tdvadm.t_con_freteoper fo
       WHERE fo.con_freteoper_id   = p_Id
         AND fo.con_freteoper_rota = p_Rota
         AND fo.cfe_operacoes_cod  = p_OperacaoWs
         AND fo.cfe_integratdv_cod  = p_operacaoTdv
         AND fo.con_freteoper_seq  = p_sequencia;
    
      p_Status  := tdvadm.pkg_glb_common.Status_Nomal;
      p_Message := 'Validação Tdv gerada com sucesso';
    exception when others then
      p_Status  := tdvadm.pkg_glb_common.Status_Erro;
      p_Message := sqlerrm;
    end;  
        
  END SP_GET_VALIDACAOTDV;                                     
                                   


  PROCEDURE SP_GET_HISTORICOPORID(P_ID         IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ID%TYPE,
                                  P_ROTA       IN  TDVADM.T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,               
                                  P_CURSOR     OUT T_CURSOR,
                                  P_STATUS     OUT CHAR,
                                  P_MESSAGE    OUT VARCHAR2) AS  
  begin
    begin    
        
      OPEN P_CURSOR FOR      
      SELECT fo.con_freteoper_id IDCONSULTA,
             ger.cfe_gerenbco_cod||' - '||ger.cfe_gerenbco_desc Administradora,
             fo.con_freteoper_rota rota,
             lpad(fo.cfe_operacoes_cod,2,'0')||' - '||op.cfe_operacoes_desc operacao,
             fo.cfe_statusfreteoper_status status,
             fo.con_freteoper_dtcad cadastro,
             fo.con_freteoper_retorno retorno,
             fo.cfe_integratdv_cod idOperacaoTdv,
             fo.con_freteoper_seq sequencia,
             nvl(i.cfe_integratdv_operusuario,'N') operacaousuario,
             fo.con_freteoper_paramqrystr qrystr
        FROM t_con_freteoper fo,
             t_cfe_operacoes op,
             t_cfe_gerenbco ger,
             t_cfe_integratdv i
      where fo.cfe_operacoes_cod = op.cfe_operacoes_cod
        AND op.cfe_gerenbco_cod = ger.cfe_gerenbco_cod
        AND fo.cfe_integratdv_cod = i.cfe_integratdv_cod
        and fo.con_freteoper_id   = p_Id
        and fo.con_freteoper_rota = P_ROTA;  
    
      p_Status  := tdvadm.pkg_glb_common.Status_Nomal;
      p_Message := 'Histórico por Id gerado com sucesso';
    exception when others then
      p_Status  := tdvadm.pkg_glb_common.Status_Erro;
      p_Message := sqlerrm;
    end;  
  end SP_Get_HistoricoPorID;

/*  PROCEDURE SP_GET_IDINTEGRACAO(P_QryStr       IN  clob,
                                P_ROTA         IN T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,
                                P_IDCONSULTA   OUT VARCHAR2,
                                P_STATUS       OUT CHAR,
                                P_MESSAGE      OUT VARCHAR2)AS
  V_IDFRETE     NUMBER;
  V_TIPO        NUMBER;
  V_SEQ         INTEGER;
  V_0PERUSER    CHAR(1);
  V_STATUS      T_CON_FRETEOPER.CFE_STATUSFRETEOPER_STATUS%TYPE;
  vPrioridade   number;
  vArrayParams  glbadm.pkg_glb_auxiliar.tArrayParams;
  vQtdeDias     number;
  vAnttIndis    t_usu_perfil.usu_perfil_parat%type;
  BEGIN
    
    --Insert Into Dropme d (a,x) values('ID_FRETE_ELE', 'P_QryStr => ' || P_QryStr || ' - P_ROTA => ' || P_ROTA);commit;

   \*******************************************\
   \**************Buscando Parametro***********\
   \*******************************************\
   begin
       --Buscando Parametro para consulta
       glbadm.pkg_glb_auxiliar.sp_Cursor_Params('jsantos', 'comvlfrete', '000', vArrayParams);
       
       For i In vArrayParams.first .. vArrayParams.last Loop

            -- Parametro que indica se a ANTT esta indisponivel
            if vArrayParams(i).PERFIL = 'ANTTINDISP' then
              vAnttIndis := trim(vArrayParams(i).TEXTO); 
            end if;
               
       End Loop;
   
   exception when others then
     vAnttIndis := 'N';
   end; 
   \*******************************************\ 
   
   

   V_TIPO := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'IntegraTdv_Cod','=','*'), 'valor', '=', '|');

   BEGIN
     SELECT IT.CFE_INTEGRATDV_OPERUSUARIO
       INTO V_0PERUSER
       FROM T_CFE_INTEGRATDV IT
      WHERE IT.CFE_INTEGRATDV_COD = V_TIPO; 
     
   EXCEPTION WHEN OTHERS THEN
     V_0PERUSER := 'M';
   END;    
   
   if V_TIPO = '19' then
      vPrioridade := 9;
   else
      vPrioridade := 0;
   end if;  
   
    BEGIN
      V_IDFRETE := PKG_CFE_FRETE.FN_GET_IDOPERACAO(P_ROTA, 'SP_GET_IDINTEGRACAO', P_QryStr);

       SELECT DECODE(V_0PERUSER,'S','US','N','AG')  
         INTO V_STATUS
         FROM DUAL;
         
         \*********************************************************************\
         \*******************   INTEGRAÇÃO TDV PARA O FROTA    ****************\
         \*********************************************************************\
         IF V_TIPO IN ('26')	 THEN 
            V_STATUS := 'OK';
         END IF;
         
         
         \*********************************************************************\
         \*******************   IIDICA DE ANTT ESTA INDISPONIVEL **************\
         \*********************************************************************\
         IF nvl(vAnttIndis,'N') = 'S' THEN
                     
            IF V_TIPO = '25' THEN
               V_TIPO   := '26';
               V_STATUS := 'OK';
            END IF; 
         
         END IF;  
         \*********************************************************************\
         

         \*********************************************************************\
         
          
      V_SEQ := 0;
      
      FOR R_CURSOR IN (SELECT K.CFE_INTEGRATDV_COD,
                              K.CFE_OPERACOES_COD
                         FROM T_CFE_OPERATDV K
                        WHERE K.CFE_INTEGRATDV_COD = V_TIPO
                           AND k.cfe_operacoes_cod not in CASE WHEN trim(nvl(vAnttIndis,'N')) = 'N' then ('900000') ELSE ('16') END
                           AND k.cfe_operacoes_cod not in CASE WHEN trim(nvl(vAnttIndis,'N')) = 'N' then ('900000') ELSE ('17') END
                           )
      LOOP

        INSERT INTO T_CON_FRETEOPER F VALUES(V_IDFRETE,
                                             P_ROTA,
                                             R_CURSOR.CFE_INTEGRATDV_COD,
                                             R_CURSOR.CFE_OPERACOES_COD,
                                             V_STATUS,
                                             NULL,
                                             NULL,
                                             NULL,
                                             NULL,
                                             NULL,
                                             P_QRYSTR,
                                             SYSDATE,
                                             NULL,
                                             NULL,
                                             1,
                                             vPrioridade);
        V_SEQ := V_SEQ+1;

      END LOOP;

      P_STATUS     := tdvadm.pkg_glb_common.Status_Nomal;
      P_MESSAGE    := 'Id Gerado com Sucesso!';
      P_IDCONSULTA :=  V_IDFRETE;
      COMMIT;

    EXCEPTION WHEN OTHERS THEN
      P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
      P_MESSAGE := 'ERRO: SP_GET_IDINTEGRACAO.SP_GET_INTEGRACAO, '||sqlerrm;
   END;
  END SP_GET_IDINTEGRACAO;

   */  
   
  Procedure Sp_Get_IdIntegracao(p_qrystr       in  clob,
                                p_rota         in t_glb_rota.glb_rota_codigo%type,
                                p_idconsulta   out varchar2,
                                p_status       out char,
                                p_message      out varchar2)as
  V_IDFRETE       number;
  V_TIPO          number;
  V_SEQ           integer;
  V_0PERUSER      char(1);
  V_STATUS        t_con_freteoper.cfe_statusfreteoper_status%type;
  vPrioridade     number;
  vArrayParams    glbadm.pkg_glb_auxiliar.tarrayparams;
  vQtdeDias       number;
  vAnttIndis      t_usu_perfil.usu_perfil_parat%type;
  vCartao         varchar2(200);
  vCpfMotorista   varchar2(20);
  vCpfProp        varchar2(20);
  vPlacaConjunto  t_frt_conjveiculo.frt_conjveiculo_codigo%type;
  vQryStr         varchar2(4000);
  vUsuario        t_usu_usuario.usu_usuario_codigo%type;
  vStatus         char(1);
  vMessage        varchar2(2000);
  BEGIN
    
  --Insert Into Dropme d (a,x) values('ID_FRETE_ELE', 'P_QryStr => ' || P_QryStr || ' - P_ROTA => ' || P_ROTA);commit;

   /*******************************************/
   /**************Buscando Parametro***********/
   /*******************************************/
   begin
       --Buscando Parametro para consulta
       glbadm.pkg_glb_auxiliar.sp_Cursor_Params('jsantos', 'comvlfrete', '000', vArrayParams);
       
       For i In vArrayParams.first .. vArrayParams.last Loop

            -- Parametro que indica se a ANTT esta indisponivel
            if vArrayParams(i).PERFIL = 'ANTTINDISP' then
              vAnttIndis := trim(vArrayParams(i).TEXTO); 
            end if;
               
       End Loop;
   
   exception when others then
     vAnttIndis := 'N';
   end; 
   /*******************************************/ 
   
   
   vQryStr        := P_QryStr;
   V_TIPO         := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'IntegraTdv_Cod','=','*'), 'valor', '=', '|');
   vCartao        := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'MotoristaCartao','=','*'), 'valor', '=', '|');
   vCpfMotorista  := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'Motorista','=','*'), 'valor', '=', '|');
   vPlacaConjunto := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'Placa','=','*'), 'valor', '=', '|');
   vUsuario       := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'Usuario','=','*'), 'valor', '=', '|');
   
   BEGIN
   
     SELECT IT.CFE_INTEGRATDV_OPERUSUARIO
       INTO V_0PERUSER
       FROM T_CFE_INTEGRATDV IT
      WHERE IT.CFE_INTEGRATDV_COD = V_TIPO; 
     
   EXCEPTION WHEN OTHERS THEN
     V_0PERUSER := 'M';
   END;    
   
   if V_TIPO = '19' then
      vPrioridade := 9;
   else
      vPrioridade := 0;
   end if;  
   
    BEGIN
      
      /*********************************************************************/
      /**         STATUS DO ID                                            **/
      /*********************************************************************/
      SELECT DECODE(V_0PERUSER,'S','US','N','AG')  
        INTO V_STATUS
        FROM DUAL;
      
      
      --if (vUsuario in ('bbernardo') and (V_0PERUSER = 'S')) THEN
         V_STATUS := 'AG';
      --end if;
      

      /*********************************************************************/
      /*******************   INTEGRAÇÃO TDV PARA O FROTA    ****************/
      /*********************************************************************/
      
      if v_tipo in ('26')	 then 
       
        if (vCartao is not null) then
            
           if (length(Trim(nvl(vCpfMotorista,'0'))) <> 11) then
           
              -- Função busca o CPF do motorista que esta vinculado no conjunto.
              vCpfMotorista := fn_GetCpfMotorista(vPlacaConjunto);
           
           end if;      
        
           v_tipo  := '89';
            
           vQryStr := replace(P_QryStr,'IntegraTdv_cod|tipo=String|valor=26*','IntegraTdv_cod|tipo=String|valor=89*');
           vQryStr := replace(vQryStr,'Motorista=nome=Motorista|tipo=String|valor=*','Motorista=nome=Motorista|tipo=String|valor='||trim(vCpfMotorista)||'*');
            
        else
        
            V_STATUS := 'OK';
        
        end if;
         
      end if;
      
      V_IDFRETE := PKG_CFE_FRETE.FN_GET_IDOPERACAO(P_ROTA, 'SP_GET_IDINTEGRACAO', vQryStr);

         /*********************************************************************/
         /*******************   IIDICA DE ANTT ESTA INDISPONIVEL **************/
         /*********************************************************************/
         IF nvl(vAnttIndis,'N') = 'S' THEN
                     
            IF V_TIPO = '25' THEN
               V_TIPO   := '26';
               V_STATUS := 'OK';
            END IF; 
         
         END IF;  
         /*********************************************************************/
         

         /*********************************************************************/
         
      
      /*********************************************************************/
      /*******************  se a integração for de proprieario PF  *********/
      /*********************************************************************/
      if (v_tipo in ('27','1')) then
         
        
        vCpfProp       := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'Proprietario','=','*'), 'valor', '=', '|');
        
        If (length(vCpfProp) = 11) Then
        
          tdvadm.pkg_cfe_frete.Sp_Set_ConsultaESocial(TRIM(vCpfProp),
                                                      vStatus,
                                                      vMessage);
                                                      
          if (vStatus != 'N') then
            
                INSERT INTO tdvadm.T_CON_FRETEOPER F VALUES(V_IDFRETE,
                                                            P_ROTA,
                                                            '93',
                                                            '85',
                                                            V_STATUS,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            vQryStr,
                                                            SYSDATE,
                                                            NULL,
                                                            NULL,
                                                            1,
                                                            vPrioridade);

          end if;
        
        end If;
                                                    
      end if;  
      /*********************************************************************/
      
          
      V_SEQ := 0;
      
      FOR R_CURSOR IN (SELECT K.CFE_INTEGRATDV_COD,
                              K.CFE_OPERACOES_COD
                         FROM T_CFE_OPERATDV K
                        WHERE K.CFE_INTEGRATDV_COD = V_TIPO
                           AND k.cfe_operacoes_cod not in CASE WHEN trim(nvl(vAnttIndis,'N')) = 'N' then ('900000') ELSE ('16') END
                           AND k.cfe_operacoes_cod not in CASE WHEN trim(nvl(vAnttIndis,'N')) = 'N' then ('900000') ELSE ('17') END
                           )
      LOOP

        INSERT INTO T_CON_FRETEOPER F VALUES(V_IDFRETE,
                                             P_ROTA,
                                             R_CURSOR.CFE_INTEGRATDV_COD,
                                             R_CURSOR.CFE_OPERACOES_COD,
                                             V_STATUS,
                                             NULL,
                                             NULL,
                                             NULL,
                                             NULL,
                                             NULL,
                                             vQryStr,
                                             SYSDATE,
                                             NULL,
                                             NULL,
                                             1,
                                             vPrioridade);
        V_SEQ := V_SEQ+1;

      END LOOP;

      P_STATUS     := tdvadm.pkg_glb_common.Status_Nomal;
      P_MESSAGE    := 'Id Gerado com Sucesso!';
      P_IDCONSULTA :=  V_IDFRETE;
      COMMIT;

    EXCEPTION WHEN OTHERS THEN
      P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
      P_MESSAGE := 'ERRO: SP_GET_IDINTEGRACAO.SP_GET_INTEGRACAO, '||sqlerrm;
   END;
  END SP_GET_IDINTEGRACAO;
  
  PROCEDURE SP_SET_INTEGRAVF(P_QRYSTR       IN  varchar2,
                             P_IDCONSULTA   IN  VARCHAR2,
                             P_ROTA         IN  CHAR, 
                             P_STATUS       OUT CHAR,
                             P_MESSAGE      OUT VARCHAR2)AS
  V_IDVALIDO       CHAR(2);
  V_TIPO           TDVADM.T_CFE_INTEGRATDV.CFE_INTEGRATDV_COD%TYPE;
  V_QTDELOOP       INTEGER;
  V_EXISTINT       INTEGER;
  V_STATUSOPER     TDVADM.T_CON_FRETEOPER.CFE_STATUSFRETEOPER_STATUS%TYPE;
  V_QTDEINTEGRA    INTEGER; 
  
  vExisteCiotVf    INTEGER;
  vValeFreteCod    t_con_valefrete.con_conhecimento_codigo%TYPE;
  vValeFreteSerie  t_con_valefrete.con_conhecimento_serie%TYPE;
  vValeFreteRota   t_con_valefrete.glb_rota_codigo%TYPE;
  vValeFreteSaque  t_con_valefrete.con_valefrete_saque%TYPE;
  vVfdeFrota       integer;  
  vIdPgtoFrota     integer;
  vCodDePara       t_cfe_integratdvdp.cfe_integratdv_cod%type;
  vGerenciadora    t_cfe_gerenbco.cfe_gerenbco_cod%type;
  BEGIN
    
    Begin
        
        --insert into t_glb_sql(glb_sql_instrucao,glb_sql_dtgravacao,glb_sql_programa) values (P_QRYSTR,sysdate, 'klayton');
        --commit;
        
        /**************************************************/           
        /*****          Parametros QueryStr           *****/
        /**************************************************/
        begin
          
          V_TIPO          := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'IntegraTdv_Cod','=','*'), 'valor', '=', '|');
          vValeFreteCod   := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFNumero','=','*'), 'valor', '=', '|');
          vValeFreteSerie := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFSerie','=','*'), 'valor', '=', '|');
          vValeFreteRota  := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFRota','=','*'), 'valor', '=', '|');
          vValeFreteSaque := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFSaque','=','*'), 'valor', '=', '|');
        
        end;
        /**************************************************/
        
        
        /**************************************************/
        /*****          Codigo da tabela DePara       *****/
        /**************************************************/
        begin
          
           select nvl(s.cfe_gerenbco_cod,'1')
             into vGerenciadora
             from t_uti_sequencia s
            where s.uti_sequencia_rota   = P_ROTA       
              and s.uti_sequencia_codigo = P_IDCONSULTA; 
                
           select l.cfe_integratdv_cod
             into vCodDePara
             from t_cfe_integratdvdp l
            where l.cfe_integratdvdp_cod = V_TIPO
              and l.cfe_gerenbco_cod     = vGerenciadora;
          
        end;
        /**************************************************/
        
        
        
        /**************************************************/
        /*****          Validando se é um Frota       *****/
        /**************************************************/
        begin
          
          select count(*)
            into vVfdeFrota
            from t_con_valefrete vf
           where vf.con_conhecimento_codigo         = vValeFreteCod  
             and vf.con_conhecimento_serie          = vValeFreteSerie
             and vf.glb_rota_codigo                 = vValeFreteRota 
             and vf.con_valefrete_saque             = vValeFreteSaque
             and vf.glb_tpmotorista_codigo          = 'F'
             and substr(vf.con_valefrete_placa,1,3) = '000';
          
          
          if (vVfdeFrota > 0) then
              
             select count(*)
               into vIdPgtoFrota
               from t_con_freteoper l
              where l.con_freteoper_id   = P_IDCONSULTA 
                and l.con_freteoper_rota = P_ROTA
                and l.cfe_integratdv_cod = '89';       
              
          end if;     
          
        end;
        /**************************************************/
        
        /**************************************************/
        /*** Criando uma integração para pgto do Frota  ***/
        /**************************************************/
        begin
          
          if (vVfdeFrota > 0) and (vIdPgtoFrota > 0) then

             SP_SET_INTEGRAVFFROTA(P_QRYSTR,    
                                   P_IDCONSULTA,
                                   P_ROTA,
                                   P_STATUS,
                                   P_MESSAGE);   
             return;
          end  if;
        
        end;
        /**************************************************/
           
        /**************************************************/
        /*** Caso contrario rodo a integração n frota   ***/                               
        /**************************************************/
        begin
           
           /*********************************************************/
           /*SE NÃO FOR ID DE INTEGRAÇÃO DE VALE DE FRETE BLOQUEAMOS*/
           /*********************************************************/
           begin
             
            IF V_TIPO NOT IN (18) THEN
               P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               P_MESSAGE := 'ERRO: INTEGRAÇÃO TDV INFORMADA NÃO É VALIDA!';
               RETURN;
            END IF;  
            
            end;
           /*********************************************************/
           
           /*************************************************************************/ 
           /*SE ja tivermos um ID cadastrado para esse vale frete / saque bloqueamos*/ 
           /*************************************************************************/ 
           begin
           
             BEGIN
               
                SELECT COUNT(*)   
                  INTO vExisteCiotVf
                  FROM T_CON_FRETEOPER K
                 WHERE K.CFE_INTEGRATDV_COD         = vCodDePara
                   AND k.con_freteoper_id           = P_IDCONSULTA
                   AND k.con_freteoper_rota         = P_ROTA                  
                   AND K.CFE_STATUSFRETEOPER_STATUS = 'OK'
                   AND TDVADM.fn_querystring(TDVADM.fn_querystring(K.CON_FRETEOPER_PARAMQRYSTR,'VFNumero','=','*'), 'valor', '=', '|') = trim(vValeFreteCod)  
                   AND TDVADM.fn_querystring(TDVADM.fn_querystring(K.CON_FRETEOPER_PARAMQRYSTR,'VFSerie','=','*'), 'valor', '=', '|')  = trim(vValeFreteSerie)
                   AND TDVADM.fn_querystring(TDVADM.fn_querystring(K.CON_FRETEOPER_PARAMQRYSTR,'VFRota','=','*'), 'valor', '=', '|')   = trim(vValeFreteRota)
                   AND TDVADM.fn_querystring(TDVADM.fn_querystring(K.CON_FRETEOPER_PARAMQRYSTR,'VFSaque','=','*'), 'valor', '=', '|')  = trim(vValeFreteSaque);

              EXCEPTION WHEN OTHERS THEN
              
               vExisteCiotVf := 0;
              
              END;    
              
             IF vExisteCiotVf > 0 THEN
                 P_STATUS  := tdvadm.pkg_glb_common.Status_Nomal;
                 P_MESSAGE := 'Neste ID.: '||P_IDCONSULTA||' / '||P_ROTA||' um Ciot ja foi Criado, por favor crie um novo ID de Validação!';
                 RETURN;
              END IF;  
             
           end; 
           /*************************************************************************/
            
            /**************************************************/
            /*** SE JA EXISTE SOLICITAÇÃO DE CIOT           ***/
            /**************************************************/
            begin
              
              BEGIN
              
                SELECT COUNT(*)   
                 INTO V_EXISTINT
                 FROM T_CON_FRETEOPER K
                 WHERE K.CFE_INTEGRATDV_COD = vCodDePara
                   AND k.con_freteoper_id   = P_IDCONSULTA
                   AND k.con_freteoper_rota = P_ROTA                  
                   AND K.CFE_STATUSFRETEOPER_STATUS = 'AG';
                 
              EXCEPTION WHEN OTHERS THEN
                V_EXISTINT := 0;
              END;           
              
              IF V_EXISTINT > 0 THEN
                 P_STATUS  := tdvadm.pkg_glb_common.Status_Nomal;
                 P_MESSAGE := 'Em processamento!';
                 RETURN;
              END IF;  
              
            end;
            /**************************************************/
            
            /********************************************************************/
            /*** VERIFICO SE O ID PASSADO JÁ SE ENCONTRA COM ERRO OU INVÁLIDO ***/
            /*** PRA EVITAR QUE INSIRA NOVAMENTE.                             ***/
            /********************************************************************/
            begin
              
              BEGIN
                SELECT COUNT(*)
                  INTO V_EXISTINT
                  FROM TDVADM.T_CON_FRETEOPER FO
                 WHERE FO.CON_FRETEOPER_ID   = P_IDCONSULTA
                   AND FO.CFE_INTEGRATDV_COD = vCodDePara
                   AND FO.CON_FRETEOPER_ROTA = P_ROTA
                   AND FO.CFE_STATUSFRETEOPER_STATUS IN ('ER','IV');                          
              EXCEPTION WHEN OTHERS THEN
                V_STATUSOPER := 'ER';
              END; 
                
              IF V_EXISTINT > 0 THEN
                P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                
                SELECT 'ID possue uma solicitação de CIOT com erro ou INVALIDA! CONSULTE O MONITOR DE FRETE'
                  INTO P_MESSAGE
                  FROM DUAL;            
                RETURN;  
              END IF;
              
            end;
            /********************************************************************/
            
            
            /**************************************************/
            /***                  VALIDA ID                 ***/
            /**************************************************/
            begin
            
              V_IDVALIDO := PKG_CFE_FRETE.FN_GET_IDVALIDO(P_IDCONSULTA, P_ROTA);    
          
              IF V_IDVALIDO = 'OK' THEN
                
                 SELECT COUNT(*)
                   INTO V_QTDEINTEGRA 
                 FROM T_CON_FRETEOPER K
                 WHERE K.CON_FRETEOPER_ID   = P_IDCONSULTA
                   AND K.CON_FRETEOPER_ROTA = P_ROTA
                   AND K.CFE_INTEGRATDV_COD = vCodDePara;
                 
                 V_QTDELOOP := 0;
                 
                 /**************************************************/
                 /*     CADASTRA OPERAÇÃO PARA INTEGRAÇÃO DO FRETE */
                 /**************************************************/
                 begin
                     
                   FOR R_CURSOR IN (SELECT K.CFE_INTEGRATDV_COD,
                                            K.CFE_OPERACOES_COD,
                                            K.CFE_OPERATDV_SEQOP,
                                            K.CFE_OPERATDV_SEQINT
                                       FROM T_CFE_OPERATDV K
                                       WHERE K.CFE_INTEGRATDV_COD = vCodDePara)
                   LOOP
                      V_QTDELOOP := V_QTDELOOP +1;
                      
                      INSERT INTO T_CON_FRETEOPER F VALUES(P_IDCONSULTA,
                                                           P_ROTA,
                                                           R_CURSOR.CFE_INTEGRATDV_COD,
                                                           R_CURSOR.CFE_OPERACOES_COD,
                                                           'AG',
                                                           NULL,
                                                           NULL,
                                                           NULL,
                                                           NULL,
                                                           NULL,
                                                           P_QRYSTR,
                                                           SYSDATE,
                                                           NULL,
                                                           NULL,
                                                           V_QTDEINTEGRA+1,
                                                           0);
                   
                   END LOOP;    
                   
                 end;
                 /**************************************************/
                   
                IF V_QTDELOOP = 0 THEN
                   P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                   P_MESSAGE := 'ERRO: NENHUMA OPERAÇÃO CADASTRADA PARA ESSE VALE DE FRETE!!';
                  RETURN;
                END IF;  
                    
              ELSE
                  
                  P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                  P_MESSAGE := 'ERRO: ID PARA CADASTRO DE INTEGRAÇÃO DO VALE DE FRETE NÃO VALIDADO!';
                  RETURN;
                  
              END IF;  
              
            end;
            /**************************************************/
            
            
            /*************************************************************/
            /***************  MARCO UMA SOLICITAÇÃO DE CIOT***************/
            /*************************************************************/
            begin
              
              BEGIN
                 INSERT INTO T_CON_VFRETESOLCIOT(CON_CONHECIMENTO_CODIGO ,
                                                 CON_CONHECIMENTO_SERIE  ,
                                                 GLB_ROTA_CODIGO         ,
                                                 CON_VALEFRETE_SAQUE     ,
                                                 CON_VFRETESOLCIOT_DATA)
                                          VALUES(vValeFreteCod           ,
                                                 vValeFreteSerie         ,
                                                 vValeFreteRota          ,
                                                 vValeFreteSaque         ,
                                                 SYSDATE);
                 
               EXCEPTION WHEN OTHERS THEN
                   P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                   P_MESSAGE := 'Erro ao Criar Solicitação de CIOT. Erro: '||SQLERRM;
               END;   
            
            end;
            /*************************************************************/
               
            IF NVL(P_STATUS,'OK') <> tdvadm.pkg_glb_common.Status_Erro THEN                      
               
               P_STATUS  := tdvadm.pkg_glb_common.Status_Nomal;
               P_MESSAGE := 'Ciot Solicitado com Sucesso!!';
               COMMIT;
               
            END IF;
            
        end;
        /**************************************************/
    
    EXCEPTION WHEN OTHERS THEN
          P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          P_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
          
          /*************************************************************/     
          /*****************  DELETO A SOLICITAÇÃO *********************/
          /*************************************************************/        
          
          DELETE T_CON_VFRETESOLCIOT LL
           WHERE LL.CON_CONHECIMENTO_CODIGO = vValeFreteCod  
             AND LL.CON_CONHECIMENTO_SERIE  = vValeFreteSerie
             AND LL.GLB_ROTA_CODIGO         = vValeFreteRota 
             AND LL.CON_VALEFRETE_SAQUE     = vValeFreteSaque;
             
          /************************************************************/   
    END;    
  
  END SP_SET_INTEGRAVF;
  
  PROCEDURE SP_SET_INTEGRAVGM(P_QRYSTR       IN  varchar2,
                              P_IDCONSULTA   IN  VARCHAR2,
                              P_ROTA         IN  CHAR, 
                              P_STATUS       OUT CHAR,
                              P_MESSAGE      OUT VARCHAR2)AS
  V_IDVALIDO       CHAR(2);
  V_TIPO           TDVADM.T_CFE_INTEGRATDV.CFE_INTEGRATDV_COD%TYPE;
  V_QTDELOOP       INTEGER;
  V_EXISTINT       INTEGER;
  V_STATUSOPER     TDVADM.T_CON_FRETEOPER.CFE_STATUSFRETEOPER_STATUS%TYPE;
  V_QTDEINTEGRA    INTEGER; 
  
  vExisteCiotVf    INTEGER;
  vValeFreteCod    t_con_valefrete.con_conhecimento_codigo%TYPE;
  vValeFreteSerie  t_con_valefrete.con_conhecimento_serie%TYPE;
  vValeFreteRota   t_con_valefrete.glb_rota_codigo%TYPE;
  vValeFreteSaque  t_con_valefrete.con_valefrete_saque%TYPE;
  vNumViagem       t_vgm_viagem.vgm_viagem_codigo%TYPE;
  vNumRotaVgm      t_vgm_viagem.glb_rota_codigo%TYPE;
    
  BEGIN
    Begin


        /*     TIPO DA CONSULTA    */
        
        V_TIPO          := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'IntegraTdv_Cod','=','*'), 'valor', '=', '|');
        
        vNumViagem      := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'ViagemNumero','=','*'), 'valor', '=', '|');
        vNumRotaVgm     := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'ViagemRota','=','*'), 'valor', '=', '|');
        
       /*  SE NÃO FOR ID DE INTEGRAÇÃO DE VALE DE FRETE BLOQUEAMOS */
       IF V_TIPO NOT IN (31) THEN
           P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
           P_MESSAGE := 'ERRO: INTEGRAÇÃO TDV INFORMADA NÃO É VALIDA!';
           RETURN;
        END IF;  
        
        
        BEGIN
         
          SELECT COUNT(*)   
            INTO vExisteCiotVf
            FROM T_CON_FRETEOPER K
           WHERE K.CFE_INTEGRATDV_COD         = V_TIPO
             AND k.con_freteoper_id           = P_IDCONSULTA
             AND k.con_freteoper_rota         = P_ROTA                  
             AND K.CFE_STATUSFRETEOPER_STATUS = 'OK'
             AND TDVADM.fn_querystring(TDVADM.fn_querystring(K.CON_FRETEOPER_PARAMQRYSTR,'ViagemNumero','=','*'), 'valor', '=', '|') = trim(vNumViagem)  
             AND TDVADM.fn_querystring(TDVADM.fn_querystring(K.CON_FRETEOPER_PARAMQRYSTR,'ViagemRota','=','*'), 'valor', '=', '|')  = trim(vNumRotaVgm);

        EXCEPTION WHEN OTHERS THEN
        
         vExisteCiotVf := 0;
        
        END;    
        
        
         /*  SE ja tivermos um ID cadastrado para esse vale frete / saque bloqueamos */
       IF vExisteCiotVf > 0 THEN
           P_STATUS  := tdvadm.pkg_glb_common.Status_Nomal;
           P_MESSAGE := 'Ja existe um ID criado para esse Vale de Frete!';
           RETURN;
        END IF;  
        
        
        -- SE JA EXISTE SOLICITAÇÃO DE CIOT
        BEGIN
        
          SELECT COUNT(*)   
           INTO V_EXISTINT
           FROM T_CON_FRETEOPER K
           WHERE K.CFE_INTEGRATDV_COD = V_TIPO
             AND k.con_freteoper_id   = P_IDCONSULTA
             AND k.con_freteoper_rota = P_ROTA                  
             AND K.CFE_STATUSFRETEOPER_STATUS = 'AG';
           
        EXCEPTION WHEN OTHERS THEN
          V_EXISTINT := 0;
        END;           
        
        IF V_EXISTINT > 0 THEN
           P_STATUS  := tdvadm.pkg_glb_common.Status_Nomal;
           P_MESSAGE := 'Em processamento!';
           RETURN;
        END IF;  
        
        
        -- VERIFICO SE O ID PASSADO JÁ SE ENCONTRA COM ERRO OU INVÁLIDO 
        -- PRA EVITAR QUE INSIRA NOVAMENTE.
        BEGIN
          SELECT COUNT(*)
            INTO V_EXISTINT
            FROM TDVADM.T_CON_FRETEOPER FO
           WHERE FO.CON_FRETEOPER_ID   = P_IDCONSULTA
             AND FO.CFE_INTEGRATDV_COD = V_TIPO
             AND FO.CON_FRETEOPER_ROTA = P_ROTA
             AND FO.CFE_STATUSFRETEOPER_STATUS IN ('ER','IV');                          
        EXCEPTION WHEN OTHERS THEN
          V_STATUSOPER := 'ER';
        END; 
          
        IF V_EXISTINT > 0 THEN
          P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          
          SELECT 'ID possue uma solicitação de CIOT com erro ou INVALIDA! CONSULTE O MONITOR DE FRETE'
            /*CASE NVL(V_STATUSOPER,'OK')
              WHEN 'ER' THEN 'ID: '||P_IDCONSULTA||' COM ERRO'
              WHEN 'IV' THEN 'ID: '||P_IDCONSULTA||' INVÁLIDO'
            END */
          INTO P_MESSAGE
          FROM DUAL;            
          RETURN;  
        END IF;
        
        /*     VALIDA ID    */
        V_IDVALIDO := PKG_CFE_FRETE.FN_GET_IDVALIDO(P_IDCONSULTA, P_ROTA);    
    
        IF V_IDVALIDO = 'OK' THEN
          
           SELECT COUNT(*)
             INTO V_QTDEINTEGRA 
           FROM T_CON_FRETEOPER K
           WHERE K.CON_FRETEOPER_ID   = P_IDCONSULTA
             AND K.CON_FRETEOPER_ROTA = P_ROTA
             AND K.CFE_INTEGRATDV_COD = V_TIPO;
           
           V_QTDELOOP := 0;
           
           /*     CADASTRA OPERAÇÃO PARA INTEGRAÇÃO DO FRETE      */
           FOR R_CURSOR IN (SELECT K.CFE_INTEGRATDV_COD,
                                    K.CFE_OPERACOES_COD,
                                    K.CFE_OPERATDV_SEQOP,
                                    K.CFE_OPERATDV_SEQINT
                               FROM T_CFE_OPERATDV K
                               WHERE K.CFE_INTEGRATDV_COD = V_TIPO)
           LOOP
              V_QTDELOOP := V_QTDELOOP +1;
              
              INSERT INTO T_CON_FRETEOPER F VALUES(P_IDCONSULTA,
                                                   P_ROTA,
                                                   R_CURSOR.CFE_INTEGRATDV_COD,
                                                   R_CURSOR.CFE_OPERACOES_COD,
                                                   'AG',
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   P_QRYSTR,
                                                   SYSDATE,
                                                   NULL,
                                                   NULL,
                                                   V_QTDEINTEGRA+1,
                                                   0);
           END LOOP;    
           
        IF V_QTDELOOP = 0 THEN
           P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
           P_MESSAGE := 'ERRO: NENHUMA OPERAÇÃO CADASTRADA PARA ESSE VALE DE FRETE!!';
          RETURN;
        END IF;  
            
        ELSE
          P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          P_MESSAGE := 'ERRO: ID PARA CADASTRO DE INTEGRAÇÃO DO VALE DE FRETE NÃO VALIDADO!';
          RETURN;
        END IF;  
        
           
        IF NVL(P_STATUS,'OK') <> tdvadm.pkg_glb_common.Status_Erro THEN                      
           
           P_STATUS  := tdvadm.pkg_glb_common.Status_Nomal;
           P_MESSAGE := 'Processamento Normal!';
           COMMIT;
           
        END IF;

    EXCEPTION WHEN OTHERS THEN
          P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          P_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
    END;    
  
  END SP_SET_INTEGRAVGM;                             

  
  PROCEDURE SP_GET_CONSULTARNTRC(P_QryStr       IN  clob,
                                 P_IDCONSULTA   IN  NUMBER,
                                 P_ROTA         IN  CHAR,
                                 P_CURSOR       OUT T_CURSOR,
                                 P_STATUS       OUT CHAR,
                                 P_MESSAGE      OUT VARCHAR2)AS
  V_INSERT       TpRegTxt;
  V_STATUS       CHAR(1);
  V_MESSAGE      VARCHAR2(200);
  V_Proprietario T_CAR_PROPRIETARIO.CAR_PROPRIETARIO_CGCCPFCODIGO%TYPE;
  V_RNTRC        T_CAR_PROPRIETARIO.CAR_PROPRIETARIO_RNTRC%TYPE;
  V_COUNT        INTEGER;
  vPrograma     varchar2(200);
  vContratante  varchar2(200);
  BEGIN
     
       SELECT B.PROGRAM
         INTO vPrograma
         FROM V_GLB_AMBIENTE B;
       
       
       IF (LOWER(vPrograma) = 'consultawsgerenciadora.exe') THEN
         
          vContratante := ContratanteNumeroNovo;
       
       ELSE
        
          vContratante := ContratanteNumeroNovo;
          
       END IF;       
     
     who_called_me2;
     
     BEGIN

      --INSERT INTO DROPME VALUES('IntegraçãoFreteEletronico', 'SP_GET_CONSULTARNTRCfafa', NULL, NULL);
      COMMIT; 
         
       V_Proprietario:= TDVADM.fn_querystring(TDVADM.fn_querystring(P_QRYSTR,'Proprietario','=','*'), 'valor', '=', '|');
       BEGIN
         --Busco na QryString o código do RNTRC
         V_RNTRC := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QRYSTR,'PropRntrc','=','*'), 'valor', '=', '|');
         
         --Caso a variável retorne em branco.
         if (nvl(trim(V_RNTRC), 'R') = 'R') then
           
           --busco na tabela de proprietário o RNTRC que está cadastrado.
           SELECT  L.CAR_PROPRIETARIO_RNTRC
           INTO V_RNTRC
           FROM T_CAR_PROPRIETARIO L
           WHERE L.CAR_PROPRIETARIO_CGCCPFCODIGO = V_Proprietario;
           
         end if;    
     
       EXCEPTION WHEN OTHERS THEN
          V_RNTRC   := NULL;
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;          
          DBMS_OUTPUT.put_line(V_MESSAGE);          
       END;   
      
        -- 
        -- Fabiano: 24/01/2012
        -- como a consulta de RNTC é para proprietário e percebi que estavam passando cpf de motorista
        -- quando a variavel V_RNTRC estiver vazia verifico se é um carreteiro
/*        IF (V_RNTRC IS NULL) OR (trim(V_RNTRC) = '')  THEN
           
           SELECT COUNT(*)
           INTO V_COUNT 
           FROM t_car_carreteiro c
           WHERE c.car_carreteiro_cpfcodigo = V_Proprietario
           AND ROWNUM = 1; 
           
           IF V_COUNT > 0 THEN
             p_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
             p_MESSAGE := 'CONSULTA PARA PROPRIETÁRIO E FOI PASSADO UM CPF DE MOTORISTA';
             --RAISE_APPLICATION_ERROR(-20001,V_MESSAGE); 
             RETURN;  
           END IF;
           
        END IF;*/
        ------------------------------------------------------------------------------------------------
      
        -- EMPRESA
        BEGIN
          V_INSERT.con_freteoper_id    := P_IDCONSULTA;
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.contratante.documento.numero';
          V_INSERT.uti_vfintegra_valor := TRIM(vContratante);

          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);

        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
        END;

        -- QUANTIDADE DOCUMENTOS
        BEGIN
          V_INSERT.con_freteoper_id    := P_IDCONSULTA;
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.documento.qtde';
          V_INSERT.uti_vfintegra_valor := '2';

          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);

        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
        END;

        -- TIPO DE DOCUMENTO 1
        BEGIN

          V_INSERT.con_freteoper_id    := P_IDCONSULTA;
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.documento1.tipo';


          /***********************************************/
          /*                CNPJ OU CPF                  */
          /***********************************************/
          IF LENGTH(TRIM(V_Proprietario)) = 14 THEN
             V_INSERT.uti_vfintegra_valor := '1';
          ELSIF LENGTH(TRIM(V_Proprietario)) = 11 THEN
             V_INSERT.uti_vfintegra_valor := '2';
          END IF;

          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);

        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
        END;

        -- VALOR DE DOCUMENTO 1
        BEGIN

          V_INSERT.con_freteoper_id    := P_IDCONSULTA;
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.documento1.numero';
          V_INSERT.uti_vfintegra_valor := TRIM(V_Proprietario);

          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);

        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
        END;

        -- TIPO DE DOCUMENTO 2
        BEGIN

          V_INSERT.con_freteoper_id    := P_IDCONSULTA;
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.documento2.tipo';

            IF LENGTH(TRIM(V_Proprietario)) = 14 THEN
             V_INSERT.uti_vfintegra_valor := '6';
          ELSIF LENGTH(TRIM(V_Proprietario)) = 11 THEN
             V_INSERT.uti_vfintegra_valor := '5';
          END IF;

          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);

        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
        END;

       -- VALOR DE DOCUMENTO 2
        BEGIN

          V_INSERT.con_freteoper_id    := P_IDCONSULTA;
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.documento2.numero';
          V_INSERT.uti_vfintegra_valor := TRIM(V_RNTRC);

          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);

        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
        END;

      --INSERT INTO DROPME VALUES('IntegraçãoFreteEletronico', 'SP_GET_CONSULTARNTRC2', NULL, NULL);
      COMMIT; 
      
       OPEN P_CURSOR FOR
       SELECT K.UTI_VFINTEGRA_CHAVE CHAVE,
              K.UTI_VFINTEGRA_VALOR VALOR
         FROM T_UTI_VFINTEGRA K
         WHERE K.CON_FRETEOPER_ID   = P_IDCONSULTA
           AND K.CON_FRETEOPER_ROTA = P_ROTA
        ORDER BY K.UTI_VFINTEGRA_SEQ;

     DELETE T_UTI_VFINTEGRA D
      WHERE D.CON_FRETEOPER_ID   = P_IDCONSULTA
        AND D.CON_FRETEOPER_ROTA = P_ROTA;

     COMMIT;

     EXCEPTION WHEN OTHERS THEN
       P_STATUS    := tdvadm.pkg_glb_common.Status_Erro;
       P_MESSAGE  := 'Erro ao consultar. Erro='||SQLCODE;
     END;

     P_STATUS   := tdvadm.pkg_glb_common.Status_Nomal;
     P_MESSAGE := 'Processamento Normal.';


      /*OPEN P_CURSOR FOR
        SELECT L.UTI_LOGTXT_CHAVE chave,
               L.UTI_LOGTXT_VALOR valor
          FROM T_UTI_LOGTXT2 L
         WHERE L.UTI_LOGTXT_TPARQ = 'ConsultaRntrc'
         ORDER BY L.UTI_LOGTXT_SEQ;*/

  END SP_GET_CONSULTARNTRC;

  PROCEDURE SP_GET_CONSULTACARTAO(P_QryStr       IN  clob,
                                  P_IDCONSULTA   IN  NUMBER,
                                  P_ROTA         IN  CHAR,
                                  P_CURSOR       OUT T_CURSOR,
                                  P_STATUS       OUT CHAR,
                                  P_MESSAGE      OUT VARCHAR2) AS
  V_INSERT      TpRegTxt;
  V_STATUS      CHAR(1);
  V_MESSAGE     VARCHAR2(200);
  v_Cartao      varchar2(100);
  V_TIPO        CHAR(1);
  vPrograma     varchar2(200);
  vContratante  varchar2(200);

  BEGIN
     BEGIN
       
       SELECT B.PROGRAM
         INTO vPrograma
         FROM V_GLB_AMBIENTE B;
       
       
       IF (LOWER(vPrograma) = 'consultawsgerenciadora.exe') THEN
         
          vContratante := ContratanteNumeroNovo;
       
       ELSE
        
          vContratante := ContratanteNumeroNovo;
          
       END IF;       

        v_Cartao := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'ProprietarioCartao','=','*'), 'valor', '=', '|');


        -- EMPRESA
        BEGIN

          V_INSERT.con_freteoper_id    := P_IDCONSULTA;
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.contratante.documento.numero';
          V_INSERT.uti_vfintegra_valor := TRIM(vContratante);

          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);

        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
        END;

        -- CARTAO
        BEGIN

          V_INSERT.con_freteoper_id    := P_IDCONSULTA;
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.cartao.numero';
          V_INSERT.uti_vfintegra_valor := TRIM(v_Cartao);

          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);

        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
        END;

       OPEN P_CURSOR FOR
       SELECT K.UTI_VFINTEGRA_CHAVE CHAVE,
              K.UTI_VFINTEGRA_VALOR VALOR
         FROM T_UTI_VFINTEGRA K
         WHERE K.CON_FRETEOPER_ID   = P_IDCONSULTA
           AND K.CON_FRETEOPER_ROTA = P_ROTA
        ORDER BY K.UTI_VFINTEGRA_SEQ;

     DELETE T_UTI_VFINTEGRA D
      WHERE D.CON_FRETEOPER_ID   = P_IDCONSULTA
        AND D.CON_FRETEOPER_ROTA = P_ROTA;

     COMMIT;

     P_STATUS   := tdvadm.pkg_glb_common.Status_Nomal;
     P_MESSAGE  := 'Processamento Normal.';


     EXCEPTION WHEN OTHERS THEN
       P_STATUS    := tdvadm.pkg_glb_common.Status_Erro;
       P_MESSAGE   := 'Erro ao consultar. Erro='||SQLCODE;
     END;

          /*OPEN P_CURSOR FOR
        SELECT L.UTI_LOGTXT_CHAVE,
               L.UTI_LOGTXT_VALOR
          FROM T_UTI_LOGTXT2 L
         WHERE L.UTI_LOGTXT_TPARQ = 'ConsultaCartao'
         ORDER BY L.UTI_LOGTXT_SEQ;*/



  END SP_GET_CONSULTACARTAO;

  PROCEDURE SP_GET_CONSULTACARTAOPED(P_QryStr       IN  clob,
                                     P_IDCONSULTA   IN  NUMBER,
                                     P_ROTA         IN  CHAR,
                                     P_CURSOR       OUT T_CURSOR,
                                     P_STATUS       OUT CHAR,
                                     P_MESSAGE      OUT VARCHAR2) AS
  V_INSERT      TpRegTxt;
  V_STATUS      CHAR(1);
  V_MESSAGE     VARCHAR2(200);
  v_Cartao      varchar2(100);
  V_TIPO        CHAR(1);
  vPrograma     varchar2(200);
  vContratante  varchar2(200);

  BEGIN
     BEGIN

       SELECT B.PROGRAM
         INTO vPrograma
         FROM V_GLB_AMBIENTE B;
       
       
       IF (LOWER(vPrograma) = 'consultawsgerenciadora.exe') THEN
         
          vContratante := ContratanteNumeroNovo;
       
       ELSE
        
          vContratante := ContratanteNumeroNovo;
          
       END IF;       


        v_Cartao := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'MotoristaCartao','=','*'), 'valor', '=', '|');



        -- EMPRESA
        BEGIN

          V_INSERT.con_freteoper_id    := P_IDCONSULTA;
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.contratante.documento.numero';
          V_INSERT.uti_vfintegra_valor := TRIM(vContratante);

          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);

        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
        END;

        -- CARTAO
        BEGIN

          V_INSERT.con_freteoper_id    := P_IDCONSULTA;
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.cartao.numero';
          V_INSERT.uti_vfintegra_valor := TRIM(v_Cartao);

          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);

        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
        END;

       OPEN P_CURSOR FOR
       SELECT K.UTI_VFINTEGRA_CHAVE CHAVE,
              K.UTI_VFINTEGRA_VALOR VALOR
         FROM T_UTI_VFINTEGRA K
         WHERE K.CON_FRETEOPER_ID   = P_IDCONSULTA
           AND K.CON_FRETEOPER_ROTA = P_ROTA
        ORDER BY K.UTI_VFINTEGRA_SEQ;

     DELETE T_UTI_VFINTEGRA D
      WHERE D.CON_FRETEOPER_ID   = P_IDCONSULTA
        AND D.CON_FRETEOPER_ROTA = P_ROTA;

     COMMIT;

     P_STATUS   := tdvadm.pkg_glb_common.Status_Nomal;
     P_MESSAGE  := 'Processamento Normal.';


     EXCEPTION WHEN OTHERS THEN
       P_STATUS    := tdvadm.pkg_glb_common.Status_Erro;
       P_MESSAGE   := 'Erro ao consultar. Erro='||SQLCODE;
     END;

          /*OPEN P_CURSOR FOR
        SELECT L.UTI_LOGTXT_CHAVE,
               L.UTI_LOGTXT_VALOR
          FROM T_UTI_LOGTXT2 L
         WHERE L.UTI_LOGTXT_TPARQ = 'ConsultaCartao'
         ORDER BY L.UTI_LOGTXT_SEQ;*/



  END SP_GET_CONSULTACARTAOPED;

  PROCEDURE SP_GET_CONSULTACONTA(P_QryStr       IN  clob,
                                 P_IDCONSULTA   IN  NUMBER,
                                 P_ROTA         IN  CHAR,
                                 P_CURSOR       OUT T_CURSOR,
                                 P_STATUS       OUT CHAR,
                                 P_MESSAGE     OUT VARCHAR2)AS
  V_INSERT      TpRegTxt;
  V_STATUS      CHAR(1);
  V_MESSAGE     VARCHAR2(200);
  V_FAVORECIDO  T_CAR_PROPRIETARIO.CAR_PROPRIETARIO_CGCCPFCODIGO%TYPE;
  V_AGENCIA     VARCHAR2(100);
  V_CONTA       VARCHAR2(100);
  V_BANCO       VARCHAR2(100);
  V_TPCONTA     VARCHAR2(100);
  vPrograma     varchar2(200);
  vContratante  varchar2(200);  

  BEGIN
     
       SELECT B.PROGRAM
         INTO vPrograma
         FROM V_GLB_AMBIENTE B;
       
       
       IF (LOWER(vPrograma) = 'consultawsgerenciadora.exe') THEN
         
          vContratante := ContratanteNumeroNovo;
       
       ELSE
        
          vContratante := ContratanteNumeroNovo;
          
       END IF;
  
     BEGIN

     V_FAVORECIDO   := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'Proprietario','=','*'), 'valor', '=', '|');

     V_AGENCIA      := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'PropAgencia','=','*'), 'valor', '=', '|');
     V_CONTA        := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'PropConta','=','*'), 'valor', '=', '|');
     V_BANCO        := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'PropBanco','=','*'), 'valor', '=', '|');
     V_TPCONTA      := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'PropTipoConta','=','*'), 'valor', '=', '|');



        -- EMPRESA
        BEGIN

          V_INSERT.con_freteoper_id    := P_IDCONSULTA;
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.contratante.documento.numero';
          V_INSERT.uti_vfintegra_valor := TRIM(vContratante);

          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
        END;

        -- TIPO DOCUMENTO
        BEGIN

          V_INSERT.con_freteoper_id    := P_IDCONSULTA;
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.documento.tipo';

          IF LENGTH(TRIM(V_FAVORECIDO)) = 14 THEN
             V_INSERT.uti_vfintegra_valor := '1';
          ELSIF LENGTH(TRIM(V_FAVORECIDO)) = 11 THEN
             V_INSERT.uti_vfintegra_valor := '2';
          END IF;

          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
        END;

        --VALOR DOCUMENTO
        BEGIN

          V_INSERT.con_freteoper_id    := P_IDCONSULTA;
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.documento.numero';
          V_INSERT.uti_vfintegra_valor := TRIM(V_FAVORECIDO);

          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
        END;

        --BANCO
        BEGIN

          V_INSERT.con_freteoper_id    := P_IDCONSULTA;
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.conta.banco';
          V_INSERT.uti_vfintegra_valor := V_BANCO;

          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
        END;

        -- AGENCIA
        BEGIN

          V_INSERT.con_freteoper_id    := P_IDCONSULTA;
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.conta.agencia';
          V_INSERT.uti_vfintegra_valor := TRIM(V_AGENCIA);

          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
        END;

        -- CONTA
        BEGIN

          V_INSERT.con_freteoper_id    := P_IDCONSULTA;
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.conta.numero';
          V_INSERT.uti_vfintegra_valor := TRIM(V_CONTA);

          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
        END;

        -- TIPO CONTA
        BEGIN

          V_INSERT.con_freteoper_id    := P_IDCONSULTA;
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.conta.tipo';
          V_INSERT.uti_vfintegra_valor := TRIM(V_TPCONTA);

          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
        END;



       OPEN P_CURSOR FOR
       SELECT K.UTI_VFINTEGRA_CHAVE CHAVE,
              K.UTI_VFINTEGRA_VALOR VALOR
         FROM T_UTI_VFINTEGRA K
         WHERE K.CON_FRETEOPER_ID   = P_IDCONSULTA
           AND K.CON_FRETEOPER_ROTA = P_ROTA
        ORDER BY K.UTI_VFINTEGRA_SEQ;

      DELETE T_UTI_VFINTEGRA D
      WHERE D.CON_FRETEOPER_ID   = P_IDCONSULTA
        AND D.CON_FRETEOPER_ROTA = P_ROTA;

       P_STATUS   := tdvadm.pkg_glb_common.Status_Nomal;
       P_MESSAGE := 'Processamento Normal.';

       COMMIT;

     EXCEPTION WHEN OTHERS THEN
       P_STATUS    := tdvadm.pkg_glb_common.Status_Erro;
       P_MESSAGE  := 'Erro ao consultar. Erro='||SQLCODE;
     END;



 /*     OPEN P_CURSOR FOR
          SELECT L.UTI_LOGTXT_CHAVE,
                 L.UTI_LOGTXT_VALOR
            FROM T_UTI_LOGTXT2 L
           WHERE L.UTI_LOGTXT_TPARQ = 'ConsultaCartao'
           ORDER BY L.UTI_LOGTXT_SEQ;*/


   END SP_GET_CONSULTACONTA;


  PROCEDURE SP_GET_CONSULTAFROTA(P_QryStr       IN  clob,
                                 P_IDCONSULTA   IN  NUMBER,
                                 P_ROTA         IN  CHAR,
                                 P_CURSOR       OUT T_CURSOR,
                                 P_STATUS       OUT CHAR,
                                 P_MESSAGE      OUT VARCHAR2)AS
  V_INSERT      TpRegTxt;
  V_STATUS      CHAR(1);
  V_MESSAGE     VARCHAR2(200);
  V_Proprietario  T_CAR_PROPRIETARIO.CAR_PROPRIETARIO_CGCCPFCODIGO%TYPE;
  V_RNTRC        T_CAR_PROPRIETARIO.CAR_PROPRIETARIO_RNTRC%TYPE;
  V_PLACA        T_CAR_VEICULO.CAR_VEICULO_PLACA%TYPE;
  V_SAQUE        T_CAR_VEICULO.CAR_VEICULO_SAQUE%TYPE;
  V_QTDEPLACA    INTEGER;
  V_INDICEPLACA  INTEGER;
  vPrograma     varchar2(200);
  vContratante  varchar2(200); 
  BEGIN
   BEGIN

       SELECT B.PROGRAM
         INTO vPrograma
         FROM V_GLB_AMBIENTE B;
       
       
       IF (LOWER(vPrograma) = 'consultawsgerenciadora.exe') THEN
         
          vContratante := ContratanteNumeroNovo;
       
       ELSE
        
          vContratante := ContratanteNumeroNovo;
          
       END IF;
       
   
   V_Proprietario := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'Proprietario','=','*'), 'valor', '=', '|');
   V_PLACA       := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'Placa','=','*'), 'valor', '=', '|');
   V_SAQUE       := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'PlacaSaque','=','*'), 'valor', '=', '|');

   SELECT PP.CAR_PROPRIETARIO_RNTRC
     INTO V_RNTRC
     FROM T_CAR_PROPRIETARIO PP
    WHERE PP.CAR_PROPRIETARIO_CGCCPFCODIGO = V_Proprietario;

       -- EMPRESA
        BEGIN

          V_INSERT.con_freteoper_id    := P_IDCONSULTA;
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.contratante.documento.numero';
          V_INSERT.uti_vfintegra_valor := TRIM(vContratante);

          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
        END;

        -- DOCUMENTO QUANTIDADE
        BEGIN

          V_INSERT.con_freteoper_id    := P_IDCONSULTA;
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.documento.qtde';
          V_INSERT.uti_vfintegra_valor := TRIM('2');

          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
        END;

        -- DOCUMENTO 1 TIPO
        BEGIN

          V_INSERT.con_freteoper_id    := P_IDCONSULTA;
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.documento1.tipo';

          IF length(TRIM(V_Proprietario)) = 14 THEN
             V_INSERT.uti_vfintegra_valor := '1';
          ELSIF length(TRIM(V_Proprietario)) = 11 THEN
             V_INSERT.uti_vfintegra_valor := '2';
          END IF;

          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
        END;

        -- DOCUMENTO 1 VALOR
        BEGIN

          V_INSERT.con_freteoper_id    := P_IDCONSULTA;
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.documento1.numero';
          V_INSERT.uti_vfintegra_valor := TRIM(V_Proprietario);

          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
        END;

        -- Documento 2 tipo
        BEGIN

          V_INSERT.con_freteoper_id    := P_IDCONSULTA;
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.documento2.tipo';

          IF length(TRIM(V_Proprietario)) = 14 THEN
             V_INSERT.uti_vfintegra_valor := '6';
          ELSIF length(TRIM(V_Proprietario)) = 11 THEN
             V_INSERT.uti_vfintegra_valor := '5';
          END IF;

          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
        END;


         -- Documento 2 valor
        BEGIN

          V_INSERT.con_freteoper_id    := P_IDCONSULTA;
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.documento2.numero';
          V_INSERT.uti_vfintegra_valor := TRIM(V_RNTRC);

          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
        END;

       -- Quantidade Veiculo
        BEGIN

          SELECT COUNT(*)
            INTO V_QTDEPLACA
            FROM V_CFE_VEICULOS K
           WHERE K.CAR_VEICULO_PLACA = V_PLACA
             AND K.CAR_VEICULO_SAQUE = V_SAQUE;


          V_INSERT.con_freteoper_id    := P_IDCONSULTA;
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.veiculo.qtde';
          V_INSERT.uti_vfintegra_valor := V_QTDEPLACA;

          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
        END;

      --PLACAS
      V_INDICEPLACA := 0;
      FOR C_CURSOR IN (SELECT *
                            FROM V_CFE_VEICULOS V
                           WHERE V.CAR_VEICULO_PLACA = V_PLACA
                             AND V.CAR_VEICULO_SAQUE = V_SAQUE)
      LOOP
        V_INDICEPLACA := V_INDICEPLACA+1;
        BEGIN

          V_INSERT.con_freteoper_id    := P_IDCONSULTA;
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := REPLACE('viagem.veiculoXX.placa','XX',TO_CHAR(V_INDICEPLACA));
          V_INSERT.uti_vfintegra_valor := C_CURSOR.PLACA;

          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
        END;

      END LOOP;


        OPEN P_CURSOR FOR
       SELECT K.UTI_VFINTEGRA_CHAVE chave,
              K.UTI_VFINTEGRA_VALOR valor
         FROM T_UTI_VFINTEGRA K
         WHERE K.CON_FRETEOPER_ID   = P_IDCONSULTA
           AND K.CON_FRETEOPER_ROTA = P_ROTA
        ORDER BY K.UTI_VFINTEGRA_SEQ;

      DELETE T_UTI_VFINTEGRA D
      WHERE D.CON_FRETEOPER_ID   = P_IDCONSULTA
        AND D.CON_FRETEOPER_ROTA = P_ROTA;

      P_STATUS   := tdvadm.pkg_glb_common.Status_Nomal;
      P_MESSAGE  := 'Processamento Normal.';

      COMMIT;


     EXCEPTION WHEN OTHERS THEN
       P_STATUS    := tdvadm.pkg_glb_common.Status_Erro;
       P_MESSAGE   := 'Erro ao consultar. Erro='||SQLCODE;
     END;


         /* OPEN P_CURSOR FOR
        SELECT L.UTI_LOGTXT_CHAVE,
               L.UTI_LOGTXT_VALOR
          FROM T_UTI_LOGTXT2 L
         WHERE L.UTI_LOGTXT_TPARQ = 'ConsultaFrota'
         ORDER BY L.UTI_LOGTXT_SEQ;*/


  END SP_GET_CONSULTAFROTA;

  PROCEDURE SP_GET_CONSULTAFAVOR(P_QryStr       IN  clob,
                                 P_IDCONSULTA   IN  NUMBER,
                                 P_ROTA         IN  CHAR,
                                 P_CURSOR       OUT T_CURSOR,
                                 P_STATUS       OUT CHAR,
                                 P_MESSAGE     OUT VARCHAR2)AS
  V_INSERT         TpRegTxt;
  V_STATUS         CHAR(1);
  V_MESSAGE        VARCHAR2(200);
  V_PROPRIETARIO   T_CAR_PROPRIETARIO.CAR_PROPRIETARIO_CGCCPFCODIGO%TYPE;
  V_MOTORISTA      T_CAR_CARRETEIRO.CAR_CARRETEIRO_CPFCODIGO%TYPE;
  V_MOTORISTASAQUE T_CAR_CARRETEIRO.CAR_CARRETEIRO_SAQUE%TYPE;
  vPrograma        varchar2(200);
  vContratante     varchar2(200);

  BEGIN
    
       SELECT B.PROGRAM
         INTO vPrograma
         FROM V_GLB_AMBIENTE B;
       
       
       IF (LOWER(vPrograma) = 'consultawsgerenciadora.exe') THEN
         
          vContratante := ContratanteNumeroNovo;
       
       ELSE
        
          vContratante := ContratanteNumeroNovo;
          
       END IF;   
    
  
  
     BEGIN

     V_PROPRIETARIO    := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'Proprietario','=','*'), 'valor', '=', '|');
     V_MOTORISTA       := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'Motorista','=','*'), 'valor', '=', '|');
     V_MOTORISTASAQUE  := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'MotoristaSaque','=','*'), 'valor', '=', '|');


     -- EMPRESA
        BEGIN

          V_INSERT.con_freteoper_id    := P_IDCONSULTA;
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.contratante.documento.numero';
          V_INSERT.uti_vfintegra_valor := TRIM(vContratante);

          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
        END;

     -- TIPO DOCUMENTO
        BEGIN

          V_INSERT.con_freteoper_id    := P_IDCONSULTA;
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.documento.tipo';

          IF length(trim(V_PROPRIETARIO)) = 14 THEN
             V_INSERT.uti_vfintegra_valor := 1;
          ELSIF length(trim(V_PROPRIETARIO)) = 11 THEN
             V_INSERT.uti_vfintegra_valor := 2;
          END IF;



          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
        END;

    -- NUMERO DOCUMENTO
        BEGIN

          V_INSERT.con_freteoper_id    := P_IDCONSULTA;
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.documento.numero';
          V_INSERT.uti_vfintegra_valor := TRIM(V_PROPRIETARIO);

          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
        END;

        OPEN P_CURSOR FOR
       SELECT K.UTI_VFINTEGRA_CHAVE CHAVE,
              K.UTI_VFINTEGRA_VALOR VALOR
         FROM T_UTI_VFINTEGRA K
         WHERE K.CON_FRETEOPER_ID   = P_IDCONSULTA
           AND K.CON_FRETEOPER_ROTA = P_ROTA
        ORDER BY K.UTI_VFINTEGRA_SEQ;

      DELETE T_UTI_VFINTEGRA D
      WHERE D.CON_FRETEOPER_ID   = P_IDCONSULTA
        AND D.CON_FRETEOPER_ROTA = P_ROTA;

      P_STATUS   := tdvadm.pkg_glb_common.Status_Nomal;
      P_MESSAGE  := 'Processamento Normal.';

      COMMIT;


     EXCEPTION WHEN OTHERS THEN
       P_STATUS    := tdvadm.pkg_glb_common.Status_Erro;
       P_MESSAGE  := 'Erro ao consultar. Erro='||SQLCODE;
     END;

         /*   OPEN P_CURSOR FOR
        SELECT L.UTI_LOGTXT_CHAVE,
               L.UTI_LOGTXT_VALOR
          FROM T_UTI_LOGTXT2 L
         WHERE L.UTI_LOGTXT_TPARQ = 'ConsultaFavorecido'
         ORDER BY L.UTI_LOGTXT_SEQ; */


  END SP_GET_CONSULTAFAVOR;

  PROCEDURE SP_GET_CONSULTAFAVORMOT(P_QryStr       IN  clob,
                                    P_IDCONSULTA   IN  NUMBER,
                                    P_ROTA         IN  CHAR,
                                    P_CURSOR       OUT T_CURSOR,
                                    P_STATUS       OUT CHAR,
                                    P_MESSAGE      OUT VARCHAR2)AS
  V_INSERT         TpRegTxt;
  V_STATUS         CHAR(1);
  V_MESSAGE        VARCHAR2(200);
  V_PROPRIETARIO   T_CAR_PROPRIETARIO.CAR_PROPRIETARIO_CGCCPFCODIGO%TYPE;
  V_MOTORISTA      T_CAR_CARRETEIRO.CAR_CARRETEIRO_CPFCODIGO%TYPE;
  V_MOTORISTASAQUE T_CAR_CARRETEIRO.CAR_CARRETEIRO_SAQUE%TYPE;
  vPrograma     varchar2(200);
  vContratante  varchar2(200);

  BEGIN
   BEGIN

        SELECT B.PROGRAM
          INTO vPrograma
          FROM V_GLB_AMBIENTE B;
       
       
       IF (LOWER(vPrograma) = 'consultawsgerenciadora.exe') THEN
         
          vContratante := ContratanteNumeroNovo;
       
       ELSE
        
          vContratante := ContratanteNumeroNovo;
          
       END IF;       
     
     
     V_MOTORISTA       := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'Motorista','=','*'), 'valor', '=', '|');
     V_MOTORISTASAQUE  := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'MotoristaSaque','=','*'), 'valor', '=', '|');


     -- EMPRESA
        BEGIN

          V_INSERT.con_freteoper_id    := P_IDCONSULTA;
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.contratante.documento.numero';
          V_INSERT.uti_vfintegra_valor := TRIM(vContratante);

          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
        END;

     -- TIPO DOCUMENTO
        BEGIN

          V_INSERT.con_freteoper_id    := P_IDCONSULTA;
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.documento.tipo';

          IF length(trim(V_MOTORISTA)) = 14 THEN
             V_INSERT.uti_vfintegra_valor := 1;
          ELSIF length(trim(V_MOTORISTA)) = 11 THEN
             V_INSERT.uti_vfintegra_valor := 2;
          END IF;



          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
        END;

    -- NUMERO DOCUMENTO
        BEGIN

          V_INSERT.con_freteoper_id    := P_IDCONSULTA;
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.documento.numero';
          V_INSERT.uti_vfintegra_valor := TRIM(V_MOTORISTA);

          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
        END;

        OPEN P_CURSOR FOR
       SELECT K.UTI_VFINTEGRA_CHAVE CHAVE ,
              K.UTI_VFINTEGRA_VALOR VALOR
         FROM T_UTI_VFINTEGRA K
         WHERE K.CON_FRETEOPER_ID   = P_IDCONSULTA
           AND K.CON_FRETEOPER_ROTA = P_ROTA
        ORDER BY K.UTI_VFINTEGRA_SEQ;

      DELETE T_UTI_VFINTEGRA D
      WHERE D.CON_FRETEOPER_ID   = P_IDCONSULTA
        AND D.CON_FRETEOPER_ROTA = P_ROTA;

      P_STATUS   := tdvadm.pkg_glb_common.Status_Nomal;
      P_MESSAGE  := 'Processamento Normal.';

      COMMIT;


     EXCEPTION WHEN OTHERS THEN
       P_STATUS    := tdvadm.pkg_glb_common.Status_Erro;
       P_MESSAGE  := 'Erro ao consultar. Erro='||SQLCODE;
     END;

         /*   OPEN P_CURSOR FOR
        SELECT L.UTI_LOGTXT_CHAVE,
               L.UTI_LOGTXT_VALOR
          FROM T_UTI_LOGTXT2 L
         WHERE L.UTI_LOGTXT_TPARQ = 'ConsultaFavorecido'
         ORDER BY L.UTI_LOGTXT_SEQ; */

  END SP_GET_CONSULTAFAVORMOT;

  PROCEDURE SP_GET_INSEREFAVORECIDO(P_QryStr       IN  clob,
                                    P_IDCONSULTA   IN  NUMBER,
                                    P_ROTA         IN  CHAR,
                                    P_CURSOR       OUT T_CURSOR,
                                    P_STATUS       OUT CHAR,
                                    P_MESSAGE     OUT VARCHAR2)AS
  V_INSERT         TpRegTxt;
  V_STATUS         CHAR(1);
  V_MESSAGE        VARCHAR2(200);
  V_FAVORECIDOTIPO CHAR(1);

  V_PROPRIETARIO   T_CAR_PROPRIETARIO.CAR_PROPRIETARIO_CGCCPFCODIGO%TYPE;
  V_PROPRG         T_CAR_PROPRIETARIO.CAR_PROPRIETARIO_RGCODIGO%TYPE;
  V_PROPRGUF       T_CAR_PROPRIETARIO.GLB_ESTADORG_CODIGO%TYPE;
  V_MOTORISTA      T_CAR_CARRETEIRO.CAR_CARRETEIRO_CPFCODIGO%TYPE;
  V_MOTORISTASAQUE T_CAR_CARRETEIRO.CAR_CARRETEIRO_SAQUE%TYPE;
  V_RNTRC          T_CAR_PROPRIETARIO.CAR_PROPRIETARIO_RNTRC%TYPE;
  V_RG             T_CAR_CARRETEIRO.CAR_CARRETEIRO_RGCODIGO%TYPE;
  V_RGUF           T_CAR_CARRETEIRO.GLB_ESTADORG_CODIGO%TYPE;

  BEGIN

     BEGIN

        V_FAVORECIDOTIPO := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'FavorecidoTipo','=','*'), 'valor', '=', '|');


        -- COLHENDO INFORMAÇÕES FAVORECIDO

        IF V_FAVORECIDOTIPO = 'P' THEN
        /*    FAVORECIDO PROPRIETARIO           */
           V_PROPRIETARIO   := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'Proprietario','=','*'), 'valor', '=', '|');

           BEGIN
           SELECT TRIM(P.CAR_PROPRIETARIO_RNTRC),
                  P.CAR_PROPRIETARIO_RGCODIGO   ,
                  P.GLB_ESTADORG_CODIGO
             INTO V_RNTRC                       ,
                  V_PROPRG                      ,
                  V_PROPRGUF
             FROM TDVADM.T_CAR_PROPRIETARIO P
            WHERE P.CAR_PROPRIETARIO_CGCCPFCODIGO = V_PROPRIETARIO
              AND TRIM(P.CAR_PROPRIETARIO_RNTRC) IS NOT NULL;
           EXCEPTION WHEN OTHERS THEN

            P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
            P_MESSAGE := 'Erro';

           END;
        ELSIF V_FAVORECIDOTIPO = 'J' THEN
        /*    FAVORECIDO PROPRIETARIO           */
            RAISE_APPLICATION_ERROR(-20001, 'PROPRIETARIO PJ, BY DIEGO LIRIO');

        ELSIF V_FAVORECIDOTIPO = 'M' THEN
        /*    FAVORECIDO MOTORISTA              */

           V_MOTORISTA      := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'Motorista','=','*'), 'valor', '=', '|');
           V_MOTORISTASAQUE := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'MotoristaSaque','=','*'), 'valor', '=', '|');

           BEGIN

           SELECT CC.CAR_CARRETEIRO_RGCODIGO,
                  CC.GLB_ESTADORG_CODIGO
             INTO V_RG                      ,
                  V_RGUF
           FROM T_CAR_CARRETEIRO CC
           WHERE CC.CAR_CARRETEIRO_CPFCODIGO = V_MOTORISTA
             AND CC.CAR_CARRETEIRO_SAQUE     = V_MOTORISTASAQUE;

           EXCEPTION WHEN OTHERS THEN

            P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
            P_MESSAGE := 'Erro';

           END;

        END IF;

        -- EMPRESA
        BEGIN

          V_INSERT.con_freteoper_id    := P_IDCONSULTA;
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.contratante.documento.numero';
          V_INSERT.uti_vfintegra_valor := TRIM(ContratanteNumero);

          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
        END;

        -- QUANTIDADE DOCUMENTOS FAVORECIDO
        BEGIN

          V_INSERT.con_freteoper_id    := P_IDCONSULTA;
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.documento.qtde';

          IF V_FAVORECIDOTIPO = 'P' THEN
             IF LENGTH(TRIM(V_PROPRIETARIO)) = 14 THEN
                V_INSERT.uti_vfintegra_valor := '2';
             ELSIF LENGTH(TRIM(V_PROPRIETARIO)) = 11 THEN
                V_INSERT.uti_vfintegra_valor := '3';
             END IF;
          ELSIF V_FAVORECIDOTIPO = 'M' THEN
             V_INSERT.uti_vfintegra_valor := '2';
          END IF;

          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
        END;

        -- DOCUMENTOS FAVORECIDO
        BEGIN

          IF V_FAVORECIDOTIPO = 'P' THEN

             IF LENGTH(TRIM(V_PROPRIETARIO)) = 14 THEN

                -- DOCUMENTO 1
                BEGIN
                   V_INSERT.con_freteoper_id    := P_IDCONSULTA;
                   V_INSERT.con_freteoper_rota  := P_ROTA;
                   V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                   V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.documento1.tipo';
                   V_INSERT.uti_vfintegra_valor := '1';
                   PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

                   V_INSERT.con_freteoper_id    := P_IDCONSULTA;
                   V_INSERT.con_freteoper_rota  := P_ROTA;
                   V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                   V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.documento1.numero';
                   V_INSERT.uti_vfintegra_valor := TRIM(V_PROPRIETARIO);
                   PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

                END;

                -- DOCUMENTO 2
                BEGIN
                   V_INSERT.con_freteoper_id    := P_IDCONSULTA;
                   V_INSERT.con_freteoper_rota  := P_ROTA;
                   V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                   V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.documento2.tipo';
                   V_INSERT.uti_vfintegra_valor := '5';
                   PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

                   V_INSERT.con_freteoper_id    := P_IDCONSULTA;
                   V_INSERT.con_freteoper_rota  := P_ROTA;
                   V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                   V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.documento2.numero';
                   V_INSERT.uti_vfintegra_valor := TRIM(V_RNTRC);
                   PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                END;

             ELSIF LENGTH(TRIM(V_PROPRIETARIO)) = 11 THEN
                -- DOCUMENTO 1
                BEGIN
                   V_INSERT.con_freteoper_id    := P_IDCONSULTA;
                   V_INSERT.con_freteoper_rota  := P_ROTA;
                   V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                   V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.documento1.tipo';
                   V_INSERT.uti_vfintegra_valor := '2';
                   PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

                   V_INSERT.con_freteoper_id    := P_IDCONSULTA;
                   V_INSERT.con_freteoper_rota  := P_ROTA;
                   V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                   V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.documento1.numero';
                   V_INSERT.uti_vfintegra_valor := TRIM(V_PROPRIETARIO);
                   PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

                END;

                -- DOCUMENTO 2
                BEGIN
                   V_INSERT.con_freteoper_id    := P_IDCONSULTA;
                   V_INSERT.con_freteoper_rota  := P_ROTA;
                   V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                   V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.documento2.tipo';
                   V_INSERT.uti_vfintegra_valor := '5';
                   PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

                   V_INSERT.con_freteoper_id    := P_IDCONSULTA;
                   V_INSERT.con_freteoper_rota  := P_ROTA;
                   V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                   V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.documento2.numero';
                   V_INSERT.uti_vfintegra_valor := TRIM(V_RNTRC);
                   PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                END;

                -- DOCUMENTO 3
                BEGIN
                    V_INSERT.con_freteoper_id    := P_IDCONSULTA;
                    V_INSERT.con_freteoper_rota  := P_ROTA;
                    V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                    V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.documento3.tipo';
                    V_INSERT.uti_vfintegra_valor := '3';
                    PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

                    V_INSERT.con_freteoper_id    := P_IDCONSULTA;
                    V_INSERT.con_freteoper_rota  := P_ROTA;
                    V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                    V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.documento3.numero';
                    V_INSERT.uti_vfintegra_valor := TRIM(V_PROPRG);
                    PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

                    V_INSERT.con_freteoper_id    := P_IDCONSULTA;
                    V_INSERT.con_freteoper_rota  := P_ROTA;
                    V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                    V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.documento3.uf';
                    V_INSERT.uti_vfintegra_valor := TRIM(V_PROPRGUF);
                    PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

                 END;

             END IF;

          ELSIF V_FAVORECIDOTIPO = 'M' THEN

             -- DOCUMENTO 1
             BEGIN

               V_INSERT.con_freteoper_id    := P_IDCONSULTA;
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.documento1.tipo';
               V_INSERT.uti_vfintegra_valor := '2';
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

               V_INSERT.con_freteoper_id    := P_IDCONSULTA;
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.documento1.numero';
               V_INSERT.uti_vfintegra_valor := TRIM(V_MOTORISTA);
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

             END;

             -- DOCUMENTO 2
             BEGIN

               V_INSERT.con_freteoper_id    := P_IDCONSULTA;
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.documento2.tipo';
               V_INSERT.uti_vfintegra_valor := '3';
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

               V_INSERT.con_freteoper_id    := P_IDCONSULTA;
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.documento2.numero';
               V_INSERT.uti_vfintegra_valor := TRIM(V_RG);
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

               V_INSERT.con_freteoper_id    := P_IDCONSULTA;
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.documento2.uf';
               V_INSERT.uti_vfintegra_valor := TRIM(V_RGUF);
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

             END;

          END IF;


        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
        END;

        -- INFORMAÇOES DO FAVORECIDO
        IF V_FAVORECIDOTIPO = 'P' THEN
        -- INFORMAÇÕES PROPRIETARIO
        BEGIN

          FOR R_CURSORINF IN(SELECT *
                              FROM T_CAR_PROPRIETARIO L
                              WHERE L.CAR_PROPRIETARIO_CGCCPFCODIGO = V_PROPRIETARIO)
          LOOP
              -- NOME
              V_INSERT.con_freteoper_id    := P_IDCONSULTA;
              V_INSERT.con_freteoper_rota  := P_ROTA;
              V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
              V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.nome';
              V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORINF.CAR_PROPRIETARIO_RAZAOSOCIAL);
              PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

              -- NARCIMENTO / SOMENTE PF
              IF LENGTH(TRIM(R_CURSORINF.CAR_PROPRIETARIO_CGCCPFCODIGO)) = 11 THEN
                 V_INSERT.con_freteoper_id    := P_IDCONSULTA;
                 V_INSERT.con_freteoper_rota  := P_ROTA;
                 V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                 V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.data.nascimento';
                 V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORINF.CAR_PROPRIETARIO_DATANASC);
                 PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

              END IF;

              -- LOGRADOURO OBRIGATORIO
              V_INSERT.con_freteoper_id    := P_IDCONSULTA;
              V_INSERT.con_freteoper_rota  := P_ROTA;
              V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
              V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.endereco.logradouro';
              V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORINF.CAR_PROPRIETARIO_ENDERECO);
              PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

              -- ENDEREÇO NUMERO
              V_INSERT.con_freteoper_id    := P_IDCONSULTA;
              V_INSERT.con_freteoper_rota  := P_ROTA;
              V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
              V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.endereco.numero';
              V_INSERT.uti_vfintegra_valor := TRIM('1');
              PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

              -- COMPLEMENTO
              V_INSERT.con_freteoper_id    := P_IDCONSULTA;
              V_INSERT.con_freteoper_rota  := P_ROTA;
              V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
              V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.endereco.complemento';
              V_INSERT.uti_vfintegra_valor := TRIM('COMPLEMENTO');
              PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

              -- BAIRRO
              V_INSERT.con_freteoper_id    := P_IDCONSULTA;
              V_INSERT.con_freteoper_rota  := P_ROTA;
              V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
              V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.endereco.bairro';
              V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORINF.CAR_PROPRIETARIO_BAIRRO);
              PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

              -- CIDADE
              V_INSERT.con_freteoper_id    := P_IDCONSULTA;
              V_INSERT.con_freteoper_rota  := P_ROTA;
              V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
              V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.endereco.cidade';
              V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORINF.CAR_PROPRIETARIO_CIDADE);
              PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

              -- UF
              V_INSERT.con_freteoper_id    := P_IDCONSULTA;
              V_INSERT.con_freteoper_rota  := P_ROTA;
              V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
              V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.endereco.uf';
              V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORINF.GLB_ESTADOPROPRIETARIO_CODIGO);
              PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

              -- PAIS
              V_INSERT.con_freteoper_id    := P_IDCONSULTA;
              V_INSERT.con_freteoper_rota  := P_ROTA;
              V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
              V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.endereco.pais';
              V_INSERT.uti_vfintegra_valor := TRIM('BRASIL');
              PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

              -- CEP
              V_INSERT.con_freteoper_id    := P_IDCONSULTA;
              V_INSERT.con_freteoper_rota  := P_ROTA;
              V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
              V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.endereco.cep';
              V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORINF.CAR_PROPRIETARIO_CEP);
              PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

              -- TELEFONE DDD
              V_INSERT.con_freteoper_id    := P_IDCONSULTA;
              V_INSERT.con_freteoper_rota  := P_ROTA;
              V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
              V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.telefone.ddd';
              V_INSERT.uti_vfintegra_valor := TRIM(SUBSTR(R_CURSORINF.CAR_PROPRIETARIO_TELEFONE,1,3));
              PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

              -- TELEFONE NUMERO
              V_INSERT.con_freteoper_id    := P_IDCONSULTA;
              V_INSERT.con_freteoper_rota  := P_ROTA;
              V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
              V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.telefone.numero';
              V_INSERT.uti_vfintegra_valor := SUBSTR(TRIM(R_CURSORINF.CAR_PROPRIETARIO_TELEFONE),-8);
              PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

              /*-- CELULAR DDD
              V_INSERT.con_freteoper_id    := P_IDCONSULTA;
              V_INSERT.con_freteoper_rota  := P_ROTA;
              V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
              V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.celular.ddd';
              V_INSERT.uti_vfintegra_valor := TRIM('61139432002469');
              PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

              -- CELULAR NUMERO
              V_INSERT.con_freteoper_id    := P_IDCONSULTA;
              V_INSERT.con_freteoper_rota  := P_ROTA;
              V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
              V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.celular.numero';
              V_INSERT.uti_vfintegra_valor := TRIM('61139432002469');
              PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

              -- FAVORECIDO E-MAIL
              V_INSERT.con_freteoper_id    := P_IDCONSULTA;
              V_INSERT.con_freteoper_rota  := P_ROTA;
              V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
              V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.email';
              V_INSERT.uti_vfintegra_valor := TRIM('61139432002469');
              PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);*/

          END LOOP;


        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
        END;

        ELSIF V_FAVORECIDOTIPO = 'M' THEN
        -- INFORMAÇÕES MOTORISTA
        BEGIN

         BEGIN

          FOR R_CURSORINF2 IN(SELECT *
                              FROM T_CAR_CARRETEIRO L
                              WHERE L.CAR_CARRETEIRO_CPFCODIGO = V_MOTORISTA
                                AND L.CAR_CARRETEIRO_SAQUE     = V_MOTORISTASAQUE)
          LOOP
              -- NOME
              V_INSERT.con_freteoper_id    := P_IDCONSULTA;
              V_INSERT.con_freteoper_rota  := P_ROTA;
              V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
              V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.nome';
              V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORINF2.CAR_CARRETEIRO_NOME);
              PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

              -- NARCIMENTO / SOMENTE PF
              IF LENGTH(TRIM(R_CURSORINF2.CAR_CARRETEIRO_CPFCODIGO)) = 11 THEN
                 V_INSERT.con_freteoper_id    := P_IDCONSULTA;
                 V_INSERT.con_freteoper_rota  := P_ROTA;
                 V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                 V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.data.nascimento';
                 V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORINF2.CAR_CARRETEIRO_DATANASC);
                 PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

              END IF;

              -- LOGRADOURO OBRIGATORIO
              V_INSERT.con_freteoper_id    := P_IDCONSULTA;
              V_INSERT.con_freteoper_rota  := P_ROTA;
              V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
              V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.endereco.logradouro';
              V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORINF2.CAR_CARRETEIRO_ENDERECO);
              PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

              -- ENDEREÇO NUMERO
              V_INSERT.con_freteoper_id    := P_IDCONSULTA;
              V_INSERT.con_freteoper_rota  := P_ROTA;
              V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
              V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.endereco.numero';
              V_INSERT.uti_vfintegra_valor := TRIM('1');
              PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

              -- COMPLEMENTO
              V_INSERT.con_freteoper_id    := P_IDCONSULTA;
              V_INSERT.con_freteoper_rota  := P_ROTA;
              V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
              V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.endereco.complemento';
              V_INSERT.uti_vfintegra_valor := TRIM('COMPLEMENTO');
              PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

              -- BAIRRO
              V_INSERT.con_freteoper_id    := P_IDCONSULTA;
              V_INSERT.con_freteoper_rota  := P_ROTA;
              V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
              V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.endereco.bairro';
              V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORINF2.CAR_CARRETEIRO_BAIRRO);
              PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

              -- CIDADE
              V_INSERT.con_freteoper_id    := P_IDCONSULTA;
              V_INSERT.con_freteoper_rota  := P_ROTA;
              V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
              V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.endereco.cidade';
              V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORINF2.CAR_CARRETEIRO_CIDADE);
              PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

              -- UF
              V_INSERT.con_freteoper_id    := P_IDCONSULTA;
              V_INSERT.con_freteoper_rota  := P_ROTA;
              V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
              V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.endereco.uf';
              V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORINF2.GLB_ESTADOCARRETEIRO_CODIGO);
              PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

              -- PAIS
              V_INSERT.con_freteoper_id    := P_IDCONSULTA;
              V_INSERT.con_freteoper_rota  := P_ROTA;
              V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
              V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.endereco.pais';
              V_INSERT.uti_vfintegra_valor := TRIM('BRASIL');
              PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

              -- CEP
              V_INSERT.con_freteoper_id    := P_IDCONSULTA;
              V_INSERT.con_freteoper_rota  := P_ROTA;
              V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
              V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.endereco.cep';
              V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORINF2.CAR_CARRETEIRO_CEP);
              PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

              -- TELEFONE DDD
              V_INSERT.con_freteoper_id    := P_IDCONSULTA;
              V_INSERT.con_freteoper_rota  := P_ROTA;
              V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
              V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.telefone.ddd';
              V_INSERT.uti_vfintegra_valor := TRIM('11');
              PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

              -- TELEFONE NUMERO
              V_INSERT.con_freteoper_id    := P_IDCONSULTA;
              V_INSERT.con_freteoper_rota  := P_ROTA;
              V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
              V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.telefone.numero';
              V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORINF2.CAR_CARRETEIRO_TELEFONE);
              PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

              /*-- CELULAR DDD
              V_INSERT.con_freteoper_id    := P_IDCONSULTA;
              V_INSERT.con_freteoper_rota  := P_ROTA;
              V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
              V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.celular.ddd';
              V_INSERT.uti_vfintegra_valor := TRIM('61139432002469');
              PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

              -- CELULAR NUMERO
              V_INSERT.con_freteoper_id    := P_IDCONSULTA;
              V_INSERT.con_freteoper_rota  := P_ROTA;
              V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
              V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.celular.numero';
              V_INSERT.uti_vfintegra_valor := TRIM('61139432002469');
              PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

              -- FAVORECIDO E-MAIL
              V_INSERT.con_freteoper_id    := P_IDCONSULTA;
              V_INSERT.con_freteoper_rota  := P_ROTA;
              V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
              V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.email';
              V_INSERT.uti_vfintegra_valor := TRIM('61139432002469');
              PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);*/

          END LOOP;


        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
        END;

        END;

        END IF;

         OPEN P_CURSOR FOR
       SELECT K.UTI_VFINTEGRA_CHAVE CHAVE, 
              K.UTI_VFINTEGRA_VALOR VALOR
         FROM T_UTI_VFINTEGRA K 
         WHERE K.CON_FRETEOPER_ID   = P_IDCONSULTA
           AND K.CON_FRETEOPER_ROTA = P_ROTA
        ORDER BY K.UTI_VFINTEGRA_SEQ;

      DELETE T_UTI_VFINTEGRA D
      WHERE D.CON_FRETEOPER_ID   = P_IDCONSULTA
        AND D.CON_FRETEOPER_ROTA = P_ROTA;

      P_STATUS   := tdvadm.pkg_glb_common.Status_Nomal;
      P_MESSAGE  := 'Processamento Normal.';

     EXCEPTION WHEN OTHERS THEN
       P_STATUS    := tdvadm.pkg_glb_common.Status_Erro;
       P_MESSAGE  := 'Erro ao consultar. Erro='||SQLCODE;
     END;

  END SP_GET_INSEREFAVORECIDO;

  procedure Sp_Get_InsereCartao(P_QryStr       IN  clob,
                                P_IdConsulta   IN  NUMBER,
                                P_Rota         IN  CHAR,
                                P_Cursor       OUT T_CURSOR,
                                P_Status       OUT CHAR,
                                P_Message      OUT VARCHAR2)AS

  vInsert                   pkg_cfe_frete.tpregtxt;
  vStatus                   char(1);
  vMessage                  varchar2(200);
  vFavorecidoTipo           char(1);
  vProprietario1            t_car_proprietario.car_proprietario_cgccpfcodigo%type;
  vPropRg                   t_car_proprietario.car_proprietario_rgcodigo%type;
  vPropRgUF                 t_car_proprietario.glb_estadorg_codigo%type;
  vMotorista                t_car_carreteiro.car_carreteiro_cpfcodigo%type;
  vMotoristaSaque           t_car_carreteiro.car_carreteiro_saque%type;
  vRntrc                    t_car_proprietario.car_proprietario_rntrc%type;
  vRg                       t_car_carreteiro.car_carreteiro_rgcodigo%type;
  vRgUf                     t_car_carreteiro.glb_estadorg_codigo%type;
  vCartaoNumero             varchar2(20);
  vProprietario             t_car_proprietario.car_proprietario_cgccpfcodigo%type;
  vProprietarioRazaoSocial  t_car_proprietario.car_proprietario_razaosocial%type;
  vResponsavel              t_car_propresp.car_proprietario_cgccpfcodigo%type;
  vRgNumero                 t_frt_motorista.frt_motorista_rgcodigo%type;
  vMotoristaCodigo          varchar2(50);
  vMotoristaCpfFrota        t_frt_motorista.frt_motorista_cpf%type;
  vCartaoMotoristaFrota     varchar2(20);
  vDDDFpw                   varchar2(3);
  vTelefoneFpw              varchar2(9);

  
  Begin
      
      
      Begin
        
        /**************************************************/
        /**         COLHENDO INFORMAÇÕES FAVORECIDO      **/
        /**************************************************/
        Begin
          
          vFavorecidoTipo := tdvadm.fn_querystring(tdvadm.fn_querystring(P_QryStr,'FavorecidoTipo','=','*'), 'valor', '=', '|');  
        
          --FAVORECIDO PROPRIETARIO
          If vFavorecidoTipo = 'P'    Then
            
             vProprietario1   := tdvadm.fn_querystring(tdvadm.fn_querystring(P_QryStr,'Proprietario','=','*'), 'valor', '=', '|');
             vCartaoNumero         := tdvadm.fn_querystring(tdvadm.fn_querystring(P_QryStr,'ProprietarioCartao','=','*'), 'valor', '=', '|');

             Begin
               
               Select Trim(p.car_proprietario_rntrc),
                      p.car_proprietario_rgcodigo   ,
                      p.glb_estadorg_codigo
                 Into vRntrc                       ,
                      vPropRg                      ,
                      vPropRgUF
                 From tdvadm.t_car_proprietario p
                where p.car_proprietario_cgccpfcodigo = vproprietario1
                  and Trim(p.car_proprietario_rntrc) is not null;
                      
             Exception When Others Then
                P_Status  := tdvadm.pkg_glb_common.Status_Erro;
                P_Message := 'Erro';
             End;

          --FAVORECIDO MOTORISTA
          Elsif vFavorecidoTipo = 'M' Then

            vMotorista      := tdvadm.fn_querystring(tdvadm.fn_querystring(P_QryStr,'Motorista','=','*'), 'valor', '=', '|');
            vMotoristaSAQUE := tdvadm.fn_querystring(tdvadm.fn_querystring(P_QryStr,'MotoristaSaque','=','*'), 'valor', '=', '|');
            vCartaoNumero   := tdvadm.fn_querystring(tdvadm.fn_querystring(P_QryStr,'MotoristaCartao','=','*'), 'valor', '=', '|');

             Begin

               Select cc.car_carreteiro_rgcodigo,
                      cc.glb_estadorg_codigo
                 Into vRg                       ,
                      vRgUf
                 From t_car_carreteiro cc
                Where cc.car_carreteiro_cpfcodigo = vMotorista
                  And cc.car_carreteiro_saque     = vMotoristaSAQUE;

            Exception When Others Then
              P_Status  := tdvadm.pkg_glb_common.Status_Erro;
              P_Message := 'Erro';
            End;

          --FAVORECIDO MOTORISTA
          Elsif vFavorecidoTipo = 'J' Then
           
            vProprietario1   := tdvadm.fn_querystring(tdvadm.fn_querystring(P_QryStr,'Proprietario','=','*'), 'valor', '=', '|');
            vCartaoNumero    := tdvadm.fn_querystring(tdvadm.fn_querystring(P_QryStr,'ResponsavelCartao','=','*'), 'valor', '=', '|');
            vResponsavel     := tdvadm.fn_querystring(tdvadm.fn_querystring(P_QryStr,'ResponsavelCPF','=','*'), 'valor', '=', '|');

            Begin

             Select Trim(cc.car_propresp_rgcodigo),
                    cc.glb_estadorg_codigo
               Into vRg                         ,
                    vRgUf
               From t_car_propresp cc
              Where Trim(cc.car_proprietario_cgccpfcodigo) = Trim(vProprietario1)
                And Trim(cc.car_propresp_cpfcodigo)        = Trim(vResponsavel);

            Exception
              
              When No_Data_Found Then
              Begin
                Open P_Cursor For
                Select Sysdate
                  From Dual;

                P_Status  := tdvadm.pkg_glb_common.Status_Erro;
                P_Message := 'Erro ao consultar responsavel, favor verIfique. Proprietario: '||
                              Trim(vProprietario1)||' Responsavel: '||Trim(vResponsavel);

                Return;
              End;

              
              When Others Then
              Begin
               Open P_Cursor For
               Select Sysdate
                 From Dual;

               P_Status  := tdvadm.pkg_glb_common.Status_Erro;
               P_Message := 'Erro ='||Sqlerrm;

               Return;
             End;
              
            
            End;

            Begin

              Select pr.car_proprietario_cgccpfcodigo,
                     Trim(pr.car_proprietario_razaosocial)
                Into vProprietario,
                     vProprietarioRazaoSocial
                From t_car_proprietario pr
               Where pr.car_proprietario_cgccpfcodigo = vProprietario1;

            Exception When Others Then
             P_Status  := tdvadm.pkg_glb_common.Status_Erro;
             P_Message := 'Erro ao executar PKG_CFE_FRETE.SP_GET_INSERECARTAO. Erro: '||SQLERRM||dbms_utility.format_error_backtrace;
            End;
     

            /****************************************************/
            /***************VALIDAÇÃO DO PROPRIETARIO************/
            /****************************************************/
            If Trim(vProprietario) <> Trim(vProprietario1) Then
               RAISE_APPLICATION_ERROR(-20001,'Proprietário inFormado é dIferEnde do proprietário do veiculo vinculado a esse Motorista!|');
            End If;
            /****************************************************/

          --FAVORECIDO MOTORISTA FROTA
          Elsif vFavorecidoTipo = 'F' Then
            
            vMotoristaCodigo      := tdvadm.fn_querystring(tdvadm.fn_querystring(P_QryStr,'CodMotorista','=','*'), 'valor', '=', '|');
            vCartaoMotoristaFrota := tdvadm.fn_querystring(tdvadm.fn_querystring(P_QryStr,'MotoristaCartao','=','*'), 'valor', '=', '|');
            
            Begin
              
              Select l.frt_motorista_rgcodigo,
                     l.glb_estadorg_codigo,
                     l.frt_motorista_cpf
                Into vRgNumero,
                     vRgUf    ,
                     vMotoristaCpfFrota    
                From tdvadm.t_frt_motorista l
               Where l.frt_motorista_codigo = vMotoristaCodigo;    
            
            Exception When No_Data_Found Then
              
              Open P_Cursor For
              Select Sysdate
                From Dual;
                
              P_Status  := tdvadm.pkg_glb_common.status_erro;
              P_Message := 'Codigo do motorista frota não existe!';
              
              return;
              
            End; 
            
            If (vCartaoMotoristaFrota is not null) Then
              
              vCartaoNumero:= vCartaoMotoristaFrota;
              
            End If;  
            
          End If;
        
        End;
        /**************************************************/
        
        /**************************************************/
        /**         CABEÇALHO INTEGRAÇÃO                 **/
        /**************************************************/
        Begin
          
          -- EMPRESA
          Begin

            vInsert.con_freteoper_id    := P_IdConsulta;
            vInsert.con_freteoper_rota  := P_Rota;
            vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
            vInsert.uti_vfintegra_chave := 'viagem.contratante.documento.numero';
            vInsert.uti_vfintegra_valor := Trim(ContratanteNumeroNovo);

            pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

          Exception When Others Then
            vStatus  := tdvadm.pkg_glb_common.Status_Erro;
            vMessage := 'ERRO: Pkg_Cfe_Frete.Sp_Get_Integracao, '||sqlerrm;
          End;

          -- NUMERO DO CARTAO
          Begin

            vInsert.con_freteoper_id    := P_IdConsulta;
            vInsert.con_freteoper_rota  := P_Rota;
            vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
            vInsert.uti_vfintegra_chave := 'viagem.cartao.numero';
            vInsert.uti_vfintegra_valor := vCartaoNumero;

            pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

          Exception When Others Then
            vStatus  := tdvadm.pkg_glb_common.Status_Erro;
            vMessage := 'ERRO: Pkg_Cfe_Frete.Sp_Get_Integracao, '||sqlerrm||dbms_utility.format_error_backtrace;
          End;

        End;
        /**************************************************/
        
        /**************************************************/
        /**         DOCUMENTOS FAVORECIDO                **/
        /**************************************************/
        Begin
          
          If vFavorecidoTipo    = 'P' Then

           If LENGTH(Trim(vProprietario1)) = 11 Then
              
              -- DOCUMENTO 1
              Begin
                 vInsert.con_freteoper_id    := P_IdConsulta;
                 vInsert.con_freteoper_rota  := P_Rota;
                 vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
                 vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.documento.tipo';
                 vInsert.uti_vfintegra_valor := '2';
                 pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

                 vInsert.con_freteoper_id    := P_IdConsulta;
                 vInsert.con_freteoper_rota  := P_Rota;
                 vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
                 vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.documento.numero';
                 vInsert.uti_vfintegra_valor := Trim(vProprietario1);
                 pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);


                 -- DOCUMENTO 2 RG
                 vInsert.con_freteoper_id    := P_IdConsulta;
                 vInsert.con_freteoper_rota  := P_Rota;
                 vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
                 vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.rg';
                 vInsert.uti_vfintegra_valor := Trim(vPropRg);
                 pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

                 vInsert.con_freteoper_id    := P_IdConsulta;
                 vInsert.con_freteoper_rota  := P_Rota;
                 vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
                 vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.uf.rg';
                 vInsert.uti_vfintegra_valor := Trim(vPropRgUF);

                 -- DOCUMENTO 3 RNTRC
                 pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);
                 vInsert.con_freteoper_id    := P_IdConsulta;
                 vInsert.con_freteoper_rota  := P_Rota;
                 vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
                 vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.rntrc';
                 vInsert.uti_vfintegra_valor := Trim(vRntrc);
                 pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

              End;

           End If;

          Elsif vFavorecidoTipo = 'M' Then

           -- DOCUMENTO 1
           Begin

             vInsert.con_freteoper_id    := P_IdConsulta;
             vInsert.con_freteoper_rota  := P_Rota;
             vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
             vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.documento.tipo';
             vInsert.uti_vfintegra_valor := '2';
             pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

             vInsert.con_freteoper_id    := P_IdConsulta;
             vInsert.con_freteoper_rota  := P_Rota;
             vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
             vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.documento.numero';
             vInsert.uti_vfintegra_valor := Trim(vMotorista);
             pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

          -- DOCUMENTO 2 RG
             vInsert.con_freteoper_id    := P_IdConsulta;
             vInsert.con_freteoper_rota  := P_Rota;
             vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
             vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.rg';
             vInsert.uti_vfintegra_valor := Trim(vRg);
             pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

             vInsert.con_freteoper_id    := P_IdConsulta;
             vInsert.con_freteoper_rota  := P_Rota;
             vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
             vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.uf.rg';
             vInsert.uti_vfintegra_valor := Trim(vRgUf);
             pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

           End;

          Elsif vFavorecidoTipo = 'J' Then

           -- DOCUMENTO 1
           Begin

             vInsert.con_freteoper_id    := P_IdConsulta;
             vInsert.con_freteoper_rota  := P_Rota;
             vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
             vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.documento.tipo';
             vInsert.uti_vfintegra_valor := '2';
             pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

             vInsert.con_freteoper_id    := P_IdConsulta;
             vInsert.con_freteoper_rota  := P_Rota;
             vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
             vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.documento.numero';
             vInsert.uti_vfintegra_valor := Trim(vResponsavel);
             pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

          -- DOCUMENTO 2 RG
             vInsert.con_freteoper_id    := P_IdConsulta;
             vInsert.con_freteoper_rota  := P_Rota;
             vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
             vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.rg';
             vInsert.uti_vfintegra_valor := Trim(vRg);
             pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

             vInsert.con_freteoper_id    := P_IdConsulta;
             vInsert.con_freteoper_rota  := P_Rota;
             vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
             vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.uf.rg';
             vInsert.uti_vfintegra_valor := Trim(vRgUf);
             pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

           End;

          Elsif vFavorecidoTipo = 'F' Then
           
           -- DOCUMENTO 1
           Begin

             vInsert.con_freteoper_id    := P_IdConsulta;
             vInsert.con_freteoper_rota  := P_Rota;
             vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
             vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.documento.tipo';
             vInsert.uti_vfintegra_valor := '2';
             pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

             vInsert.con_freteoper_id    := P_IdConsulta;
             vInsert.con_freteoper_rota  := P_Rota;
             vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
             vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.documento.numero';
             vInsert.uti_vfintegra_valor := Trim(vMotoristaCpfFrota);
             pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

          -- DOCUMENTO 2 RG
             vInsert.con_freteoper_id    := P_IdConsulta;
             vInsert.con_freteoper_rota  := P_Rota;
             vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
             vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.rg';
             vInsert.uti_vfintegra_valor := Trim(vRgNumero);
             pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

             vInsert.con_freteoper_id    := P_IdConsulta;
             vInsert.con_freteoper_rota  := P_Rota;
             vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
             vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.uf.rg';
             vInsert.uti_vfintegra_valor := Trim(vRgUf);
             pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);
             
             End;
             
          End If;
        
        End;
        /**************************************************/
        
        /**************************************************/
        /**         INFORMAÇOES DO FAVORECIDO            **/
        /**************************************************/
        Begin
          
          If vFavorecidoTipo        = 'P' Then
            -- INForMAÇÕES PROPRIETARIO
            Begin

              For R_CURSORINF IN(Select *
                                   From t_car_proprietario l
                                  Where l.car_proprietario_cgccpfcodigo = vProprietario1)
              LOOP
                  -- NOME
                  vInsert.con_freteoper_id    := P_IdConsulta;
                  vInsert.con_freteoper_rota  := P_Rota;
                  vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
                  vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.nome';
                  vInsert.uti_vfintegra_valor := Trim(R_CURSORINF.CAR_PROPRIETARIO_RAZAOSOCIAL);
                  pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

                  -- NARCIMENTO / SOMENTE PF
                  If LENGTH(Trim(R_CURSORINF.CAR_PROPRIETARIO_CGCCPFCODIGO)) = 11 Then
                     vInsert.con_freteoper_id    := P_IdConsulta;
                     vInsert.con_freteoper_rota  := P_Rota;
                     vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
                     vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.data.nascimento';
                     vInsert.uti_vfintegra_valor := Trim(R_CURSORINF.CAR_PROPRIETARIO_DATANASC);
                     pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

                  End If;

                  -- LOGRADOURO OBRIGATORIO
                  vInsert.con_freteoper_id    := P_IdConsulta;
                  vInsert.con_freteoper_rota  := P_Rota;
                  vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
                  vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.endereco.logradouro';
                  vInsert.uti_vfintegra_valor := SubStr(Trim(R_CURSORINF.CAR_PROPRIETARIO_EndERECO),1,40);
                  pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

                  -- EndEREÇO NUMERO
                  vInsert.con_freteoper_id    := P_IdConsulta;
                  vInsert.con_freteoper_rota  := P_Rota;
                  vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
                  vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.endereco.numero';
                  vInsert.uti_vfintegra_valor := Trim('1');
                  pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

                  -- COMPLEMENTO
                  vInsert.con_freteoper_id    := P_IdConsulta;
                  vInsert.con_freteoper_rota  := P_Rota;
                  vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
                  vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.endereco.complemento';
                  vInsert.uti_vfintegra_valor := Trim('COMPLEMENTO');
                  pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

                  -- BAIRRO
                  vInsert.con_freteoper_id    := P_IdConsulta;
                  vInsert.con_freteoper_rota  := P_Rota;
                  vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
                  vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.endereco.bairro';
                  vInsert.uti_vfintegra_valor := Trim(R_CURSORINF.CAR_PROPRIETARIO_BAIRRO);
                  pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

                  -- CIDADE
                  vInsert.con_freteoper_id    := P_IdConsulta;
                  vInsert.con_freteoper_rota  := P_Rota;
                  vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
                  vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.endereco.cidade';
                  vInsert.uti_vfintegra_valor := Trim(R_CURSORINF.CAR_PROPRIETARIO_CIDADE);
                  pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

                  -- UF
                  vInsert.con_freteoper_id    := P_IdConsulta;
                  vInsert.con_freteoper_rota  := P_Rota;
                  vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
                  vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.endereco.uf';
                  vInsert.uti_vfintegra_valor := Trim(R_CURSORINF.GLB_ESTADOPROPRIETARIO_CODIGO);
                  pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

                  -- PAIS
                  vInsert.con_freteoper_id    := P_IdConsulta;
                  vInsert.con_freteoper_rota  := P_Rota;
                  vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
                  vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.endereco.pais';
                  vInsert.uti_vfintegra_valor := Trim('BRASIL');
                  pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

                  -- CEP
                  vInsert.con_freteoper_id    := P_IdConsulta;
                  vInsert.con_freteoper_rota  := P_Rota;
                  vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
                  vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.endereco.cep';
                  vInsert.uti_vfintegra_valor := Trim(R_CURSORINF.CAR_PROPRIETARIO_CEP);
                  pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

                  -- TELEFONE DDD
                  vInsert.con_freteoper_id    := P_IdConsulta;
                  vInsert.con_freteoper_rota  := P_Rota;
                  vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
                  vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.telefone.ddd';
                  vInsert.uti_vfintegra_valor := '0'||Trim(SubStr(R_CURSORINF.CAR_PROPRIETARIO_TELEFONE,1,2));
                  pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

                  -- TELEFONE NUMERO
                  vInsert.con_freteoper_id    := P_IdConsulta;
                  vInsert.con_freteoper_rota  := P_Rota;
                  vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
                  vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.telefone.numero';
                  vInsert.uti_vfintegra_valor := SubStr(Trim(REPLACE(R_CURSORINF.CAR_PROPRIETARIO_TELEFONE,' ','')),-8);
                  pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

                  /*-- CELULAR DDD
                  vInsert.con_freteoper_id    := P_IdConsulta;
                  vInsert.con_freteoper_rota  := P_Rota;
                  vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
                  vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.celular.ddd';
                  vInsert.uti_vfintegra_valor := Trim('61139432002469');
                  pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

                  -- CELULAR NUMERO
                  vInsert.con_freteoper_id    := P_IdConsulta;
                  vInsert.con_freteoper_rota  := P_Rota;
                  vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
                  vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.celular.numero';
                  vInsert.uti_vfintegra_valor := Trim('61139432002469');
                  pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

                  -- cartao.portador E-MAIL
                  vInsert.con_freteoper_id    := P_IdConsulta;
                  vInsert.con_freteoper_rota  := P_Rota;
                  vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
                  vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.email';
                  vInsert.uti_vfintegra_valor := Trim('61139432002469');
                  pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);*/

              End LOOP;


            Exception When Others Then
              vStatus  := tdvadm.pkg_glb_common.Status_Erro;
              vMessage := 'ERRO: Pkg_Cfe_Frete.Sp_Get_Integracao, '||sqlerrm||dbms_utility.format_error_backtrace;
            End;

          Elsif vFavorecidoTipo     = 'M' Then
            -- INForMAÇÕES MOTORISTA
            Begin

             Begin

              For R_CURSORINF2 IN(Select *
                                    From t_car_carreteiro l
                                   Where l.car_carreteiro_cpfcodigo = vMotorista
                                     And l.car_carreteiro_saque     = vMotoristaSAQUE)
              LOOP
                  -- NOME
                  vInsert.con_freteoper_id    := P_IdConsulta;
                  vInsert.con_freteoper_rota  := P_Rota;
                  vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
                  vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.nome';
                  vInsert.uti_vfintegra_valor := Trim(R_CURSORINF2.CAR_CARRETEIRO_NOME);
                  pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

                  -- NARCIMENTO / SOMENTE PF
                  If LENGTH(Trim(R_CURSORINF2.CAR_CARRETEIRO_CPFCODIGO)) = 11 Then
                     vInsert.con_freteoper_id    := P_IdConsulta;
                     vInsert.con_freteoper_rota  := P_Rota;
                     vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
                     vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.data.nascimento';
                     vInsert.uti_vfintegra_valor := Trim(R_CURSORINF2.CAR_CARRETEIRO_DATANASC);
                     pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

                  End If;

                  -- LOGRADOURO OBRIGATORIO
                  vInsert.con_freteoper_id    := P_IdConsulta;
                  vInsert.con_freteoper_rota  := P_Rota;
                  vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
                  vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.endereco.logradouro';
                  vInsert.uti_vfintegra_valor := SubStr(Trim(R_CURSORINF2.CAR_CARRETEIRO_EndERECO),1,40);
                  pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

                  -- EndEREÇO NUMERO
                  vInsert.con_freteoper_id    := P_IdConsulta;
                  vInsert.con_freteoper_rota  := P_Rota;
                  vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
                  vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.endereco.numero';
                  vInsert.uti_vfintegra_valor := Trim('1');
                  pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

                  -- COMPLEMENTO
                  vInsert.con_freteoper_id    := P_IdConsulta;
                  vInsert.con_freteoper_rota  := P_Rota;
                  vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
                  vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.endereco.complemento';
                  vInsert.uti_vfintegra_valor := Trim('COMPLEMENTO');
                  pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

                  -- BAIRRO
                  vInsert.con_freteoper_id    := P_IdConsulta;
                  vInsert.con_freteoper_rota  := P_Rota;
                  vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
                  vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.endereco.bairro';
                  vInsert.uti_vfintegra_valor := Trim(R_CURSORINF2.CAR_CARRETEIRO_BAIRRO);
                  pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

                  -- CIDADE
                  vInsert.con_freteoper_id    := P_IdConsulta;
                  vInsert.con_freteoper_rota  := P_Rota;
                  vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
                  vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.endereco.cidade';
                  vInsert.uti_vfintegra_valor := Trim(R_CURSORINF2.CAR_CARRETEIRO_CIDADE);
                  pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

                  -- UF
                  vInsert.con_freteoper_id    := P_IdConsulta;
                  vInsert.con_freteoper_rota  := P_Rota;
                  vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
                  vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.endereco.uf';
                  vInsert.uti_vfintegra_valor := Trim(R_CURSORINF2.GLB_ESTADOCARRETEIRO_CODIGO);
                  pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

                  -- PAIS
                  vInsert.con_freteoper_id    := P_IdConsulta;
                  vInsert.con_freteoper_rota  := P_Rota;
                  vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
                  vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.endereco.pais';
                  vInsert.uti_vfintegra_valor := Trim('BRASIL');
                  pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

                  -- CEP
                  vInsert.con_freteoper_id    := P_IdConsulta;
                  vInsert.con_freteoper_rota  := P_Rota;
                  vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
                  vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.endereco.cep';
                  vInsert.uti_vfintegra_valor := Trim(R_CURSORINF2.CAR_CARRETEIRO_CEP);
                  pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

                  -- TELEFONE DDD
                  vInsert.con_freteoper_id    := P_IdConsulta;
                  vInsert.con_freteoper_rota  := P_Rota;
                  vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
                  vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.telefone.ddd';
                  vInsert.uti_vfintegra_valor := '0'||SubStr(Trim(R_CURSORINF2.CAR_CARRETEIRO_TELEFONE),1,2);
                  pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

                  -- TELEFONE NUMERO
                  vInsert.con_freteoper_id    := P_IdConsulta;
                  vInsert.con_freteoper_rota  := P_Rota;
                  vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
                  vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.telefone.numero';
                  vInsert.uti_vfintegra_valor := SubStr(Trim(R_CURSORINF2.CAR_CARRETEIRO_TELEFONE),-8);
                  pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

                  /*-- CELULAR DDD
                  vInsert.con_freteoper_id    := P_IdConsulta;
                  vInsert.con_freteoper_rota  := P_Rota;
                  vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
                  vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.celular.ddd';
                  vInsert.uti_vfintegra_valor := Trim('61139432002469');
                  pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

                  -- CELULAR NUMERO
                  vInsert.con_freteoper_id    := P_IdConsulta;
                  vInsert.con_freteoper_rota  := P_Rota;
                  vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
                  vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.celular.numero';
                  vInsert.uti_vfintegra_valor := Trim('61139432002469');
                  pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

                  -- cartao.portador E-MAIL
                  vInsert.con_freteoper_id    := P_IdConsulta;
                  vInsert.con_freteoper_rota  := P_Rota;
                  vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
                  vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.email';
                  vInsert.uti_vfintegra_valor := Trim('61139432002469');
                  pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);*/

              End LOOP;


            Exception When Others Then
              vStatus  := tdvadm.pkg_glb_common.Status_Erro;
              vMessage := 'ERRO: Pkg_Cfe_Frete.Sp_Get_Integracao, '||sqlerrm;
            End;

            End;


          Elsif vFavorecidoTipo     = 'J' Then        
            -- INForMAÇÕES MOTORISTA
            Begin

              Begin
                
                For R_CURSORINF2 IN(Select *
                                      From t_car_propresp l
                                     Where l.car_proprietario_cgccpfcodigo = vProprietario
                                       And l.car_propresp_cpfcodigo        = vResponsavel)
                LOOP
                    -- NOME
                    vInsert.con_freteoper_id    := P_IdConsulta;
                    vInsert.con_freteoper_rota  := P_Rota;
                    vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
                    vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.nome';
                    vInsert.uti_vfintegra_valor := Trim(R_CURSORINF2.CAR_PROPRESP_NOME);
                    pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

                    -- NARCIMENTO / SOMENTE PF
                    If LENGTH(Trim(R_CURSORINF2.CAR_PROPRESP_CPFCODIGO)) = 11 Then
                       vInsert.con_freteoper_id    := P_IdConsulta;
                       vInsert.con_freteoper_rota  := P_Rota;
                       vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
                       vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.data.nascimento';
                       vInsert.uti_vfintegra_valor := Trim(TRUNC(R_CURSORINF2.CAR_PROPRESP_DATANASC));
                       pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

                    End If;

                    -- LOGRADOURO OBRIGATORIO
                    vInsert.con_freteoper_id    := P_IdConsulta;
                    vInsert.con_freteoper_rota  := P_Rota;
                    vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
                    vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.endereco.logradouro';
                    vInsert.uti_vfintegra_valor := SubStr(Trim(R_CURSORINF2.CAR_PROPRESP_EndERECO),1,40);
                    pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

                    -- EndEREÇO NUMERO
                    vInsert.con_freteoper_id    := P_IdConsulta;
                    vInsert.con_freteoper_rota  := P_Rota;
                    vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
                    vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.endereco.numero';
                    vInsert.uti_vfintegra_valor := Trim('1');
                    pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

                    -- COMPLEMENTO
                    vInsert.con_freteoper_id    := P_IdConsulta;
                    vInsert.con_freteoper_rota  := P_Rota;
                    vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
                    vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.endereco.complemento';
                    vInsert.uti_vfintegra_valor := Trim(R_CURSORINF2.CAR_PROPRESP_COMPLEMENTO);
                    pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

                    -- BAIRRO
                    vInsert.con_freteoper_id    := P_IdConsulta;
                    vInsert.con_freteoper_rota  := P_Rota;
                    vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
                    vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.endereco.bairro';
                    vInsert.uti_vfintegra_valor := Trim(R_CURSORINF2.CAR_PROPRESP_BAIRRO);
                    pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

                    -- CIDADE
                    vInsert.con_freteoper_id    := P_IdConsulta;
                    vInsert.con_freteoper_rota  := P_Rota;
                    vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
                    vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.endereco.cidade';
                    vInsert.uti_vfintegra_valor := Trim(R_CURSORINF2.CAR_PROPRESP_CIDADE);
                    pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

                    -- UF
                    vInsert.con_freteoper_id    := P_IdConsulta;
                    vInsert.con_freteoper_rota  := P_Rota;
                    vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
                    vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.endereco.uf';
                    vInsert.uti_vfintegra_valor := Trim(R_CURSORINF2.GLB_ESTADORESP_CODIGO);
                    pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

                    -- PAIS
                    vInsert.con_freteoper_id    := P_IdConsulta;
                    vInsert.con_freteoper_rota  := P_Rota;
                    vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
                    vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.endereco.pais';
                    vInsert.uti_vfintegra_valor := Trim('BRASIL');
                    pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

                    -- CEP
                    vInsert.con_freteoper_id    := P_IdConsulta;
                    vInsert.con_freteoper_rota  := P_Rota;
                    vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
                    vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.endereco.cep';
                    vInsert.uti_vfintegra_valor := Trim(R_CURSORINF2.CAR_PROPRESP_CEP);
                    pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

                    -- TELEFONE DDD
                    vInsert.con_freteoper_id    := P_IdConsulta;
                    vInsert.con_freteoper_rota  := P_Rota;
                    vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
                    vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.telefone.ddd';
                    vInsert.uti_vfintegra_valor := '0'||SubStr(Trim(R_CURSORINF2.CAR_PROPRESP_TELEFONE),1,2);
                    pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

                    -- TELEFONE NUMERO
                    vInsert.con_freteoper_id    := P_IdConsulta;
                    vInsert.con_freteoper_rota  := P_Rota;
                    vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
                    vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.telefone.numero';
                    vInsert.uti_vfintegra_valor := SubStr(Trim(R_CURSORINF2.CAR_PROPRESP_TELEFONE),-8);
                    pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

                    -- RAZÃO SOCIAL
                    vInsert.con_freteoper_id    := P_IdConsulta;
                    vInsert.con_freteoper_rota  := P_Rota;
                    vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
                    vInsert.uti_vfintegra_chave := 'viagem.cartao.empresa.nome';
                    vInsert.uti_vfintegra_valor := Trim(vProprietarioRazaoSocial);
                    pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

                    -- CNPJ DA EMPRESA
                    vInsert.con_freteoper_id    := P_IdConsulta;
                    vInsert.con_freteoper_rota  := P_Rota;
                    vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
                    vInsert.uti_vfintegra_chave := 'viagem.cartao.empresa.cnpj';
                    vInsert.uti_vfintegra_valor := Trim(vProprietario);
                    pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

                    /*
                    -- cartao.portador E-MAIL
                    vInsert.con_freteoper_id    := P_IdConsulta;
                    vInsert.con_freteoper_rota  := P_Rota;
                    vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
                    vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.email';
                    vInsert.uti_vfintegra_valor := Trim('61139432002469');
                    pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);*/

                End LOOP;


              Exception When Others Then
                vStatus  := tdvadm.pkg_glb_common.Status_Erro;
                vMessage := 'ERRO: Pkg_Cfe_Frete.Sp_Get_Integracao, '||sqlerrm||dbms_utility.format_error_backtrace;
              End;

            End;

          
          Elsif vFavorecidoTipo     = 'F' Then
            -- INForMAÇÕES MOTORISTA FROTA
            Begin

              Begin
                
                For R_CursorFrota IN(Select *
                                       From t_frt_motorista l
                                      Where l.frt_motorista_cpf    = vMotoristaCpfFrota
                                        And l.frt_motorista_codigo = vMotoristaCodigo)
                LOOP
                  
                  -- NOME
                  vInsert.con_freteoper_id    := P_IdConsulta;
                  vInsert.con_freteoper_rota  := P_Rota;
                  vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
                  vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.nome';
                  vInsert.uti_vfintegra_valor := Trim(R_CursorFrota.Frt_Motorista_Nome);
                  pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

                  -- DATA DE NASCIMENTO
                  vInsert.con_freteoper_id    := P_IdConsulta;
                  vInsert.con_freteoper_rota  := P_Rota;
                  vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
                  vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.data.nascimento';
                  vInsert.uti_vfintegra_valor := Trim(R_CursorFrota.Frt_Motorista_Datanasc);
                  pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);
                  
                  -- LOGRADOURO OBRIGATORIO
                  vInsert.con_freteoper_id    := P_IdConsulta;
                  vInsert.con_freteoper_rota  := P_Rota;
                  vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
                  vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.endereco.logradouro';
                  vInsert.uti_vfintegra_valor := SubStr(Trim(R_CursorFrota.Frt_Motorista_Endereco),1,40);
                  pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

                  -- EndEREÇO NUMERO
                  vInsert.con_freteoper_id    := P_IdConsulta;
                  vInsert.con_freteoper_rota  := P_Rota;
                  vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
                  vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.endereco.numero';
                  vInsert.uti_vfintegra_valor := Trim('1');
                  pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

                  -- COMPLEMENTO
                  vInsert.con_freteoper_id    := P_IdConsulta;
                  vInsert.con_freteoper_rota  := P_Rota;
                  vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
                  vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.endereco.complemento';
                  vInsert.uti_vfintegra_valor := Trim('COMPLEMENTO');
                  pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

                  -- BAIRRO
                  vInsert.con_freteoper_id    := P_IdConsulta;
                  vInsert.con_freteoper_rota  := P_Rota;
                  vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
                  vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.endereco.bairro';
                  vInsert.uti_vfintegra_valor := Trim(R_CursorFrota.Frt_Motorista_Bairro);
                  pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

                  -- CIDADE
                  vInsert.con_freteoper_id    := P_IdConsulta;
                  vInsert.con_freteoper_rota  := P_Rota;
                  vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
                  vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.endereco.cidade';
                  vInsert.uti_vfintegra_valor := Trim(R_CursorFrota.Frt_Motorista_Cidade);
                  pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

                  -- UF
                  vInsert.con_freteoper_id    := P_IdConsulta;
                  vInsert.con_freteoper_rota  := P_Rota;
                  vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
                  vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.endereco.uf';
                  vInsert.uti_vfintegra_valor := Trim(R_CursorFrota.Glb_Estadomotorista_Codigo);
                  pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

                  -- PAIS
                  vInsert.con_freteoper_id    := P_IdConsulta;
                  vInsert.con_freteoper_rota  := P_Rota;
                  vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
                  vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.endereco.pais';
                  vInsert.uti_vfintegra_valor := Trim('BRASIL');
                  pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

                  -- CEP
                  vInsert.con_freteoper_id    := P_IdConsulta;
                  vInsert.con_freteoper_rota  := P_Rota;
                  vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
                  vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.endereco.cep';
                  vInsert.uti_vfintegra_valor := Trim(R_CursorFrota.Frt_Motorista_Cep);
                  pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

                
                  /******************************************************************************/
                  /***           BUSCA DO TELEFONE NO FPW                                     ***/
                  /***SE NÃO ESTIVER PREENCHIDO CORRETAMENTE VAMOS MANDAR O TELEFONE DA MATRIZ***/
                  /******************************************************************************/
                  begin
                    
                    begin
                    
                      select kk.fuddd,
                             kk.futelefone
                        into vDDDFpw,      
                             vTelefoneFpw 
                        from fpw.funciona kk 
                       where kk.fucpf     = to_number(R_CursorFrota.Frt_Motorista_Cpf)
                         and kk.fumatfunc = (select max(lk.fumatfunc)
                                               from fpw.funciona lk
                                              where lk.fucpf = kk.fucpf);
                                            
                    exception when no_data_found then
                      
                      Open P_Cursor For
                      Select Sysdate
                        From Dual;
                      
                      P_Status  := tdvadm.pkg_glb_common.Status_Erro;
                      p_Message := 'Erro ao consultar motorista no FPW, CPF não existe!';
                      return;
                    end;
                      
                  end;
                  /******************************************************************************/
                  
                  -- TELEFONE DDD
                  vInsert.con_freteoper_id    := P_IdConsulta;
                  vInsert.con_freteoper_rota  := P_Rota;
                  vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
                  vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.telefone.ddd';
                  
                  if (length(vDDDFpw) = 2) and (length(vTelefoneFpw) = 8) then
                    vInsert.uti_vfintegra_valor := '0'||vDDDFpw;
                  else
                    vInsert.uti_vfintegra_valor := '0'||'11';
                  end if;
                   
                  pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

                  -- TELEFONE NUMERO
                  vInsert.con_freteoper_id    := P_IdConsulta;
                  vInsert.con_freteoper_rota  := P_Rota;
                  vInsert.uti_vfintegra_seq   := Pkg_Cfe_Frete.Fn_Get_NextSeqReg(P_IdConsulta, P_Rota);
                  vInsert.uti_vfintegra_chave := 'viagem.cartao.portador.telefone.numero';
                  
                  if (length(vDDDFpw) = 2) and (length(vTelefoneFpw) = 8) then
                    vInsert.uti_vfintegra_valor := '0'||vTelefoneFpw;
                  else
                    vInsert.uti_vfintegra_valor := '0'||'29678500';
                  end if;
                  
                  pkg_cfe_frete.sp_gravalinhatxt(vInsert,P_Status, vMessage);

                  
              End LOOP;


            Exception When Others Then
              vStatus  := tdvadm.pkg_glb_common.Status_Erro;
              vMessage := 'ERRO: Pkg_Cfe_Frete.Sp_Get_Integracao, '||sqlerrm;
            End;

          End;
        
       
          End If;
      
      End;   
        /**************************************************/
      
        /**************************************************/
        /**         ANALISE DA VARIAVEL  vStatus         **/
        /**************************************************/
        Begin
          
          If (vStatus <> tdvadm.pkg_glb_common.Status_Nomal) then
                       
              Open P_Cursor For
              Select Sysdate
                From Dual;
             
             P_Status    := vStatus; 
             P_Message   := vMessage;
             
             Return;
             
          End If;
        
        End;
        /**************************************************/  
      
      
      
        Open P_Cursor For
        Select k.uti_vfintegra_chave chave,
               k.uti_vfintegra_valor valor
          From t_uti_vfintegra k
         Where k.con_freteoper_id   = P_IdConsulta
           And k.con_freteoper_rota = P_Rota
         order by k.uti_vfintegra_seq;

        delete t_uti_vfintegra d
         Where d.con_freteoper_id   = P_IdConsulta
           And d.con_freteoper_rota = P_Rota;

        P_Status  := tdvadm.pkg_glb_common.Status_Nomal;
        P_Message := 'Processamento Normal.';

    Exception When Others Then
    
      P_Status    := tdvadm.pkg_glb_common.Status_Erro;
      P_Message   := 'Erro ao consultar. Erro= '||dbms_utility.format_error_backtrace;
    
    End;

  End Sp_Get_InsereCartao;

  PROCEDURE SP_GET_INSERIRCONTA(P_QryStr       IN  clob,
                                P_IDCONSULTA   IN  NUMBER,
                                P_ROTA         IN  CHAR,
                                P_CURSOR       OUT T_CURSOR,
                                P_STATUS       OUT CHAR,
                                P_MESSAGE      OUT VARCHAR2)AS
  V_INSERT         TpRegTxt;
  V_STATUS         CHAR(1);
  V_MESSAGE        VARCHAR2(200);

  V_FAVORECIDOTIPO CHAR(1);

  V_PROPCONTA      VARCHAR2(20);
  V_PROPBANCO      VARCHAR2(20);
  V_PROPAGENCIA    VARCHAR2(20);
  V_PROPTIPOCONTA  VARCHAR2(20);

  V_MOTCONTA       VARCHAR2(20);
  V_MOTBANCO       VARCHAR2(20);
  V_MOTAGENCIA     VARCHAR2(20);
  V_MOTTIPOCONTA   VARCHAR2(20);

  V_PROPRIETARIO   T_CAR_PROPRIETARIO.CAR_PROPRIETARIO_CGCCPFCODIGO%TYPE;
  V_MOTORISTA      T_CAR_CARRETEIRO.CAR_CARRETEIRO_CPFCODIGO%TYPE;
  V_MOTORISTASAQUE T_CAR_CARRETEIRO.CAR_CARRETEIRO_SAQUE%TYPE;
  BEGIN
    BEGIN

        -- TIPO FAVORECIDO
        V_FAVORECIDOTIPO := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'FavorecidoTipo','=','*'), 'valor', '=', '|');

        -- COLHENDO INFORMAÇÕES FAVORECIDO

        IF V_FAVORECIDOTIPO = 'P' THEN

           V_PROPRIETARIO   := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'Proprietario','=','*'), 'valor', '=', '|');
           V_PROPBANCO      := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'PropBanco','=','*'), 'valor', '=', '|');
           V_PROPAGENCIA    := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'PropAgencia','=','*'), 'valor', '=', '|');
           V_PROPCONTA      := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'PropConta','=','*'), 'valor', '=', '|');
           V_PROPTIPOCONTA  := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'PropTipoConta','=','*'), 'valor', '=', '|');

        ELSIF V_FAVORECIDOTIPO = 'M' THEN

           V_MOTORISTA      := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'Motorista','=','*'), 'valor', '=', '|');
           V_MOTORISTASAQUE := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'MotoristaSaque','=','*'), 'valor', '=', '|');
           V_MOTBANCO       := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'MotBanco','=','*'), 'valor', '=', '|');
           V_MOTAGENCIA     := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'MotAgencia','=','*'), 'valor', '=', '|');
           V_MOTCONTA       := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'MotConta','=','*'), 'valor', '=', '|');
           V_MOTTIPOCONTA   := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'MotTipoConta','=','*'), 'valor', '=', '|');

        END IF;

        -- EMPRESA
        BEGIN

          V_INSERT.con_freteoper_id    := P_IDCONSULTA;
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.contratante.documento.numero';
          V_INSERT.uti_vfintegra_valor := TRIM(ContratanteNumero);

          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
        END;

        -- DOCUMENTO FAVORECIDO
        BEGIN

          V_INSERT.con_freteoper_id    := P_IDCONSULTA;
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.documento.tipo';

          IF V_FAVORECIDOTIPO = 'P' THEN

             IF  LENGTH(TRIM(V_PROPRIETARIO)) = 11 THEN
                V_INSERT.uti_vfintegra_valor := '2';
             ELSIF LENGTH(TRIM(V_PROPRIETARIO)) = 14 THEN
                V_INSERT.uti_vfintegra_valor := '1';
             END IF;

          ELSIF V_FAVORECIDOTIPO = 'M' THEN
             V_INSERT.uti_vfintegra_valor := '2';
          END IF;


          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

          V_INSERT.con_freteoper_id    := P_IDCONSULTA;
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.documento.numero';

          IF V_FAVORECIDOTIPO = 'P' THEN
             V_INSERT.uti_vfintegra_valor := TRIM(V_PROPRIETARIO);
          ELSIF V_FAVORECIDOTIPO = 'M' THEN
             V_INSERT.uti_vfintegra_valor := TRIM(V_MOTORISTA);
          END IF;

          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
        END;

         -- INFORMAÇÕES DA CONTA
        BEGIN

          IF V_FAVORECIDOTIPO = 'P' THEN

             V_INSERT.con_freteoper_id    := P_IDCONSULTA;
             V_INSERT.con_freteoper_rota  := P_ROTA;
             V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
             V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.conta.banco';
             V_INSERT.uti_vfintegra_valor := TRIM(V_PROPBANCO);
             PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

             V_INSERT.con_freteoper_id    := P_IDCONSULTA;
             V_INSERT.con_freteoper_rota  := P_ROTA;
             V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
             V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.conta.agencia';
             V_INSERT.uti_vfintegra_valor := TRIM(V_PROPAGENCIA);
             PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

             V_INSERT.con_freteoper_id    := P_IDCONSULTA;
             V_INSERT.con_freteoper_rota  := P_ROTA;
             V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
             V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.conta.numero';
             V_INSERT.uti_vfintegra_valor := TRIM(V_PROPCONTA);
             PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

             V_INSERT.con_freteoper_id    := P_IDCONSULTA;
             V_INSERT.con_freteoper_rota  := P_ROTA;
             V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
             V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.conta.tipo';
             V_INSERT.uti_vfintegra_valor := TRIM(V_PROPTIPOCONTA);
             PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);


          ELSIF V_FAVORECIDOTIPO = 'M' THEN

             V_INSERT.con_freteoper_id    := P_IDCONSULTA;
             V_INSERT.con_freteoper_rota  := P_ROTA;
             V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
             V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.conta.banco';
             V_INSERT.uti_vfintegra_valor := TRIM(V_MOTBANCO);
             PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

             V_INSERT.con_freteoper_id    := P_IDCONSULTA;
             V_INSERT.con_freteoper_rota  := P_ROTA;
             V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
             V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.conta.agencia';
             V_INSERT.uti_vfintegra_valor := TRIM(V_MOTAGENCIA);
             PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

             V_INSERT.con_freteoper_id    := P_IDCONSULTA;
             V_INSERT.con_freteoper_rota  := P_ROTA;
             V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
             V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.conta.numero';
             V_INSERT.uti_vfintegra_valor := TRIM(V_MOTCONTA);
             PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

             V_INSERT.con_freteoper_id    := P_IDCONSULTA;
             V_INSERT.con_freteoper_rota  := P_ROTA;
             V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
             V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.conta.tipo';
             V_INSERT.uti_vfintegra_valor := TRIM(V_MOTTIPOCONTA);
             PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

          END IF;




        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
        END;


         OPEN P_CURSOR FOR
       SELECT K.UTI_VFINTEGRA_CHAVE,
              K.UTI_VFINTEGRA_VALOR
         FROM T_UTI_VFINTEGRA K
         WHERE K.CON_FRETEOPER_ID   = P_IDCONSULTA
           AND K.CON_FRETEOPER_ROTA = P_ROTA
        ORDER BY K.UTI_VFINTEGRA_SEQ;

      DELETE T_UTI_VFINTEGRA D
      WHERE D.CON_FRETEOPER_ID   = P_IDCONSULTA
        AND D.CON_FRETEOPER_ROTA = P_ROTA;

      P_STATUS   := tdvadm.pkg_glb_common.Status_Nomal;
      P_MESSAGE  := 'Processamento Normal.';

     EXCEPTION WHEN OTHERS THEN
       P_STATUS    := tdvadm.pkg_glb_common.Status_Erro;
       P_MESSAGE  := 'Erro ao consultar. Erro='||SQLCODE;
     END;



  END SP_GET_INSERIRCONTA;


  PROCEDURE SP_GET_INSERIRFRETE(P_QryStr       IN  clob,
                                P_IDCONSULTA   IN  NUMBER,
                                P_ROTA         IN  CHAR,
                                P_CURSOR       OUT T_CURSOR,
                                P_STATUS       OUT CHAR,
                                P_MESSAGE     OUT VARCHAR2)AS
  V_DATE DATE;
  BEGIN
    BEGIN

    OPEN P_CURSOR FOR
      SELECT L.UTI_LOGTXT_CHAVE,
             REPLACE(L.UTI_LOGTXT_VALOR,'*','999887')
      FROM T_UTI_LOGTXT2 L
      WHERE L.UTI_LOGTXT_TPARQ = 'CadastroFrete'
      ORDER BY L.UTI_LOGTXT_SEQ;


    EXCEPTION WHEN OTHERS THEN
       P_STATUS    := tdvadm.pkg_glb_common.Status_Erro;
       P_MESSAGE  := 'Erro ao consultar. Erro='||SQLCODE;
    END;

    P_STATUS   := tdvadm.pkg_glb_common.Status_Nomal;
    P_MESSAGE := 'Processamento Normal.';

  END SP_GET_INSERIRFRETE;


  PROCEDURE SP_GET_STATUSPARCELA(P_QryStr       IN  clob,
                                 P_IDCONSULTA   IN  NUMBER,
                                 P_ROTA         IN  CHAR,
                                 P_CURSOR       OUT T_CURSOR,
                                 P_STATUS       OUT CHAR,
                                 P_MESSAGE     OUT VARCHAR2)AS
  BEGIN
    BEGIN
    OPEN P_CURSOR FOR
      SELECT L.UTI_LOGTXT_CHAVE,
             REPLACE(L.UTI_LOGTXT_VALOR,'*','999887')
      FROM T_UTI_LOGTXT2 L
      WHERE L.UTI_LOGTXT_TPARQ = 'CadastroFrete'
      ORDER BY L.UTI_LOGTXT_SEQ;


    EXCEPTION WHEN OTHERS THEN
       P_STATUS    := tdvadm.pkg_glb_common.Status_Erro;
       P_MESSAGE  := 'Erro ao consultar. Erro='||SQLCODE;
    END;

    P_STATUS   := tdvadm.pkg_glb_common.Status_Nomal;
    P_MESSAGE := 'Processamento Normal.';

  END SP_GET_STATUSPARCELA;

  PROCEDURE SP_GET_ATUALIZAPARCELA(P_QryStr       IN  VARCHAR2,
                                   P_IDCONSULTA   IN  NUMBER,
                                   P_ROTA         IN  CHAR,
                                   P_CURSOR       OUT T_CURSOR,
                                   P_STATUS       OUT CHAR,
                                   P_MESSAGE     OUT VARCHAR2)AS
  BEGIN
  BEGIN
      OPEN P_CURSOR FOR
          SELECT L.UTI_LOGTXT_CHAVE,
                 REPLACE(L.UTI_LOGTXT_VALOR,'*','999887')
          FROM T_UTI_LOGTXT2 L
          WHERE L.UTI_LOGTXT_TPARQ = 'CadastroFrete'
          ORDER BY L.UTI_LOGTXT_SEQ;


    EXCEPTION WHEN OTHERS THEN
       P_STATUS    := tdvadm.pkg_glb_common.Status_Erro;
       P_MESSAGE  := 'Erro ao consultar. Erro='||SQLCODE;
    END;

    P_STATUS   := tdvadm.pkg_glb_common.Status_Nomal;
    P_MESSAGE := 'Processamento Normal.';
  END SP_GET_ATUALIZAPARCELA;

  PROCEDURE SP_GET_INSEREOPERACAO(P_QryStr       IN  clob,
                                  P_IDCONSULTA   IN  NUMBER,
                                  P_ROTA         IN  CHAR,
                                  P_CURSOR       OUT T_CURSOR,
                                  P_STATUS       OUT CHAR,
                                  P_MESSAGE     OUT VARCHAR2)AS
  BEGIN
  BEGIN
      OPEN P_CURSOR FOR
          SELECT L.UTI_LOGTXT_CHAVE,
                 REPLACE(L.UTI_LOGTXT_VALOR,'*','999887')
          FROM T_UTI_LOGTXT2 L
          WHERE L.UTI_LOGTXT_TPARQ = 'CadastroFrete'
          ORDER BY L.UTI_LOGTXT_SEQ;


    EXCEPTION WHEN OTHERS THEN
       P_STATUS    := tdvadm.pkg_glb_common.Status_Erro;
       P_MESSAGE  := 'Erro ao consultar. Erro='||SQLCODE;
    END;

    P_STATUS   := tdvadm.pkg_glb_common.Status_Nomal;
    P_MESSAGE := 'Processamento Normal.';
  END SP_GET_INSEREOPERACAO;


  PROCEDURE SP_GRAVALINHATXT(P_REGISTRO IN TpRegTxt,
                             P_STATUS       OUT CHAR,
                             P_MESSAGE     OUT VARCHAR2)AS
  BEGIN
    BEGIN

      INSERT INTO T_UTI_VFINTEGRA K
      VALUES (P_REGISTRO.con_freteoper_id    ,
              P_REGISTRO.con_freteoper_rota  ,
              P_REGISTRO.uti_vfintegra_seq   ,
              P_REGISTRO.uti_vfintegra_chave ,
              P_REGISTRO.uti_vfintegra_valor);
      COMMIT;

    EXCEPTION WHEN OTHERS THEN
       P_STATUS    := tdvadm.pkg_glb_common.Status_Erro;
       P_MESSAGE  := 'Erro ao consultar. Erro='||SQLCODE;
    END;

    P_STATUS   := tdvadm.pkg_glb_common.Status_Nomal;
    P_MESSAGE := 'Processamento Normal.';

 END SP_GRAVALINHATXT;

 PROCEDURE SP_GET_VALIDARETORNO(P_XMLENVIO     IN  CLOB,
                                P_XMLRETORNO   IN  CLOB,
                                P_OPERCOD      IN  TDVADM.T_CFE_OPERACOES.CFE_OPERACOES_COD%TYPE,
                                P_TDVOPERCOD   IN  TDVADM.T_CFE_OPERATDV.CFE_INTEGRATDV_COD%TYPE,
                                P_IDCONSULTA   IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ID%TYPE,
                                P_ROTA         IN  TDVADM.T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,
                                P_STATUS       OUT CHAR,
                                P_MESSAGE      OUT VARCHAR2)AS

 --Variáveis utilizada para recuparar valores do arquivo XML.
 V_CodigoOperacaoWs   VARCHAR2(20);
 V_CodigoOperacaoTdv  VARCHAR2(20);
 V_CodigoSequencia    tdvadm.t_con_freteoper.con_freteoper_seq%type;
 
 --Variável utilizada para buscar o nome da procedure que será utilizada na validação
 v_procValida         tdvadm.t_cfe_vldretorno.cfe_vldretorno_procvalid%type;
 
 --Variável utilizada para gerar o comando para validação.
 v_ExecValida cLob;
 vOperacaoUsuario     t_cfe_integratdv.cfe_integratdv_operusuario%type;

 BEGIN
   --Inicializo as variáveis que serão utilizadas nessa procedire.
   V_CodigoOperacaoWs  := '';
   V_CodigoOperacaoTdv := '';
   V_CodigoSequencia   := '';
   v_procValida        := '';
   v_ExecValida        := empty_cLob();
   
   BEGIN
     
     --Recupero no arquivo Xml de validação, os paramentros necessários para validação.
     SELECT 
        extractvalue(VALUE(Params), '/Consulta/CodigoOperacaoWs'),
        extractvalue(VALUE(Params), '/Consulta/CodigoOperacaoTdv'),
        to_number(extractvalue(VALUE(Params), '/Consulta/Sequencia'))
      INTO 
        V_CodigoOperacaoWs,
        V_CodigoOperacaoTdv,
        v_CodigoSequencia
      FROM 
        Table(XMLSequence(Extract(XMLTYPE.createXML(P_XMLRETORNO),'/ResponseTo/Consulta'))) Params;
   
   Exception
     --Caso ocorra algum erro durante a busca dos paramentros, encerro o processameto
     when others then
       P_STATUS := pkg_cfe_frete.Status_Erro;
       P_MESSAGE := 'Erro ao tentar identificar a operação. ' || chr(13) || sqlerrm;
       return;
   end;     
   
   begin
   
     select nvl(l.cfe_integratdv_operusuario,'N')
       into vOperacaoUsuario
       from t_cfe_integratdv l
      where l.cfe_integratdv_cod = P_TDVOPERCOD;
   
     --INSERT INTO DROPME(X,A,L,B) VALUES ('Teste','2',NULL,NULL);
     --COMMIT;
      update tdvadm.t_con_freteoper op
         set op.con_freteoper_msgenv = P_XMLENVIO,
             op.con_freteoper_msgret = P_XMLRETORNO,
             op.cfe_statusfreteoper_status = case   
             	                                 when vOperacaoUsuario = 'S' then 'US'
                                               else op.cfe_statusfreteoper_status
                                             end
       where op.con_freteoper_id     = P_IDCONSULTA
         AND OP.CON_FRETEOPER_ROTA   = P_ROTA
         AND OP.CFE_INTEGRATDV_COD   = V_CodigoOperacaoTdv
         AND OP.CFE_OPERACOES_COD    = V_CodigoOperacaoWs
         AND OP.CON_FRETEOPER_SEQ    = v_CodigoSequencia;
      
      commit;
 
     begin
       --Busco o nome da procedure que será utilizada para validação.
         
         Select oper.cfe_operacoes_procvalidretorno 
           Into v_procValida
           From t_cfe_operacoes oper
          Where oper.cfe_operacoes_cod = V_CodigoOperacaoWs;  
         
     exception 
       --caso não encontre a procedure de analise, eu limpo a variável para impedir a execução da procedure.
       when no_data_found then
         v_procValida := '';
     end;    

     if (nvl( Trim(v_procValida), 'NULLO') <> 'NULLO') AND (vOperacaoUsuario <> 'S') then
       --Monto a Sentença que será utilizada para executar a procedure de validação
       v_ExecValida := 'Begin ' || Trim(v_procValida) || '(''' || P_XMLRETORNO        || ''', ' 
                                                               || P_IDCONSULTA        || ','''
                                                               || P_ROTA              || ''', '
                                                               || V_CodigoOperacaoTdv || ', ' 
                                                               || V_CodigoOperacaoWs  || ', '
                                                               || V_CodigoSequencia   || '); '
                                                               || ' End; ';
       --Executa o comando criado.
       Execute immediate ( v_ExecValida );
     end if;  
     
     IF (P_OPERCOD = '16') AND (vOperacaoUsuario = 'S') THEN
       --Monto a Sentença que será utilizada para executar a procedure de validação
       v_ExecValida := 'Begin ' || Trim(v_procValida) || '(''' || P_XMLRETORNO        || ''', ' 
                                                               || P_IDCONSULTA        || ','''
                                                               || P_ROTA              || ''', '
                                                               || V_CodigoOperacaoTdv || ', ' 
                                                               || V_CodigoOperacaoWs  || ', '
                                                               || V_CodigoSequencia   || '); '
                                                               || ' End; ';
       --Executa o comando criado.
       Execute immediate ( v_ExecValida );
     END IF;
       
       
                                                  

     /*

   SELECT COUNT(*) INTO V_QTDE FROM DROPME K WHERE K.X = 'IntegraçãoFreteEletronico';

   INSERT INTO DROPME VALUES('IntegraçãoFreteEletronico', TO_CHAR(V_QTDE+1), P_XMLRETORNO, NULL);

   UPDATE T_CON_FRETEOPER P
      SET P.CFE_STATUSFRETEOPER_STATUS = 'OK'
    WHERE P.CON_FRETEOPER_ID     = P_IDCONSULTA
      AND P.CON_FRETEOPER_ROTA   = P_ROTA
      AND P.CFE_INTEGRATDV_COD   = V_CodigoOperacaoTdv
      AND P.CFE_OPERACOES_COD    = V_CodigoOperacaoWs;
 */

   COMMIT;

   EXCEPTION WHEN OTHERS THEN
       P_STATUS    := pkg_cfe_frete.Status_Erro;
       P_MESSAGE  := 'Erro ao consultar. Erro='||SQLCODE || chr(13) || sqlerrm;
--       raise_application_error(-20001, sqlerrm);
       return;
   END;

    P_STATUS   := 'N';
    P_MESSAGE := 'Processamento Normal.';

 END SP_GET_VALIDARETORNO;


  PROCEDURE SP_GET_OPERACOESUSUARIO(P_GERCODIGO IN TDVADM.T_CFE_GERENBCO.CFE_GERENBCO_COD%TYPE,
                                    P_CURSOR    OUT T_CURSOR,
                                    P_STATUS    OUT CHAR,
                                    P_MESSAGE   OUT VARCHAR2,
                                    P_USUARIO   IN TDVADM.T_USU_USUARIO.USU_USUARIO_CODIGO%tYPE DEFAULT 'jsantos',
                                    P_ROTA      IN TDVADM.T_USU_USUARIO.GLB_ROTA_CODIGO%TYPE DEFAULT '010') AS
  plistaparams      glbadm.pkg_listas.tlistausuparametros;
  vAplicacao        varchar2(200) := 'freteletro';
  vPodeCadastarCard varchar2(200) := 'N';
  vExecutouParametros Boolean;
  BEGIN

    BEGIN
                       
       if P_USUARIO is not null then
         
          vExecutouParametros := glbadm.pkg_listas.fn_get_usuparamtros(vAplicacao, null, null, plistaparams);
          if Not vExecutouParametros Then                                                        
             P_STATUS :=  PKG_GLB_COMMON.Status_Erro;
             P_MESSAGE := P_MESSAGE || '10 - Erro ao Buscar Parametros.' || chr(10);
             return;
          else
            vPodeCadastarCard := plistaparams('CADCARTAO').texto;            
          End if ;
           
        end if;

      
      If (vPodeCadastarCard = 'S') then
        
         OPEN P_CURSOR FOR
         select i.cfe_integratdv_cod,
                i.cfe_integratdv_desc,
                op.cfe_operacoes_cod               ||'-'||
                   op.cfe_operacoes_desc           ||'-'||
                   op.cfe_operacoes_wmethodo       ||'-'||
                   op.cfe_operacoes_proc           ||'-'||
                   op.cfe_operacoes_status         ||'-'||
                   op.cfe_operacoes_dtcad          ||'-'||
                   op.cfe_operacoes_dtvigencia     ||'-'||
                   op.cfe_operacoes_proc           ||'-'||
                   op.cfe_operacoes_timeoutrequest ||'-'||
                   op.cfe_operacoes_metodoquerstr  ||'-'||
                   op.cfe_operacoes_controllerclass operacoes,
                ge.cfe_gerenbco_cod                ||'-'||
                   ge.cfe_gerenbco_desc            ||'-'||
                   ge.cfe_gerenbco_tpger           ||'-'||
                   ge.cfe_gerenbco_class           ||'-'||
                   ge.cfe_gerenbco_atiavo          ||'-'||
                   ge.cfe_gerenbco_urlproducao     ||'-'||
                   ge.cfe_gerenbco_urlhomologacao  ||'-'||
                   ge.cfe_gerenbco_timeoutrequest  ||'-'||
                   ge.cfe_gerenbco_certificado gerenciadora    
           from tdvadm.t_cfe_integratdv i,
                tdvadm.t_cfe_operatdv   otdv,
                tdvadm.t_cfe_operacoes  op,
                tdvadm.t_cfe_gerenbco   ge
          where i.cfe_integratdv_cod    	                   = otdv.cfe_integratdv_cod
            and otdv.cfe_operacoes_cod                       = op.cfe_operacoes_cod
            and op.cfe_gerenbco_cod                          = ge.cfe_gerenbco_cod
            and upper(nvl(i.cfe_integratdv_operusuario,'N')) = 'S'
            and op.cfe_gerenbco_cod                          = P_GERCODIGO
           order by i.cfe_integratdv_desc;
      
      else
        
         OPEN P_CURSOR FOR
         select i.cfe_integratdv_cod,
                i.cfe_integratdv_desc,
                op.cfe_operacoes_cod               ||'-'||
                   op.cfe_operacoes_desc           ||'-'||
                   op.cfe_operacoes_wmethodo       ||'-'||
                   op.cfe_operacoes_proc           ||'-'||
                   op.cfe_operacoes_status         ||'-'||
                   op.cfe_operacoes_dtcad          ||'-'||
                   op.cfe_operacoes_dtvigencia     ||'-'||
                   op.cfe_operacoes_proc           ||'-'||
                   op.cfe_operacoes_timeoutrequest ||'-'||
                   op.cfe_operacoes_metodoquerstr  ||'-'||
                   op.cfe_operacoes_controllerclass operacoes,
                ge.cfe_gerenbco_cod                ||'-'||
                   ge.cfe_gerenbco_desc            ||'-'||
                   ge.cfe_gerenbco_tpger           ||'-'||
                   ge.cfe_gerenbco_class           ||'-'||
                   ge.cfe_gerenbco_atiavo          ||'-'||
                   ge.cfe_gerenbco_urlproducao     ||'-'||
                   ge.cfe_gerenbco_urlhomologacao  ||'-'||
                   ge.cfe_gerenbco_timeoutrequest  ||'-'||
                   ge.cfe_gerenbco_certificado gerenciadora    
           from tdvadm.t_cfe_integratdv i,
                tdvadm.t_cfe_operatdv   otdv,
                tdvadm.t_cfe_operacoes  op,
                tdvadm.t_cfe_gerenbco   ge
          where i.cfe_integratdv_cod    	                   = otdv.cfe_integratdv_cod
            and otdv.cfe_operacoes_cod                       = op.cfe_operacoes_cod
            and op.cfe_gerenbco_cod                          = ge.cfe_gerenbco_cod
            and upper(nvl(i.cfe_integratdv_operusuario,'N')) = 'S'
            and op.cfe_gerenbco_cod                          = P_GERCODIGO
            and op.cfe_operacoes_cod not in (35,9,40)
           order by i.cfe_integratdv_desc;
        
      end if;    

      P_STATUS  := tdvadm.pkg_glb_common.Status_Nomal;
      P_MESSAGE := 'Lista OK';
    EXCEPTION WHEN OTHERS THEN
      OPEN P_CURSOR FOR select sysdate from dual;
      P_STATUS  := TDVADM.PKG_GLB_COMMON.Status_Erro;
      P_MESSAGE := 'ERRO - SP_GET_OPERACOESUSUARIO - '||SQLERRM;
    END;

  END SP_GET_OPERACOESUSUARIO;

  PROCEDURE SP_GET_GERENCIADORAS(P_CURSOR       OUT T_CURSOR,
                                 P_STATUS       OUT CHAR,
                                 P_MESSAGE      OUT VARCHAR2) AS
    vMaquina tdvadm.t_int_maquinas.int_maquinas_codigo%type;                                
  BEGIN

    BEGIN
       
      begin
        select a.terminal
          into vMaquina
          from v_glb_ambiente a;     
      exception when no_data_found then
        vMaquina := '';  
      end;

      if instr(lower(vMaquina),'vbox') > 0 then

        OPEN P_CURSOR FOR
        select g.cfe_gerenbco_cod,
               g.cfe_gerenbco_desc,
               g.cfe_gerenbco_class
        from tdvadm.t_cfe_gerenbco g
        where upper(nvl(g.cfe_gerenbco_tpger, 'X')) = 'G';
        
      else
        
        OPEN P_CURSOR FOR
        select g.cfe_gerenbco_cod,
               g.cfe_gerenbco_desc,
               g.cfe_gerenbco_class
        from tdvadm.t_cfe_gerenbco g
        where upper(nvl(g.cfe_gerenbco_tpger, 'X')) = 'G'
          and upper(nvl(g.cfe_gerenbco_atiavo, 'N')) = 'S';
          
      end if;          

      P_STATUS  := tdvadm.pkg_glb_common.Status_Nomal;
      P_MESSAGE := 'Lista OK';
    EXCEPTION WHEN OTHERS THEN
      P_STATUS  := TDVADM.PKG_GLB_COMMON.Status_Erro;
      P_MESSAGE := 'ERRO - SP_GET_GERENCIADORAS - '||SQLERRM;
    END;

  END SP_GET_GERENCIADORAS;

  PROCEDURE SP_GET_PARAMPROC(P_OPERACAOCOD IN TDVADM.T_CFE_OPERACOES.CFE_OPERACOES_COD%TYPE,
                              P_CURSOR      OUT T_CURSOR,
                              P_STATUS      OUT CHAR,
                              P_MESSAGE     OUT VARCHAR2) as
  BEGIN

    BEGIN

      OPEN P_CURSOR FOR
      select param.cfe_paramproc_nome,
             param.cfe_paramproc_desc,
             '' valor
      from tdvadm.t_cfe_paramproc param
      where param.cfe_operacoes_cod = P_OPERACAOCOD
      order by param.cfe_paramproc_sequencia;

      P_STATUS  := tdvadm.pkg_glb_common.Status_Nomal;
      P_MESSAGE := 'Lista OK';
    EXCEPTION WHEN OTHERS THEN
      P_STATUS  := TDVADM.PKG_GLB_COMMON.Status_Erro;
      P_MESSAGE := 'ERRO - SP_GET_PARAMSPROC - '||SQLERRM;
    END;

  END SP_GET_PARAMPROC;

  procedure SP_DELETE_ID(p_ID      in  tdvadm.t_con_freteoper.con_freteoper_id%type,
                         p_OperWs  in  tdvadm.t_con_freteoper.cfe_operacoes_cod%type,
                         p_OperTdv in  tdvadm.t_con_freteoper.cfe_integratdv_cod%type,
                         P_Rota    in  tdvadm.t_con_freteoper.con_freteoper_rota%type,
                         p_Status  out char,
                         p_Message out varchar2) as
  /**********************************************************************************************                         
   * Fabiano Góes - 18/01/2012
   * Motivo: Inicialmente essa procedure foi criada para ser usada pela aplicação
   *         "Monitor Frete Eletronico" quando ocorria algum erro durante alguma operação
   *         pra evitar que ficasse na base IDs com erro na execução.    
   **********************************************************************************************/
  begin
    begin
      
      delete 
        from tdvadm.t_con_freteoper fo
       where fo.con_freteoper_id   = p_id
         and fo.con_freteoper_rota = p_rota
         and fo.cfe_operacoes_cod  = p_OperWs
         and fo.cfe_integratdv_cod = p_OperTdv;
      commit;    
    
      p_Status  := tdvadm.pkg_glb_common.Status_Nomal;
      p_Message := 'ID: '||p_id||' deletado com sucesso!';
    exception when others then
      p_Status  := tdvadm.pkg_glb_common.Status_Erro;
      p_Message := sqlerrm;  
    end;
  end SP_DELETE_ID;                                 

  PROCEDURE SP_SET_STATUSOPER2(P_ID         IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ID%TYPE,
                               P_OPERWS     IN  TDVADM.T_CON_FRETEOPER.CFE_OPERACOES_COD%TYPE,
                               P_OPERTDV    IN  TDVADM.T_CON_FRETEOPER.CFE_INTEGRATDV_COD%TYPE,                              
                               P_ROTA       IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ROTA%TYPE,
                               P_STATUSOPER IN  TDVADM.T_CON_FRETEOPER.CFE_STATUSFRETEOPER_STATUS%TYPE,
                               P_MSGSTATUS  IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_OBS%TYPE,
                               P_SEQ        IN TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_SEQ%TYPE,                               
                               P_STATUS     OUT CHAR,
                               P_MESSAGE    OUT VARCHAR2) AS
    V_STATUSOPER TDVADM.T_CON_FRETEOPER.CFE_STATUSFRETEOPER_STATUS%TYPE;
    V_MSGSTATUS  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_OBS%TYPE;
    vValeFrete   tdvadm.t_con_valefrete.con_conhecimento_codigo%TYPE;
    vValeSerie   tdvadm.t_con_valefrete.con_conhecimento_serie%TYPE;
    vValeRota    tdvadm.t_con_valefrete.glb_rota_codigo%TYPE;
    vValeSaque   tdvadm.t_con_valefrete.con_valefrete_saque%TYPE;
    vParaQstr    tdvadm.t_con_freteoper.con_freteoper_paramqrystr%TYPE;
    vXmlRetorno  tdvadm.t_con_freteoper.con_freteoper_msgret%type;  
    vStatus      char(1);
    vMessagem    varchar2(200);                        
  begin
    

    begin 
      V_STATUSOPER := P_STATUSOPER;
      V_MSGSTATUS  := P_MSGSTATUS; 
      
      IF V_STATUSOPER IS NULL THEN
         V_STATUSOPER := 'ER';
         V_MSGSTATUS  := 'ERRO AO ATUALIZAR O STATUS DA OPERAÇÃO, STATUS NÃO INFORMADO';           
      END IF; 
    
      
      SELECT FO.CON_FRETEOPER_PARAMQRYSTR,
             fo.con_freteoper_msgret
        INTO vParaQstr                   ,
             vXmlRetorno
        FROM tdvadm.t_con_freteoper fo  
       where fo.con_freteoper_id   = p_ID
         and fo.cfe_operacoes_cod  = p_OperWs
         and fo.cfe_integratdv_cod = p_OperTdv
         and fo.con_freteoper_rota = p_Rota
         and fo.con_freteoper_seq  = P_SEQ;
      
      vValeFrete  := TDVADM.fn_querystring(TDVADM.fn_querystring(vParaQstr,'VFNumero','=','*'), 'valor', '=', '|');
      vValeSerie  := TDVADM.fn_querystring(TDVADM.fn_querystring(vParaQstr,'VFSerie','=','*'), 'valor', '=', '|');
      vValeRota   := TDVADM.fn_querystring(TDVADM.fn_querystring(vParaQstr,'VFRota','=','*'), 'valor', '=', '|');
      vValeSaque  := TDVADM.fn_querystring(TDVADM.fn_querystring(vParaQstr,'VFSaque','=','*'), 'valor', '=', '|');

      IF p_OperTdv = '18' THEN
         
          BEGIN
           INSERT INTO T_CON_VFRETESOLCIOT(CON_CONHECIMENTO_CODIGO ,
                                           CON_CONHECIMENTO_SERIE  ,
                                           GLB_ROTA_CODIGO         ,
                                           CON_VALEFRETE_SAQUE     ,
                                           CON_VFRETESOLCIOT_DATA)
                                    VALUES(vValeFrete              ,
                                           vValeSerie              ,
                                           vValeRota               ,
                                           vValeSaque              ,
                                           SYSDATE);
           
         EXCEPTION WHEN OTHERS THEN
             P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
             P_MESSAGE := 'Erro ao Criar Solicitação de CIOT. Erro: '||SQLERRM;
         END;   
      
      END IF;
      
      IF p_OperTdv = '23' THEN
         
         IF lower(PKG_CFE_FRETE.FN_GET_CHAVEXML(vXmlRetorno, 'mensagem.parcela1.descricao')) =
            lower('Esta parcela ja foi efetivada ou esta em processo de efetivacao.') THEN
                 
            vParaQstr := vParaQstr||'RPCodoperacaotdv=nome=RPCodoperacaotdv|tipo=String|valor='||p_OperTdv||'*'||
                                    'RPCodoperacaows=nome=RPCodoperacaows|tipo=String|valor='||p_OperWs||'*'||
                                    'RPSequencia=nome=RPSequencia|tipo=String|valor='||P_SEQ||'*'||
                                    'RIntegraTdv_Cod=nome=RIntegraTdv_Cod|tipo=String|valor='||'39'; 
            
            PKG_CFE_FRETE.SP_SET_STATUSPARCELA(vParaQstr, p_ID, p_Rota, vStatus, vMessagem);                                        
            
            V_STATUSOPER := 'EP';
                        
         END IF;   

      END IF;
      
      
      
      update tdvadm.t_con_freteoper fo
         set fo.cfe_statusfreteoper_status = V_STATUSOPER,
             fo.con_freteoper_obs          = V_MSGSTATUS             
       where fo.con_freteoper_id           = p_ID
         and fo.cfe_operacoes_cod          = p_OperWs
         and fo.cfe_integratdv_cod         = p_OperTdv
         and fo.con_freteoper_rota         = p_Rota
         and fo.con_freteoper_seq          = P_SEQ;
      
      
      commit;     

      p_Status  := tdvadm.pkg_glb_common.Status_Nomal;
      p_Message := 'sTATUS DO ID: '||p_id||' Alterado para: '||V_STATUSOPER;
    exception when others then
      p_Status  := tdvadm.pkg_glb_common.Status_Erro;
      p_Message := sqlerrm;  
    end;    
  end SP_SET_STATUSOPER2; 
  
  PROCEDURE SP_SET_STATUSOPER(P_ID         IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ID%TYPE,
                              P_OPERWS     IN  TDVADM.T_CON_FRETEOPER.CFE_OPERACOES_COD%TYPE,
                              P_OPERTDV    IN  TDVADM.T_CON_FRETEOPER.CFE_INTEGRATDV_COD%TYPE,                              
                              P_ROTA       IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ROTA%TYPE,
                              P_STATUSOPER IN  TDVADM.T_CON_FRETEOPER.CFE_STATUSFRETEOPER_STATUS%TYPE,
                              P_MSGSTATUS  IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_OBS%TYPE,
                              P_STATUS     OUT CHAR,
                              P_MESSAGE    OUT VARCHAR2) AS
    V_STATUSOPER TDVADM.T_CON_FRETEOPER.CFE_STATUSFRETEOPER_STATUS%TYPE;
    V_MSGSTATUS  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_OBS%TYPE;                      
  begin
    begin 
      V_STATUSOPER := P_STATUSOPER;
      V_MSGSTATUS  := P_MSGSTATUS; 
      
      IF V_STATUSOPER IS NULL THEN
         V_STATUSOPER := 'ER';
         V_MSGSTATUS  := 'ERRO AO ATUALIZAR O STATUS DA OPERAÇÃO, STATUS NÃO INFORMADO';           
      END IF; 
    
      update tdvadm.t_con_freteoper fo
         set fo.cfe_statusfreteoper_status = V_STATUSOPER,
             fo.con_freteoper_obs = V_MSGSTATUS             
       where fo.con_freteoper_id   = p_ID
         and fo.cfe_operacoes_cod  = p_OperWs
         and fo.cfe_integratdv_cod = p_OperTdv
         and fo.con_freteoper_rota = p_Rota;
      commit;     

      p_Status  := tdvadm.pkg_glb_common.Status_Nomal;
      p_Message := 'sTATUS DO ID: '||p_id||' Alterado para: '||V_STATUSOPER;
    exception when others then
      p_Status  := tdvadm.pkg_glb_common.Status_Erro;
      p_Message := sqlerrm;  
    end;    
  end SP_SET_STATUSOPER;                                   

  FUNCTION FN_TRADUZ_CODRETORNO(P_CHAVE VARCHAR2, P_VALOR VARCHAR2) 
    RETURN VARCHAR2
  as
    vRetorno varchar2(2000);
  begin
  
    begin  
      
      vRetorno := p_Valor;
      if lower(p_chave) = 'mensagem.codigo' then
        select 
          case trim(p_Valor)
            when '0' then '0: OK - Operação realizada com sucesso.'
            when '1' then '1: ERRO_VALIDACAO_TOKEN - Token de autenticação inválido.'
            when '2' then '2: ERRO_VALIDACAO_CAMPOS_ENTRADA - Campo obrigatório/inválido.' 
            when '3' then '3: ERRO_VALIDACAO_CERTIFICADO - Certificado inválido.'
            when '4' then '4: ERRO_PROCESSAMENTO - <mensagem detalhada>'  
            else to_char( p_Valor )
           end
          into vRetorno
          from dual; 
      end if;
                
    exception when others then
      vRetorno := p_Valor;  
    end;
    return vRetorno;   
  end fn_Traduz_CodRetorno;    

  PROCEDURE SP_GET_URLGERENCIADORA(P_IDGERENCIADORA IN TDVADM.T_CFE_GERENBCO.CFE_GERENBCO_COD%TYPE,
                                   P_WSCLASSNAME    IN TDVADM.T_CFE_GERENBCO.CFE_GERENBCO_CLASS%TYPE,
                                   P_CURSOR         OUT T_CURSOR,
                                   P_STATUS         OUT CHAR,
                                   P_MESSAGE        OUT VARCHAR2) AS
  BEGIN                                   
    BEGIN
      OPEN P_CURSOR FOR
        SELECT 'Producao' Chave, G.CFE_GERENBCO_URLPRODUCAO Valor FROM TDVADM.T_CFE_GERENBCO G WHERE G.CFE_GERENBCO_COD = P_IDGERENCIADORA OR UPPER(G.CFE_GERENBCO_CLASS) = UPPER(P_WSCLASSNAME)
        UNION
        SELECT 'Homologacao' Chave, G.CFE_GERENBCO_URLHOMOLOGACAO Valor FROM TDVADM.T_CFE_GERENBCO G WHERE G.CFE_GERENBCO_COD = P_IDGERENCIADORA OR UPPER(G.CFE_GERENBCO_CLASS) = UPPER(P_WSCLASSNAME);
        
      P_STATUS  := TDVADM.PKG_GLB_COMMON.Status_Nomal;
      P_MESSAGE := 'LISTA DE URLS GERADA COM SUCESSO';
    EXCEPTION WHEN OTHERS THEN
      P_STATUS  := TDVADM.PKG_GLB_COMMON.Status_Erro;
      P_MESSAGE := 'ERRO AO GERAR LISTA DE URLS DA GERENCIADORA, '||SQLERRM;
    END;
  END SP_GET_URLGERENCIADORA;


  PROCEDURE SP_ATUALIZA_MSGENV(P_XML        IN CLOB,
                               P_IDCONSULTA IN TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ID%TYPE,
                               P_STATUS     OUT CHAR,
                               P_MESSAGE    OUT VARCHAR2) AS
  begin
    begin

      update tdvadm.t_con_freteoper op
      set op.con_freteoper_msgenv = p_xml
      where op.con_freteoper_id = p_idConsulta;

      p_status  := tdvadm.pkg_glb_common.Status_Nomal;
      p_message := 'campo msgenv atualizado com sucesso';
    exception when others then
      p_status  := tdvadm.pkg_glb_common.Status_Erro;
      p_message := sqlerrm;
    end;
  END SP_ATUALIZA_MSGENV;


  PROCEDURE TESTE AS
  V_DATE  DATE;
  V_TpReg TpRegRntrc;
  BEGIN

    FOR R_CURSOR IN (SELECT K.CON_FRETEOPER_ID,
                            TDVADM.fn_querystring(TDVADM.fn_querystring(K.con_freteoper_paramqrystr ,'Proprietario','=','*'), 'valor', '=', '|') Proprietario,
                            K.CON_FRETEOPER_CONFENV
                       FROM T_CON_FRETEOPER K
                      WHERE K.CFE_STATUSFRETEOPER_STATUS = 'OK')
--                        AND FN_VERIFICARNTRC(K.CON_FRETEOPER_CONFENV) <> 'Não encontrado!'
--                        AND K.CON_FRETEOPER_ID BETWEEN 1 AND 1000)
    LOOP

       V_TpReg := PKG_CFE_FRETE.FN_GET_CONSRNTRC(r_cursor.con_freteoper_id,r_cursor.con_freteoper_confenv);
       -- Sirlano Mudei para sysdate Hoje 30/01/2012
       update t_car_proprietario p
         set p.car_proprietario_classantt = V_TpReg.RegRntrcTipo,
             p.car_proprietario_classeqp = V_TpReg.RegRntrcEquiparado,
             p.car_proprietario_classdt = sysdate,
             p.car_proprietario_rntrcdtval = V_TpReg.RegRntrcValidade
       where rpad(p.car_proprietario_cgccpfcodigo,10) = rpad(r_cursor.Proprietario,10);

--       DBMS_OUTPUT.put_line('Proprietario='|| r_cursor.Proprietario || ' Equiparado='|| V_TpReg.RegRntrcEquiparado||' Situacao='|| V_TpReg.RegRntrcSituacao ||' Tipo='|| V_TpReg.RegRntrcTipo||' Validade='|| V_TpReg.RegRntrcValidade);

    END LOOP;
    commit;
  END TESTE;

----------------------------------------------------------------------------------------------------------------------------------------------
-- Função utilizada para buscar o Valor de uma determinada chave do arquivo XML                                                             --
----------------------------------------------------------------------------------------------------------------------------------------------
FUNCTION FN_GET_CHAVEXML(P_XMLRETORNO  CLOB,
                         P_CHAVE       CHAR
                         ) RETURN VARCHAR2 IS

  --Tipo utilizado no Fetch do cursor
  type pRetCursor is record ( Chave   varchar2(60),
                              Valor   varchar2(500)
                            );

  --Variável que será utilizada no retorno da função.
  vRetorno   varchar2(500);

  --Variável do tipo cursor que será utilizada para percorrer o arquivo XML
  vCursor   pkg_glb_common.T_CURSOR;

  --Variáve que vai gerar o sql de busca.
  vSelect   clob;

  --Variável utilizada para recuperar valores do cursor através do fetch
  vRetCutsor   pRetCursor;
  
  vXml   xmltype;
BEGIN
  --Inicializo as variáveis que serão utilizados na execuçao da procedure.
  vRetorno := '';
  vSelect := empty_clob();
  
  vXml := xmltype.createXML(P_XMLRETORNO);

/*
  --Monto o select que vai correr o xml
  vSelect := vSelect || ' SELECT    '
                     || '   extractvalue(VALUE(Params), §ResponseToRow/Chave§) Chave,  '
                     || '   extractvalue(VALUE(Params), §ResponseToRow/Valor§) Valor   '
                     || ' FROM       '
                     || '   Table(XMLSequence(Extract(XMLTYPE.createXML(§' || Trim(P_XMLRETORNO) || '§),§/ResponseTo/ResponseToRows/ResponseToRow§))) Params ';

  --troca os caracteres coringas
  vSelect :=  replace(vSelect, '§', '''');

  BEGIN
    --INSERT INTO dropme (a, l) VALUES ('teste klaytao', vSelect);
    --COMMIT;
    
    --Abro o cursor passando a variável vSelect.
    open vCursor for vSelect;
  exception
    --Caso ocorra algum erro durante a abertura do cursor, encerro a função e lanço mensagem de erro.
    when others then
      raise_application_error(-20001, 'Erro ao abrir o cursor com o arquivo xml ' || sqlerrm || chr(13) || vSelect);
      --raise_application_error(-20001, vSelect);  
  end;
*/
  For vCursor In ( SELECT    
                     extractvalue(VALUE(Params), 'ResponseToRow/Chave') Chave,  
                     extractvalue(VALUE(Params), 'ResponseToRow/Valor') Valor   
                   FROM       
                     Table(XMLSequence(Extract( vXml, '/ResponseTo/ResponseToRows/ResponseToRow')))  Params
                  )   
  loop
    --utilizo o fetch para recuperar os dados da linha
--    fetch vCursor into vRetCutsor;

    --garanto a saida do loop ao final do cursor
--    exit when vCursor%notfound;


    --Verifico se a chave é a chave solicitada.
    if Trim(vCursor.Chave) = Trim(P_CHAVE) then

      --Transfiro o Valor para a variável de retorno.
      vRetorno := Trim(vCursor.Valor);
    end if;

  end loop;

  --fecho o cursor para liberar a memoria.
--  close vCursor;

  return vRetorno;
END FN_Get_ChaveXml;

-- Procedure utilizada apenas para recuperar o XML recebido.
Procedure SP_VLD_TESTE( P_XMLRETORNO      IN CLOB,
                        P_IDCONSULTA      IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ID%TYPE,
                        P_ROTA            IN  TDVADM.T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,
                        P_CODOPERACAOTDV  IN  VARCHAR2,
                        P_CODOPERACAOWS   IN  VARCHAR2,
                        P_SEQUENCIA       IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_SEQ%TYPE
                      ) Is
Begin
  
--simlesmente guardo o XML de retorno na tabela de operações de frete.
  Update 
    T_CON_FRETEOPER OPER
      Set oper.con_freteoper_confret = P_XMLRETORNO
    Where 
      0=0
      and oper.con_freteoper_id     = P_IDCONSULTA
      and oper.con_freteoper_rota   = P_ROTA
      and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
      and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
      and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;
   
  
  Commit;   

End SP_VLD_TESTE;                      


----------------------------------------------------------------------------------------------------------------------------------------------
-- Procedure utilizada para validar o Xml de retorno da Consulta de RNTRC                                                                   --
----------------------------------------------------------------------------------------------------------------------------------------------
procedure SP_VLD_CONSULTARNTRC( P_XMLRETORNO      IN CLOB,
                                P_IDCONSULTA      IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ID%TYPE,
                                P_ROTA            IN  TDVADM.T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,
                                P_CODOPERACAOTDV  IN  VARCHAR2,
                                P_CODOPERACAOWS   IN  VARCHAR2,
                                P_SEQUENCIA       IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_SEQ%TYPE
                                ) is

  --Variáveis utilizadas para recuperar valores do arquivo XML
  vXml_EqpTac     varchar2(5);
  vXml_Situacao   varchar2(20);
  vXml_RNTRCTipo  char(03);
  vXml_RNTRCVal   varchar2(10);

  --Variáveis utilizada para recuperar dados do proprietário.
  vCnpjCpf_prop     tdvadm.t_car_proprietario.car_proprietario_cgccpfcodigo%type;
  vClassANTT        tdvadm.t_car_proprietario.car_proprietario_classantt%type;
  vClassEqp         tdvadm.t_car_proprietario.car_proprietario_classeqp%Type;
  vRNTRC_Val        tdvadm.t_car_proprietario.car_proprietario_rntrcdtval%type;

  vMsgErro  t_con_freteoper.con_freteoper_obs%type;
  

  
  --vari[avel de controle.
  vCount integer;
  

  vQryString  tdvadm.t_con_freteoper.con_freteoper_paramqrystr%type;
  vOper_status     tdvadm.t_con_freteoper.cfe_statusfreteoper_status%type;
  
  VsITUACAO VARCHAR2(50);
  
  --Variável utilizada para verificar se existe registro na tabela de histórico de consultas inválidas.
  vCountHist Integer;
  
begin

  vCount := 0;
  vMsgErro := '';
  vQryString := '';
  vOper_status := '';
  vClassANTT  := '';
  vClassEqp := '';

  Begin
     --capturo os valores da freteoper
      begin
        Select 
          oper.con_freteoper_paramqrystr,
          oper.cfe_statusfreteoper_status 
        into 
          vQryString,
          vOper_status
        from
          tdvadm.t_con_freteoper oper
        where
          0=0
          and oper.con_freteoper_id     = P_IDCONSULTA
          and oper.con_freteoper_rota   = P_ROTA
          and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
          and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
          and OPER.CON_FRETEOPER_SEQ    = case P_SEQUENCIA
                                            when 0 then 1
                                            else P_SEQUENCIA end; 
          
        --recupero o cnpj do proprietario  que está na QryString;
        vCnpjCpf_prop := Trim(TDVADM.fn_querystring(TDVADM.fn_querystring(vQryString ,'Proprietario','=','*'), 'valor', '=', '|') );
        
        Begin
          --Verifico se existe algum registro na tabela de Histórico de consultas inválidas.
          Select Count(*) Into vCountHist
          From t_car_propconsrntrcinvhist w
          Where Trim(w.car_proprietario_cgccpfcodigo) = Trim(vCnpjCpf_prop);
          
        Exception
          When Others Then
            raise_application_error( -20001, 'Erro ao buscar histórioco de consultas inválidas' || chr(13) || Sqlerrm);
        End;  
                                       
      exception
        when others then
          raise_application_error(-20001, sqlerrm);
      end;
  
  
   
    --Verifico se a consulta foi realizada com sucesso
    IF FN_Get_ChaveXml(P_XMLRETORNO, 'mensagem.codigo') = '0' THEN
     
        
     
      

      --Vou olhar se o RNTRC está ativo.
      if Trim(lower(FN_Get_ChaveXml(P_XMLRETORNO, 'viagem.antt.rntrc.situacao'))) = 'ativo' then -- ('ativo','provisorio') THEN

        --Caso seja uma operação de usuario   
        if vOper_status = 'US' then
          --Verifico se existe um proprietário cadastrado.
          begin
            select 
              count(*) into vCount 
            from 
              t_car_proprietario  prop
            where 
              Trim(prop.car_proprietario_cgccpfcodigo) = Trim(vCnpjCpf_prop);
              
          exception
            when others then
              raise_application_error(-20001, sqlerrm);
          end;              

          if vCount > 0 then
            --Caso o usuario tenha sido cadastrado, e a operação tenha sido de usuario, adiciono o paramento de atualizat rntrc na qry string.            
            vQryString := Trim(vQryString) || 'Atualiza_Rntrc=nome=Atualiza_Rntrc|tipo=Sting|valor=S*';
          end if;
                
        ELSE
          --caso o status não seja de usuario "US" 

        --Atualiza a tabela de operação de frete.
        update tdvadm.t_con_freteoper oper
          set
            OPER.CFE_STATUSFRETEOPER_STATUS = STATUS_OK,
            oper.con_freteoper_retorno = sysdate,
            oper.con_freteoper_confret = P_XMLRETORNO,
            oper.con_freteoper_obs     = 'Validação realizada com sucesso'
        where
          0=0
          and oper.con_freteoper_id     = P_IDCONSULTA
          and oper.con_freteoper_rota   = P_ROTA
          and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
          and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
          and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;
        end if;  
          
        
        
        if  Trim(TDVADM.fn_querystring(TDVADM.fn_querystring(vQryString ,'Atualiza_Rntrc','=','*'), 'valor', '=', '|') ) = 'S' then   

          --Com o RNTRC ativo, vou recuperar os valores do arquivo XML.
          vXml_EqpTac     := Trim( FN_Get_ChaveXml(P_XMLRETORNO, 'viagem.antt.rntrc.equiparado.tac') );
          vXml_Situacao   := Trim( FN_Get_ChaveXml(P_XMLRETORNO, 'viagem.antt.rntrc.situacao') );
          vXml_RNTRCTipo  := Trim( FN_Get_ChaveXml(P_XMLRETORNO, 'viagem.antt.rntrc.tipo') );
          vXml_RNTRCVal   := Trim( FN_Get_ChaveXml(P_XMLRETORNO, 'viagem.antt.rntrc.validade') );

          --Vou buscar nos paramentros de envio "QryString", o CPF/CNPJ  do proprietário
          vCnpjCpf_prop := Trim(TDVADM.fn_querystring(TDVADM.fn_querystring(vQryString ,'Proprietario','=','*'), 'valor', '=', '|'));
            

          --Busco os dados do Motorista.
          SELECT
            prop.car_proprietario_classantt,
            prop.car_proprietario_classeqp,
            prop.car_proprietario_rntrcdtval
          INTO
            vClassANTT,
            vClassEqp,
            vRNTRC_Val
          FROM
            t_car_proprietario  prop
          WHERE
            Trim(prop.car_proprietario_cgccpfcodigo) = Trim(vCnpjCpf_prop);

/****************************************************************************************************************/
/* NEGUEI O CÓDIGO PARA ATUALIZAR A TABELA DE PROPRIETARIO SEMPRE QUE O RNTRC FOR CONSULTADO, ASSIM             */
/* SEMPRE TERÁ A DATA DA ÚLTIMA CONSULTA.                                                                       */ 
/****************************************************************************************************************/
          --Verifico se a nova consulta é diferente dos dados armazenados na tabela de proprietario
/*          if nvl(Trim(vClassANTT), 'R') <> Trim(vXml_RNTRCTipo) OR
             nvl(TO_CHAR(vRNTRC_Val,'dd/mm/yyyy'), 'R') <> Trim(vXml_RNTRCVal) or
           nvl(vClassEqp, 'R')  <> (CASE Trim(vXml_EqpTac) when 'SIM' then 'S' ELSE  'N' end)
          then
*/
            --Atualizo a tabela de proprietário.
            update  t_car_proprietario  prop
              set prop.car_proprietario_classantt  = vXml_RNTRCTipo,
                  prop.car_proprietario_classeqp   = (case vXml_EqpTac when 'SIM' then 'S' ELSE  'N' end),
                  prop.car_proprietario_rntrcdtval = to_date(vXml_RNTRCVal, 'dd/mm/yyyy'),
                  prop.car_proprietario_classdt =  sysdate,
                  prop.car_proprntrcst_codigo   = '01' --01 = Ativo "t_car_proprntrcst"

            where
              Trim(prop.car_proprietario_cgccpfcodigo) = Trim(vCnpjCpf_prop);
              
            --Caso tenha algum registro na tabela de histórico de Consultas
            If vCountHist > 0 Then
              --Flego os registros para liberar o proprietario e registro a data.
              Update t_car_propconsrntrcinvhist HistCons
                Set
                  histCons.Car_Propconsrntrcinvhist_Valid = 'S',
                  histCons.Car_Propconsrntrcinvhist_Dtval = Sysdate
              Where Trim(HistCons.Car_Proprietario_Cgccpfcodigo) = Trim(vCnpjCpf_prop);
              
            End If;  

      end if;   
 

      else
        --Caso o xml tenha trago a situação de SUSPENSO.
        if Trim(lower(FN_Get_ChaveXml(P_XMLRETORNO, 'viagem.antt.rntrc.situacao'))) = 'suspenso' THEN
          --Atualizo a tabela de proprietário para suspenso
          update  t_car_proprietario  prop
            set prop.car_proprietario_classantt    = '',
                  prop.car_proprietario_classeqp   = '',
                  prop.car_proprietario_rntrcdtval = null,
                  prop.car_proprietario_classdt =  sysdate,
                  prop.car_proprntrcst_codigo   = '02' --02 = Suspenso "t_car_proprntrcst"
          where
            Trim(prop.car_proprietario_cgccpfcodigo) = Trim(vCnpjCpf_prop);
          
        --Xml retornando com a situação de INATIVO.  
        ELSIF Trim(lower(FN_Get_ChaveXml(P_XMLRETORNO, 'viagem.antt.rntrc.situacao'))) = 'inativo' THEN

          update  t_car_proprietario  prop
            set prop.car_proprietario_classantt    = '',
                  prop.car_proprietario_classeqp   = '',
                  prop.car_proprietario_rntrcdtval = null,
                  prop.car_proprietario_classdt =  sysdate,
                  prop.car_proprntrcst_codigo   = '04' --04 = Inativo "t_car_proprntrcst"
          where
            Trim(prop.car_proprietario_cgccpfcodigo) = Trim(vCnpjCpf_prop);
          
        end if;
        
        
        

        --Caso a consulta tenha sido realizadao com sucesso, mas o cadastro não está ativo.
        update tdvadm.t_con_freteoper oper
        set
          OPER.CFE_STATUSFRETEOPER_STATUS = STATUS_INVALIDO,
          oper.con_freteoper_retorno = sysdate,
          oper.con_freteoper_confret = P_XMLRETORNO,
          oper.con_freteoper_obs     = 'RNTRC NÃO VALIDADO. Situação: ' || FN_Get_ChaveXml(P_XMLRETORNO, 'viagem.antt.rntrc.situacao')  
      where
        0=0
        and oper.con_freteoper_id     = P_IDCONSULTA
        and oper.con_freteoper_rota   = P_ROTA
        and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
        and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
        and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;
        
        
        --Caso o Rntrc não tenha retornado valido, inseri um novo registro na tabela de histórico
        Insert Into tdvadm.t_car_propconsrntrcinvhist ( car_proprietario_cgccpfcodigo, 
                                                        car_propconsrntrcinvhist_data,
                                                        con_freteoper_id,
                                                        con_freteoper_rota,
                                                        cfe_integratdv_cod,
                                                        cfe_operacoes_cod,
                                                        con_freteoper_seq
                                                      ) 
                                                      Values
                                                      (  Trim( vCnpjCpf_prop ),
                                                         Sysdate,
                                                         P_IDCONSULTA,
                                                         P_ROTA,
                                                         P_CODOPERACAOTDV,
                                                         P_CODOPERACAOWS,
                                                         P_SEQUENCIA
                                                      );  
                                                         

      end if;
    else
      
      --Código da Mensagem não for zero "Consulta não realizada com sucesso.
      update tdvadm.t_con_freteoper oper
        set
          OPER.CFE_STATUSFRETEOPER_STATUS = STATUS_ERRO,
          oper.con_freteoper_retorno = sysdate,
          oper.con_freteoper_confret = P_XMLRETORNO,
          OPER.CON_FRETEOPER_OBS     = Trim( FN_Get_ChaveXml(P_XMLRETORNO, 'mensagem.descricao') )
      where
        0=0
        and oper.con_freteoper_id     = P_IDCONSULTA
        and oper.con_freteoper_rota   = P_ROTA
        and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
        and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
        and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;
        
      
       --Caso o Rntrc não tenha retornado valido, inseri um novo registro na tabela de histórico
        Insert Into tdvadm.t_car_propconsrntrcinvhist ( car_proprietario_cgccpfcodigo, 
                                                        car_propconsrntrcinvhist_data,
                                                        con_freteoper_id,
                                                        con_freteoper_rota,
                                                        cfe_integratdv_cod,
                                                        cfe_operacoes_cod,
                                                        con_freteoper_seq
                                                      ) 
                                                      Values
                                                      (  Trim( vCnpjCpf_prop ),
                                                         Sysdate,
                                                         P_IDCONSULTA,
                                                         P_ROTA,
                                                         P_CODOPERACAOTDV,
                                                         P_CODOPERACAOWS,
                                                         P_SEQUENCIA
                                                      );       
         
        
    END IF;

  EXCEPTION
    --Caso estoure o raise em algum momento eu registro no campo de observação.
    when others then
      --Transfiro a mensagem de erro, para uma variável para poder registrar no campo obs.
      vMsgErro := substr(sqlerrm, 1, 90);

      --atualizo a tabela de freteOperacao
      update tdvadm.t_con_freteoper  oper
        set
          OPER.CFE_STATUSFRETEOPER_STATUS  = STATUS_ERRO,
          oper.con_freteoper_obs     = 'Erro: ' || vMsgErro,
          oper.con_freteoper_retorno = sysdate,
          oper.con_freteoper_confret = Trim(P_XMLRETORNO)
      where
         0=0
        and oper.con_freteoper_id     = P_IDCONSULTA
        and oper.con_freteoper_rota   = P_ROTA
        and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
        and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
        and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;
  END;


end SP_VLD_CONSULTARNTRC;


----------------------------------------------------------------------------------------------------------------------------------------------
-- Procedure utilizada para validar o Xml de retorno da Consulta de FROTA                                                                   --
----------------------------------------------------------------------------------------------------------------------------------------------
procedure SP_VLD_CONSULTAFROTA( P_XMLRETORNO             IN CLOB,
                                P_IDCONSULTA      IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ID%TYPE,
                                P_ROTA            IN  TDVADM.T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,
                                P_CODOPERACAOTDV  IN  VARCHAR2,
                                P_CODOPERACAOWS   IN  VARCHAR2,
                                P_SEQUENCIA       IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_SEQ%TYPE
                               ) is
 --Variávei utilizada para guardar mensagem de erro gerada em raise.
 vMsgErro varchar2(100);

 --Variáveis utilizadas para recuperar valores do arquivo XML.
 vXml_QtdeVeics integer;
 vXml_VeicValidado integer;
 vXml_PlacaVeicValid varchar2(100);

begin
  --Inicialio as variáveis utilizadas na execução da procedure.
  vXml_QtdeVeics      := 0;
  vXml_VeicValidado   := 0;
  vXml_PlacaVeicValid := '';

  begin
    --Primeiro verifico se a consulta foi gerada com sucesso
    IF PKG_CFE_FRETE.FN_Get_ChaveXml(P_XMLRETORNO, 'mensagem.codigo') = '0' THEN

      --Recupero a quantia de veiculos que foi validada.
      vXml_QtdeVeics := PKG_CFE_FRETE.FN_Get_ChaveXml(P_XMLRETORNO, 'viagem.veiculo.qtde');

      --Entro em laco montando o paramentro de situação de veiculo.
      for i in 1..vXml_QtdeVeics loop

        --Caso o veiculo tenha sido validado.
        if PKG_CFE_FRETE.FN_Get_ChaveXml(P_XMLRETORNO, 'viagem.veiculo'|| to_char(i)||'.situacao') = 'S' then

          --incremento a variável de veiculo Validado.
          vXml_VeicValidado := vXml_VeicValidado +1;

          --Pego a placa do Veiculo Validado.
          vXml_PlacaVeicValid := vXml_PlacaVeicValid || PKG_CFE_FRETE.FN_Get_ChaveXml(P_XMLRETORNO, 'viagem.veiculo'|| to_char(i)||'.placa');
        end if;
      end loop;

      --todos os veiculos tem q estar validados.
      if vXml_VeicValidado >= 1 then
        --Registra na tabela a validação da frota
         update tdvadm.t_con_freteoper  oper
           set
             OPER.CFE_STATUSFRETEOPER_STATUS  = STATUS_OK,
             oper.con_freteoper_obs     = 'Consulta Validada com sucesso. ' || chr(13) || 'Veiculos validados ' || vXml_PlacaVeicValid,
             oper.con_freteoper_retorno = sysdate,
             oper.con_freteoper_confret = Trim(P_XMLRETORNO)
         where
            0=0
           and oper.con_freteoper_id     = P_IDCONSULTA
           and oper.con_freteoper_rota   = P_ROTA
           and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
           and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
           and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;
      else
        --se algum não tiver validado
         update tdvadm.t_con_freteoper  oper
           set
             OPER.CFE_STATUSFRETEOPER_STATUS  = STATUS_INVALIDO,
             oper.con_freteoper_obs     = 'Frota Não Validada',
             oper.con_freteoper_retorno = sysdate,
             oper.con_freteoper_confret = Trim(P_XMLRETORNO)
         where
            0=0
           and oper.con_freteoper_id     = P_IDCONSULTA
           and oper.con_freteoper_rota   = P_ROTA
           and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
           and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
           and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;
      end if;

    ELSE
      --Caso o resultado do paramentro 'MENSAGEM.CODIGO' não seja de Sucesso (Zero)
      update tdvadm.t_con_freteoper  oper
        set
          OPER.CFE_STATUSFRETEOPER_STATUS  = STATUS_INVALIDO,
          oper.con_freteoper_obs     = 'CONSULTA NÃO VALIDADA',
          oper.con_freteoper_retorno = sysdate,
          oper.con_freteoper_confret = Trim(P_XMLRETORNO)
      where
         0=0
        and oper.con_freteoper_id     = P_IDCONSULTA
        and oper.con_freteoper_rota   = P_ROTA
        and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
        and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
        and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;


    END IF;

  exception
    --caso ocorra algum erro durante o processamento. Registra o erro
    when others then
      --Transfiro a mensagem de erro, para uma variável para poder registrar no campo obs.
      vMsgErro := substr(sqlerrm, 1, 90);

      --atualizo a tabela de freteOperacao
      update tdvadm.t_con_freteoper  oper
        set
          OPER.CFE_STATUSFRETEOPER_STATUS  = STATUS_ERRO,
          oper.con_freteoper_obs     = 'Erro: ' || vMsgErro,
          oper.con_freteoper_retorno = sysdate,
          oper.con_freteoper_confret = Trim(P_XMLRETORNO)
      where
         0=0
        and oper.con_freteoper_id     = P_IDCONSULTA
        and oper.con_freteoper_rota   = P_ROTA
        and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
        and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
        and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;
  end;
  
end SP_VLD_CONSULTAFROTA;


----------------------------------------------------------------------------------------------------------------------------------------------
-- Procedure utilizada para validar o Xml de retorno da Consulta de Favorecido                                                              --
----------------------------------------------------------------------------------------------------------------------------------------------
procedure SP_VLD_CONSULTAFAVORECIDO( P_XMLRETORNO             IN CLOB,
                                     P_IDCONSULTA      IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ID%TYPE,
                                     P_ROTA            IN  TDVADM.T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,
                                     P_CODOPERACAOTDV  IN  VARCHAR2,
                                     P_CODOPERACAOWS   IN  VARCHAR2,
                                     P_SEQUENCIA       IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_SEQ%TYPE
                                    ) is
 --Variávei utilizada para guardar mensagem de erro gerada em raise.
 vMsgErro varchar2(100);

 --Variavel de controle
 vControle integer;

begin
  --Inicializo as variáveis que serão utilizadas durante o processamento.
  vControle := 0;
  vMsgErro  := '';

  begin
    --Para essa consulta, caso a mensagem seja "0" o favorecido está cadastrado.
    IF PKG_CFE_FRETE.FN_Get_ChaveXml(P_XMLRETORNO, 'mensagem.codigo') = '0' THEN

      --Caso a variavel tenha valor maior que 0, Registra consulta.

         update tdvadm.t_con_freteoper  oper
           set
             OPER.CFE_STATUSFRETEOPER_STATUS  = STATUS_OK,
             oper.con_freteoper_obs     = PKG_CFE_FRETE.FN_Get_ChaveXml(P_XMLRETORNO, 'mensagem.descricao'),
             oper.con_freteoper_retorno = sysdate,
             oper.con_freteoper_confret = Trim(P_XMLRETORNO)
         where
            0=0
           and oper.con_freteoper_id     = P_IDCONSULTA
           and oper.con_freteoper_rota   = P_ROTA
           and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
           and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
           and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;

      else
        --Caso a chave "MENSAGEM.CODIGO não
         update tdvadm.t_con_freteoper  oper
           set
             OPER.CFE_STATUSFRETEOPER_STATUS  = STATUS_INVALIDO,
             oper.con_freteoper_obs     = PKG_CFE_FRETE.FN_Get_ChaveXml(P_XMLRETORNO, 'mensagem.descricao'),
             oper.con_freteoper_retorno = sysdate,
             oper.con_freteoper_confret = Trim(P_XMLRETORNO)
         where
            0=0
           and oper.con_freteoper_id     = P_IDCONSULTA
           and oper.con_freteoper_rota   = P_ROTA
           and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
           and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
           and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;

      end if;
  exception
    --caso ocorra algum erro durante o processamento. Registra o erro
    when others then
      --Transfiro a mensagem de erro, para uma variável para poder registrar no campo obs.
      vMsgErro := substr(sqlerrm, 1, 90);

      --atualizo a tabela de freteOperacao
      update tdvadm.t_con_freteoper  oper
        set
          OPER.CFE_STATUSFRETEOPER_STATUS  = STATUS_ERRO,
          oper.con_freteoper_obs     = 'Erro: ' || vMsgErro,
          oper.con_freteoper_retorno = sysdate,
          oper.con_freteoper_confret = Trim(P_XMLRETORNO)
      where
         0=0
        and oper.con_freteoper_id     = P_IDCONSULTA
        and oper.con_freteoper_rota   = P_ROTA
        and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
        and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
        and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;
  end;

end SP_VLD_CONSULTAFAVORECIDO;

----------------------------------------------------------------------------------------------------------------------------------------------
-- Procedure utilizada para validar o Xml de retorno da Consulta de Cartão de Pedáio                                                        --
----------------------------------------------------------------------------------------------------------------------------------------------
PROCEDURE SP_VLD_CONSULTACARTAOPEDAGIO( P_XMLRETORNO             IN CLOB,
                                        P_IDCONSULTA      IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ID%TYPE,
                                        P_ROTA            IN  TDVADM.T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,
                                        P_CODOPERACAOTDV  IN  VARCHAR2,
                                        P_CODOPERACAOWS   IN  VARCHAR2,
                                        P_SEQUENCIA       IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_SEQ%TYPE
                                       ) is
 --Variávei utilizada para guardar mensagem de erro gerada em raise.
 vMsgErro varchar2(100);


BEGIN
  Begin
    --Caso a consulta tenha retornado com sucesso.
    IF PKG_CFE_FRETE.FN_Get_ChaveXml(P_XMLRETORNO, 'mensagem.codigo') = '0' THEN
      --Verifico se o status do cartão está como ativo "1 = liberado; 2=bloqueado; 3=cancelado;"
      if PKG_CFE_FRETE.FN_Get_ChaveXml(P_XMLRETORNO, 'viagem.cartao.status.id') = '1' then
        update tdvadm.t_con_freteoper  oper
          set
            OPER.CFE_STATUSFRETEOPER_STATUS  = STATUS_OK,
            oper.con_freteoper_obs     = 'Cartão Validado',
            oper.con_freteoper_retorno = sysdate,
            oper.con_freteoper_confret = Trim(P_XMLRETORNO)
        where
           0=0
          and oper.con_freteoper_id     = P_IDCONSULTA
          and oper.con_freteoper_rota   = P_ROTA
          and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
          and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
          and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;


      else
        --Caso o cartão não esteja liberado.
        update tdvadm.t_con_freteoper  oper
          set
            OPER.CFE_STATUSFRETEOPER_STATUS  = STATUS_INVALIDO,
            oper.con_freteoper_obs     = PKG_CFE_FRETE.FN_Get_ChaveXml(P_XMLRETORNO, 'viagem.cartao.status.descricao'),
            oper.con_freteoper_retorno = sysdate,
            oper.con_freteoper_confret = Trim(P_XMLRETORNO)
        where
           0=0
          and oper.con_freteoper_id     = P_IDCONSULTA
          and oper.con_freteoper_rota   = P_ROTA
          and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
          and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
          and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;
      end if;


    else
      --Caso o resultado do paramentro 'MENSAGEM.CODIGO' não seja de Sucesso (Zero)
      update tdvadm.t_con_freteoper  oper
        set
          OPER.CFE_STATUSFRETEOPER_STATUS  = STATUS_INVALIDO,
          oper.con_freteoper_obs     = 'CONSULTA NÃO VALIDADA',
          oper.con_freteoper_retorno = sysdate,
          oper.con_freteoper_confret = Trim(P_XMLRETORNO)
      where
         0=0
        and oper.con_freteoper_id     = P_IDCONSULTA
        and oper.con_freteoper_rota   = P_ROTA
        and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
        and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
        and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;
    end if;


  Exception
    --caso ocorra algum erro durante o processamento. Registra o erro
    when others then
      --Transfiro a mensagem de erro, para uma variável para poder registrar no campo obs.
      vMsgErro := substr(sqlerrm, 1, 90);

      --atualizo a tabela de freteOperacao
      update tdvadm.t_con_freteoper  oper
        set
          OPER.CFE_STATUSFRETEOPER_STATUS  = STATUS_ERRO,
          oper.con_freteoper_obs     = 'Erro: ' || vMsgErro,
          oper.con_freteoper_retorno = sysdate,
          oper.con_freteoper_confret = Trim(P_XMLRETORNO)
      where
         0=0
        and oper.con_freteoper_id     = P_IDCONSULTA
        and oper.con_freteoper_rota   = P_ROTA
        and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
        and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
        and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;
  end;


END SP_VLD_CONSULTACARTAOPEDAGIO;

-- Procedure utilizada para validar o Xml de retorno da Consulta de Cartão de Frete para o motorista
PROCEDURE SP_VLD_CONSCARTAOFRETEMOTOR( P_XMLRETORNO      IN CLOB,
                                       P_IDCONSULTA      IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ID%TYPE,
                                       P_ROTA            IN  TDVADM.T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,
                                       P_CODOPERACAOTDV  IN  VARCHAR2,
                                       P_CODOPERACAOWS   IN  VARCHAR2,
                                       P_SEQUENCIA       IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_SEQ%TYPE
                                     ) is 
  --Variávei utilizada para guardar mensagem de erro gerada em raise.
 vMsgErro varchar2(100);

 --Variável utilizada para recuperar o CNPJ/CPF do Favorecido
 vCnpjCpf_Favorecido   varchar2(20);


BEGIN
  vCnpjCpf_Favorecido:= '';

  Begin
    --Caso a consulta tenha retornado com sucesso.
    IF PKG_CFE_FRETE.FN_Get_ChaveXml(P_XMLRETORNO, 'mensagem.codigo') = '0' THEN

        --Verifico se o status do cartão está como ativo "1 = liberado; 2=bloqueado; 3=cancelado;"
      if PKG_CFE_FRETE.FN_Get_ChaveXml(P_XMLRETORNO, 'viagem.cartao.status.id') <> '3' then

        --busco o CNPJ/CPF na QryStrinf enviada para consulta.
        select
          TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr ,'Motorista','=','*'), 'valor', '=', '|')
        into
          vCnpjCpf_Favorecido
        from
          tdvadm.t_con_freteoper oper
        where
          0=0
          and oper.con_freteoper_id     = P_IDCONSULTA
          and oper.con_freteoper_rota   = P_ROTA
          and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
          and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
          and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;
    

        --Com o cartão valido, verifico se o Cnpj do Favorecido é o mesmo CNPJ do Cartão.
        if Trim(vCnpjCpf_Favorecido) = Trim(PKG_CFE_FRETE.FN_Get_ChaveXml(P_XMLRETORNO, 'viagem.cartao.portador.documento.numero')) then
          update tdvadm.t_con_freteoper  oper
           set
             OPER.CFE_STATUSFRETEOPER_STATUS  = STATUS_OK,
             oper.con_freteoper_obs     = 'Cartão Validado',
             oper.con_freteoper_retorno = sysdate,
             oper.con_freteoper_confret = Trim(P_XMLRETORNO)
          where
            0=0
            and oper.con_freteoper_id     = P_IDCONSULTA
            and oper.con_freteoper_rota   = P_ROTA
            and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
            and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
            and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;

        else
          --Caso o CNPJ do cartão, não seja o mesmo do Favorecido
          update tdvadm.t_con_freteoper  oper
           set
             OPER.CFE_STATUSFRETEOPER_STATUS  = STATUS_INVALIDO,
             oper.con_freteoper_obs     = 'Cartão não pertence ao Favorecido',
             oper.con_freteoper_retorno = sysdate,
             oper.con_freteoper_confret = Trim(P_XMLRETORNO)
          where
            0=0
            and oper.con_freteoper_id     = P_IDCONSULTA
            and oper.con_freteoper_rota   = P_ROTA
            and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
            and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
            and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;

        end if;

      else
        --Caso o cartão não esteja liberado.
        update tdvadm.t_con_freteoper  oper
          set
            OPER.CFE_STATUSFRETEOPER_STATUS  = STATUS_INVALIDO,
            oper.con_freteoper_obs     = PKG_CFE_FRETE.FN_Get_ChaveXml(P_XMLRETORNO, 'viagem.cartao.status.descricao'),
            oper.con_freteoper_retorno = sysdate,
            oper.con_freteoper_confret = Trim(P_XMLRETORNO)
        where
           0=0
          and oper.con_freteoper_id     = P_IDCONSULTA
          and oper.con_freteoper_rota   = P_ROTA
          and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
          and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
          and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;
      end if;


    else
      --Caso o resultado do paramentro 'MENSAGEM.CODIGO' não seja de Sucesso (Zero)
      update tdvadm.t_con_freteoper  oper
        set
          OPER.CFE_STATUSFRETEOPER_STATUS  = STATUS_INVALIDO,
          oper.con_freteoper_obs     = 'CONSULTA NÃO VALIDADA',
          oper.con_freteoper_retorno = sysdate,
          oper.con_freteoper_confret = Trim(P_XMLRETORNO)
      where
         0=0
        and oper.con_freteoper_id     = P_IDCONSULTA
        and oper.con_freteoper_rota   = P_ROTA
        and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
        and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
        and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;
    end if;


  Exception
    --caso ocorra algum erro durante o processamento. Registra o erro
    when others then
      --Transfiro a mensagem de erro, para uma variável para poder registrar no campo obs.
      vMsgErro := substr(sqlerrm, 1, 90);

      --atualizo a tabela de freteOperacao
      update tdvadm.t_con_freteoper  oper
        set
          OPER.CFE_STATUSFRETEOPER_STATUS  = STATUS_ERRO,
          oper.con_freteoper_obs     = 'Erro: ' || vMsgErro,
          oper.con_freteoper_retorno = sysdate,
          oper.con_freteoper_confret = Trim(P_XMLRETORNO)
      where
         0=0
        and oper.con_freteoper_id     = P_IDCONSULTA
        and oper.con_freteoper_rota   = P_ROTA
        and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
        and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
        and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;
  end;


End SP_VLD_CONSCARTAOFRETEMOTOR;                                         


----------------------------------------------------------------------------------------------------------------------------------------------
-- Procedure utilizada para validar o Xml de retorno da Consulta de Cartão de Frete                                                         --
----------------------------------------------------------------------------------------------------------------------------------------------
PROCEDURE SP_VLD_CONSULTACARTAOFRETE( P_XMLRETORNO      IN CLOB,
                                      P_IDCONSULTA      IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ID%TYPE,
                                      P_ROTA            IN  TDVADM.T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,
                                      P_CODOPERACAOTDV  IN  VARCHAR2,
                                      P_CODOPERACAOWS   IN  VARCHAR2,
                                      P_SEQUENCIA       IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_SEQ%TYPE
                                     ) is
  --Variávei utilizada para guardar mensagem de erro gerada em raise.
 vMsgErro varchar2(100);

 --Variável utilizada para recuperar o CNPJ/CPF do Favorecido
 vCnpjCpf_Favorecido   varchar2(20);
 vCnpjCpf_RespPj       varchar2(20);    
 --Variável utilizada para recupera o CNPF/CPF que retornou do XML
 vCnpjCpfRetorno  Varchar2(20);
 
 --Variáve inteiro utilizada como variável de controle.
 vControl  Integer;
 
 --Variável utilizada para recuperar a classe Antt do proprietario
 vClassAntt tdvadm.t_car_proprietario.car_proprietario_classantt%Type;
 
 ex_ClassAntt Exception;
Begin
  --Inicializa as variáveis utilizadas nessa procedure.
  vCnpjCpf_Favorecido:= '';
  vCnpjCpfRetorno:= '';
  vControl:= 0;
  vCnpjCpf_RespPj := '';

  Begin
    --Caso a consulta tenha retornado com sucesso.
    IF PKG_CFE_FRETE.FN_Get_ChaveXml(P_XMLRETORNO, 'mensagem.codigo') = '0' THEN

        --Verifico se o status do cartão está como ativo "1 = liberado; 2=bloqueado; 3=cancelado;"
      if PKG_CFE_FRETE.FN_Get_ChaveXml(P_XMLRETORNO, 'viagem.cartao.status.id') <> '3' then


      --busco o cnpj/cpf na QryString enviada para consulta.
      select
        TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr ,'Proprietario','=','*'), 'valor', '=', '|')
      into
        vCnpjCpf_Favorecido
      from
        tdvadm.t_con_freteoper oper
      where
        0=0
        and oper.con_freteoper_id     = P_IDCONSULTA
        and oper.con_freteoper_rota   = P_ROTA
        and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
        and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
        and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;
        
      --busco o CNPJ/CPF que retornou no Arquivo Xml.
      vCnpjCpfRetorno :=   Trim(PKG_CFE_FRETE.FN_Get_ChaveXml(P_XMLRETORNO, 'viagem.cartao.portador.documento.numero'));
        Begin
           Select 
             prop.car_proprietario_classantt
            Into 
              vClassAntt 
           From 
             t_car_proprietario  prop
            Where Trim(prop.car_proprietario_cgccpfcodigo) = Trim(vCnpjCpf_Favorecido); 
            
        Exception
          When Others Then
          Raise ex_ClassAntt;
        End;    
        
        If vClassAntt IN ('ETC','EQP') Then
          Select 
            Count(*)  Into vControl
          From 
            t_car_propresp  resp
          Where
            Trim(resp.car_proprietario_cgccpfcodigo) = Trim(vCnpjCpf_Favorecido)
            And Trim(resp.car_propresp_cpfcodigo) = Trim(vCnpjCpfRetorno);
        End If;
            
            
            
           
             
        
        

        --Com o cartão valido, verifico se o Cnpj do Favorecido é o mesmo CNPJ do Cartão.
        if Trim(vCnpjCpf_Favorecido) =  Trim(vCnpjCpfRetorno) Or (vControl > 0) then
          update tdvadm.t_con_freteoper  oper
           set
             OPER.CFE_STATUSFRETEOPER_STATUS  = STATUS_OK,
             oper.con_freteoper_obs     = 'Cartão Validado',
             oper.con_freteoper_retorno = sysdate,
             oper.con_freteoper_confret = Trim(P_XMLRETORNO)
          where
            0=0
            and oper.con_freteoper_id     = P_IDCONSULTA
            and oper.con_freteoper_rota   = P_ROTA
            and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
            and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
            and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;

        else
          --Caso o CNPJ do cartão, não seja o mesmo do Favorecido
          update tdvadm.t_con_freteoper  oper
           set
             OPER.CFE_STATUSFRETEOPER_STATUS  = STATUS_INVALIDO,
             oper.con_freteoper_obs     = 'Cartão não pertence ao Favorecido',
             oper.con_freteoper_retorno = sysdate,
             oper.con_freteoper_confret = Trim(P_XMLRETORNO)
          where
            0=0
            and oper.con_freteoper_id     = P_IDCONSULTA
            and oper.con_freteoper_rota   = P_ROTA
            and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
            and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
            and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;

        end if;

      else
        --Caso o cartão não esteja liberado.
        update tdvadm.t_con_freteoper  oper
          set
            OPER.CFE_STATUSFRETEOPER_STATUS  = STATUS_INVALIDO,
            oper.con_freteoper_obs     = PKG_CFE_FRETE.FN_Get_ChaveXml(P_XMLRETORNO, 'viagem.cartao.status.descricao'),
            oper.con_freteoper_retorno = sysdate,
            oper.con_freteoper_confret = Trim(P_XMLRETORNO)
        where
           0=0
          and oper.con_freteoper_id     = P_IDCONSULTA
          and oper.con_freteoper_rota   = P_ROTA
          and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
          and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
          and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;
      end if;


    else
      --Caso o resultado do paramentro 'MENSAGEM.CODIGO' não seja de Sucesso (Zero)
      update tdvadm.t_con_freteoper  oper
        set
          OPER.CFE_STATUSFRETEOPER_STATUS  = STATUS_INVALIDO,
          oper.con_freteoper_obs     = 'CONSULTA NÃO VALIDADA',
          oper.con_freteoper_retorno = sysdate,
          oper.con_freteoper_confret = Trim(P_XMLRETORNO)
      where
         0=0
        and oper.con_freteoper_id     = P_IDCONSULTA
        and oper.con_freteoper_rota   = P_ROTA
        and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
        and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
        and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;
    end if;


  Exception
    When ex_ClassAntt Then
      update tdvadm.t_con_freteoper  oper
        set
          OPER.CFE_STATUSFRETEOPER_STATUS  = STATUS_ERRO,
          oper.con_freteoper_obs     = 'Erro: Proprietário não localizado',
          oper.con_freteoper_retorno = sysdate,
          oper.con_freteoper_confret = Trim(P_XMLRETORNO)
      where
         0=0
        and oper.con_freteoper_id     = P_IDCONSULTA
        and oper.con_freteoper_rota   = P_ROTA
        and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
        and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
        and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;
        
        
    --caso ocorra algum erro durante o processamento. Registra o erro
    when others then
      --Transfiro a mensagem de erro, para uma variável para poder registrar no campo obs.
      vMsgErro := substr(sqlerrm, 1, 90);

      --atualizo a tabela de freteOperacao
      update tdvadm.t_con_freteoper  oper
        set
          OPER.CFE_STATUSFRETEOPER_STATUS  = STATUS_ERRO,
          oper.con_freteoper_obs     = 'Erro: ' || vMsgErro,
          oper.con_freteoper_retorno = sysdate,
          oper.con_freteoper_confret = Trim(P_XMLRETORNO)
      where
         0=0
        and oper.con_freteoper_id     = P_IDCONSULTA
        and oper.con_freteoper_rota   = P_ROTA
        and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
        and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
        and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;
  end;


End SP_VLD_CONSULTACARTAOFRETE;

----------------------------------------------------------------------------------------------------------------------------------------------
-- Procedure utilizada para validar o Xml de retorno da Solicitação de CIOT para uma viagem                                                 --
----------------------------------------------------------------------------------------------------------------------------------------------    
Procedure SP_VLD_CONSULTACIOTVIAGEM( P_XMLRETORNO      IN CLOB,
                                     P_IDCONSULTA      IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ID%TYPE,
                                     P_ROTA            IN  TDVADM.T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,
                                     P_CODOPERACAOTDV  IN  VARCHAR2,
                                     P_CODOPERACAOWS   IN  VARCHAR2,
                                     P_SEQUENCIA       IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_SEQ%TYPE
                                    ) Is
 -- Variável utilizada para recuperar a query String
 vQryString tdvadm.t_con_freteoper.con_freteoper_paramqrystr%Type;
 
 --Variável utilizada para gerar mensagem para observação.
 vMessage tdvadm.t_con_freteoper.con_freteoper_obs%Type;
 
 --Variáveis utilizadas para recuperar dados da viagem
 vViagem_Codigo tdvadm.t_vgm_viagem.vgm_viagem_codigo%Type;
 vViagem_Rota tdvadm.t_vgm_viagem.glb_rota_codigo%Type;
 
 --Variáveis utilizadas para recuperar valores do XML
 vXmlMensagem_codigo Varchar2(5);
 vXmlMensagem_Descr Varchar2(500);
 vXmlCiot_Numero tdvadm.t_vgm_vgciot.vgm_vgciot_numero%Type;
 vXmlCiot_Protocolo tdvadm.t_vgm_vgciot.vgm_vgciot_protocolo%Type;
 vXmlCiot_Id tdvadm.t_vgm_vgciot.vgm_vgciot_id%Type;
Begin
  --Inicializa as variáveis utilizadas nessa procedure
  vQryString := '';
  vMessage := '';
  vViagem_Codigo := 0;
  vViagem_Rota := '';
  vXmlMensagem_codigo := '';
  vXmlMensagem_Descr:= '';
  vXmlCiot_Numero := 0;
  vXmlCiot_Protocolo := 0;
  vXmlCiot_Id:= 0;
  
  
  
  Begin
    --Recupero a QryString utilizada para gerar operação.
    Begin
      Select 
        oper.con_freteoper_paramqrystr Into vQryString
      From
        tdvadm.t_con_freteoper oper
      Where
        oper.con_freteoper_id = P_IDCONSULTA
        And oper.con_freteoper_rota = P_ROTA
        And oper.cfe_integratdv_cod = P_CODOPERACAOTDV
        And oper.cfe_operacoes_cod = P_CODOPERACAOWS
        And oper.con_freteoper_seq = P_SEQUENCIA;
    
    Exception
      --Caso não encontre o registro.
      When no_data_found Then
        vMessage := 'Linha de operação não encontrada.';
        Raise vEx_Select;
      
      --Erro não previsto
      When Others Then
        vMessage := 'Erro ao recuperar QryString para validação' || chr(13) || Sqlerrm; 
        Raise vEx_Select;      
    End;
    
    --Extraio Valores da QryString
    vViagem_Codigo := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryString,'ViagemNumero','=','*'), 'valor', '=', '|'); 
    vViagem_Rota := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryString,'ViagemRota','=','*'), 'valor', '=', '|');
    
    --Extraio valores do XML (Paramentro)
    vXmlMensagem_codigo := PKG_CFE_FRETE.FN_GET_CHAVEXML(P_XMLRETORNO, 'mensagem.codigo');
    vXmlMensagem_Descr := PKG_CFE_FRETE.FN_GET_CHAVEXML(P_XMLRETORNO, 'mensagem.descricao');
    vXmlCiot_Numero := PKG_CFE_FRETE.FN_GET_CHAVEXML(P_XMLRETORNO, 'viagem.antt.ciot.numero');
    vXmlCiot_Protocolo:= replace(PKG_CFE_FRETE.FN_GET_CHAVEXML(P_XMLRETORNO, 'viagem.antt.ciot.protocolo'),'xxxx','-1');
    vXmlCiot_Id := PKG_CFE_FRETE.FN_GET_CHAVEXML(P_XMLRETORNO, 'viagem.id');
    
    --Caso o Código da mensagem seja "0 - Zero", quer dizer que o CIOT foi fornecido com sucesso.
    If ( Trim(vXmlMensagem_codigo) = '0' ) Then
      --atualizo a Tabela de Ciot da Viagem
      Update t_vgm_vgciot ciot
        Set ciot.vgm_vgciot_numero = vXmlCiot_Numero,
            ciot.vgm_vgciot_protocolo = vXmlCiot_Protocolo,
            ciot.vgm_vgciot_id = vXmlCiot_Id
      Where
        ciot.vgm_viagem_codigo = vViagem_Codigo
        And ciot.glb_rota_codigo = vViagem_Rota;
      
      --Atualizo a Tabela de operação de frete.
      update tdvadm.t_con_freteoper oper
        set
          OPER.CFE_STATUSFRETEOPER_STATUS = STATUS_OK,
          oper.con_freteoper_retorno = sysdate,
          oper.con_freteoper_confret = P_XMLRETORNO,
          oper.con_freteoper_obs     = vXmlMensagem_Descr
      where
        0=0
        and oper.con_freteoper_id     = P_IDCONSULTA
        and oper.con_freteoper_rota   = P_ROTA
        and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
        and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
        and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;
    Else
      --Caso o código da mensagem seja diferente de "0 - Zero"
      update tdvadm.t_con_freteoper oper
        set
          OPER.CFE_STATUSFRETEOPER_STATUS = STATUS_INVALIDO,
          oper.con_freteoper_retorno = sysdate,
          oper.con_freteoper_confret = P_XMLRETORNO,
          OPER.CON_FRETEOPER_OBS     = vXmlMensagem_Descr
      where
        0=0
        and oper.con_freteoper_id     = P_IDCONSULTA
        and oper.con_freteoper_rota   = P_ROTA
        and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
        and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
        and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;
        
      --Excluo o registro de CIOT   
      Delete From t_vgm_vgciot ciot
      Where ciot.vgm_viagem_codigo = vViagem_Codigo
      And ciot.glb_rota_codigo = vViagem_Rota;
        
    End If;
    
    
    
    
    
  
      
  Exception
    --erro ainda na fase de busca de dados.
    When vEx_Select Then
      --por algum motivo não encontrei a linha da operação.
      --tento excluir a solicitação do CIOT, através do ID e rota.
      Delete From t_vgm_vgciot ciot
      Where ciot.con_freteoper_id = P_IDCONSULTA
      And ciot.con_freteoper_rota = P_ROTA
      And nvl(ciot.vgm_vgciot_numero, 0) <> 0;
    
    --caso ocorra algum erro não previsto.
    When Others Then
      --Recupero a mensagem de erro gerada na procedure.
      vMessage := substr(sqlerrm, 1, 90);
      
      --atualizo a tabela de freteOperacao
      update tdvadm.t_con_freteoper  oper
        set
          OPER.CFE_STATUSFRETEOPER_STATUS  = STATUS_ERRO,
          oper.con_freteoper_obs     = 'Erro: ' || vMessage,
          oper.con_freteoper_retorno = sysdate,
          oper.con_freteoper_confret = Trim(P_XMLRETORNO)
      where
         0=0
        and oper.con_freteoper_id     = P_IDCONSULTA
        and oper.con_freteoper_rota   = P_ROTA
        and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
        and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
        and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;
  End;


End SP_VLD_CONSULTACIOTVIAGEM;                                    

----------------------------------------------------------------------------------------------------------------------------------------------
-- Procedure utilizada para validar o Xml de retorno da Consulta de CIOT                                                                    --
----------------------------------------------------------------------------------------------------------------------------------------------
PROCEDURE SP_VLD_CONSULTACIOT( P_XMLRETORNO      IN CLOB,
                               P_IDCONSULTA      IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ID%TYPE,
                               P_ROTA            IN  TDVADM.T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,
                               P_CODOPERACAOTDV  IN  VARCHAR2,
                               P_CODOPERACAOWS   IN  VARCHAR2,
                               P_SEQUENCIA       IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_SEQ%TYPE
                              ) is
                              
 --Variável de linha utilizada para facilitar a inserção na tabela de CIOT.
 vTabCiot   tdvadm.t_con_vfreteciot%rowtype;
 
 --Variável utilizada para guardar mensagem de erro.
 vMsgErro      t_con_freteoper.con_freteoper_obs%type;
 vQryStrInsert t_con_freteoper.con_freteoper_paramqrystr%TYPE;
 vVfNumero     t_con_valefrete.con_conhecimento_codigo%TYPE; 
 vVfSerie      t_con_valefrete.con_conhecimento_serie%TYPE;
 vVfRota       t_con_valefrete.glb_rota_codigo%TYPE;
 vVfSaque      t_con_valefrete.con_valefrete_saque%TYPE;
 vTPPagamento  CHAR(2);
 
BEGIN
  Begin
     BEGIN  
        SELECT L.CON_FRETEOPER_PARAMQRYSTR 
         INTO vQryStrInsert
         FROM T_CON_FRETEOPER L
        WHERE L.CON_FRETEOPER_ID   = P_IDCONSULTA
          AND L.CON_FRETEOPER_ROTA = P_ROTA
          AND L.CFE_INTEGRATDV_COD = '18'
          AND L.CFE_OPERACOES_COD  = '14'
          And l.con_freteoper_seq = P_SEQUENCIA;
            
             
          vVfNumero    := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryStrInsert,'VFNumero','=','*'), 'valor', '=', '|');
          vVfSerie     := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryStrInsert,'VFSerie','=','*'), 'valor', '=', '|');
          vVfRota      := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryStrInsert,'VFRota','=','*'), 'valor', '=', '|');
          vVfSaque     := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryStrInsert,'VFSaque','=','*'), 'valor', '=', '|');
          vTPPagamento := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryStrInsert,'IntegraTdv_Cod','=','*'), 'valor', '=', '|');
                    
          vTabCiot.Con_Conhecimento_Codigo := vVfNumero;
          vTabCiot.Con_Conhecimento_Serie  := vVfSerie; 
          vTabCiot.Glb_Rota_Codigo         := vVfRota; 
          vTabCiot.Con_Valefrete_Saque     := vVfSaque;
      
      EXCEPTION WHEN OTHERS THEN
        vMsgErro := substr(sqlerrm, 1, 90);
      END;    
    
    --Para essa consulta, o retorno da mensagem com "0", signifca que retornou corretamente.
    IF PKG_CFE_FRETE.FN_GET_CHAVEXML(P_XMLRETORNO, 'mensagem.codigo') = '0' THEN
      --Recupero os valores que serão importantes para inserção.
      vTabCiot.Con_Vfreteciot_Numero    := PKG_CFE_FRETE.FN_GET_CHAVEXML(P_XMLRETORNO, 'viagem.antt.ciot.numero');
      -- ESTAVA RETORNANDO xxxx PARA O PROTOCOLO
      -- ACREDITO SER QUE A ANTT ESTAVA EM CONTINGENCIA
      -- SIRLANO 19/05 AS 06:00
      vTabCiot.Con_Vfreteciot_Protocolo := replace(PKG_CFE_FRETE.FN_GET_CHAVEXML(P_XMLRETORNO, 'viagem.antt.ciot.protocolo'),'xxxx','-1');
      vTabCiot.Con_Vfreteciot_Id        := PKG_CFE_FRETE.FN_GET_CHAVEXML(P_XMLRETORNO, 'viagem.id');
      vTabCiot.Con_Freteoper_Id         := P_IDCONSULTA;
      vTabCiot.Con_Freteoper_Rota       := P_ROTA;
      
   
      
      
      --executo o insert propriamente dito.
      -- ALTERADO PARA ATUALIZAR POIS JA CRIAMOS UM REGISTRO NA GERAÇÃO DO ARQUIVO!
      
      UPDATE T_CON_VFRETECIOT CIOT
       
        SET CIOT.CON_VFRETECIOT_NUMERO        = vTabCiot.Con_Vfreteciot_Numero,
             CIOT.CON_VFRETECIOT_PROTOCOLO    = vTabCiot.Con_Vfreteciot_Protocolo,
             CIOT.CON_VFRETECIOT_ID           = vTabCiot.Con_Vfreteciot_Id,
             ciot.con_vfreteciot_tppagamento  = vTPPagamento,
             ciot.con_vfreteciot_flagimprime  = 'S',
             ciot.con_vfreteciot_flagaltera   = 'N',
             CIOT.CON_VFRETECIOT_FLAGPROCESAL = 'N'
             
       WHERE CIOT.CON_CONHECIMENTO_CODIGO  = vTabCiot.Con_Conhecimento_Codigo
         AND CIOT.CON_CONHECIMENTO_SERIE   = vTabCiot.Con_Conhecimento_Serie
         AND CIOT.GLB_ROTA_CODIGO          = vTabCiot.Glb_Rota_Codigo
         AND CIOT.CON_VALEFRETE_SAQUE      = vTabCiot.Con_Valefrete_Saque
         AND CIOT.CON_VFRETECIOT_NUMERO    IS NULL;
     
      
      
      
      
      
      
      
      --Atualiza a tabela de operação de frete.
      update tdvadm.t_con_freteoper oper
        set
          OPER.CFE_STATUSFRETEOPER_STATUS = STATUS_OK,
          oper.con_freteoper_retorno = sysdate,
          oper.con_freteoper_confret = P_XMLRETORNO,
          oper.con_freteoper_obs     = 'Validação realizada com sucesso'
      where
        0=0
        and oper.con_freteoper_id     = P_IDCONSULTA
        and oper.con_freteoper_rota   = P_ROTA
        and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
        and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
        and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;
    else
      --Caso o retorno não seja "0" (zero)  
      --Código da Mensagem não for zero "Consulta não realizada com sucesso.
      update tdvadm.t_con_freteoper oper
        set
          OPER.CFE_STATUSFRETEOPER_STATUS = STATUS_INVALIDO,
          oper.con_freteoper_retorno = sysdate,
          oper.con_freteoper_confret = P_XMLRETORNO,
          OPER.CON_FRETEOPER_OBS     = PKG_CFE_FRETE.FN_GET_CHAVEXML(P_XMLRETORNO, 'mensagem.descricao')
      where
        0=0
        and oper.con_freteoper_id     = P_IDCONSULTA
        and oper.con_freteoper_rota   = P_ROTA
        and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
        and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
        and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;
        
      --Excluo o registro de CIOT   
      delete from T_CON_VFRETECIOT CIOT
       WHERE CIOT.CON_CONHECIMENTO_CODIGO  = vTabCiot.Con_Conhecimento_Codigo
         AND CIOT.CON_CONHECIMENTO_SERIE   = vTabCiot.Con_Conhecimento_Serie
         AND CIOT.GLB_ROTA_CODIGO          = vTabCiot.Glb_Rota_Codigo
         AND CIOT.CON_VALEFRETE_SAQUE      = vTabCiot.Con_Valefrete_Saque
         AND CIOT.CON_VFRETECIOT_NUMERO    IS NULL;  
    END IF;
    
    /*************************************************************/
      /*****************  DELETO A SOLICITAÇÃO *********************/
      /*************************************************************/
      
      DELETE T_CON_VFRETESOLCIOT LL
       WHERE LL.CON_CONHECIMENTO_CODIGO = vTabCiot.Con_Conhecimento_Codigo
         AND LL.CON_CONHECIMENTO_SERIE  = vTabCiot.Con_Conhecimento_Serie
         AND LL.GLB_ROTA_CODIGO         = vTabCiot.Glb_Rota_Codigo
         AND LL.CON_VALEFRETE_SAQUE     = vTabCiot.Con_Valefrete_Saque;
         
      /************************************************************/ 
    
    
  EXCEPTION
    --Caso estoure o raise em algum momento eu registro no campo de observação.
    when others then
      --Transfiro a mensagem de erro, para uma variável para poder registrar no campo obs.
      vMsgErro := substr(sqlerrm, 1, 90);

      --atualizo a tabela de freteOperacao
      update tdvadm.t_con_freteoper  oper
        set
          OPER.CFE_STATUSFRETEOPER_STATUS  = STATUS_ERRO,
          oper.con_freteoper_obs     = 'Erro: ' || vMsgErro,
          oper.con_freteoper_retorno = sysdate,
          oper.con_freteoper_confret = Trim(P_XMLRETORNO)
      where
         0=0
        and oper.con_freteoper_id     = P_IDCONSULTA
        and oper.con_freteoper_rota   = P_ROTA
        and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
        and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
        and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;
  END;
END SP_VLD_CONSULTACIOT;



----------------------------------------------------------------------------------------------------------------------------------------------
-- Procedure utilizada para validar o Xml de retorno da Consulta de CIOT                                                                    --
----------------------------------------------------------------------------------------------------------------------------------------------
PROCEDURE SP_VLD_CONSULTACIOT2( P_XMLRETORNO      IN CLOB,
                               P_IDCONSULTA      IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ID%TYPE,
                               P_ROTA            IN  TDVADM.T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,
                               P_CODOPERACAOTDV  IN  VARCHAR2,
                               P_CODOPERACAOWS   IN  VARCHAR2,
                               P_SEQUENCIA       IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_SEQ%TYPE
                              ) is
                              
 --Variável de linha utilizada para facilitar a inserção na tabela de CIOT.
 vTabCiot   tdvadm.t_con_vfreteciot%rowtype;
 
 --Variável utilizada para guardar mensagem de erro.
 vMsgErro      t_con_freteoper.con_freteoper_obs%type;
 vQryStrInsert t_con_freteoper.con_freteoper_paramqrystr%TYPE;
 vVfNumero     t_con_valefrete.con_conhecimento_codigo%TYPE; 
 vVfSerie      t_con_valefrete.con_conhecimento_serie%TYPE;
 vVfRota       t_con_valefrete.glb_rota_codigo%TYPE;
 vVfSaque      t_con_valefrete.con_valefrete_saque%TYPE;
 vTPPagamento  CHAR(2);
 
BEGIN
  Begin
     BEGIN  
        SELECT L.CON_FRETEOPER_PARAMQRYSTR 
         INTO vQryStrInsert
         FROM T_CON_FRETEOPER L
        WHERE L.CON_FRETEOPER_ID   = P_IDCONSULTA
          AND L.CON_FRETEOPER_ROTA = P_ROTA
          AND L.CFE_INTEGRATDV_COD = '35'
          AND L.CFE_OPERACOES_COD  = '19'
          And l.con_freteoper_seq = P_SEQUENCIA;
            
             
          vVfNumero    := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryStrInsert,'VFNumero','=','*'), 'valor', '=', '|');
          vVfSerie     := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryStrInsert,'VFSerie','=','*'), 'valor', '=', '|');
          vVfRota      := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryStrInsert,'VFRota','=','*'), 'valor', '=', '|');
          vVfSaque     := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryStrInsert,'VFSaque','=','*'), 'valor', '=', '|');
          vTPPagamento := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryStrInsert,'IntegraTdv_Cod','=','*'), 'valor', '=', '|');
                    
          vTabCiot.Con_Conhecimento_Codigo := vVfNumero;
          vTabCiot.Con_Conhecimento_Serie  := vVfSerie; 
          vTabCiot.Glb_Rota_Codigo         := vVfRota; 
          vTabCiot.Con_Valefrete_Saque     := vVfSaque;
      
      EXCEPTION WHEN OTHERS THEN
        vMsgErro := substr(sqlerrm, 1, 90);
      END;    
    
    --Para essa consulta, o retorno da mensagem com "0", signifca que retornou corretamente.
    IF PKG_CFE_FRETE.FN_GET_CHAVEXML(P_XMLRETORNO, 'mensagem.codigo') = '0' THEN
      --Recupero os valores que serão importantes para inserção.
      vTabCiot.Con_Vfreteciot_Numero    := PKG_CFE_FRETE.FN_GET_CHAVEXML(P_XMLRETORNO, 'viagem.antt.ciot.numero');
      -- ESTAVA RETORNANDO xxxx PARA O PROTOCOLO
      -- ACREDITO SER QUE A ANTT ESTAVA EM CONTINGENCIA
      -- SIRLANO 19/05 AS 06:00
      vTabCiot.Con_Vfreteciot_Protocolo := replace(PKG_CFE_FRETE.FN_GET_CHAVEXML(P_XMLRETORNO, 'viagem.antt.ciot.protocolo'),'xxxx','-1');
      vTabCiot.Con_Vfreteciot_Id        := PKG_CFE_FRETE.FN_GET_CHAVEXML(P_XMLRETORNO, 'viagem.id');
      vTabCiot.Con_Freteoper_Id         := P_IDCONSULTA;
      vTabCiot.Con_Freteoper_Rota       := P_ROTA;
      
   
      
      
      --executo o insert propriamente dito.
      -- ALTERADO PARA ATUALIZAR POIS JA CRIAMOS UM REGISTRO NA GERAÇÃO DO ARQUIVO!
      
      UPDATE T_CON_VFRETECIOT CIOT
       
        SET  ciot.con_vfreteciot_flagimprime  = 'S',
             ciot.con_vfreteciot_flagaltera   = 'N',
             CIOT.CON_VFRETECIOT_FLAGPROCESAL = 'N'
             
       WHERE CIOT.CON_CONHECIMENTO_CODIGO  = vTabCiot.Con_Conhecimento_Codigo
         AND CIOT.CON_CONHECIMENTO_SERIE   = vTabCiot.Con_Conhecimento_Serie
         AND CIOT.GLB_ROTA_CODIGO          = vTabCiot.Glb_Rota_Codigo
         AND CIOT.CON_VALEFRETE_SAQUE      = vTabCiot.Con_Valefrete_Saque
         AND CIOT.CON_VFRETECIOT_NUMERO    IS NULL;
     

      --Atualiza a tabela de operação de frete.
      update tdvadm.t_con_freteoper oper
        set
          OPER.CFE_STATUSFRETEOPER_STATUS = STATUS_OK,
          oper.con_freteoper_retorno = sysdate,
          oper.con_freteoper_confret = P_XMLRETORNO,
          oper.con_freteoper_obs     = 'Validação realizada com sucesso'
      where
        0=0
        and oper.con_freteoper_id     = P_IDCONSULTA
        and oper.con_freteoper_rota   = P_ROTA
        and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
        and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
        and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;
    else
      --Caso o retorno não seja "0" (zero)  
      --Código da Mensagem não for zero "Consulta não realizada com sucesso.
      update tdvadm.t_con_freteoper oper
        set
          OPER.CFE_STATUSFRETEOPER_STATUS = STATUS_INVALIDO,
          oper.con_freteoper_retorno = sysdate,
          oper.con_freteoper_confret = P_XMLRETORNO,
          OPER.CON_FRETEOPER_OBS     = PKG_CFE_FRETE.FN_GET_CHAVEXML(P_XMLRETORNO, 'mensagem.descricao')
      where
        0=0
        and oper.con_freteoper_id     = P_IDCONSULTA
        and oper.con_freteoper_rota   = P_ROTA
        and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
        and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
        and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;
        


    END IF;
    
    /*************************************************************/
      /*****************  DELETO A SOLICITAÇÃO *********************/
      /*************************************************************/
      
      DELETE T_CON_VFRETESOLCIOT LL
       WHERE LL.CON_CONHECIMENTO_CODIGO = vTabCiot.Con_Conhecimento_Codigo
         AND LL.CON_CONHECIMENTO_SERIE  = vTabCiot.Con_Conhecimento_Serie
         AND LL.GLB_ROTA_CODIGO         = vTabCiot.Glb_Rota_Codigo
         AND LL.CON_VALEFRETE_SAQUE     = vTabCiot.Con_Valefrete_Saque;
         
      /************************************************************/ 
    
    
  EXCEPTION
    --Caso estoure o raise em algum momento eu registro no campo de observação.
    when others then
      --Transfiro a mensagem de erro, para uma variável para poder registrar no campo obs.
      vMsgErro := substr(sqlerrm, 1, 90);

      --atualizo a tabela de freteOperacao
      update tdvadm.t_con_freteoper  oper
        set
          OPER.CFE_STATUSFRETEOPER_STATUS  = STATUS_ERRO,
          oper.con_freteoper_obs     = 'Erro: ' || vMsgErro,
          oper.con_freteoper_retorno = sysdate,
          oper.con_freteoper_confret = Trim(P_XMLRETORNO)
      where
         0=0
        and oper.con_freteoper_id     = P_IDCONSULTA
        and oper.con_freteoper_rota   = P_ROTA
        and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
        and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
        and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;
  END;
END SP_VLD_CONSULTACIOT2;


----------------------------------------------------------------------------------------------------------------------------------------------
-- Procedure utilizada para validar o Xml de retorno da Consulta de CONTA BANCÁRIA                                                          --
----------------------------------------------------------------------------------------------------------------------------------------------
PROCEDURE SP_VLD_CONSULTACONTA( P_XMLRETORNO      IN CLOB,
                                P_IDCONSULTA      IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ID%TYPE,
                                P_ROTA            IN  TDVADM.T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,
                                P_CODOPERACAOTDV  IN  VARCHAR2,
                                P_CODOPERACAOWS   IN  VARCHAR2,
                                P_SEQUENCIA       IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_SEQ%TYPE
                              ) is
 --Variável utilizada para guardar mensagem de erro.
 vMsgErro   t_con_freteoper.con_freteoper_obs%type;
BEGIN
   
 BEGIN
   --Verifico se a consulta foi realizada com sucesso.
    IF PKG_CFE_FRETE.FN_GET_CHAVEXML(P_XMLRETORNO, 'mensagem.codigo') = '0' THEN

      --Verifico se a conta passada foi validada.
      if lower(trim(PKG_CFE_FRETE.FN_GET_CHAVEXML(P_XMLRETORNO, 'viagem.favorecido.conta.status'))) = 'ativa' THEN
        --Atualiza a tabela de operação de frete.
        update tdvadm.t_con_freteoper oper
          set
            OPER.CFE_STATUSFRETEOPER_STATUS = STATUS_OK,
            oper.con_freteoper_retorno = sysdate,
            oper.con_freteoper_confret = P_XMLRETORNO,
            oper.con_freteoper_obs     = 'Validação realizada com sucesso'
        where
          0=0
          and oper.con_freteoper_id     = P_IDCONSULTA
          and oper.con_freteoper_rota   = P_ROTA
          and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
          and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
          and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;
          
        
      else
        --caso a consulta tenha sido realizada com sucesso, porem a conta não está válida.
        update tdvadm.t_con_freteoper oper
          set
            OPER.CFE_STATUSFRETEOPER_STATUS = STATUS_INVALIDO,
            oper.con_freteoper_retorno = sysdate,
            oper.con_freteoper_confret = P_XMLRETORNO,
            OPER.CON_FRETEOPER_OBS     = PKG_CFE_FRETE.FN_GET_CHAVEXML(P_XMLRETORNO, 'viagem.favorecido.conta.status')
        where
          0=0
          and oper.con_freteoper_id     = P_IDCONSULTA
          and oper.con_freteoper_rota   = P_ROTA
          and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
          and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
          and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;
          
      end if;
      
    
      
    ELSE
      --Se o retorno não for igual a zero, a consulta não foi realizada com sucesso.
      update tdvadm.t_con_freteoper oper
        set
          OPER.CFE_STATUSFRETEOPER_STATUS = STATUS_ERRO,
          oper.con_freteoper_retorno = sysdate,
          oper.con_freteoper_confret = P_XMLRETORNO,
          OPER.CON_FRETEOPER_OBS     = PKG_CFE_FRETE.FN_GET_CHAVEXML(P_XMLRETORNO, 'mensagem.descricao')
      where
        0=0
        and oper.con_freteoper_id     = P_IDCONSULTA
        and oper.con_freteoper_rota   = P_ROTA
        and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
        and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
        and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;
    END IF;   
   
 EXCEPTION
    --Caso estoure o raise em algum momento eu registro no campo de observação.
    when others then
      --Transfiro a mensagem de erro, para uma variável para poder registrar no campo obs.
      vMsgErro := substr(sqlerrm, 1, 90);

      --atualizo a tabela de freteOperacao
      update tdvadm.t_con_freteoper  oper
        set
          OPER.CFE_STATUSFRETEOPER_STATUS  = STATUS_ERRO,
          oper.con_freteoper_obs     = 'Erro: ' || vMsgErro,
          oper.con_freteoper_retorno = sysdate,
          oper.con_freteoper_confret = Trim(P_XMLRETORNO)
      where
         0=0
        and oper.con_freteoper_id     = P_IDCONSULTA
        and oper.con_freteoper_rota   = P_ROTA
        and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
        and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
        and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;
  END; 
END SP_VLD_CONSULTACONTA;     

----------------------------------------------------------------------------------------------------------------------------------------------
-- Procedure utilizada para validar o Xml de retorno de "Alterar Status da Parcela"                                                         --
----------------------------------------------------------------------------------------------------------------------------------------------
PROCEDURE SP_VLD_ALTRSTATUSPARC( P_XMLRETORNO      IN CLOB,
                                 P_IDCONSULTA      IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ID%TYPE,
                                 P_ROTA            IN  TDVADM.T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,
                                 P_CODOPERACAOTDV  IN  VARCHAR2,
                                 P_CODOPERACAOWS   IN  VARCHAR2,
                                 P_SEQUENCIA       IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_SEQ%TYPE
                               ) is
 --Variável utilizada para guardar mensagem de erro.
 vMsgErro   t_con_freteoper.con_freteoper_obs%type;

 --Variáveis recuperadas da QryString;
 VVFRETE_CODIGO      TDVADM.T_CON_CALCVALEFRETE.CON_CONHECIMENTO_CODIGO%TYPE;
 VVFRETE_SERIE       TDVADM.T_CON_CALCVALEFRETE.CON_CONHECIMENTO_SERIE%TYPE;
 VVFRETE_ROTA        TDVADM.T_CON_CALCVALEFRETE.GLB_ROTA_CODIGO%TYPE;
 VVFRETE_SAQUE       TDVADM.T_CON_CALCVALEFRETE.CON_VALEFRETE_SAQUE%TYPE;

 VVFRETETP_CODIGO    TDVADM.T_CON_CALCVALEFRETE.CON_CALCVALEFRETETP_CODIGO%TYPE;
 VVFRETE_CODPAROPER  TDVADM.T_CON_CALCVALEFRETE.CON_CALCVALEFRETE_CODPAROPER%TYPE;
 vUsuario            tdvadm.t_usu_usuario.usu_usuario_codigo%type;
 VFParcelIdSt        varchar2(2); 
 VVRotaAUTPGTO       tdvadm.t_con_calcvalefrete.glb_rota_codigolib%Type;
 
 vQryString          tdvadm.t_con_freteoper.con_freteoper_paramqrystr%type; 
 

 
begin
 BEGIN
   --Verifico se a consulta foi realizada com sucesso.
   IF PKG_CFE_FRETE.FN_GET_CHAVEXML(P_XMLRETORNO, 'mensagem.codigo') = '0' THEN
     
     --Verifico se a alteração foi realizada com sucesso.
--     IF PKG_CFE_FRETE.FN_GET_CHAVEXML(P_XMLRETORNO, 'mensagem.parcela1.codigo') = '0' THEN
     IF instr(lower(PKG_CFE_FRETE.FN_GET_CHAVEXML(P_XMLRETORNO, 'mensagem.parcela1.descricao')), 'operacao realizada com sucesso') > 0 THEN
        
        --Atualiza a tabela de operação de frete.
        update tdvadm.t_con_freteoper oper
          set
            OPER.CFE_STATUSFRETEOPER_STATUS = STATUS_OK,
            oper.con_freteoper_retorno = sysdate,
            oper.con_freteoper_confret = P_XMLRETORNO,
            oper.con_freteoper_obs     = 'Validação realizada com sucesso'
        where
          0=0
          and oper.con_freteoper_id     = P_IDCONSULTA
          and oper.con_freteoper_rota   = P_ROTA
          and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
          and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
          and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;

       
         --busco a QryString para recuperar valores.
         select
            oper.con_freteoper_paramqrystr
          into
            vQryString
          from
            tdvadm.t_con_freteoper oper
          where
            0=0
            and oper.con_freteoper_id     = P_IDCONSULTA
            and oper.con_freteoper_rota   = P_ROTA
            and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
            and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
            and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;

        --Caso a validação tenha ocorrido com sucesso, recupero os valores do VALE da QryString;
        VVFRETE_CODIGO      := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryString,'VFNumero','=','*'),     'valor', '=', '|');
        VVFRETE_SERIE       := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryString,'VFSerie','=','*'),      'valor', '=', '|');
        VVFRETE_ROTA        := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryString,'VFRota','=','*'),       'valor', '=', '|');
        VVFRETE_SAQUE       := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryString,'VFSaque','=','*'),      'valor', '=', '|');
        VVFRETETP_CODIGO    := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryString,'VFParcelTdv','=','*'),  'valor', '=', '|');
        VVFRETE_CODPAROPER  := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryString,'VFParcelGer','=','*'),  'valor', '=', '|');
        vUsuario            := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryString,'VFUsuarioTDV','=','*'), 'valor', '=', '|');
        VFParcelIdSt        := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryString,'VFParcelIdSt','=','*'), 'valor', '=', '|');
        VVRotaAUTPGTO       := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryString,'VFRotaUsuarioTDV','=','*'), 'valor', '=', '|');

       --caso a alateração seja para liberação, atualizo os dados,
       if Trim(VFParcelIdSt) = '2' then
         --Atualiza os dados da tabela de calculo.
          UPDATE TDVADM.T_CON_CALCVALEFRETE  CALC
            SET 
              CALC.Usu_Usuario_Codigoliberou = vUsuario,
              CALC.Con_Calcvalefrete_Dtliberacao = SYSDATE,
              calc.usu_usuario_bloqueou = null,
              calc.con_calcvalefrete_dtbloqueio = null,
              --Joao - 05/05/2021 - inclusao de campo quando autoriza
              calc.glb_rota_codigobloqueou = null,
              calc.glb_rota_codigolib    = VVRotaAUTPGTO,
              calc.glb_rota_codigocx     = Null

          WHERE
            0=0
            AND CALC.CON_CONHECIMENTO_CODIGO = VVFRETE_CODIGO
            AND CALC.CON_CONHECIMENTO_SERIE = VVFRETE_SERIE
            AND CALC.GLB_ROTA_CODIGO = VVFRETE_ROTA
            AND CALC.CON_VALEFRETE_SAQUE = VVFRETE_SAQUE
            AND CALC.CON_CALCVALEFRETETP_CODIGO = VVFRETETP_CODIGO
            AND CALC.CON_CALCVALEFRETE_CODPAROPER = VVFRETE_CODPAROPER; 
            
         -- Como as Verbas de Tarifa, estao imbutidas na parcela de Adiantamento
         -- sempre que liberar procuro para ver se não tem alguma 
         -- para colocar o usuario          
    
         If VVFRETETP_CODIGO in ('01') Then

            UPDATE TDVADM.T_CON_CALCVALEFRETE  CALC
              SET 
                CALC.Usu_Usuario_Codigoliberou = vUsuario,
                CALC.Con_Calcvalefrete_Dtliberacao = SYSDATE,
                calc.usu_usuario_bloqueou = null,
                calc.con_calcvalefrete_dtbloqueio = null,
                --Joao - 05/05/2021 - inclusao de campo quando autoriza
                calc.glb_rota_codigobloqueou = null,
                calc.glb_rota_codigolib    = VVRotaAUTPGTO,
                calc.glb_rota_codigocx     = Null

            WHERE
              0=0
              AND CALC.CON_CONHECIMENTO_CODIGO = VVFRETE_CODIGO
              AND CALC.CON_CONHECIMENTO_SERIE = VVFRETE_SERIE
              AND CALC.GLB_ROTA_CODIGO = VVFRETE_ROTA
              AND CALC.CON_VALEFRETE_SAQUE = VVFRETE_SAQUE
              AND CALC.CON_CALCVALEFRETETP_CODIGO in ('06', -- Saque
                                                      '07') -- Tarifa
              AND CALC.CON_CALCVALEFRETE_VALOR <> 0;           
           
         End If;
       end if;    

       --caso a alteração seja de bloqueio. 
       if Trim(VFParcelIdSt) = '3' then
         --Atualiza os dados da tabela de calculo.
          UPDATE TDVADM.T_CON_CALCVALEFRETE  CALC
            SET 
              calc.usu_usuario_bloqueou           = vUsuario,
              calc.con_calcvalefrete_dtbloqueio   = sysdate,
              calc.Usu_Usuario_Codigoliberou      = NULL,
              calc.Con_Calcvalefrete_Dtliberacao  = NULL,
              calc.glb_rota_codigobloqueou        = VVRotaAUTPGTO,
              calc.glb_rota_codigocx              = Null
              
          WHERE
            0=0
            AND CALC.CON_CONHECIMENTO_CODIGO = VVFRETE_CODIGO
            AND CALC.CON_CONHECIMENTO_SERIE = VVFRETE_SERIE
            AND CALC.GLB_ROTA_CODIGO = VVFRETE_ROTA
            AND CALC.CON_VALEFRETE_SAQUE = VVFRETE_SAQUE
            AND CALC.CON_CALCVALEFRETETP_CODIGO = VVFRETETP_CODIGO
            AND CALC.CON_CALCVALEFRETE_CODPAROPER = VVFRETE_CODPAROPER;        

         -- Como as Verbas de Tarifa, estao imbutidas na parcela de Adiantamento
         -- sempre que liberar procuro para ver se não tem alguma 
         -- para colocar o usuario          
         If VVFRETETP_CODIGO in ('01') Then

            UPDATE TDVADM.T_CON_CALCVALEFRETE  CALC
              SET 
              calc.usu_usuario_bloqueou           = vUsuario,
              calc.con_calcvalefrete_dtbloqueio   = sysdate,
              calc.Usu_Usuario_Codigoliberou      = NULL,
              calc.Con_Calcvalefrete_Dtliberacao  = NULL,
              calc.glb_rota_codigobloqueou        = VVRotaAUTPGTO,
              calc.glb_rota_codigocx              = Null

            WHERE
              0=0
              AND CALC.CON_CONHECIMENTO_CODIGO = VVFRETE_CODIGO
              AND CALC.CON_CONHECIMENTO_SERIE = VVFRETE_SERIE
              AND CALC.GLB_ROTA_CODIGO = VVFRETE_ROTA
              AND CALC.CON_VALEFRETE_SAQUE = VVFRETE_SAQUE
              AND CALC.CON_CALCVALEFRETETP_CODIGO in ('06', -- Saque
                                                      '07') -- Tarifa
              AND CALC.CON_CALCVALEFRETE_VALOR <> 0;           
           
         End If;

       end if;    
       
       --Caso o Status seja de Cancelamento
       if Trim(VFParcelIdSt) = '4' then
         --Atualiza os dados da tabela de calculo.
          UPDATE TDVADM.T_CON_CALCVALEFRETE  CALC
            SET 
              calc.usu_usuario_codigocancel       = vUsuario,
              calc.con_calcvalefrete_dtcancel     = sysdate,
              calc.Usu_Usuario_Codigoliberou      = NULL,
              calc.Con_Calcvalefrete_Dtliberacao  = NULL,
              calc.usu_usuario_bloqueou           = NULL,
              calc.con_calcvalefrete_dtbloqueio   = NULL
          WHERE
            0=0
            AND CALC.CON_CONHECIMENTO_CODIGO = VVFRETE_CODIGO
            AND CALC.CON_CONHECIMENTO_SERIE = VVFRETE_SERIE
            AND CALC.GLB_ROTA_CODIGO = VVFRETE_ROTA
            AND CALC.CON_VALEFRETE_SAQUE = VVFRETE_SAQUE
            AND CALC.CON_CALCVALEFRETETP_CODIGO = VVFRETETP_CODIGO
            AND CALC.CON_CALCVALEFRETE_CODPAROPER = VVFRETE_CODPAROPER;        

         -- Como as Verbas de Tarifa, estao imbutidas na parcela de Adiantamento
         -- sempre que liberar procuro para ver se não tem alguma 
         -- para colocar o usuario          
         If VVFRETETP_CODIGO in ('01') Then

            UPDATE TDVADM.T_CON_CALCVALEFRETE  CALC
              SET 
              calc.usu_usuario_codigocancel       = vUsuario,
              calc.con_calcvalefrete_dtcancel     = sysdate,
              calc.Usu_Usuario_Codigoliberou      = NULL,
              calc.Con_Calcvalefrete_Dtliberacao  = NULL,
              calc.usu_usuario_bloqueou           = NULL,
              calc.con_calcvalefrete_dtbloqueio   = NULL

            WHERE
              0=0
              AND CALC.CON_CONHECIMENTO_CODIGO = VVFRETE_CODIGO
              AND CALC.CON_CONHECIMENTO_SERIE = VVFRETE_SERIE
              AND CALC.GLB_ROTA_CODIGO = VVFRETE_ROTA
              AND CALC.CON_VALEFRETE_SAQUE = VVFRETE_SAQUE
              AND CALC.CON_CALCVALEFRETETP_CODIGO in ('06', -- Saque
                                                      '07') -- Tarifa
              AND CALC.CON_CALCVALEFRETE_VALOR <> 0;           
           
         End If;

       end if;  
        
     
       ELSE
         --Caso a alteração não tenha sido realizada com sucesso.
         update tdvadm.t_con_freteoper oper
          set
            OPER.CFE_STATUSFRETEOPER_STATUS = STATUS_INVALIDO,
            oper.con_freteoper_retorno = sysdate,
            oper.con_freteoper_confret = P_XMLRETORNO,
            OPER.CON_FRETEOPER_OBS     = PKG_CFE_FRETE.FN_GET_CHAVEXML(P_XMLRETORNO, 'mensagem.parcela1.descricao')
        where
          0=0
          and oper.con_freteoper_id     = P_IDCONSULTA
          and oper.con_freteoper_rota   = P_ROTA
          and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
          and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
          and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;
     end if;
   Else
      --Se o retorno não for igual a zero, a consulta não foi realizada com sucesso.
      update tdvadm.t_con_freteoper oper
        set
          OPER.CFE_STATUSFRETEOPER_STATUS = STATUS_ERRO,
          oper.con_freteoper_retorno = sysdate,
          oper.con_freteoper_confret = P_XMLRETORNO,
          OPER.CON_FRETEOPER_OBS     = PKG_CFE_FRETE.FN_GET_CHAVEXML(P_XMLRETORNO, 'mensagem.descricao')
      where
        0=0
        and oper.con_freteoper_id     = P_IDCONSULTA
        and oper.con_freteoper_rota   = P_ROTA
        and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
        and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
        and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;
    END IF;   

 EXCEPTION
    --Caso estoure o raise em algum momento eu registro no campo de observação.
    when others then
      --Transfiro a mensagem de erro, para uma variável para poder registrar no campo obs.
      vMsgErro := substr(sqlerrm, 1, 90);

      --atualizo a tabela de freteOperacao
      update tdvadm.t_con_freteoper  oper
        set
          OPER.CFE_STATUSFRETEOPER_STATUS  = STATUS_ERRO,
          oper.con_freteoper_obs     = 'Erro: ' || vMsgErro,
          oper.con_freteoper_retorno = sysdate,
          oper.con_freteoper_confret = Trim(P_XMLRETORNO)
      where
         0=0
        and oper.con_freteoper_id     = P_IDCONSULTA
        and oper.con_freteoper_rota   = P_ROTA
        and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
        and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
        and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;
  END; 
end; 

----------------------------------------------------------------------------------------------------------------------------------------------
-- PROCEDURE UTILIZADA PARA VALIDAR O XML DE RETORNO DA OPERAÇÃO "PAGAR PARCELA"                                                            --
----------------------------------------------------------------------------------------------------------------------------------------------                         
PROCEDURE SP_VLD_PGTOPARCELA( P_XMLRETORNO      IN CLOB,
                              P_IDCONSULTA      IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ID%TYPE,
                              P_ROTA            IN  TDVADM.T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,
                              P_CODOPERACAOTDV  IN  VARCHAR2,
                              P_CODOPERACAOWS   IN  VARCHAR2,
                              P_SEQUENCIA       IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_SEQ%TYPE
                             ) IS

 --Variável utilizada para guardar mensagem de erro.
 vMsgErro   t_con_freteoper.con_freteoper_obs%type;
 
 --Variáveis recuperadas da QryString;
 VVFRETE_CODIGO      TDVADM.T_CON_CALCVALEFRETE.CON_CONHECIMENTO_CODIGO%TYPE;
 VVFRETE_SERIE       TDVADM.T_CON_CALCVALEFRETE.CON_CONHECIMENTO_SERIE%TYPE;
 VVFRETE_ROTA        TDVADM.T_CON_CALCVALEFRETE.GLB_ROTA_CODIGO%TYPE;
 VVFRETE_SAQUE       TDVADM.T_CON_CALCVALEFRETE.CON_VALEFRETE_SAQUE%TYPE;

 VVFRETETP_CODIGO    TDVADM.T_CON_CALCVALEFRETE.CON_CALCVALEFRETETP_CODIGO%TYPE;
 VVFRETE_CODPAROPER  TDVADM.T_CON_CALCVALEFRETE.CON_CALCVALEFRETE_CODPAROPER%TYPE;
 vUsuario            tdvadm.t_usu_usuario.usu_usuario_codigo%type;
 VFParcelIdSt        varchar2(02);
 VVRotaAUTPGTO       tdvadm.t_con_calcvalefrete.glb_rota_codigolib%Type;
 VVRotaCax           tdvadm.t_con_calcvalefrete.glb_rota_codigocx%Type;
 vCartaoPgto         tdvadm.t_con_calcvalefrete.con_calcvalefrete_cartao%TYPE;
 vCartaoPgtoPed      tdvadm.t_con_calcvalefrete.con_calcvalefrete_cartao%TYPE;

 vQryString          tdvadm.t_con_freteoper.con_freteoper_paramqrystr%type;  
Begin
  BEGIN
    --Verifico se a consulta foi realizada com sucesso.
    IF PKG_CFE_FRETE.FN_GET_CHAVEXML(P_XMLRETORNO, 'mensagem.codigo') = '0' THEN
      
      --Verifico se o pagamento foi realizado com sucesso.
      IF PKG_CFE_FRETE.FN_GET_CHAVEXML(P_XMLRETORNO, 'mensagem.parcela1.codigo') = '0' THEN
        
         select
            oper.con_freteoper_paramqrystr
          into
            vQryString
          from
            tdvadm.t_con_freteoper oper
          where
            0=0
            and oper.con_freteoper_id     = P_IDCONSULTA
            and oper.con_freteoper_rota   = P_ROTA
            and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
            and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
            and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;
   

        --Caso a validação tenha ocorrido com sucesso, recupero os valores do VALE da QryString;
        VVFRETE_CODIGO      := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryString,'VFNumero','=','*'),     'valor', '=', '|');
        VVFRETE_SERIE       := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryString,'VFSerie','=','*'),      'valor', '=', '|');
        VVFRETE_ROTA        := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryString,'VFRota','=','*'),       'valor', '=', '|');
        VVFRETE_SAQUE       := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryString,'VFSaque','=','*'),      'valor', '=', '|');
        VVFRETETP_CODIGO    := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryString,'VFParcelTdv','=','*'),  'valor', '=', '|');
        VVFRETE_CODPAROPER  := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryString,'VFParcelGer','=','*'),  'valor', '=', '|');
        vUsuario            := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryString,'VFUsuarioTDV','=','*'), 'valor', '=', '|');
        VFParcelIdSt        := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryString,'VFParcelIdSt','=','*'), 'valor', '=', '|');
        VVRotaAUTPGTO       := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryString,'VFRotaUsuarioTDV','=','*'), 'valor', '=', '|');
        
        Begin
          Select r.glb_rota_caixa
            Into VVRotaCax
          From t_glb_rota r
          Where r.glb_rota_codigo = VVRotaAUTPGTO;  
        Exception
          When NO_DATA_FOUND Then
             -- usa o caixa da matriz quando não achar
             VVRotaCax := '999';       
          End;
           
        vCartaoPgto :=  PKG_CFE_FRETE.FN_GET_CARTAOFRETE(VVFRETE_CODIGO,
                                                         VVFRETE_SERIE,
                                                         VVFRETE_ROTA,
                                                         VVFRETE_SAQUE,
                                                         VVFRETETP_CODIGO);
        
        --Atualiza os dados da tabela de calculo.
        UPDATE TDVADM.T_CON_CALCVALEFRETE  CALC
          SET 
            CALC.USU_USUARIO_CODIGOPGTO   = vUsuario,
            CALC.CON_CALCVALEFRETE_DTPGTO = SYSDATE,
            calc.glb_rota_codigopgto      = VVRotaAUTPGTO,
            calc.glb_rota_codigocx        = VVRotaCax,
            calc.con_calcvalefrete_cartao = vCartaoPgto 
        WHERE
          0=0
          AND CALC.CON_CONHECIMENTO_CODIGO = VVFRETE_CODIGO
          AND CALC.CON_CONHECIMENTO_SERIE = VVFRETE_SERIE
          AND CALC.GLB_ROTA_CODIGO = VVFRETE_ROTA
          AND CALC.CON_VALEFRETE_SAQUE = VVFRETE_SAQUE
          AND CALC.CON_CALCVALEFRETETP_CODIGO = VVFRETETP_CODIGO
          AND CALC.CON_CALCVALEFRETE_CODPAROPER = VVFRETE_CODPAROPER;

         -- Como as Verbas de Tarifa, estao imbutidas na parcela de Adiantamento
         -- sempre que liberar procuro para ver se não tem alguma 
         -- para colocar o usuario          
         If VVFRETETP_CODIGO in ('01') Then

            UPDATE TDVADM.T_CON_CALCVALEFRETE  CALC
              SET 
                CALC.USU_USUARIO_CODIGOPGTO   = vUsuario,
                CALC.CON_CALCVALEFRETE_DTPGTO = SYSDATE,
                calc.glb_rota_codigopgto      = VVRotaAUTPGTO,
                calc.glb_rota_codigocx        = VVRotaCax,
                calc.con_calcvalefrete_cartao = vCartaoPgto 

            WHERE
              0=0
              AND CALC.CON_CONHECIMENTO_CODIGO = VVFRETE_CODIGO
              AND CALC.CON_CONHECIMENTO_SERIE = VVFRETE_SERIE
              AND CALC.GLB_ROTA_CODIGO = VVFRETE_ROTA
              AND CALC.CON_VALEFRETE_SAQUE = VVFRETE_SAQUE
              AND CALC.CON_CALCVALEFRETETP_CODIGO in ('06', -- Saque
                                                      '07') -- Tarifa
              AND CALC.CON_CALCVALEFRETE_VALOR <> 0;           
         End If;
      
      -- provisorio para liberar tambem o Pedagio
      -- ver integracao especifica para liberação do pedagio
      if VVFRETETP_CODIGO = '01' then
          
          vCartaoPgtoPed := PKG_CFE_FRETE.FN_GET_CARTAOFRETE(VVFRETE_CODIGO,
                                                             VVFRETE_SERIE,
                                                             VVFRETE_ROTA,
                                                             VVFRETE_SAQUE,
                                                             '02'); 
          UPDATE TDVADM.T_CON_CALCVALEFRETE  CALC
            SET 
              CALC.USU_USUARIO_CODIGOPGTO   = vUsuario,
              CALC.CON_CALCVALEFRETE_DTPGTO = SYSDATE,
              calc.glb_rota_codigopgto      = VVRotaAUTPGTO,
              calc.glb_rota_codigocx        = VVRotaCax,
              CALC.CON_CALCVALEFRETE_CARTAO = vCartaoPgtoPed
          WHERE
            0=0
            AND CALC.CON_CONHECIMENTO_CODIGO = VVFRETE_CODIGO
            AND CALC.CON_CONHECIMENTO_SERIE = VVFRETE_SERIE
            AND CALC.GLB_ROTA_CODIGO = VVFRETE_ROTA
            AND CALC.CON_VALEFRETE_SAQUE = VVFRETE_SAQUE
            AND CALC.CON_CALCVALEFRETETP_CODIGO = '02'
            AND CALC.CON_CALCVALEFRETE_VALOR <> 0;
       end if;      
        --Atualiza a tabela de operação de frete.
        update tdvadm.t_con_freteoper oper
          set
            OPER.CFE_STATUSFRETEOPER_STATUS = STATUS_OK,
            oper.con_freteoper_retorno = sysdate,
            oper.con_freteoper_confret = P_XMLRETORNO,
            oper.con_freteoper_obs     = 'Validação realizada com sucesso'
        where
          0=0
          and oper.con_freteoper_id     = P_IDCONSULTA
          and oper.con_freteoper_rota   = P_ROTA
          and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
          and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
          and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;
          
      else
         --Caso o pagamento não tenha sido realizada com sucesso.
         update tdvadm.t_con_freteoper oper
          set
            OPER.CFE_STATUSFRETEOPER_STATUS = STATUS_INVALIDO,
            oper.con_freteoper_retorno = sysdate,
            oper.con_freteoper_confret = P_XMLRETORNO,
            OPER.CON_FRETEOPER_OBS     = PKG_CFE_FRETE.FN_GET_CHAVEXML(P_XMLRETORNO, 'mensagem.parcela1.descricao')
        where
          0=0
          and oper.con_freteoper_id     = P_IDCONSULTA
          and oper.con_freteoper_rota   = P_ROTA
          and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
          and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
          and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;
       end if; 
    ELSE
     --Se o retorno não for igual a zero, a consulta não foi realizada com sucesso.
     update tdvadm.t_con_freteoper oper
      set
        OPER.CFE_STATUSFRETEOPER_STATUS = STATUS_ERRO,
        oper.con_freteoper_retorno = sysdate,
        oper.con_freteoper_confret = P_XMLRETORNO,
        OPER.CON_FRETEOPER_OBS     = PKG_CFE_FRETE.FN_GET_CHAVEXML(P_XMLRETORNO, 'mensagem.descricao')
      where
       0=0
       and oper.con_freteoper_id     = P_IDCONSULTA
       and oper.con_freteoper_rota   = P_ROTA
       and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
       and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
       and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;
     END IF;
    
   EXCEPTION
    --Caso estoure o raise em algum momento eu registro no campo de observação.
    when others then
      --Transfiro a mensagem de erro, para uma variável para poder registrar no campo obs.
      vMsgErro := substr(sqlerrm, 1, 90);

      --atualizo a tabela de freteOperacao
      update tdvadm.t_con_freteoper  oper
        set
          OPER.CFE_STATUSFRETEOPER_STATUS  = STATUS_ERRO,
          oper.con_freteoper_obs     = 'Erro: ' || vMsgErro,
          oper.con_freteoper_retorno = sysdate,
          oper.con_freteoper_confret = Trim(P_XMLRETORNO)
      where
         0=0
        and oper.con_freteoper_id     = P_IDCONSULTA
        and oper.con_freteoper_rota   = P_ROTA
        and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
        and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
        and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;
  END; 
End SP_VLD_PGTOPARCELA;


----------------------------------------------------------------------------------------------------------------------------------------------
-- PROCEDURE UTILIZADA PARA VALIDAR O XML DE RETORNO DA OPERAÇÃO "CANCELAR FRETE"                                                            --
----------------------------------------------------------------------------------------------------------------------------------------------                         
PROCEDURE SP_VLD_CANCELFRETE( P_XMLRETORNO      IN CLOB,
                              P_IDCONSULTA      IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ID%TYPE,
                              P_ROTA            IN  TDVADM.T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,
                              P_CODOPERACAOTDV  IN  VARCHAR2,
                              P_CODOPERACAOWS   IN  VARCHAR2,
                              P_SEQUENCIA       IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_SEQ%TYPE
                             ) IS

 --Variável utilizada para guardar mensagem de erro.
 vMsgErro   t_con_freteoper.con_freteoper_obs%type;

  
 --Variáveis recuperadas da QryString;
 VVFRETE_CODIGO      TDVADM.T_CON_CALCVALEFRETE.CON_CONHECIMENTO_CODIGO%TYPE;
 VVFRETE_SERIE       TDVADM.T_CON_CALCVALEFRETE.CON_CONHECIMENTO_SERIE%TYPE;
 VVFRETE_ROTA        TDVADM.T_CON_CALCVALEFRETE.GLB_ROTA_CODIGO%TYPE;
 VVFRETE_SAQUE       TDVADM.T_CON_CALCVALEFRETE.CON_VALEFRETE_SAQUE%TYPE;
 vUsuario            tdvadm.t_usu_usuario.usu_usuario_codigo%type;

 
 vQryString          tdvadm.t_con_freteoper.con_freteoper_paramqrystr%type; 
BEGIN
  begin
    --Verifico se a consulta foi realizada com sucesso.
    IF PKG_CFE_FRETE.FN_GET_CHAVEXML(P_XMLRETORNO, 'mensagem.codigo') = '0' THEN
      --Atualiza a tabela de operação de frete.
      update tdvadm.t_con_freteoper oper
        set
          OPER.CFE_STATUSFRETEOPER_STATUS = STATUS_OK,
          oper.con_freteoper_retorno = sysdate,
          oper.con_freteoper_confret = P_XMLRETORNO,
          oper.con_freteoper_obs     = 'Validação realizada com sucesso'
      where
        0=0
        and oper.con_freteoper_id     = P_IDCONSULTA
        and oper.con_freteoper_rota   = P_ROTA
        and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
        and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
        and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;
        
         select
            oper.con_freteoper_paramqrystr
          into
            vQryString
          from
            tdvadm.t_con_freteoper oper
          where
            0=0
            and oper.con_freteoper_id     = P_IDCONSULTA
            and oper.con_freteoper_rota   = P_ROTA
            and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
            and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
            and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;
   
        
        
        --Caso a validação tenha ocorrido com sucesso, recupero os valores do VALE da QryString;
        VVFRETE_CODIGO      := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryString,'VFNumero','=','*'),     'valor', '=', '|');
        VVFRETE_SERIE       := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryString,'VFSerie','=','*'),      'valor', '=', '|');
        VVFRETE_ROTA        := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryString,'VFRota','=','*'),       'valor', '=', '|');
        VVFRETE_SAQUE       := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryString,'VFSaque','=','*'),      'valor', '=', '|');
        vUsuario            := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryString,'VFUsuarioTDV','=','*'), 'valor', '=', '|');
        
        --Seto o Ciot como cancelado.
        insert into t_con_vfreteciothist 
        select * from t_con_vfreteciot ciot
        where 0=0
          and ciot.con_conhecimento_codigo = VVFRETE_CODIGO
          and ciot.con_conhecimento_serie  = VVFRETE_SERIE
          and ciot.glb_rota_codigo         = VVFRETE_ROTA
          and ciot.con_valefrete_saque     = VVFRETE_SAQUE;
          
        delete from t_con_vfreteciot ciot
        where 0=0
          and ciot.con_conhecimento_codigo = VVFRETE_CODIGO
          and ciot.con_conhecimento_serie  = VVFRETE_SERIE
          and ciot.glb_rota_codigo         = VVFRETE_ROTA
          and ciot.con_valefrete_saque     = VVFRETE_SAQUE;  


    Else
      --Se o retorno não for igual a zero, a consulta não foi realizada com sucesso.
      update tdvadm.t_con_freteoper oper
        set
         OPER.CFE_STATUSFRETEOPER_STATUS = STATUS_ERRO,
         oper.con_freteoper_retorno = sysdate,
         oper.con_freteoper_confret = P_XMLRETORNO,
         OPER.CON_FRETEOPER_OBS     = PKG_CFE_FRETE.FN_GET_CHAVEXML(P_XMLRETORNO, 'mensagem.descricao')
       where
         0=0
         and oper.con_freteoper_id     = P_IDCONSULTA
         and oper.con_freteoper_rota   = P_ROTA
         and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
         and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
         and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;
     end if;        
    
  
  Exception
     --Caso estoure o raise em algum momento eu registro no campo de observação.
    when others then
      --Transfiro a mensagem de erro, para uma variável para poder registrar no campo obs.
      vMsgErro := substr(sqlerrm, 1, 90);

      --atualizo a tabela de freteOperacao
      update tdvadm.t_con_freteoper  oper
        set
          OPER.CFE_STATUSFRETEOPER_STATUS  = STATUS_ERRO,
          oper.con_freteoper_obs     = 'Erro: ' || vMsgErro,
          oper.con_freteoper_retorno = sysdate,
          oper.con_freteoper_confret = Trim(P_XMLRETORNO)
      where
         0=0
        and oper.con_freteoper_id     = P_IDCONSULTA
        and oper.con_freteoper_rota   = P_ROTA
        and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
        and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
        and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;
  END; 
   
    
 


END SP_VLD_CANCELFRETE;                             
                             


----------------------------------------------------------------------------------------------------------------------------------------------
-- Função utilizada para buscar um ID novo para operação.                
----------------------------------------------------------------------------------------------------------------------------------------------
FUNCTION FN_GET_IDOPERACAO( P_ROTA       TDVADM.T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,
                            P_APLICACAO  TDVADM.T_USU_APLICACAO.USU_APLICACAO_CODIGO%Type,
                            P_QRYSTRING  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_PARAMQRYSTR%Type Default ''
                           ) RETURN INTEGER IS

 --Variável utilizada como retorno da operação
 vRetorno    INTEGER;
 
 --Variável de Linha que será utilizado para 
 vLinha TDVADM.T_UTI_SEQUENCIA%ROWTYPE;
 
 --Variável do tipo de parametros, utilizada para recuperar o valor do paramentr "PRAZO_VALIDADE_ID"
 vParamsValId  glbadm.pkg_glb_auxiliar.tParametros;
 
 --Variáveis utilizadas para recuperar valores passados na QryString
 vAplicacao Varchar2(200);
 vDtInicio tdvadm.T_UTI_SEQUENCIA.uti_sequencia_data%Type;
 vDtValidade tdvadm.T_UTI_SEQUENCIA.uti_sequencia_validade%Type;

Begin
  
  --Inicializo as Variáveis de Data.
  vDtInicio := Trunc(Sysdate);
  vDtValidade := Trunc(Sysdate); 
  vAplicacao := P_APLICACAO;


 Begin
  --Busco o paramentro com a quantia de dias 
  glbadm.pkg_glb_auxiliar.sp_Espec_Params('jsantos', 'vldmotor', P_ROTA, 'PRAZO_VALIDADE_ID', vParamsValId);
  
  
  
  --Verifico se foi passado algum valor através do paramentro de QryString
   If nvl(Trim(P_QRYSTRING), 'R' )  <> 'R' Then
     --Recupero o nome da aplicacao, Data Inicial e Data Final
     vAplicacao := nvl(TDVADM.fn_querystring(TDVADM.fn_querystring(P_QRYSTRING,'aplicacao','=','*'), 'valor', '=', '|'), P_APLICACAO); 
     vDtInicio := nvl(to_date(TDVADM.fn_querystring(TDVADM.fn_querystring(P_QRYSTRING,'dtInicialId','=','*'), 'valor', '=', '|'), 'dd/mm/yyyy'), Sysdate);
     vDtValidade := nvl(to_date(TDVADM.fn_querystring(TDVADM.fn_querystring(P_QRYSTRING,'dtValidadeId','=','*'), 'valor', '=', '|'), 'dd/mm/yyyy'), Sysdate);
   End If;
   
    --caso seja uma das aplicações da operação
    If vAplicacao In ( 'gercoleta','cadidoper','veicdisp', 'prgcadas' ) then       
      --populo a variável de linha com os dados da qryString;
      vlinha.car_proprietario_cgccpfcodigo := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QRYSTRING,'Proprietario','=','*'), 'valor', '=', '|');
      vlinha.car_proprietario_rntrc := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QRYSTRING,'PropRntrc','=','*'), 'valor', '=', '|');
      vlinha.car_carreteiro_cpfcodigo := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QRYSTRING,'Motorista','=','*'), 'valor', '=', '|');
      vlinha.car_carreteiro_saque := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QRYSTRING,'MotoristaSaque','=','*'), 'valor', '=', '|');
      vlinha.car_veiculo_placa := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QRYSTRING,'Placa','=','*'), 'valor', '=', '|');
      vlinha.car_veiculo_saque := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QRYSTRING,'PlacaSaque','=','*'), 'valor', '=', '|');

    End If;
    
    vlinha.cfe_gerenbco_cod  := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QRYSTRING,'CodGerenciadora','=','*'), 'valor', '=', '|');
   
   
   --Caso a data de validade seja igual a data de hoje, 
   If (Trunc(Sysdate) = trunc(vDtValidade)) Then
     --utilizo como padrão o período do paramentro.
     vDtValidade := Trunc(sysdate) +  vParamsValId.NUMERICO1;
   End If;


   --vou buscar o menor número não utilizado na rota passada.
   select  MAX(seq.uti_sequencia_codigo) into vRetorno 
   from  tdvadm.t_uti_sequencia  seq
   where
     0=0
     and seq.uti_sequencia_rota = P_ROTA;
  
  --Caso a Variável retorne zero, quer dizer que a rota nunca solicitou ID.
  IF nvl(vRetorno, 0) = 0 then
    vRetorno := 1;
  else
    vRetorno := vRetorno +1;  
  end if;     
  
 
  --Preencho a variável de linha  
  vLinha.Uti_Sequencia_Rota        := P_ROTA;
  vLinha.UTI_SEQUENCIA_CODIGO      := vRetorno;
  vLinha.UTI_SEQUENCIA_DATA        := vDtInicio;
  vLinha.UTI_SEQUENCIA_APLICACAO   := vAplicacao;
  vLinha.Uti_Sequencia_Flagutiliz  := 'S';
  --Validade sera a data da solicitação mais o valor estabelecido no paramentro.
  vLinha.Uti_Sequencia_Validade   := vDtValidade;
  
  INSERT INTO T_UTI_SEQUENCIA VALUES vLinha;
  commit;
       
  --devolvo a variável preenchida.
  return vRetorno;
 exception
   when others then
     raise_application_error(-20001, 'Erro ao buscar id' || sqlerrm);
 end;
END FN_GET_IDOPERACAO;  

----------------------------------------------------------------------------------------------------------------------------------------------
-- Procedure utilizada para manter uma quantia pre-deteminada de números disponíveis para ID de operação                                    --
----------------------------------------------------------------------------------------------------------------------------------------------
PROCEDURE SP_SET_IDOPERDISP( P_DATA    IN  DATE) IS
 --Variável de controle.
 vCount integer;  
 vMaxId integer; 
 v_QTDEREG integer;

 --Variável cursor utilizado para buscar todas as rotas
 vCursorRota  pkg_glb_common.T_CURSOR;
 
 --Variável de linha para facilitar a inserção
 vLinhaInsert    tdvadm.t_uti_sequencia%rowtype;

BEGIN
  --inicializo as variáveis utilizadas nessa procedure
  vCount := 0;
  vMaxId := 0;
  v_QTDEREG := 50;
  
  BEGIN
    --abro o cursor trazendo todas as rotas
    for vCursorRota in ( select 
                            rota.glb_rota_codigo   Rota_codigo
                          from 
                            t_glb_rota rota
                          WHERE ROTA.GLB_ROTA_CODIGO = '021'  
                         ) loop
                             --Verifico a quantia de id disponíveis para essa rota
                             select count(*) into vCount  
                             from tdvadm.t_uti_sequencia seq
                             where 0=0
                               and seq.uti_sequencia_rota = vCursorRota.Rota_Codigo
                               and nvl(seq.uti_sequencia_flagutiliz, 'N') = 'N';
                               
                             --busco o maior código disponivel
                             select max(seq.uti_sequencia_codigo) into vMaxId 
                             from tdvadm.t_uti_sequencia seq
                             where 0=0
                               and seq.uti_sequencia_rota = vCursorRota.Rota_Codigo
                               and nvl(seq.uti_sequencia_flagutiliz, 'N') = 'N';
                               
                               IF NVL(vMaxId, 0) = 0 THEN
                                 vMaxId := 1;
                               END IF;  
                                 
                                 
                             
                             --Entro em laço para implementar os ID's disponíveis.
                             for i in vCount+1..v_QTDEREG loop
                               --incremento a variável de código de ID
                               vMaxId := vMaxId +1;

                               --Populo a variável utilizada para inserção
                               vLinhaInsert.Uti_Sequencia_Rota       := vCursorRota.Rota_Codigo;
                               vLinhaInsert.Uti_Sequencia_Codigo     := vMaxId;
                               vLinhaInsert.uti_sequencia_data       := sysdate;
                               vLinhaInsert.Uti_Sequencia_Flagutiliz := 'N';
                               
                               --Executa a inserção propriamente dito
                               insert into tdvadm.t_uti_sequencia values vLinhaInsert;
                             end loop;
                           end loop;   

    --Commito as informações adicionadas na tabela.
    commit;

    
  EXCEPTION
    --caso ocorra algum erro durante o processamento, gero mensagem de erro
    WHEN OTHERS THEN
      raise_application_error(-20001, 'Erro ao tentar pegar Quantia de ID disponiveis' || chr(13) || sqlerrm);
  END;  
  
END SP_SET_IDOPERDISP;                         

PROCEDURE SP_GETROTASUSUARIO(PUSUARIO IN T_USU_USUARIOROTA.USU_USUARIO_CODIGO%TYPE,
                             PCURSOR  OUT TYPES.CURSORTYPE,
                             PSTATUS  OUT CHAR,
                             PMESSAGE OUT VARCHAR2)
As
vCount Number;
Begin
  Begin
  Select Count(*)
       Into vCount
       From t_Usu_Usuariorota UR,
            t_Glb_Rota        R
       Where UR.GLB_ROTA_CODIGO = R.GLB_ROTA_CODIGO
         and UR.USU_USUARIO_CODIGO = pUsuario;
                  
  Open pCursor For
      Select R.GLB_ROTA_CODIGO ROTA,
             R.GLB_ROTA_DESCRICAO ROTA_DESCRICAO
         From t_Usu_Usuariorota UR,
              t_Glb_Rota        R
         Where UR.GLB_ROTA_CODIGO = R.GLB_ROTA_CODIGO
           and UR.USU_USUARIO_CODIGO = pUsuario
         ORDER by 1;
         
   if vCount > 0 then
       pStatus := 'N';
       pMessage := 'Lista de rota Retonada com sucesso';
   else
       pStatus := 'W';
       pMessage := 'Não foram encontrada Rotas para este Usuário!';     
   end if;
  Exception
    When Others Then
      pStatus := 'E';
      pMessage := sqlerrm;
  End; 
End Sp_GetRotasUsuario;

  /********************************************************/
  /*   PROCEDURE PARA CADASTRAMENTO DE FRETE ELETRONICO   */
  /********************************************************/
  PROCEDURE SP_GET_INSEREFRETE(P_QRYSTR       IN  CLOB,
                               P_IDCONSULTA   IN  NUMBER,
                               P_ROTA         IN  CHAR,
                               P_CURSOR       OUT T_CURSOR,
                               P_STATUS       OUT CHAR,
                               P_MESSAGE      OUT VARCHAR2)AS
  V_INSERT          TpRegTxt;
  V_TPFAVOPRECIDO   TpPayParcelFavor;
  V_STATUS          CHAR(1);
  V_MESSAGE         VARCHAR2(200);
  
  V_PROPRIETARIO    T_CAR_PROPRIETARIO.CAR_PROPRIETARIO_CGCCPFCODIGO%TYPE;
    
  V_PROPBANCO       VARCHAR2(20);    
  V_PROPAGENCIA     VARCHAR2(20);
  V_PROPCONTA       VARCHAR2(20); 
  V_PROPTIPOCONTA   VARCHAR2(20);
  V_PROPCARTAO      VARCHAR2(20);  
  
  V_MOTORISTA       T_CAR_CARRETEIRO.CAR_CARRETEIRO_CPFCODIGO%TYPE;
  V_MOTORISTASAQUE  T_CAR_CARRETEIRO.CAR_CARRETEIRO_SAQUE%TYPE;
  V_MOTORISTACARTAO VARCHAR2(20);
  
  V_VALEFRETENUN    T_CON_VALEFRETE.CON_CONHECIMENTO_CODIGO%TYPE;
  V_VALEFRETESERIE  T_CON_VALEFRETE.CON_CONHECIMENTO_SERIE%TYPE;
  V_VALEFRETEROTA   T_CON_VALEFRETE.GLB_ROTA_CODIGO%TYPE;
  V_VALEFRETESAQUE  T_CON_VALEFRETE.CON_CONHECIMENTO_CODIGO%TYPE;
  V_CNPJROTA        T_GLB_ROTA.GLB_ROTA_CGC%TYPE;
  P_QTDEFAVOR       INTEGER;
  V_PLACA           T_CAR_VEICULO.CAR_VEICULO_PLACA%TYPE;
  V_SAQUE           T_CAR_VEICULO.CAR_VEICULO_SAQUE%TYPE;
  V_QTDEPLACA       INTEGER;
  V_INDICEPLACA     INTEGER;
  
  V_VFRETE          T_CON_VALEFRETE.CON_CONHECIMENTO_CODIGO%TYPE;
  V_VFSERIE         T_CON_VALEFRETE.CON_CONHECIMENTO_SERIE%TYPE;
  V_VFROTA          T_CON_VALEFRETE.GLB_ROTA_CODIGO%TYPE;
  V_VFSAQUE         T_CON_VALEFRETE.CON_VALEFRETE_SAQUE%TYPE;
  v_InfValeFrete    TpInfValeFrete;
  
  V_IDCARGA         VARCHAR2(1); -- LOTAÇÃO 1 FRACIONADA 2
  V_QTDEDOCREF      INTEGER; 
  V_INDICEDOCFIS    INTEGER;
  V_INDICEPESFIS    INTEGER;
  V_QTDEPARCELAS    INTEGER;
  V_QTDETRANSFSAQUE INTEGER;
  V_INDICEPARCELAS  INTEGER;
  V_TIPOVAFORECIDO  CHAR(1);
  
  V_EXISTEFAVORPRO     CHAR(1);
  V_EXISTEFAVORMOT     CHAR(1);
  
  V_QTDEITENSFRETE     INTEGER;
  V_INDICEITENSFRETE   INTEGER;
  V_EXISTEPARCELASID   INTEGER;
  V_VALORFRETEBRUTO    T_CON_CALCVALEFRETE.CON_CALCVALEFRETE_VALOR%TYPE;
  V_QryStrAux          T_CON_FRETEOPER.CON_FRETEOPER_PARAMQRYSTR%TYPE;  
  
  V_VIAGEMIDAUX1       VARCHAR2(20);
  V_VIAGEMIDAUX2       VARCHAR2(20);
  vValeFreteTipo       CHAR(2); 
  vCnpjInter           TDVADM.T_GLB_CLIENTE.GLB_CLIENTE_NACIONAL%TYPE;
  vFavorResponsavel    TDVADM.T_CAR_PROPRESP.CAR_PROPRESP_CPFCODIGO%TYPE;
  BEGIN

   BEGIN
   
    /*************************************************************************/
    /*                    ALIMENTANTO VARIAVEIS DE PARAMETROS                */
    /*************************************************************************/
    
     BEGIN
     
       BEGIN
       
       SELECT L.CON_FRETEOPER_PARAMQRYSTR
         INTO V_QryStrAux
         FROM T_CON_FRETEOPER L
         WHERE L.CON_FRETEOPER_ID   = P_IDCONSULTA
           AND L.CON_FRETEOPER_ROTA = P_ROTA 
           AND L.CFE_OPERACOES_COD  = '8';
       
       EXCEPTION WHEN OTHERS THEN
          P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          P_MESSAGE := 'ERRO AO PROCESSAR O ID: '||P_IDCONSULTA||', '||
                                            'ROTA: '||P_ROTA||
                                            ' - PKG_CFE_FRETE2.SP_GET_INTEGRACAO - '||
                                            DBMS_UTILITY.format_error_backtrace;
         
          OPEN P_CURSOR FOR
          SELECT SYSDATE FROM DUAL;
                                             
          return;
       END;      
       
       V_PROPRIETARIO    := TDVADM.fn_querystring(TDVADM.fn_querystring(V_QryStrAux,'Proprietario','=','*'), 'valor', '=', '|');  
       V_MOTORISTA       := TDVADM.fn_querystring(TDVADM.fn_querystring(V_QryStrAux,'Motorista','=','*'), 'valor', '=', '|');
       V_MOTORISTASAQUE  := TDVADM.fn_querystring(TDVADM.fn_querystring(V_QryStrAux,'MotoristaSaque','=','*'), 'valor', '=', '|');
       V_MOTORISTACARTAO := TDVADM.fn_querystring(TDVADM.fn_querystring(V_QryStrAux,'MotoristaCartao','=','*'), 'valor', '=', '|');
       
       V_PROPBANCO       := TDVADM.fn_querystring(TDVADM.fn_querystring(V_QryStrAux,'PropBanco','=','*'), 'valor', '=', '|');
       V_PROPAGENCIA     := TDVADM.fn_querystring(TDVADM.fn_querystring(V_QryStrAux,'PropAgencia','=','*'), 'valor', '=', '|');
       V_PROPCONTA       := TDVADM.fn_querystring(TDVADM.fn_querystring(V_QryStrAux,'PropConta','=','*'), 'valor', '=', '|');
       V_PROPTIPOCONTA   := TDVADM.fn_querystring(TDVADM.fn_querystring(V_QryStrAux,'PropTipoConta','=','*'), 'valor', '=', '|');
       V_PROPCARTAO      := TDVADM.fn_querystring(TDVADM.fn_querystring(V_QryStrAux,'ProprietarioCartao','=','*'), 'valor', '=', '|'); 
       
       V_PLACA           := TDVADM.fn_querystring(TDVADM.fn_querystring(V_QryStrAux,'Placa','=','*'), 'valor', '=', '|');
       V_SAQUE           := TDVADM.fn_querystring(TDVADM.fn_querystring(V_QryStrAux,'PlacaSaque','=','*'), 'valor', '=', '|');
       
       V_VFRETE          := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QRYSTR,'VFNumero','=','*'), 'valor', '=', '|');
       V_VFSERIE         := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QRYSTR,'VFSerie','=','*'), 'valor', '=', '|');
       V_VFROTA          := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QRYSTR,'VFRota','=','*'), 'valor', '=', '|');
       V_VFSAQUE         := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QRYSTR,'VFSaque','=','*'), 'valor', '=', '|');
       
       vValeFreteTipo    := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QRYSTR,'TpValeFrete','=','*'), 'valor', '=', '|');
       
       -- SE TEM FAVORECIDO PROPRIETARIO / MOTORISTA
       V_TPFAVOPRECIDO := FN_GET_PAGAMENTOFAVORECIDO(V_VFRETE, V_VFSERIE, V_VFROTA, V_VFSAQUE);
        
     END;
     
    /*************************************************************************/
    
    
    /*************************************************************************/
    /******************             ID VIAGEM TDV       **********************/
    /*************************************************************************/
     
     BEGIN
     SELECT SEQ_CFE_IDVIAGEM.NEXTVAL
       INTO V_VIAGEMIDAUX1
       FROM DUAL;
     END;  
     
    /*************************************************************************/   
     
    /*************************************************************************/
    
    /*************************************************************************/
    /*                    ALIMENTANDO VALORES VALE FRETE                     */
    /*************************************************************************/
    
    BEGIN  
        SELECT 
               V_VIAGEMIDAUX1,
               TRIM(VF.CON_CONHECIMENTO_CODIGO)||TRIM(VF.CON_CONHECIMENTO_SERIE)||TRIM(VF.GLB_ROTA_CODIGO)||TRIM(VF.CON_VALEFRETE_SAQUE),
               VF.CON_CONHECIMENTO_CODIGO               ,
               VF.CON_CONHECIMENTO_SERIE                ,
               VF.GLB_ROTA_CODIGO                       ,
               VF.CON_VALEFRETE_SAQUE                   ,
               VF.CON_VALEFRETE_PLACA                   ,
               VF.CON_VALEFRETE_PLACASAQUE              ,
               VF.CON_VALEFRETE_PESOINDICADO            ,
               VF.CON_VALEFRETE_DATAPRAZOMAX            ,
               VF.CON_VALEFRETE_DATACADASTRO            ,
               VF.CON_VALEFRETE_DATAEMISSAO             ,
               VF.GLB_LOCALIDADE_CODIGOORI              ,
               VF.GLB_LOCALIDADE_CODIGODES              ,
               VF.CON_VALEFRETE_PEDAGIO
          INTO v_InfValeFrete.valefrete_id              ,
               v_InfValeFrete.valefrete_contrato_numero ,
               v_InfValeFrete.con_conhecimento_codigo   ,
               v_InfValeFrete.con_conhecimento_serie    ,
               v_InfValeFrete.glb_rota_codigo           ,
               v_InfValeFrete.con_valefrete_saque       ,
               v_InfValeFrete.con_valefrete_placa       ,
               v_InfValeFrete.con_valefrete_placasaque  ,
               v_InfValeFrete.con_valefrete_pesoindicado,
               v_InfValeFrete.con_valefrete_dataprazomax,
               v_InfValeFrete.con_valefrete_datacadastro,
               v_InfValeFrete.con_valefrete_dataemissao ,
               v_InfValeFrete.glb_localidade_codigoori  ,
               v_InfValeFrete.glb_localidade_codigodes  ,
               v_InfValeFrete.con_valefrete_pedagio
          FROM T_CON_VALEFRETE VF
          WHERE VF.CON_CONHECIMENTO_CODIGO =  V_VFRETE 
            AND VF.CON_CONHECIMENTO_SERIE  =  V_VFSERIE
            AND VF.GLB_ROTA_CODIGO         =  V_VFROTA
            AND VF.CON_VALEFRETE_SAQUE     =  V_VFSAQUE;
        
        
        -- ALIMENTAR DEPOIS
           V_IDCARGA := NVL(FN_GET_TIPOCARGA(V_VFRETE,V_VFSERIE,V_VFROTA,V_VFSAQUE, vValeFreteTipo),1);

    END; 
          
    /*************************************************************************/
    
    
    /*************************************************************************/
    /*** VALIDAÇÃO PLACA ID x PLACA DO VALE DE FRETE                       ***/
    /*************************************************************************/

    IF (v_InfValeFrete.con_valefrete_placa <> V_PLACA) THEN
      
      RAISE_APPLICATION_ERROR(-20001,'Placa do veiculo no ID.: '||V_PLACA||' Placa do veiculo no Vale de frete.: '||v_InfValeFrete.con_valefrete_placa ||' são diferesntes.');
    
    END IF;
    
    /*************************************************************************/
    
    /*************************************************************************/
    /***                       INFORMAÇÕES ADICIONAIS                      ***/
    /*************************************************************************/
    
    BEGIN
    /***CNPJ DA ROTA QUE ESTA SOLICITANDO O CADASTRO DO FRETE***/
    SELECT R.GLB_ROTA_CGC INTO V_CNPJROTA FROM T_GLB_ROTA R WHERE R.GLB_ROTA_CODIGO = V_VFROTA;
     
    -- EMPRESA
    BEGIN
      
      V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
      V_INSERT.con_freteoper_rota  := P_ROTA;
      V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
      V_INSERT.uti_vfintegra_chave := 'viagem.contratante.documento.numero';
      V_INSERT.uti_vfintegra_valor := TRIM(ContratanteNumero);
      
      PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                                              
    EXCEPTION WHEN OTHERS THEN
      V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
      V_MESSAGE := 'ERRO: '||sqlerrm;             
    END;
        
    -- SE FOR UMA UNIDADE
--    IF TRIM(V_CNPJROTA) <> ContratanteNumero THEN
       -- TIPO DOCUMENTO UNIDADE
       BEGIN
         
         V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
         V_INSERT.con_freteoper_rota  := P_ROTA;
         V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
         V_INSERT.uti_vfintegra_chave := 'viagem.unidade.documento.tipo';
         V_INSERT.uti_vfintegra_valor := '88';
         
         PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                                                 
       EXCEPTION WHEN OTHERS THEN
         V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
         V_MESSAGE := 'ERRO: '||sqlerrm;             
       END;
       
       -- NUMERO DOCUMENTO UNIDADE
       BEGIN
         
         V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
         V_INSERT.con_freteoper_rota  := P_ROTA;
         V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
         V_INSERT.uti_vfintegra_chave := 'viagem.unidade.documento.numero';
         V_INSERT.uti_vfintegra_valor := TRIM(P_ROTA);
         
         PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                                                 
       EXCEPTION WHEN OTHERS THEN
         V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
         V_MESSAGE := 'ERRO: '||sqlerrm;             
       END;
    
--    END IF;  
    
    -- NUMEROS DO CONTRATO
    BEGIN     
      V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
      V_INSERT.con_freteoper_rota  := P_ROTA;
      V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
      V_INSERT.uti_vfintegra_chave := 'viagem.id.cliente';
      V_INSERT.uti_vfintegra_valor := TRIM(to_char(v_InfValeFrete.valefrete_id));
      PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
      
      
      V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
      V_INSERT.con_freteoper_rota  := P_ROTA;
      V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
      V_INSERT.uti_vfintegra_chave := 'viagem.contrato.numero';
      V_INSERT.uti_vfintegra_valor := TRIM(v_InfValeFrete.valefrete_contrato_numero);
      PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                                              
    EXCEPTION WHEN OTHERS THEN
      V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
      V_MESSAGE := 'ERRO: '||sqlerrm;             
    END;
    
    END;
    
    /*************************************************************************/
    
    
    /*************************************************************************/
    /***                         FAVORECIDOS                               ***/
    /*************************************************************************/
    
    BEGIN
      -- QUANTIDADE DE FAVORECIDOS
      BEGIN
        
        P_QTDEFAVOR := 0;
        
        IF V_TPFAVOPRECIDO.FavorProprietario = 'S' THEN
            P_QTDEFAVOR := P_QTDEFAVOR+1;
        END IF;     
        
        IF V_TPFAVOPRECIDO.FavorMotorista = 'S' THEN
            P_QTDEFAVOR := P_QTDEFAVOR+1;
        END IF; 
        
/*        IF V_TPFAVOPRECIDO.FavorResponsavel = 'S' THEN
            P_QTDEFAVOR := P_QTDEFAVOR+1;
        END IF;*/
        
        /********** SE FOR CARTAO PORTADOR FRETE **********/
        IF SUBSTR(V_MOTORISTACARTAO,1,6) = '441781' THEN  
           V_TPFAVOPRECIDO.FavorMotorista := 'S';
           P_QTDEFAVOR := P_QTDEFAVOR+1; 
        END IF;
        /**************************************************/
        
        
        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.qtde';
        V_INSERT.uti_vfintegra_valor := TRIM(P_QTDEFAVOR);
        
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                                                
      EXCEPTION WHEN OTHERS THEN
        V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
        V_MESSAGE := 'ERRO: '||sqlerrm;             
      END;
          
      -- FAVORECIDO PROPRIETARIO
      FOR R_CURSORF1 IN (SELECT P.CAR_PROPRIETARIO_CGCCPFCODIGO ,
                                P.CAR_PROPRIETARIO_RAZAOSOCIAL  ,
                                P.CAR_PROPRIETARIO_CIDADE       ,
                                P.GLB_ESTADOPROPRIETARIO_CODIGO ,
                                P.CAR_PROPRIETARIO_BAIRRO       ,
                                P.CAR_PROPRIETARIO_ENDERECO     ,
                                P.CAR_PROPRIETARIO_CEP          ,
                                P.CAR_PROPRIETARIO_TELEFONE     ,
                                P.CAR_PROPRIETARIO_CELULAR      ,
                                P.CAR_PROPRIETARIO_DATANASC     ,
                                P.CAR_PROPRIETARIO_RGCODIGO     ,
                                P.GLB_ESTADORG_CODIGO           ,
                                P.CAR_PROPRIETARIO_RNTRC        ,
                                p.car_proprietario_complemento
                           FROM T_CAR_PROPRIETARIO P
                           WHERE P.CAR_PROPRIETARIO_CGCCPFCODIGO = V_PROPRIETARIO
                             AND V_TPFAVOPRECIDO.FavorProprietario = 'S')
      LOOP  
          
          -- TIPO FAVORECIDO
          BEGIN
            
            V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
            V_INSERT.con_freteoper_rota  := P_ROTA;
            V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
            V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.tipo';
            
            -- TIPO CONTRATANTE 
            V_INSERT.uti_vfintegra_valor := '1';
            
            PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                                                    
          EXCEPTION WHEN OTHERS THEN
            V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
            V_MESSAGE := 'ERRO: PKG_CFE_FRETE2.SP_GET_INTEGRACAO, '||sqlerrm;             
          END;
          
          
          -- QUANTIDADE DOCUMENTOS FAVORECIDO
          BEGIN
            
            V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
            V_INSERT.con_freteoper_rota  := P_ROTA;
            V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
            V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.documento.qtde';
            
           
            IF LENGTH(TRIM(R_CURSORF1.CAR_PROPRIETARIO_CGCCPFCODIGO)) = 14 THEN
               V_INSERT.uti_vfintegra_valor := '1';
            ELSIF LENGTH(TRIM(R_CURSORF1.CAR_PROPRIETARIO_CGCCPFCODIGO)) = 11 THEN
               V_INSERT.uti_vfintegra_valor := '1';
            END IF;
            
            PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                                                    
          EXCEPTION WHEN OTHERS THEN
            V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
            V_MESSAGE := 'ERRO: PKG_CFE_FRETE2.SP_GET_INTEGRACAO, '||sqlerrm;             
          END;    
          
          -- DOCUMENTOS
          IF LENGTH(TRIM(R_CURSORF1.CAR_PROPRIETARIO_CGCCPFCODIGO))    = 14 THEN      
             -- DOCUMENTO 1 PJ 
             BEGIN  
                V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                V_INSERT.con_freteoper_rota  := P_ROTA;
                V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.documento1.tipo';
                V_INSERT.uti_vfintegra_valor := '1';
                PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                
                V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                V_INSERT.con_freteoper_rota  := P_ROTA;
                V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.documento1.numero';
                V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORF1.CAR_PROPRIETARIO_CGCCPFCODIGO);
                PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                
             END;
             
             /*-- DOCUMENTO 2 PJ
             BEGIN  
                V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                V_INSERT.con_freteoper_rota  := P_ROTA;
                V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE2.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.documento2.tipo';
                V_INSERT.uti_vfintegra_valor := '5';
                PKG_CFE_FRETE2.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                
                V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                V_INSERT.con_freteoper_rota  := P_ROTA;
                V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE2.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.documento2.numero';
                V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORF1.CAR_PROPRIETARIO_RNTRC);
                PKG_CFE_FRETE2.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
             END;
             */
             
          ELSIF LENGTH(TRIM(R_CURSORF1.CAR_PROPRIETARIO_CGCCPFCODIGO)) = 11 THEN            
             -- DOCUMENTO 1 PF
             BEGIN  
                V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                V_INSERT.con_freteoper_rota  := P_ROTA;
                V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.documento1.tipo';
                V_INSERT.uti_vfintegra_valor := '2';
                PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                
                V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                V_INSERT.con_freteoper_rota  := P_ROTA;
                V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.documento1.numero';
                V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORF1.CAR_PROPRIETARIO_CGCCPFCODIGO);
                --V_INSERT.uti_vfintegra_valor   := '02445500850';
                PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                
                 
                V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                V_INSERT.con_freteoper_rota  := P_ROTA;
                V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.documento1.uf';
                V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORF1.GLB_ESTADOPROPRIETARIO_CODIGO);
                PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                
             END;
             
             /*-- DOCUMENTO 2 PF
             BEGIN  
                V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                V_INSERT.con_freteoper_rota  := P_ROTA;
                V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE2.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.documento2.tipo';
                V_INSERT.uti_vfintegra_valor := '5';
                PKG_CFE_FRETE2.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                
                V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                V_INSERT.con_freteoper_rota  := P_ROTA;
                V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE2.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.documento2.numero';
                V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORF1.CAR_PROPRIETARIO_RNTRC);
                PKG_CFE_FRETE2.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
             END;
             
             -- DOCUMENTO 3 PF
             BEGIN  
                 V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                 V_INSERT.con_freteoper_rota  := P_ROTA;
                 V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE2.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                 V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.documento3.tipo';
                 V_INSERT.uti_vfintegra_valor := '3';
                 PKG_CFE_FRETE2.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                 
                 V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                 V_INSERT.con_freteoper_rota  := P_ROTA;
                 V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE2.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                 V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.documento3.numero';
                 V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORF1.CAR_PROPRIETARIO_RGCODIGO);
                 PKG_CFE_FRETE2.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                 
                 V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                 V_INSERT.con_freteoper_rota  := P_ROTA;
                 V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE2.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                 V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.documento3.uf';
                 V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORF1.GLB_ESTADORG_CODIGO);
                 PKG_CFE_FRETE2.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                 
             END;*/
             
             
             /*
             -- INFORMAÇÕES FAVORECIDO
             BEGIN  
                 
                 -- NOME 
                 V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                 V_INSERT.con_freteoper_rota  := P_ROTA;
                 V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE2.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                 V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.nome';
                 V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORF1.CAR_PROPRIETARIO_RAZAOSOCIAL);
                 --V_INSERT.uti_vfintegra_valor := TRIM('VAIR DESTRO');
                 PKG_CFE_FRETE2.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                 
                 -- DATA NASCIMENTO
                 V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                 V_INSERT.con_freteoper_rota  := P_ROTA;
                 V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE2.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                 V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.data.nascimento';
                 V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORF1.CAR_PROPRIETARIO_DATANASC);
                 
                 PKG_CFE_FRETE2.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                 
                 
                 -- LOGRADOURO
                 V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                 V_INSERT.con_freteoper_rota  := P_ROTA;
                 V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE2.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                 V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.endereco.logradouro';
                 V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORF1.CAR_PROPRIETARIO_ENDERECO);
                 PKG_CFE_FRETE2.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                 
                 -- NUMERO
                 V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                 V_INSERT.con_freteoper_rota  := P_ROTA;
                 V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE2.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                 V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.endereco.numero';
                 V_INSERT.uti_vfintegra_valor := TRIM('0000');
                 PKG_CFE_FRETE2.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                 
                 -- COMPLEMENTO
                 V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                 V_INSERT.con_freteoper_rota  := P_ROTA;
                 V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE2.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                 V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.endereco.complemento';
                 V_INSERT.uti_vfintegra_valor := nvl(TRIM(R_CURSORF1.CAR_PROPRIETARIO_COMPLEMENTO),'complemento');
                 PKG_CFE_FRETE2.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                 
                 -- BAIRRO 
                 V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                 V_INSERT.con_freteoper_rota  := P_ROTA;
                 V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE2.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                 V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.endereco.bairro';
                 V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORF1.CAR_PROPRIETARIO_BAIRRO);
                 PKG_CFE_FRETE2.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                 
                 -- IBGE
                 V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                 V_INSERT.con_freteoper_rota  := P_ROTA;
                 V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE2.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                 V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.endereco.cidade.ibge';
                 V_INSERT.uti_vfintegra_valor := TRIM('3550308');
                 PKG_CFE_FRETE2.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                 
                 -- CEP
                 V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                 V_INSERT.con_freteoper_rota  := P_ROTA;
                 V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE2.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                 V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.endereco.cep';
                 V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORF1.CAR_PROPRIETARIO_CEP);
                 PKG_CFE_FRETE2.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                 
                 -- DDD TELEFONE
                 V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                 V_INSERT.con_freteoper_rota  := P_ROTA;
                 V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE2.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                 V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.telefone.ddd';
                 V_INSERT.uti_vfintegra_valor := TRIM('011');
                 PKG_CFE_FRETE2.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                 
                 -- NUMERO TELEFONE
                 V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                 V_INSERT.con_freteoper_rota  := P_ROTA;
                 V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE2.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                 V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.telefone.numero';
                 V_INSERT.uti_vfintegra_valor := SUBSTR(TRIM(R_CURSORF1.CAR_PROPRIETARIO_TELEFONE),-8);
                 PKG_CFE_FRETE2.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                 
                 -- DDD CELULAR
                 V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                 V_INSERT.con_freteoper_rota  := P_ROTA;
                 V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE2.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                 V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.celular.ddd';
                 V_INSERT.uti_vfintegra_valor := TRIM('011');
                 PKG_CFE_FRETE2.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                 
                 -- NUMERO CELULAR
                 V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                 V_INSERT.con_freteoper_rota  := P_ROTA;
                 V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE2.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                 V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.celular.numero';
                 V_INSERT.uti_vfintegra_valor := SUBSTR(TRIM(R_CURSORF1.CAR_PROPRIETARIO_TELEFONE),-8);
                 PKG_CFE_FRETE2.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                 
                 
                 -- NUMERO CELULAR
                 V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                 V_INSERT.con_freteoper_rota  := P_ROTA;
                 V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE2.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                 V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.email';
                 V_INSERT.uti_vfintegra_valor := trim('tdv.operacao@dellavolpe.com.br');
                 PKG_CFE_FRETE2.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                 
             END;*/
                 
          END IF;
          
          
          /********************       MEIOS DE PAGAMENTO       ******************/
          BEGIN
            
            V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
            V_INSERT.con_freteoper_rota  := P_ROTA;
            V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
            V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.meio.pagamento';
            
            IF (V_PROPCONTA IS NOT NULL) AND (V_PROPCARTAO IS NULL) THEN
               V_INSERT.uti_vfintegra_valor := TRIM('2');
            ELSIF (V_PROPCONTA IS NULL) AND (V_PROPCARTAO IS NOT NULL) THEN
               V_INSERT.uti_vfintegra_valor := TRIM('1');
            END IF;
            PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
            
            
            IF (V_PROPCONTA IS NOT NULL) AND (V_PROPCARTAO IS NULL) THEN             
                -- BANCO
                V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                V_INSERT.con_freteoper_rota  := P_ROTA;
                V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.conta.banco';
                V_INSERT.uti_vfintegra_valor := TRIM(V_PROPBANCO);
                PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                
                -- AGENCIA
                V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                V_INSERT.con_freteoper_rota  := P_ROTA;
                V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.conta.agencia';
                V_INSERT.uti_vfintegra_valor := TRIM(V_PROPAGENCIA);
                PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                
                -- NUMERO CONTA
                V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                V_INSERT.con_freteoper_rota  := P_ROTA;
                V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.conta.numero';
                V_INSERT.uti_vfintegra_valor := TRIM(V_PROPCONTA);
                PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                
                -- TIPO CONTA
                V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                V_INSERT.con_freteoper_rota  := P_ROTA;
                V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.conta.tipo';
                V_INSERT.uti_vfintegra_valor := TRIM(V_PROPTIPOCONTA);
                PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

            ELSIF (V_PROPCONTA IS NULL) AND (V_PROPCARTAO IS NOT NULL) THEN
                 
                -- NUMERO CARTÃO
                V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                V_INSERT.con_freteoper_rota  := P_ROTA;
                V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.cartao.numero';
                V_INSERT.uti_vfintegra_valor := TRIM(V_PROPCARTAO);
                --V_INSERT.uti_vfintegra_valor := '4417810094176014';
                PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

            END IF;
                                 
          EXCEPTION WHEN OTHERS THEN
            V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
            V_MESSAGE := 'ERRO: '||sqlerrm;             
          END;
      
             
      END LOOP;  
          
      -- FAVORECIDO MOTORISTA
      FOR R_CURSORf2 IN (SELECT C.CAR_CARRETEIRO_CPFCODIGO      ,
                                C.CAR_CARRETEIRO_NOME           ,
                                C.CAR_CARRETEIRO_CIDADE         ,
                                C.GLB_ESTADOCARRETEIRO_CODIGO   ,
                                C.CAR_CARRETEIRO_BAIRRO         ,
                                C.CAR_CARRETEIRO_ENDERECO       ,
                                C.CAR_CARRETEIRO_CEP            ,
                                C.CAR_CARRETEIRO_TELEFONE       ,
                                C.CAR_CARRETEIRO_CELULAR        ,
                                C.CAR_CARRETEIRO_DATANASC       ,
                                C.CAR_CARRETEIRO_RGCODIGO       ,
                                C.GLB_ESTADORG_CODIGO           
                           FROM T_CAR_CARRETEIRO C
                           WHERE C.CAR_CARRETEIRO_CPFCODIGO     = V_MOTORISTA
                             AND C.CAR_CARRETEIRO_SAQUE         = V_MOTORISTASAQUE
                             AND V_TPFAVOPRECIDO.FavorMotorista = 'S')
      LOOP  
          
          -- TIPO FAVORECIDO
          BEGIN
            
            V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
            V_INSERT.con_freteoper_rota  := P_ROTA;
            V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
            V_INSERT.uti_vfintegra_chave := 'viagem.favorecido2.tipo';
            
            -- TIPO MOTORISTA
            V_INSERT.uti_vfintegra_valor := '3';
            
            PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                                                    
          EXCEPTION WHEN OTHERS THEN
            V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
            V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
          END;
          
          
          -- QUANTIDADE DOCUMENTOS FAVORECIDO
        BEGIN
          
          V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.favorecido2.documento.qtde';
          
         
          IF LENGTH(TRIM(R_CURSORF2.CAR_CARRETEIRO_CPFCODIGO)) = 11 THEN
             V_INSERT.uti_vfintegra_valor := '1';
          END IF;
          
          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                                                  
        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE2.SP_GET_INTEGRACAO, '||sqlerrm;             
        END;    
          
        IF LENGTH(TRIM(R_CURSORF2.CAR_CARRETEIRO_CPFCODIGO)) = 11 THEN            
             -- DOCUMENTO 1 PF
             BEGIN  
                V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                V_INSERT.con_freteoper_rota  := P_ROTA;
                V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                V_INSERT.uti_vfintegra_chave := 'viagem.favorecido2.documento1.tipo';
                V_INSERT.uti_vfintegra_valor := '2';
                PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                
                V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                V_INSERT.con_freteoper_rota  := P_ROTA;
                V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                V_INSERT.uti_vfintegra_chave := 'viagem.favorecido2.documento1.numero';
                V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORF2.CAR_CARRETEIRO_CPFCODIGO);
                PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                
             END;
             
             
             /*-- DOCUMENTO 2 PF
             BEGIN  
                 V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                 V_INSERT.con_freteoper_rota  := P_ROTA;
                 V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                 V_INSERT.uti_vfintegra_chave := 'viagem.favorecido2.documento3.tipo';
                 V_INSERT.uti_vfintegra_valor := '3';
                 PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                 
                 V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                 V_INSERT.con_freteoper_rota  := P_ROTA;
                 V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                 V_INSERT.uti_vfintegra_chave := 'viagem.favorecido2.documento3.numero';
                 V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORF2.CAR_CARRETEIRO_RGCODIGO);
                 PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                 
                 V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                 V_INSERT.con_freteoper_rota  := P_ROTA;
                 V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                 V_INSERT.uti_vfintegra_chave := 'viagem.favorecido2.documento3.uf';
                 V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORF2.GLB_ESTADORG_CODIGO);
                 PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                 
             END;
             */
                 
        END IF;
          
          
        -- MEIOS DE PAGAMENTO
        BEGIN
          
          V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.favorecido2.meio.pagamento';
          V_INSERT.uti_vfintegra_valor := TRIM('1');
          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                                                  
          V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.favorecido2.cartao.numero';
          V_INSERT.uti_vfintegra_valor := TRIM(V_MOTORISTACARTAO);
          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
          
        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: '||sqlerrm;             
        END;
      
             
      END LOOP;  
      
      -- FAVORECIDO RESPONSAVEL
      FOR R_CURSORf3 IN (SELECT C.CAR_PROPRESP_CPFCODIGO   ,
                                C.CAR_PROPRESP_NOME        ,
                                C.CAR_PROPRESP_CIDADE      ,
                                C.GLB_ESTADORESP_CODIGO    ,
                                C.CAR_PROPRESP_BAIRRO      ,
                                C.CAR_PROPRESP_ENDERECO    ,
                                C.CAR_PROPRESP_CEP         ,
                                C.CAR_PROPRESP_TELEFONE    ,
                                C.CAR_PROPRESP_CELULAR     ,
                                C.CAR_PROPRESP_DATANASC    ,
                                C.CAR_PROPRESP_RGCODIGO     ,
                                C.GLB_ESTADORG_CODIGO       
                           FROM T_CAR_PROPRESP C
                           WHERE C.CAR_PROPRIETARIO_CGCCPFCODIGO  = V_PROPRIETARIO
                             AND V_TPFAVOPRECIDO.FavorResponsavel = 'S')
      LOOP  
          
          -- TIPO FAVORECIDO
          BEGIN
            
            V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
            V_INSERT.con_freteoper_rota  := P_ROTA;
            V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
            V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.tipo';
            
            -- TIPO MOTORISTA
            V_INSERT.uti_vfintegra_valor := '1';
            
            PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                                                    
          EXCEPTION WHEN OTHERS THEN
            V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
            V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
          END;
          
          
          -- QUANTIDADE DOCUMENTOS FAVORECIDO
        BEGIN
          
          V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.documento.qtde';
          
         
          IF LENGTH(TRIM(R_CURSORF3.CAR_PROPRESP_CPFCODIGO)) = 11 THEN
             V_INSERT.uti_vfintegra_valor := '1';
          END IF;
          
          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                                                  
        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE2.SP_GET_INTEGRACAO, '||sqlerrm;             
        END;    
          
        IF LENGTH(TRIM(R_CURSORF3.CAR_PROPRESP_CPFCODIGO)) = 11 THEN            
             -- DOCUMENTO 1 PF
             BEGIN  
                V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                V_INSERT.con_freteoper_rota  := P_ROTA;
                V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.documento1.tipo';
                V_INSERT.uti_vfintegra_valor := '2';
                PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                
                V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                V_INSERT.con_freteoper_rota  := P_ROTA;
                V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.documento1.numero';
                V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORF3.CAR_PROPRESP_CPFCODIGO);
                PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                
             END;
             
             
             /*-- DOCUMENTO 2 PF
             BEGIN  
                 V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                 V_INSERT.con_freteoper_rota  := P_ROTA;
                 V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                 V_INSERT.uti_vfintegra_chave := 'viagem.favorecido2.documento3.tipo';
                 V_INSERT.uti_vfintegra_valor := '3';
                 PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                 
                 V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                 V_INSERT.con_freteoper_rota  := P_ROTA;
                 V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                 V_INSERT.uti_vfintegra_chave := 'viagem.favorecido2.documento3.numero';
                 V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORF2.CAR_CARRETEIRO_RGCODIGO);
                 PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                 
                 V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                 V_INSERT.con_freteoper_rota  := P_ROTA;
                 V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                 V_INSERT.uti_vfintegra_chave := 'viagem.favorecido2.documento3.uf';
                 V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORF2.GLB_ESTADORG_CODIGO);
                 PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                 
             END;
             */
                 
        END IF;
          
          
        -- MEIOS DE PAGAMENTO
        BEGIN
          
          V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.meio.pagamento';
          V_INSERT.uti_vfintegra_valor := TRIM('1');
          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                                                  
          V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.cartao.numero';
          V_INSERT.uti_vfintegra_valor := TRIM(V_PROPCARTAO);
          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
          
        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: '||sqlerrm;             
        END;
      
             
      END LOOP;  
      
      
    END;     
    
    /*************************************************************************/

    /*************************************************************************/
    /***                           VEICULOS                                ***/
    /*************************************************************************/
    
    BEGIN
    -- QUANTIDADE DE VEICULOS
    BEGIN
       
       SELECT COUNT(*)
         INTO V_QTDEPLACA
         FROM V_CFE_VEICULOS K
        WHERE K.CAR_VEICULO_PLACA = V_PLACA
          AND K.CAR_VEICULO_SAQUE = V_SAQUE;
       
       V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
       V_INSERT.con_freteoper_rota  := P_ROTA;
       V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
       V_INSERT.uti_vfintegra_chave := 'viagem.veiculo.qtde';
       V_INSERT.uti_vfintegra_valor := V_QTDEPLACA;
       --V_INSERT.uti_vfintegra_valor := '1';
       PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                                               
     EXCEPTION WHEN OTHERS THEN
       V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
       V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
     END;
     
    --PLACAS  
    V_INDICEPLACA := 0;
    
    FOR C_CURSOR IN (SELECT V.PLACA              ,
                              V.SEQ                ,
                              V.CAR_VEICULO_PLACA  ,
                              V.CAR_VEICULO_SAQUE  ,
                              V.RNTRC 
                            FROM V_CFE_VEICULOS V 
                           WHERE V.CAR_VEICULO_PLACA = V_PLACA 
                             AND V.CAR_VEICULO_SAQUE = V_SAQUE)
    LOOP
        V_INDICEPLACA := V_INDICEPLACA+1;
        
        -- PLACA
        BEGIN
          
          V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := REPLACE('viagem.veiculoXX.placa','XX',TO_CHAR(V_INDICEPLACA));
          V_INSERT.uti_vfintegra_valor := C_CURSOR.PLACA;
          --V_INSERT.uti_vfintegra_valor := 'CNI4503';
          
          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                                                  
        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
        END; 
        
        -- RNTRC
        BEGIN
          
          V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := REPLACE('viagem.veiculoXX.rntrc','XX',TO_CHAR(V_INDICEPLACA));
          V_INSERT.uti_vfintegra_valor := trim(C_CURSOR.RNTRC);
          --V_INSERT.uti_vfintegra_valor := '00169354';
          
          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                                                  
        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
        END; 
        
    END LOOP;
    
   -- CATEGORIA DO VEICULO
   BEGIN
     
     V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
     V_INSERT.con_freteoper_rota  := P_ROTA;
     V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
     V_INSERT.uti_vfintegra_chave := TRIM('viagem.veiculo.categoria');
     
     V_INSERT.uti_vfintegra_valor := NVL(PKG_CFE_FRETE.FN_GET_CATEGORIAVEIC(V_PLACA,V_SAQUE),'6');
     
     PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                    
   EXCEPTION WHEN OTHERS THEN
     V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
     V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
   END; 
        
    
    END;       
    
    /*************************************************************************/
    
    
    /*************************************************************************/
    /***                        INFORMACÕES VIAGEM                         ***/
    /*************************************************************************/
    
    BEGIN
    -- DATA DE INICIO / TERMINO DA VIAGEM
     BEGIN
       
       V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
       V_INSERT.con_freteoper_rota  := P_ROTA;
       V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
       V_INSERT.uti_vfintegra_chave := 'viagem.data.partida';
       V_INSERT.uti_vfintegra_valor := to_char(TRUNC(SYSDATE),'dd/mm/yyyy');
    --   V_INSERT.uti_vfintegra_valor := to_char(v_InfValeFrete.con_valefrete_datacadastro,'dd/mm/yyyy');
       
       PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                      
     EXCEPTION WHEN OTHERS THEN
       V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
       V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
     END; 

     BEGIN
       
       V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
       V_INSERT.con_freteoper_rota  := P_ROTA;
       V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
       V_INSERT.uti_vfintegra_chave := 'viagem.data.termino';
       
       -- COLOCADO con_valefrete_dataprazomax + 7 DIAS
       V_INSERT.uti_vfintegra_valor := TRIM(to_char(v_InfValeFrete.con_valefrete_dataprazomax+30,'dd/mm/yyyy'));
       
       PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                      
     EXCEPTION WHEN OTHERS THEN
       V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
       V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
     END; 
    
    
    -- ORIGEM / DESTINO
    
     BEGIN
       
       V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
       V_INSERT.con_freteoper_rota  := P_ROTA;
       V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
       V_INSERT.uti_vfintegra_chave := 'viagem.origem.cidade.ibge';
       V_INSERT.uti_vfintegra_valor := trim(PKG_CFE_FRETE.FN_GET_IBGE(v_InfValeFrete.glb_localidade_codigoori));
       
       PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                      
     EXCEPTION WHEN OTHERS THEN
       V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
       V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
     END; 
     
     BEGIN
       
       V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
       V_INSERT.con_freteoper_rota  := P_ROTA;
       V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
       V_INSERT.uti_vfintegra_chave := 'viagem.destino.cidade.ibge';
       V_INSERT.uti_vfintegra_valor := TRIM(PKG_CFE_FRETE.FN_GET_IBGE(v_InfValeFrete.glb_localidade_codigodes));
       
       PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                      
     EXCEPTION WHEN OTHERS THEN
       V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
       V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
     END; 
     
    /*************************________PEDAGIO_________***********************/
    
    IF NVL(v_InfValeFrete.con_valefrete_pedagio,0) <> 0 THEN  
       
       BEGIN   
          
          
          -- SOLUCAO ENVIAMOS "5" PANCARD
          V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.pedagio.solucao.id';
          V_INSERT.uti_vfintegra_valor := TRIM('5');     
          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
           
          -- VALOR DO PEDAGIO
          V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.pedagio.valor';
          V_INSERT.uti_vfintegra_valor := TRIM(REPLACE(v_InfValeFrete.con_valefrete_pedagio,',','.'));     
          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
            
          -- STATUS DO PEDAGIO
          V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.pedagio.status.id';
          V_INSERT.uti_vfintegra_valor := TRIM(2);     
          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
          
          -- RETERIZAR
          V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.pedagio.roteirizar';
          V_INSERT.uti_vfintegra_valor := TRIM('N');     
          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
          
          -- VALOR DO PEDAGIO
          V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.pedagio.obter.praca';
          V_INSERT.uti_vfintegra_valor := TRIM('N');    
          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
            
            
       
          -- UTILIZA SALDO
          V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.pedagio.utiliza.saldo';
          V_INSERT.uti_vfintegra_valor := TRIM('N');     
          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
          
          IF V_PROPCARTAO <>  V_MOTORISTACARTAO THEN
          
          -- CARTAO PEDAGIO
          V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.pedagio.cartao.numero';
          --V_INSERT.uti_vfintegra_valor := '4417810094176014';
          V_INSERT.uti_vfintegra_valor := TRIM(V_MOTORISTACARTAO);     
          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
          
          END IF;
          
       EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
       END; 
    
    END IF;
    
           
     -- IDENTIFICAÇÃO DA CARGA 1 LOTAÇÃO 2 FRACIONADA
     BEGIN
        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'viagem.carga.tipo';
        V_INSERT.uti_vfintegra_valor := TRIM(V_IDCARGA);     
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
        
     EXCEPTION WHEN OTHERS THEN
        V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
        V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
     END;     

     -- NATUREZA DA CARGA
     BEGIN
        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'viagem.carga.natureza';
        
        IF V_IDCARGA = '2' THEN
           V_INSERT.uti_vfintegra_valor := TRIM('0001');     
        ELSE
           V_INSERT.uti_vfintegra_valor := TRIM('8465');
        END IF;  
        --'2621'
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
        
     EXCEPTION WHEN OTHERS THEN
        V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
        V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
     END;     
          
     -- PESO DO CARREGAMENTO
     BEGIN
        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'viagem.carga.peso';
        V_INSERT.uti_vfintegra_valor := TRIM(TO_CHAR(v_InfValeFrete.con_valefrete_pesoindicado*1000,'999999999.00'));
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
        
     EXCEPTION WHEN OTHERS THEN
        V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
        V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
     END;     

    END;
    
    /*************************************************************************/    

    
    /*************************************************************************/
    /***                      DOCUMENTOS DE REFERENCIA                     ***/
    /*************************************************************************/
    
    IF vValeFreteTipo <> '18' THEN
         
    BEGIN
      
    SELECT COUNT(*)
      INTO V_QTDEDOCREF
      FROM T_CON_VFRETECONHEC CC
     WHERE CC.CON_VALEFRETE_CODIGO     = V_VFRETE
       AND CC.CON_VALEFRETE_SERIE      = V_VFSERIE
       AND CC.GLB_ROTA_CODIGOVALEFRETE = V_VFROTA
       AND CC.CON_VALEFRETE_SAQUE      = V_VFSAQUE;
    
    IF V_QTDEDOCREF > 0 THEN
       
       -- QUANTIDADES DE DOCUMENTOS
       BEGIN     
         V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
         V_INSERT.con_freteoper_rota  := P_ROTA;
         V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
         V_INSERT.uti_vfintegra_chave := TRIM('viagem.documento.qtde');
         V_INSERT.uti_vfintegra_valor := TRIM(TO_CHAR(V_QTDEDOCREF));
         -- V_INSERT.uti_vfintegra_valor := '3';
         PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
       EXCEPTION WHEN OTHERS THEN
         V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
         V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
       END; 
       
       /***********************************************************/
       /********************    CONHECIMENTOS    ******************/
       /***********************************************************/
       V_INDICEDOCFIS := 0;
       
       FOR R_CURSORCONHEC IN (SELECT CC.CON_CONHECIMENTO_CODIGO,
                                     CC.CON_CONHECIMENTO_SERIE,
                                     CC.GLB_ROTA_CODIGO,
                                     CH.GLB_CLIENTE_CGCCPFREMETENTE,
                                     CH.GLB_TPCLIEND_CODIGOREMETENTE,
                                     CH.GLB_CLIENTE_CGCCPFDESTINATARIO,
                                     CH.GLB_TPCLIEND_CODIGODESTINATARI,
                                     R.GLB_ROTA_SERIE
                                FROM T_CON_VFRETECONHEC CC,
                                     T_CON_CONHECIMENTO CH,
                                     T_GLB_ROTA R
                               WHERE CC.CON_VALEFRETE_CODIGO     = V_VFRETE
                                 AND CC.CON_VALEFRETE_SERIE      = V_VFSERIE
                                 AND CC.GLB_ROTA_CODIGOVALEFRETE = V_VFROTA
                                 AND CC.CON_VALEFRETE_SAQUE      = V_VFSAQUE
                                 AND CC.GLB_ROTA_CODIGO          = R.GLB_ROTA_CODIGO
                                 AND CC.CON_CONHECIMENTO_CODIGO  = CH.CON_CONHECIMENTO_CODIGO
                                 AND CC.CON_CONHECIMENTO_SERIE   = CH.CON_CONHECIMENTO_SERIE
                                 AND CC.GLB_ROTA_CODIGO          = CH.GLB_ROTA_CODIGO)
       LOOP
           -- INDICE DO DOC FISCAL
           V_INDICEDOCFIS := V_INDICEDOCFIS+1;
           
           -- TIPO DO DOCUMENTO
           BEGIN     
             V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
             V_INSERT.con_freteoper_rota  := P_ROTA;
             V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
             V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.tipo'),'XX',TO_CHAR(V_INDICEDOCFIS));
             V_INSERT.uti_vfintegra_valor := TRIM('5');
             PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
           EXCEPTION WHEN OTHERS THEN
             V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
             V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
           END; 
           
           -- NUMERO DO DOCUMENTO
           BEGIN     
             V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
             V_INSERT.con_freteoper_rota  := P_ROTA;
             V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
             V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.numero'),'XX',TO_CHAR(V_INDICEDOCFIS));
             V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORCONHEC.CON_CONHECIMENTO_CODIGO);
             PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
           EXCEPTION WHEN OTHERS THEN
             V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
             V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
           END; 
           
           -- SERIE DO DOCUMENTO
           BEGIN     
             V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
             V_INSERT.con_freteoper_rota  := P_ROTA;
             V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
             V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.serie'),'XX',TO_CHAR(V_INDICEDOCFIS));
             V_INSERT.uti_vfintegra_valor := NVL(TRIM(R_CURSORCONHEC.GLB_ROTA_SERIE),'U');
             PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
           EXCEPTION WHEN OTHERS THEN
             V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
             V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
           END; 
           
           -- QUANTIDADES DE DOCUMENTOS
           BEGIN     
             V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
             V_INSERT.con_freteoper_rota  := P_ROTA;
             V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
             V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.quantidade'),'XX',TO_CHAR(V_INDICEDOCFIS));
             V_INSERT.uti_vfintegra_valor := TRIM('1');
             PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
           EXCEPTION WHEN OTHERS THEN
             V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
             V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
           END; 
           
            
           /*-- TESTE
           BEGIN     
             V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
             V_INSERT.con_freteoper_rota  := P_ROTA;
             V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
             V_INSERT.uti_vfintegra_chave := TRIM('viagem.documento1.especie');
             V_INSERT.uti_vfintegra_valor := TRIM('Conhecimento');
             PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
           EXCEPTION WHEN OTHERS THEN
             V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
             V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
           END; 
           
           BEGIN     
             V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
             V_INSERT.con_freteoper_rota  := P_ROTA;
             V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
             V_INSERT.uti_vfintegra_chave := TRIM('viagem.documento1.cubagem');
             V_INSERT.uti_vfintegra_valor := TRIM('18');
             PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
           EXCEPTION WHEN OTHERS THEN
             V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
             V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
           END; 
           
           
           BEGIN     
             V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
             V_INSERT.con_freteoper_rota  := P_ROTA;
             V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
             V_INSERT.uti_vfintegra_chave := TRIM('viagem.documento1.natureza');
             V_INSERT.uti_vfintegra_valor := TRIM('2621');
             PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
           EXCEPTION WHEN OTHERS THEN
             V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
             V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
           END; 
           
           
           BEGIN     
             V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
             V_INSERT.con_freteoper_rota  := P_ROTA;
             V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
             V_INSERT.uti_vfintegra_chave := TRIM('viagem.documento1.peso');
             V_INSERT.uti_vfintegra_valor := TRIM('1');
             PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
           EXCEPTION WHEN OTHERS THEN
             V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
             V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
           END; 
           
           
           BEGIN     
             V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
             V_INSERT.con_freteoper_rota  := P_ROTA;
             V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
             V_INSERT.uti_vfintegra_chave := TRIM('viagem.documento1.mercadoria.valor');
             V_INSERT.uti_vfintegra_valor := TRIM('100');
             PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
           EXCEPTION WHEN OTHERS THEN
             V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
             V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
           END;
           -- TESTE      */      
                       
           -- QUANTIDADE DE PESSOAS FISCAIS
           BEGIN     
             V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
             V_INSERT.con_freteoper_rota  := P_ROTA;
             V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
             V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal.qtde'),'XX',TO_CHAR(V_INDICEDOCFIS));
             V_INSERT.uti_vfintegra_valor := TRIM('2');
             PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
           EXCEPTION WHEN OTHERS THEN
             V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
             V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
           END; 
           
           -- PESSOA FISCAL 1 REMETENTE
           FOR R_CURSORPESOAFISCAL1 IN (SELECT C.GLB_CLIENTE_CGCCPFCODIGO,
                                               C.GLB_CLIENTE_RAZAOSOCIAL,
                                               CD.GLB_CLIEND_ENDERECO,
                                               CD.GLB_CLIEND_COMPLEMENTO,
                                               CD.GLB_CEP_CODIGO,
                                               CD.GLB_LOCALIDADE_CODIGO,
                                               c.glb_cliente_tppessoa
                                          FROM T_GLB_CLIEND CD,
                                               T_GLB_CLIENTE C
                                         WHERE CD.GLB_CLIENTE_CGCCPFCODIGO = R_CURSORCONHEC.GLB_CLIENTE_CGCCPFREMETENTE
                                           AND CD.GLB_TPCLIEND_CODIGO      = R_CURSORCONHEC.GLB_TPCLIEND_CODIGOREMETENTE
                                           AND CD.GLB_CLIENTE_CGCCPFCODIGO = C.GLB_CLIENTE_CGCCPFCODIGO)
           LOOP
             -- TIPO PESSOA FISCAL
             BEGIN     
               V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal1.tipo'),'XX',TO_CHAR(V_INDICEDOCFIS));
               V_INSERT.uti_vfintegra_valor := TRIM('1');
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
             END; 
             
             -- DOCUMENTO TIPO
             BEGIN     
               V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal1.documento.tipo'),'XX',TO_CHAR(V_INDICEDOCFIS));
               
               -- FISICA OU JURIDICA
             /*IF LENGTH(TRIM(R_CURSORPESOAFISCAL1.GLB_CLIENTE_CGCCPFCODIGO)) = 11 THEN
                  V_INSERT.uti_vfintegra_valor := TRIM('2');
               ELSIF LENGTH(TRIM(R_CURSORPESOAFISCAL1.GLB_CLIENTE_CGCCPFCODIGO)) = 14 THEN
                  V_INSERT.uti_vfintegra_valor := TRIM('1');
               END IF;*/
               
               
               IF nvl(R_CURSORPESOAFISCAL1.GLB_CLIENTE_TPPESSOA,'N') = 'F' THEN
                  V_INSERT.uti_vfintegra_valor := TRIM('2');
               else
                  V_INSERT.uti_vfintegra_valor := TRIM('1');
               END IF;  
              
               
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
             
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
             END;
             
             /*************************************************************************/
             /*********************SE CLIENTE INTERNACIONAL****************************/
             /*************************************************************************/
             
             BEGIN
               SELECT NVL(CL.GLB_CLIENTE_NACIONAL,'N')
                 INTO vCnpjInter
                 FROM T_GLB_CLIENTE CL
                WHERE CL.GLB_CLIENTE_CGCCPFCODIGO = R_CURSORPESOAFISCAL1.GLB_CLIENTE_CGCCPFCODIGO; 
             EXCEPTION WHEN OTHERS THEN
              vCnpjInter := 'N';
             END;   
             
             /*************************************************************************/
             -- DOCUMENTO NUMERO
             BEGIN     
               V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal1.documento.numero'),'XX',TO_CHAR(V_INDICEDOCFIS));
               
               /**********************************************************************/
               /**************************INFORMO UM CNPJ COM DV VALIDO***************/
               /**********************************************************************/
               
               IF vCnpjInter = 'I' THEN 
                  V_INSERT.uti_vfintegra_valor := TRIM('00000000000191');
               ELSE
                  V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORPESOAFISCAL1.GLB_CLIENTE_CGCCPFCODIGO); 
               END IF;  
               
               vCnpjInter := NULL;
               
               /**********************************************************************/
               
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
             END;
             
             -- NOME PESSOA FISCAL
             BEGIN     
               V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal1.nome'),'XX',TO_CHAR(V_INDICEDOCFIS));
               V_INSERT.uti_vfintegra_valor := SUBSTR(TRIM(R_CURSORPESOAFISCAL1.GLB_CLIENTE_RAZAOSOCIAL),1,40);
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
             END;
             
             -- LOGRADOURO
             BEGIN     
               V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal1.endereco.logradouro'),'XX',TO_CHAR(V_INDICEDOCFIS));
               V_INSERT.uti_vfintegra_valor := SUBSTR(TRIM(R_CURSORPESOAFISCAL1.GLB_CLIEND_ENDERECO),1,40);
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
             END;
             
             -- NUMERO
             BEGIN     
               V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal1.endereco.numero'),'XX',TO_CHAR(V_INDICEDOCFIS));
               V_INSERT.uti_vfintegra_valor := TRIM('0');
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
             END;
             
             
             -- bAIRRO
             BEGIN     
               V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal1.endereco.bairro'),'XX',TO_CHAR(V_INDICEDOCFIS));
               V_INSERT.uti_vfintegra_valor := TRIM('BAIRRO');
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
             END;
             
             -- IBGE
             BEGIN     
               V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal1.endereco.cidade.ibge'),'XX',TO_CHAR(V_INDICEDOCFIS));
               V_INSERT.uti_vfintegra_valor := TRIM(PKG_CFE_FRETE.FN_GET_IBGE(R_CURSORPESOAFISCAL1.GLB_LOCALIDADE_CODIGO));
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
             END;
             
             -- CEP
             BEGIN     
               V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal1.endereco.cep'),'XX',TO_CHAR(V_INDICEDOCFIS));
               V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORPESOAFISCAL1.GLB_CEP_CODIGO);
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
             END;
             
           END LOOP;
           
           -- PESSOA FISCAL 2 DESTINATÁRIO
           FOR R_CURSORPESOAFISCAL2 IN (SELECT C.GLB_CLIENTE_CGCCPFCODIGO,
                                               C.GLB_CLIENTE_RAZAOSOCIAL,
                                               CD.GLB_CLIEND_ENDERECO,
                                               CD.GLB_CLIEND_COMPLEMENTO,
                                               CD.GLB_CEP_CODIGO,
                                               CD.GLB_LOCALIDADE_CODIGO,
                                               c.glb_cliente_tppessoa
                                          FROM T_GLB_CLIEND CD,
                                               T_GLB_CLIENTE C
                                         WHERE CD.GLB_CLIENTE_CGCCPFCODIGO = R_CURSORCONHEC.GLB_CLIENTE_CGCCPFDESTINATARIO
                                           AND CD.GLB_TPCLIEND_CODIGO      = R_CURSORCONHEC.GLB_TPCLIEND_CODIGODESTINATARI
                                           AND CD.GLB_CLIENTE_CGCCPFCODIGO = C.GLB_CLIENTE_CGCCPFCODIGO)
           LOOP
             
              -- TIPO PESSOA FISCAL
             BEGIN     
               V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal2.tipo'),'XX',TO_CHAR(V_INDICEDOCFIS));
               V_INSERT.uti_vfintegra_valor := TRIM('2');
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
             END; 
             
             -- DOCUMENTO TIPO
             BEGIN     
               V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal2.documento.tipo'),'XX',TO_CHAR(V_INDICEDOCFIS));
               
               -- FISICA OU JURIDICA
               /*IF LENGTH(TRIM(R_CURSORPESOAFISCAL2.GLB_CLIENTE_CGCCPFCODIGO)) = 11 THEN
                  V_INSERT.uti_vfintegra_valor := TRIM('2');
               ELSIF LENGTH(TRIM(R_CURSORPESOAFISCAL2.GLB_CLIENTE_CGCCPFCODIGO)) = 14 THEN
                  V_INSERT.uti_vfintegra_valor := TRIM('1');
               END IF;  */
               
               
               -- klayton em 07/07/2014
               IF nvl(R_CURSORPESOAFISCAL2.GLB_CLIENTE_TPPESSOA,'N') = 'F' THEN
                  V_INSERT.uti_vfintegra_valor := TRIM('2');
               else
                  V_INSERT.uti_vfintegra_valor := TRIM('1');
               END IF;  
               
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
             
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
             END;
             
             
             /*************************************************************************/
             /*********************SE CLIENTE INTERNACIONAL****************************/
             /*************************************************************************/
             
             BEGIN
               SELECT NVL(CL.GLB_CLIENTE_NACIONAL,'N')
                 INTO vCnpjInter
                 FROM T_GLB_CLIENTE CL
                WHERE CL.GLB_CLIENTE_CGCCPFCODIGO = R_CURSORPESOAFISCAL2.GLB_CLIENTE_CGCCPFCODIGO; 
             EXCEPTION WHEN OTHERS THEN
             vCnpjInter := 'N';
             END;   
             
             /*************************************************************************/

             
             
             
             -- DOCUMENTO NUMERO
             BEGIN     
               V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal2.documento.numero'),'XX',TO_CHAR(V_INDICEDOCFIS));
               
               
               /**********************************************************************/
               /**************************INFORMO UM CNPJ COM DV VALIDO***************/
               /**********************************************************************/
               
               IF vCnpjInter = 'I' THEN 
                  V_INSERT.uti_vfintegra_valor := TRIM('00000000000191');
               ELSE
                  V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORPESOAFISCAL2.GLB_CLIENTE_CGCCPFCODIGO); 
               END IF;  
               
               vCnpjInter := NULL;
               
               /**********************************************************************/
               
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
             END;
             
             -- NOME PESSOA FISCAL
             BEGIN     
               V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal2.nome'),'XX',TO_CHAR(V_INDICEDOCFIS));
               V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORPESOAFISCAL2.GLB_CLIENTE_RAZAOSOCIAL);
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
             END;
             
             -- LOGRADOURO
             BEGIN     
               V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal2.endereco.logradouro'),'XX',TO_CHAR(V_INDICEDOCFIS));
               V_INSERT.uti_vfintegra_valor := SUBSTR(TRIM(R_CURSORPESOAFISCAL2.GLB_CLIEND_ENDERECO),1,40);
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
             END;
             
             -- NUMERO
             BEGIN     
               V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal2.endereco.numero'),'XX',TO_CHAR(V_INDICEDOCFIS));
               V_INSERT.uti_vfintegra_valor := TRIM('0');
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
             END;
             
             
             -- bAIRRO
             BEGIN     
               V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal2.endereco.bairro'),'XX',TO_CHAR(V_INDICEDOCFIS));
               V_INSERT.uti_vfintegra_valor := TRIM('BAIRRO');
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
             END;
             
             -- IBGE
             BEGIN     
               V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal2.endereco.cidade.ibge'),'XX',TO_CHAR(V_INDICEDOCFIS));
               V_INSERT.uti_vfintegra_valor := TRIM(PKG_CFE_FRETE.FN_GET_IBGE(R_CURSORPESOAFISCAL2.GLB_LOCALIDADE_CODIGO));
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
             END;
             
             -- CEP
             BEGIN     
               V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal2.endereco.cep'),'XX',TO_CHAR(V_INDICEDOCFIS));
               V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORPESOAFISCAL2.GLB_CEP_CODIGO);
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
             END;
             
           END LOOP;
                                                   
       END LOOP;
       
       /***********************************************************/                              
    
    ELSE
      V_QTDEDOCREF := V_QTDEDOCREF;
    END IF;    
    
      
    END;  
    
    ELSIF vValeFreteTipo = '18' THEN
    
      SELECT COUNT(*)
        INTO V_QTDEDOCREF
        FROM T_CON_VFRETECOLETA CC
       WHERE CC.CON_VALEFRETE_CODIGO      = V_VFRETE
         AND CC.CON_VALEFRETE_SERIE       = V_VFSERIE
         AND CC.GLB_ROTA_CODIGOVALEFRETE  = V_VFROTA
         AND CC.CON_VALEFRETE_SAQUE       = V_VFSAQUE;  
      
      IF V_QTDEDOCREF > 0 THEN
       -- QUANTIDADES DE DOCUMENTOS
       BEGIN     
         V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
         V_INSERT.con_freteoper_rota  := P_ROTA;
         V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
         V_INSERT.uti_vfintegra_chave := TRIM('viagem.documento.qtde');
         V_INSERT.uti_vfintegra_valor := TRIM(TO_CHAR(V_QTDEDOCREF));
         -- V_INSERT.uti_vfintegra_valor := '3';
         PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
       EXCEPTION WHEN OTHERS THEN
         V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
         V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
       END; 
       
       /***********************************************************/
       /********************       COLETAS       ******************/
       /***********************************************************/
       V_INDICEDOCFIS := 0;

       FOR R_COLETA IN (SELECT AC.ARM_COLETA_NCOMPRA,
                               ac.arm_coleta_ciclo, 
                               AC.ARM_ARMAZEM_CODIGO,
                               AC.GLB_CLIENTE_CGCCPFCODIGOENTREG,
                               AC.GLB_TPCLIEND_CODIGOENTREGA,
                               AC.GLB_CLIENTE_CGCCPFCODIGOCOLETA,
                               AC.GLB_TPCLIEND_CODIGOCOLETA
                          FROM T_CON_VFRETECOLETA CO,
                               T_ARM_COLETA AC
                           WHERE CO.CON_VALEFRETE_CODIGO     = V_VFRETE
                             AND CO.CON_VALEFRETE_SERIE      = V_VFSERIE
                             AND CO.GLB_ROTA_CODIGOVALEFRETE = V_VFROTA
                             AND CO.CON_VALEFRETE_SAQUE      = V_VFSAQUE
                             AND CO.ARM_COLETA_NCOMPRA = AC.ARM_COLETA_NCOMPRA
                             and co.arm_coleta_ciclo = ac.arm_coleta_ciclo
                        ORDER BY AC.ARM_COLETA_NCOMPRA)
       LOOP
          
          V_INDICEDOCFIS := V_INDICEDOCFIS + 1;
          
           -- TIPO DO DOCUMENTO
           BEGIN     
             V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
             V_INSERT.con_freteoper_rota  := P_ROTA;
             V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
             V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.tipo'),'XX',TO_CHAR(V_INDICEDOCFIS));
             V_INSERT.uti_vfintegra_valor := TRIM('11');
             PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
           EXCEPTION WHEN OTHERS THEN
             V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
             V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
           END;            
           
           -- NUMERO DO DOCUMENTO
           BEGIN     
             V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
             V_INSERT.con_freteoper_rota  := P_ROTA;
             V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
             V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.numero'),'XX',TO_CHAR(V_INDICEDOCFIS));
             V_INSERT.uti_vfintegra_valor := TRIM(R_COLETA.ARM_COLETA_NCOMPRA);
             PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
           EXCEPTION WHEN OTHERS THEN
             V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
             V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
           END; 
           
           -- SERIE DO DOCUMENTO
           BEGIN     
             V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
             V_INSERT.con_freteoper_rota  := P_ROTA;
             V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
             V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.serie'),'XX',TO_CHAR(V_INDICEDOCFIS));
             V_INSERT.uti_vfintegra_valor := NVL(TRIM(R_COLETA.ARM_ARMAZEM_CODIGO),'U');
             PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
           EXCEPTION WHEN OTHERS THEN
             V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
             V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
           END;     
           
           -- QUANTIDADES DE DOCUMENTOS
           BEGIN     
             V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
             V_INSERT.con_freteoper_rota  := P_ROTA;
             V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
             V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.quantidade'),'XX',TO_CHAR(V_INDICEDOCFIS));
             V_INSERT.uti_vfintegra_valor := TRIM('1');
             PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
           EXCEPTION WHEN OTHERS THEN
             V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
             V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
           END; 
           
           -- QUANTIDADE DE PESSOAS FISCAIS
           BEGIN     
             V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
             V_INSERT.con_freteoper_rota  := P_ROTA;
             V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
             V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal.qtde'),'XX',TO_CHAR(V_INDICEDOCFIS));
             V_INSERT.uti_vfintegra_valor := TRIM('2');
             PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
           EXCEPTION WHEN OTHERS THEN
             V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
             V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
           END;
           
           -- PESSOA FISCAL 1 REMETENTE
           FOR R_CURSORPESOAFISCAL1 IN (SELECT C.GLB_CLIENTE_CGCCPFCODIGO,
                                               C.GLB_CLIENTE_RAZAOSOCIAL,
                                               CD.GLB_CLIEND_ENDERECO,
                                               CD.GLB_CLIEND_COMPLEMENTO,
                                               CD.GLB_CEP_CODIGO,
                                               CD.GLB_LOCALIDADE_CODIGO,
                                               NVL(C.GLB_CLIENTE_NACIONAL,'N') GLB_CLIENTE_NACIONAL
                                          FROM T_GLB_CLIEND CD,
                                               T_GLB_CLIENTE C
                                         WHERE CD.GLB_CLIENTE_CGCCPFCODIGO = R_COLETA.GLB_CLIENTE_CGCCPFCODIGOCOLETA
                                           AND CD.GLB_TPCLIEND_CODIGO      = R_COLETA.GLB_TPCLIEND_CODIGOCOLETA
                                           AND CD.GLB_CLIENTE_CGCCPFCODIGO = C.GLB_CLIENTE_CGCCPFCODIGO)
           LOOP
             -- TIPO PESSOA FISCAL
             BEGIN     
               V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal1.tipo'),'XX',TO_CHAR(V_INDICEDOCFIS));
               V_INSERT.uti_vfintegra_valor := TRIM('1');
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
             END; 
             
             -- DOCUMENTO TIPO
             BEGIN     
               V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal1.documento.tipo'),'XX',TO_CHAR(V_INDICEDOCFIS));
               
               -- FISICA OU JURIDICA
               IF LENGTH(TRIM(R_CURSORPESOAFISCAL1.GLB_CLIENTE_CGCCPFCODIGO)) = 11 THEN
                  V_INSERT.uti_vfintegra_valor := TRIM('2');
               ELSIF LENGTH(TRIM(R_CURSORPESOAFISCAL1.GLB_CLIENTE_CGCCPFCODIGO)) = 14 THEN
                  V_INSERT.uti_vfintegra_valor := TRIM('1');
               END IF;  
               
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
             
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
             END;
             
             -- DOCUMENTO NUMERO
             BEGIN     
               V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal1.documento.numero'),'XX',TO_CHAR(V_INDICEDOCFIS));
               
               
               /******************************************************/
               /*******************SE CLIENTE INTERNACIONAL***********/
               /******************************************************/
               IF R_CURSORPESOAFISCAL1.GLB_CLIENTE_NACIONAL = 'I' THEN 
                  V_INSERT.uti_vfintegra_valor := TRIM('00000000000191');
               ELSE
                  V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORPESOAFISCAL1.GLB_CLIENTE_CGCCPFCODIGO); 
               END IF;  
               /******************************************************/

               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);       
                     
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
             END;
             
             -- NOME PESSOA FISCAL
             BEGIN     
               V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal1.nome'),'XX',TO_CHAR(V_INDICEDOCFIS));
               V_INSERT.uti_vfintegra_valor := SUBSTR(TRIM(R_CURSORPESOAFISCAL1.GLB_CLIENTE_RAZAOSOCIAL),1,40);
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
             END;
             
             -- LOGRADOURO
             BEGIN     
               V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal1.endereco.logradouro'),'XX',TO_CHAR(V_INDICEDOCFIS));
               V_INSERT.uti_vfintegra_valor := SUBSTR(TRIM(R_CURSORPESOAFISCAL1.GLB_CLIEND_ENDERECO),1,40);
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
             END;
             
             -- NUMERO
             BEGIN     
               V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal1.endereco.numero'),'XX',TO_CHAR(V_INDICEDOCFIS));
               V_INSERT.uti_vfintegra_valor := TRIM('0');
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
             END;
             
             
             -- bAIRRO
             BEGIN     
               V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal1.endereco.bairro'),'XX',TO_CHAR(V_INDICEDOCFIS));
               V_INSERT.uti_vfintegra_valor := TRIM('BAIRRO');
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
             END;
             
             -- IBGE
             BEGIN     
               V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal1.endereco.cidade.ibge'),'XX',TO_CHAR(V_INDICEDOCFIS));
               V_INSERT.uti_vfintegra_valor := TRIM(PKG_CFE_FRETE.FN_GET_IBGE(R_CURSORPESOAFISCAL1.GLB_LOCALIDADE_CODIGO));
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
             END;
             
             -- CEP
             BEGIN     
               V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal1.endereco.cep'),'XX',TO_CHAR(V_INDICEDOCFIS));
               V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORPESOAFISCAL1.GLB_CEP_CODIGO);
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
             END;
             
           END LOOP;
           
           -- PESSOA FISCAL 2 DESTINATÁRIO
           FOR R_CURSORPESOAFISCAL2 IN (SELECT C.GLB_CLIENTE_CGCCPFCODIGO,
                                               C.GLB_CLIENTE_RAZAOSOCIAL,
                                               CD.GLB_CLIEND_ENDERECO,
                                               CD.GLB_CLIEND_COMPLEMENTO,
                                               CD.GLB_CEP_CODIGO,
                                               CD.GLB_LOCALIDADE_CODIGO,
                                               NVL(C.GLB_CLIENTE_NACIONAL,'N') GLB_CLIENTE_NACIONAL
                                          FROM T_GLB_CLIEND CD,
                                               T_GLB_CLIENTE C
                                         WHERE CD.GLB_CLIENTE_CGCCPFCODIGO = R_COLETA.GLB_CLIENTE_CGCCPFCODIGOENTREG
                                           AND CD.GLB_TPCLIEND_CODIGO      = R_COLETA.GLB_TPCLIEND_CODIGOENTREGA
                                           AND CD.GLB_CLIENTE_CGCCPFCODIGO = C.GLB_CLIENTE_CGCCPFCODIGO)
           LOOP
             
              -- TIPO PESSOA FISCAL
             BEGIN     
               V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal2.tipo'),'XX',TO_CHAR(V_INDICEDOCFIS));
               V_INSERT.uti_vfintegra_valor := TRIM('2');
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
             END; 
             
             -- DOCUMENTO TIPO
             BEGIN     
               V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal2.documento.tipo'),'XX',TO_CHAR(V_INDICEDOCFIS));
               
               -- FISICA OU JURIDICA
               IF LENGTH(TRIM(R_CURSORPESOAFISCAL2.GLB_CLIENTE_CGCCPFCODIGO)) = 11 THEN
                  V_INSERT.uti_vfintegra_valor := TRIM('2');
               ELSIF LENGTH(TRIM(R_CURSORPESOAFISCAL2.GLB_CLIENTE_CGCCPFCODIGO)) = 14 THEN
                  V_INSERT.uti_vfintegra_valor := TRIM('1');
               END IF;  
               
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
             
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
             END;
             
             -- DOCUMENTO NUMERO
             BEGIN     
               V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal2.documento.numero'),'XX',TO_CHAR(V_INDICEDOCFIS));
               
               
               /******************************************************/
               /*******************SE CLIENTE INTERNACIONAL***********/
               /******************************************************/
               IF R_CURSORPESOAFISCAL2.GLB_CLIENTE_NACIONAL = 'I' THEN 
                  V_INSERT.uti_vfintegra_valor := TRIM('00000000000191');
               ELSE
                  V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORPESOAFISCAL2.GLB_CLIENTE_CGCCPFCODIGO); 
               END IF;  
               /******************************************************/
               
               
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
             END;
             
             -- NOME PESSOA FISCAL
             BEGIN     
               V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal2.nome'),'XX',TO_CHAR(V_INDICEDOCFIS));
               V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORPESOAFISCAL2.GLB_CLIENTE_RAZAOSOCIAL);
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
             END;
             
             -- LOGRADOURO
             BEGIN     
               V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal2.endereco.logradouro'),'XX',TO_CHAR(V_INDICEDOCFIS));
               V_INSERT.uti_vfintegra_valor := SUBSTR(TRIM(R_CURSORPESOAFISCAL2.GLB_CLIEND_ENDERECO),1,40);
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
             END;
             
             -- NUMERO
             BEGIN     
               V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal2.endereco.numero'),'XX',TO_CHAR(V_INDICEDOCFIS));
               V_INSERT.uti_vfintegra_valor := TRIM('0');
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
             END;
             
             
             -- bAIRRO
             BEGIN     
               V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal2.endereco.bairro'),'XX',TO_CHAR(V_INDICEDOCFIS));
               V_INSERT.uti_vfintegra_valor := TRIM('BAIRRO');
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
             END;
             
             -- IBGE
             BEGIN     
               V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal2.endereco.cidade.ibge'),'XX',TO_CHAR(V_INDICEDOCFIS));
               V_INSERT.uti_vfintegra_valor := TRIM(PKG_CFE_FRETE.FN_GET_IBGE(R_CURSORPESOAFISCAL2.GLB_LOCALIDADE_CODIGO));
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
             END;
             
             -- CEP
             BEGIN     
               V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal2.endereco.cep'),'XX',TO_CHAR(V_INDICEDOCFIS));
               V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORPESOAFISCAL2.GLB_CEP_CODIGO);
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
             END;
             
           END LOOP;        
                     
       END LOOP;    
       
       /***********************************************************/ 
       
      END IF;  
    
    
    END IF;
    
    /*************************************************************************/
    


    /*************************************************************************/
    /***********************          PARCELAS        ***********************/
    /*************************************************************************/
    
    BEGIN
        -- QUANTIDADE DE PARCELAS
        SELECT COUNT(*)
          INTO V_QTDEPARCELAS                        
          FROM T_CON_CALCVALEFRETE F
         WHERE F.CON_CONHECIMENTO_CODIGO    = V_VFRETE
           AND F.CON_CONHECIMENTO_SERIE     = V_VFSERIE
           AND F.GLB_ROTA_CODIGO            = V_VFROTA
           AND F.CON_VALEFRETE_SAQUE        = V_VFSAQUE
           AND F.CON_CALCVALEFRETE_FLAGPGTO = 'S'
           AND TO_NUMBER(F.CON_CALCVALEFRETE_VALOR) <> '0';
        
        --  ANALISE DOS VALORES DE SAQUE E TRANSFERENCIA
        SELECT COUNT(*)
          INTO V_QTDETRANSFSAQUE                        
          FROM T_CON_CALCVALEFRETE F
         WHERE F.CON_CONHECIMENTO_CODIGO    = V_VFRETE
           AND F.CON_CONHECIMENTO_SERIE     = V_VFSERIE
           AND F.GLB_ROTA_CODIGO            = V_VFROTA
           AND F.CON_VALEFRETE_SAQUE        = V_VFSAQUE
           AND F.CON_CALCVALEFRETE_FLAGPGTO = 'N'
           AND TO_NUMBER(F.CON_CALCVALEFRETE_VALOR) <> '0';
           
         
         
         IF (V_QTDETRANSFSAQUE > 0 ) AND (V_QTDEPARCELAS = 1) THEN
           
            V_QTDEPARCELAS := V_QTDEPARCELAS +1;
            
         END IF;
             
           
    
          -- QUANTIDADE PARCELAS
         BEGIN     
           V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
           V_INSERT.con_freteoper_rota  := P_ROTA;
           V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
           V_INSERT.uti_vfintegra_chave := TRIM('viagem.parcela.qtde');
           V_INSERT.uti_vfintegra_valor := TRIM(TO_CHAR(V_QTDEPARCELAS));
           PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
         EXCEPTION WHEN OTHERS THEN
           V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
           V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
         END;
                                
        
        V_INDICEPARCELAS := 0;
        
        FOR R_PARCELAS IN (SELECT F.CON_CONHECIMENTO_CODIGO,
                                  F.CON_CONHECIMENTO_SERIE,
                                  F.GLB_ROTA_CODIGO,
                                  F.CON_VALEFRETE_SAQUE,
                                  F.CON_CALCVALEFRETE_SEQ,
                                  F.CON_CALCVALEFRETE_TIPO,
                                  DECODE(F.con_calcvalefretetp_codigo,
                                         '01',F.CON_CALCVALEFRETE_VALOR + Fn_Get_VlrTransfSaque(F.con_conhecimento_codigo, F.con_conhecimento_serie, F.glb_rota_codigo, F.con_valefrete_saque),
                                         '20',F.CON_CALCVALEFRETE_VALOR) CON_CALCVALEFRETE_VALOR,
                                  --F.CON_CALCVALEFRETE_VALOR,
                                  F.CON_CALCVALEFRETE_VENCIMENTO,
                                  F.CON_CALCVALEFRETETP_CODIGO,
                                  F.CON_CALCVALEFRETE_TPPESSOA,
                                  TP.CON_CALCVALEFRETETP_CODPAMCARY,
                                  NVL(F.CON_CALCVALEFRETE_FLAGLIB,'N') CON_CALCVALEFRETE_FLAGLIB
                              FROM T_CON_CALCVALEFRETE F,
                                   T_CON_CALCVALEFRETETP TP
                             WHERE F.CON_CONHECIMENTO_CODIGO    = V_VFRETE
                               AND F.CON_CONHECIMENTO_SERIE     = V_VFSERIE
                               AND F.GLB_ROTA_CODIGO            = V_VFROTA
                               AND F.CON_VALEFRETE_SAQUE        = V_VFSAQUE
                               AND F.CON_CALCVALEFRETETP_CODIGO = TP.CON_CALCVALEFRETETP_CODIGO
                               AND F.CON_CALCVALEFRETETP_CODIGO IN ('01','20')
                               AND F.CON_CALCVALEFRETE_FLAGPGTO = 'S'
                               --AND TO_NUMBER(F.CON_CALCVALEFRETE_VALOR) <> 0
                               ORDER BY F.CON_CALCVALEFRETETP_CODIGO)
        LOOP
                
             IF (TO_NUMBER(R_PARCELAS.CON_CALCVALEFRETE_VALOR) <> 0) THEN  
        
               V_INDICEPARCELAS := V_INDICEPARCELAS +1;
              
               -- EFETIVAÇÃO PARCELA
               BEGIN     
                 V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                 V_INSERT.con_freteoper_rota  := P_ROTA;
                 V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                 V_INSERT.uti_vfintegra_chave := REPLACE('viagem.parcelaXX.efetivacao.tipo','XX',TRIM(TO_CHAR(V_INDICEPARCELAS)));
                 V_INSERT.uti_vfintegra_valor := TRIM('1');
                 PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
               EXCEPTION WHEN OTHERS THEN
                 V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                 V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
               END;
                    
               -- VALOR PARCELA
               BEGIN   
               
                 V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                 V_INSERT.con_freteoper_rota  := P_ROTA;
                 V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                 V_INSERT.uti_vfintegra_chave := REPLACE('viagem.parcelaXX.valor','XX',TRIM(TO_CHAR(V_INDICEPARCELAS)));
                 V_INSERT.uti_vfintegra_valor := TRIM(TO_CHAR(R_PARCELAS.CON_CALCVALEFRETE_VALOR,'999999999.00'));
                 
                 PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
               EXCEPTION WHEN OTHERS THEN
                 V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                 V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
               END;
                    
               -- SUBTIPO PARCELA
               BEGIN     
                 V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                 V_INSERT.con_freteoper_rota  := P_ROTA;
                 V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                 V_INSERT.uti_vfintegra_chave := REPLACE('viagem.parcelaXX.subtipo','XX',TRIM(TO_CHAR(V_INDICEPARCELAS)));
                 V_INSERT.uti_vfintegra_valor := TRIM(TO_NUMBER(R_PARCELAS.CON_CALCVALEFRETETP_CODPAMCARY));
                 PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
               EXCEPTION WHEN OTHERS THEN
                 V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                 V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
               END;
                    
               -- PARCELA BASE
               BEGIN     
                 V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                 V_INSERT.con_freteoper_rota  := P_ROTA;
                 V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                 V_INSERT.uti_vfintegra_chave := REPLACE('viagem.parcelaXX.base','XX',TRIM(TO_CHAR(V_INDICEPARCELAS)));
                 V_INSERT.uti_vfintegra_valor := TRIM('N');
                 PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
               EXCEPTION WHEN OTHERS THEN
                 V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                 V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
               END;
                    
               -- STATUS PARCELA
               BEGIN     
                 V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                 V_INSERT.con_freteoper_rota  := P_ROTA;
                 V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                 V_INSERT.uti_vfintegra_chave := REPLACE('viagem.parcelaXX.status.id','XX',TRIM(TO_CHAR(V_INDICEPARCELAS)));
                 
                 IF R_PARCELAS.CON_CALCVALEFRETE_FLAGLIB = 'N' THEN
                    V_INSERT.uti_vfintegra_valor := TRIM('1');
                 ELSIF R_PARCELAS.CON_CALCVALEFRETE_FLAGLIB = 'S' THEN
                    V_INSERT.uti_vfintegra_valor := TRIM('2');
                 END IF;   
                 
                 
                 
                 PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
               EXCEPTION WHEN OTHERS THEN
                 V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                 V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
               END;
                    
               -- DATA PARCELA
               BEGIN     
                 V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                 V_INSERT.con_freteoper_rota  := P_ROTA;
                 V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                 V_INSERT.uti_vfintegra_chave := REPLACE('viagem.parcelaXX.data','XX',TRIM(TO_CHAR(V_INDICEPARCELAS)));
                 V_INSERT.uti_vfintegra_valor := TRIM(R_PARCELAS.CON_CALCVALEFRETE_VENCIMENTO);
                 PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
               EXCEPTION WHEN OTHERS THEN
                 V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                 V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
               END;
                    
               -- FAVORECIDO PARCELA
               BEGIN     
                 V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                 V_INSERT.con_freteoper_rota  := P_ROTA;
                 V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                 V_INSERT.uti_vfintegra_chave := REPLACE('viagem.parcelaXX.favorecido.tipo.id','XX',TRIM(TO_CHAR(V_INDICEPARCELAS)));
                 
                 SELECT DECODE(R_PARCELAS.CON_CALCVALEFRETE_TPPESSOA,'P','1','M','3')
                   INTO V_TIPOVAFORECIDO
                   FROM DUAL;
                 
                 V_INSERT.uti_vfintegra_valor := V_TIPOVAFORECIDO;
                 
                 PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
               EXCEPTION WHEN OTHERS THEN
                 V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                 V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
               END;
                    
               -- NUMERO CLIENTE
               BEGIN     
                 V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                 V_INSERT.con_freteoper_rota  := P_ROTA;
                 V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                 V_INSERT.uti_vfintegra_chave := REPLACE('viagem.parcelaXX.numero.cliente','XX',TRIM(TO_CHAR(V_INDICEPARCELAS)));
                 V_INSERT.uti_vfintegra_valor := TRIM(TO_CHAR(TO_NUMBER(R_PARCELAS.CON_CALCVALEFRETETP_CODIGO)));
                 PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
               EXCEPTION WHEN OTHERS THEN
                 V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                 V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
               END; 
                       
               -- ATUALIZANDO O CODIGO DA PARCELA
               BEGIN
                 
                 UPDATE T_CON_CALCVALEFRETE CAL
                    SET CAL.CON_CALCVALEFRETE_CODPAROPER = V_INDICEPARCELAS
                  WHERE CAL.CON_CONHECIMENTO_CODIGO      = R_PARCELAS.CON_CONHECIMENTO_CODIGO
                    AND CAL.CON_CONHECIMENTO_SERIE       = R_PARCELAS.CON_CONHECIMENTO_SERIE
                    AND CAL.GLB_ROTA_CODIGO              = R_PARCELAS.GLB_ROTA_CODIGO
                    AND CAL.CON_VALEFRETE_SAQUE          = R_PARCELAS.CON_VALEFRETE_SAQUE
                    AND CAL.CON_CALCVALEFRETE_SEQ        = R_PARCELAS.CON_CALCVALEFRETE_SEQ;
                      
               EXCEPTION WHEN OTHERS THEN
                 V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                 V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm; 
               END;  
               
             END IF;
             
        END LOOP;    

    END; 
    
    /*************************************************************************/
    
    
    /*************************************************************************/
    /*********************   INFORMAÇÕES ADICIONAIS  *************************/
    /*************************************************************************/
    
    /*BEGIN
         -- PRAZO DE QUITAÇÃO 
         BEGIN     
           V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
           V_INSERT.con_freteoper_rota  := P_ROTA;
           V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
           V_INSERT.uti_vfintegra_chave := TRIM('viagem.quitacao.prazo');
           V_INSERT.uti_vfintegra_valor := TRIM(TO_CHAR(V_QTDEPARCELAS));
           PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
         EXCEPTION WHEN OTHERS THEN
           V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
           V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
         END;
         
         -- INDICADOR DE QUITAÇÃO
         BEGIN     
           V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
           V_INSERT.con_freteoper_rota  := P_ROTA;
           V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
           V_INSERT.uti_vfintegra_chave := TRIM('viagem.quitacao.indicador');
           V_INSERT.uti_vfintegra_valor := TRIM(TO_CHAR(V_QTDEPARCELAS));
           PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
         EXCEPTION WHEN OTHERS THEN
           V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
           V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
         END;
         
         -- RESALVA
         BEGIN     
           V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
           V_INSERT.con_freteoper_rota  := P_ROTA;
           V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
           V_INSERT.uti_vfintegra_chave := TRIM('viagem.quitacao.entrega.ressalva');
           V_INSERT.uti_vfintegra_valor := TRIM(TO_CHAR(V_QTDEPARCELAS));
           PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
         EXCEPTION WHEN OTHERS THEN
           V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
           V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
         END;
         
         -- CERTIFICAÇÃO
         BEGIN     
           V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
           V_INSERT.con_freteoper_rota  := P_ROTA;
           V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
           V_INSERT.uti_vfintegra_chave := TRIM('viagem.indicador.provedor.certificacao');
           V_INSERT.uti_vfintegra_valor := TRIM(TO_CHAR(V_QTDEPARCELAS));
           PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
         EXCEPTION WHEN OTHERS THEN
           V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
           V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
         END;
         
         -- OBSERVAÇÃO DE COMPROVAÇÃO
         BEGIN     
           V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
           V_INSERT.con_freteoper_rota  := P_ROTA;
           V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
           V_INSERT.uti_vfintegra_chave := TRIM('viagem.comprovacao.observacao');
           V_INSERT.uti_vfintegra_valor := TRIM(TO_CHAR(V_QTDEPARCELAS));
           PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
         EXCEPTION WHEN OTHERS THEN
           V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
           V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
         END;
         
    END;*/
    
    /*************************************************************************/
    
    /*************************************************************************/
    /*********************      VALOR FRETE BRUTO    *************************/
    /*************************************************************************/
    
    BEGIN
        -- BUSCANDO VALOR 
        BEGIN
         SELECT CAL.CON_CALCVALEFRETE_VALOR
           INTO V_VALORFRETEBRUTO
           FROM T_CON_CALCVALEFRETE CAL
          WHERE CAL.CON_CONHECIMENTO_CODIGO    = V_VFRETE
            AND CAL.CON_CONHECIMENTO_SERIE     = V_VFSERIE
            AND CAL.GLB_ROTA_CODIGO            = V_VFROTA
            AND CAL.CON_VALEFRETE_SAQUE        = V_VFSAQUE
            AND CAL.CON_CALCVALEFRETETP_CODIGO = '00';
        
        EXCEPTION WHEN OTHERS THEN
          V_VALORFRETEBRUTO := 0;
        END;  
        
         -- VALOR BRUTO
         BEGIN     
           V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
           V_INSERT.con_freteoper_rota  := P_ROTA;
           V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
           V_INSERT.uti_vfintegra_chave := TRIM('viagem.frete.valor.bruto');
           V_INSERT.uti_vfintegra_valor :=  TRIM(TO_CHAR(V_VALORFRETEBRUTO,'999999999.00'));
           PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
         EXCEPTION WHEN OTHERS THEN
           V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
           V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
         END;
         
    END;
      
    /*************************************************************************/
    
    
    /*************************************************************************/
    /*******************           ITENS DE FRETE               **************/
    /*************************************************************************/
      
      BEGIN
         -- QUANTIDADE DE ITENS DE FRETE
         SELECT COUNT(*)
          INTO V_QTDEITENSFRETE
          FROM T_CON_CALCVALEFRETE F,
               T_CON_CALCVALEFRETETP TP
         WHERE F.CON_CONHECIMENTO_CODIGO   = V_VFRETE
           AND F.CON_CONHECIMENTO_SERIE    = V_VFSERIE
           AND F.GLB_ROTA_CODIGO           = V_VFROTA
           AND F.CON_VALEFRETE_SAQUE       = V_VFSAQUE
           AND F.CON_CALCVALEFRETETP_CODIGO = TP.CON_CALCVALEFRETETP_CODIGO
           AND NVL(F.CON_CALCVALEFRETE_FLAGPGTO,'N') = 'N'
           AND NVL(TO_NUMBER(F.CON_CALCVALEFRETE_VALOR),'0') <> 0
           AND NVL(TP.CON_CALCVALEFRETETP_CODPAMCARY,'00') <> 00;
    
         -- QUANTIDADE DE ITENS DE FRETE
         BEGIN     
           V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
           V_INSERT.con_freteoper_rota  := P_ROTA;
           V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
           V_INSERT.uti_vfintegra_chave := TRIM('viagem.frete.item.qtde');
           V_INSERT.uti_vfintegra_valor := TRIM(TO_CHAR(V_QTDEITENSFRETE));
           PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
         EXCEPTION WHEN OTHERS THEN
           V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
           V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
         END;
                                
        
        V_INDICEITENSFRETE := 0;
        FOR R_ITENSFRETE IN (SELECT F.CON_CONHECIMENTO_CODIGO,
                                    F.CON_CONHECIMENTO_SERIE,
                                    F.GLB_ROTA_CODIGO,
                                    F.CON_VALEFRETE_SAQUE,
                                    F.CON_CALCVALEFRETE_SEQ,
                                    F.CON_CALCVALEFRETE_TIPO,
                                    F.CON_CALCVALEFRETE_VALOR,
                                    F.CON_CALCVALEFRETE_VENCIMENTO,
                                    F.CON_CALCVALEFRETETP_CODIGO,
                                    F.CON_CALCVALEFRETE_TPPESSOA,
                                    TP.CON_CALCVALEFRETETP_CODPAMCARY
                               FROM T_CON_CALCVALEFRETE F,
                                    T_CON_CALCVALEFRETETP TP
                              WHERE F.CON_CONHECIMENTO_CODIGO    = V_VFRETE
                                AND F.CON_CONHECIMENTO_SERIE     = V_VFSERIE
                                AND F.GLB_ROTA_CODIGO            = V_VFROTA
                                AND F.CON_VALEFRETE_SAQUE        = V_VFSAQUE
                                AND F.CON_CALCVALEFRETETP_CODIGO = TP.CON_CALCVALEFRETETP_CODIGO
                                AND F.CON_CALCVALEFRETE_FLAGPGTO = 'N'
                                AND NVL(TO_NUMBER(F.CON_CALCVALEFRETE_VALOR),'0') <> 0
                                AND NVL(TP.CON_CALCVALEFRETETP_CODPAMCARY,'00') <> 00)
        LOOP
            V_INDICEITENSFRETE := V_INDICEITENSFRETE +1;
            
             -- TIPO ITEM DE FRETE
             BEGIN     
               V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := REPLACE('viagem.frete.itemXX.tipo','XX',TRIM(TO_CHAR(V_INDICEITENSFRETE)));
               V_INSERT.uti_vfintegra_valor := TRIM(TO_NUMBER(R_ITENSFRETE.CON_CALCVALEFRETETP_CODPAMCARY));
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
             END;
             
             if (R_ITENSFRETE.CON_CALCVALEFRETETP_CODPAMCARY in ('315','316')) then
                
               -- QTDE DE TARIFAS / SAQUES
               BEGIN     
                 V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                 V_INSERT.con_freteoper_rota  := P_ROTA;
                 V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                 V_INSERT.uti_vfintegra_chave := REPLACE('viagem.frete.itemXX.tarifa.quantidade','XX',TRIM(TO_CHAR(V_INDICEITENSFRETE)));
                 V_INSERT.uti_vfintegra_valor := '4';
                 PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
               EXCEPTION WHEN OTHERS THEN
                 V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                 V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
               END;
             
             
             end if;
               
             
             -- VALOR ITEM DE FRETE
             BEGIN     
               
               V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := REPLACE('viagem.frete.itemXX.valor','XX',TRIM(TO_CHAR(V_INDICEITENSFRETE)));
               V_INSERT.uti_vfintegra_valor := TRIM(TO_CHAR(R_ITENSFRETE.CON_CALCVALEFRETE_VALOR,'999999999.00'));
               
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
             END;
                  
        END LOOP;    

    END; 

      -- QUANTIDADE DE PARCELAS
        SELECT COUNT(*)
          INTO V_EXISTEPARCELASID                      
          FROM T_CON_CALCVALEFRETE F
         WHERE F.CON_CONHECIMENTO_CODIGO    = V_VFRETE
           AND F.CON_CONHECIMENTO_SERIE     = V_VFSERIE
           AND F.GLB_ROTA_CODIGO            = V_VFROTA
           AND F.CON_VALEFRETE_SAQUE        = V_VFSAQUE
           AND F.CON_CALCVALEFRETE_FLAGPGTO = 'S'
           AND TO_NUMBER(NVL(F.CON_CALCVALEFRETE_VALOR,'0')) <> '0'
           AND F.CON_CALCVALEFRETE_CODPAROPER IS NULL;
           
           
           
      IF V_EXISTEPARCELASID > 0 THEN
            
            V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
            V_MESSAGE := 'PARCELAS SEM CODIGO DA GERENCIADORA. ID.: '||P_IDCONSULTA||' - '||P_ROTA;
                                                                   
      END IF;    
           
    /*************************************************************************/
    
    IF NVL(V_STATUS,'OK') <> tdvadm.pkg_glb_common.Status_Erro THEN 
        /************************************************************************/
        /************TABELA DE CIOT QUE VAIR ATUALIZADA DEPOIS*******************/
        /************************************************************************/
        
         BEGIN
          
          INSERT INTO T_CON_VFRETECIOT(CON_CONHECIMENTO_CODIGO,
                                       CON_CONHECIMENTO_SERIE,
                                       GLB_ROTA_CODIGO,
                                       CON_VALEFRETE_SAQUE,
                                       CON_VFRETECIOT_NUMERO,
                                       CON_VFRETECIOT_PROTOCOLO,
                                       CON_FRETEOPER_ID,
                                       CON_FRETEOPER_ROTA,
                                       CON_VFRETECIOT_ID,
                                       CON_VFRETECIOT_IDCLIENTE,
                                       con_vfreteciot_flagimprime,
                                       con_vfreteciot_flagaltera,
                                       con_vfreteciot_flagprocesal )
                                VALUES(V_VFRETE, 
                                       V_VFSERIE,
                                       V_VFROTA,
                                       V_VFSAQUE,
                                       NULL,
                                       NULL,
                                       P_IDCONSULTA,             
                                       P_ROTA,
                                       NULL,
                                       v_InfValeFrete.valefrete_id,
                                       'N',
                                       'N',
                                       'S'); 
                                       
         EXCEPTION WHEN DUP_VAL_ON_INDEX THEN
            V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;  
            V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INSEREFRETE, '||sqlerrm;             
         END;                           
          
        /************************************************************************/  	
         
         OPEN P_CURSOR FOR
           SELECT K.UTI_VFINTEGRA_CHAVE CHAVE,
                  K.UTI_VFINTEGRA_VALOR VALOR
             FROM T_UTI_VFINTEGRA K
             WHERE K.CON_FRETEOPER_ID   = P_IDCONSULTA
               AND K.CON_FRETEOPER_ROTA = P_ROTA 
            ORDER BY K.UTI_VFINTEGRA_SEQ;
           
          DELETE T_UTI_VFINTEGRA D
          WHERE D.CON_FRETEOPER_ID   = P_IDCONSULTA  
            AND D.CON_FRETEOPER_ROTA = P_ROTA;
            
           COMMIT; 
           
          P_STATUS   := tdvadm.pkg_glb_common.Status_Nomal;
          P_MESSAGE := 'Processamento Normal.';
    
    ELSE
      
       P_STATUS   := V_STATUS;   
       P_MESSAGE  := V_MESSAGE;
       
       OPEN P_CURSOR FOR
       SELECT SYSDATE FROM DUAL;
       
       DELETE T_UTI_VFINTEGRA D
        WHERE D.CON_FRETEOPER_ID   = P_IDCONSULTA  
          AND D.CON_FRETEOPER_ROTA = P_ROTA;     
       
       COMMIT; 
           
      RETURN;
      
    END IF;     
    
   EXCEPTION WHEN OTHERS THEN
   
       P_STATUS   := tdvadm.pkg_glb_common.Status_Erro;
       P_MESSAGE  := 'pkg_cfe_frete.sp_get_inserefrete - Erro ao consultar - '||
                     'Provavelmente Vale Frete alterado após a geração de ID - (ID: '||P_IDCONSULTA||', '||
                                                                             'ROTA: '||P_ROTA||', '||
                                                                           'VFRETE: '||V_VFRETE||', '||
                                                                            'SERIE: '||V_VFSERIE||', '||
                                                                           'VFROTA: '||V_VFROTA||', '||
                                                                          'VFSAQUE: '||V_VFSAQUE||', '||
                                                                            'PLACA: '||V_PLACA||', '||
                                                                            'SAQUE: '||V_SAQUE||'). Erro='||SQLERRM;

       -- atualizo o status como IC(inconsistencia) PRA SAIR DA FILA DE PROCESSAMENTO
       UPDATE T_CON_FRETEOPER FF
          SET FF.CFE_STATUSFRETEOPER_STATUS = 'IC',
              FF.CON_FRETEOPER_OBS = P_MESSAGE,
              FF.CON_FRETEOPER_MSGRET = NULL
        WHERE FF.CON_FRETEOPER_ID = P_IDCONSULTA
          AND FF.CON_FRETEOPER_ROTA = P_ROTA
          AND FF.CFE_STATUSFRETEOPER_STATUS != 'OK'
          AND FF.con_freteoper_seq = (select max(FFF.con_freteoper_seq)
                                        from t_con_freteoper FFF
                                       where FFF.con_freteoper_id = ff.con_freteoper_id
                                         and FFF.con_freteoper_rota = ff.con_freteoper_rota);                                            
       commit;
       -------------------------------------------------------------------------------
       
       --INSERT INTO DROPME(X,A,L,B) VALUES (P_MESSAGE,'ErroCriaCiot',NULL,NULL) ;
       
       OPEN P_CURSOR FOR
       SELECT SYSDATE FROM DUAL;
       RETURN;
       
              
       DELETE T_UTI_VFINTEGRA D
        WHERE D.CON_FRETEOPER_ID   = P_IDCONSULTA  
          AND D.CON_FRETEOPER_ROTA = P_ROTA;     
       
       COMMIT;
       
   
   END;    
    
  
  END SP_GET_INSEREFRETE;              
  
  
    /********************************************************/
  /*   PROCEDURE PARA CADASTRAMENTO DE FRETE ELETRONICO   */
  /********************************************************/
  PROCEDURE SP_GET_INSEREVIAGEM(P_QRYSTR       IN  CLOB,
                                P_IDCONSULTA   IN  NUMBER,
                                P_ROTA         IN  CHAR,
                                P_CURSOR       OUT T_CURSOR,
                                P_STATUS       OUT CHAR,
                                P_MESSAGE      OUT VARCHAR2)AS
  V_INSERT          TpRegTxt;
  V_TPFAVOPRECIDO   TpPayParcelFavor;
  V_STATUS          CHAR(1);
  V_MESSAGE         VARCHAR2(200);
  
  V_PROPRIETARIO    T_CAR_PROPRIETARIO.CAR_PROPRIETARIO_CGCCPFCODIGO%TYPE;
    
  V_PROPBANCO       VARCHAR2(20);    
  V_PROPAGENCIA     VARCHAR2(20);
  V_PROPCONTA       VARCHAR2(20); 
  V_PROPTIPOCONTA   VARCHAR2(20);
  V_PROPCARTAO      VARCHAR2(20);  
  
  V_MOTORISTA       T_CAR_CARRETEIRO.CAR_CARRETEIRO_CPFCODIGO%TYPE;
  V_MOTORISTASAQUE  T_CAR_CARRETEIRO.CAR_CARRETEIRO_SAQUE%TYPE;
  V_MOTORISTACARTAO VARCHAR2(20);
  
  V_VALEFRETENUN    T_CON_VALEFRETE.CON_CONHECIMENTO_CODIGO%TYPE;
  V_VALEFRETESERIE  T_CON_VALEFRETE.CON_CONHECIMENTO_SERIE%TYPE;
  V_VALEFRETEROTA   T_CON_VALEFRETE.GLB_ROTA_CODIGO%TYPE;
  V_VALEFRETESAQUE  T_CON_VALEFRETE.CON_CONHECIMENTO_CODIGO%TYPE;
  V_CNPJROTA        T_GLB_ROTA.GLB_ROTA_CGC%TYPE;
  P_QTDEFAVOR       INTEGER;
  V_PLACA           T_CAR_VEICULO.CAR_VEICULO_PLACA%TYPE;
  V_SAQUE           T_CAR_VEICULO.CAR_VEICULO_SAQUE%TYPE;
  V_QTDEPLACA       INTEGER;
  V_INDICEPLACA     INTEGER;
  
  vViagem           T_VGM_VIAGEM.VGM_VIAGEM_CODIGO%TYPE;
  vViagemRota       T_VGM_VIAGEM.GLB_ROTA_CODIGO%TYPE;
  
  vInfViagem        TpInfViagem;
  
  V_IDCARGA         VARCHAR2(1); -- LOTAÇÃO 1 FRACIONADA 2
  V_QTDEDOCREF      INTEGER; 
  V_INDICEDOCFIS    INTEGER;
  V_INDICEPESFIS    INTEGER;
  V_QTDEPARCELAS    INTEGER;
  V_INDICEPARCELAS  INTEGER;
  V_TIPOVAFORECIDO  CHAR(1);
  
  V_EXISTEFAVORPRO     CHAR(1);
  V_EXISTEFAVORMOT     CHAR(1);
  
  V_QTDEITENSFRETE     INTEGER;
  V_INDICEITENSFRETE   INTEGER;
  V_EXISTEPARCELASID   INTEGER;
  V_VALORFRETEBRUTO    T_CON_CALCVALEFRETE.CON_CALCVALEFRETE_VALOR%TYPE;
  V_QryStrAux          T_CON_FRETEOPER.CON_FRETEOPER_PARAMQRYSTR%TYPE;  
  
  V_VIAGEMIDAUX1       VARCHAR2(20);
  V_VIAGEMIDAUX2       VARCHAR2(20);
  vValeFreteTipo       CHAR(2); 
  vCnpjInter           TDVADM.T_GLB_CLIENTE.GLB_CLIENTE_NACIONAL%TYPE;
  vFavorResponsavel    TDVADM.T_CAR_PROPRESP.CAR_PROPRESP_CPFCODIGO%TYPE;
  BEGIN

   BEGIN
   
    /*************************************************************************/
    /*                    ALIMENTANTO VARIAVEIS DE PARAMETROS                */
    /*************************************************************************/
    
     BEGIN
     
       BEGIN
       
       SELECT L.CON_FRETEOPER_PARAMQRYSTR
         INTO V_QryStrAux
         FROM T_CON_FRETEOPER L
         WHERE L.CON_FRETEOPER_ID   = P_IDCONSULTA
           AND L.CON_FRETEOPER_ROTA = P_ROTA 
           AND L.CFE_OPERACOES_COD  = '8';
       
       EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO '||sqlerrm;  
       END;      
       
       V_PROPRIETARIO    := TDVADM.fn_querystring(TDVADM.fn_querystring(V_QryStrAux,'Proprietario','=','*'), 'valor', '=', '|');  
       V_MOTORISTA       := TDVADM.fn_querystring(TDVADM.fn_querystring(V_QryStrAux,'Motorista','=','*'), 'valor', '=', '|');
       V_MOTORISTASAQUE  := TDVADM.fn_querystring(TDVADM.fn_querystring(V_QryStrAux,'MotoristaSaque','=','*'), 'valor', '=', '|');
       V_MOTORISTACARTAO := TDVADM.fn_querystring(TDVADM.fn_querystring(V_QryStrAux,'MotoristaCartao','=','*'), 'valor', '=', '|');
       
       V_PROPBANCO       := TDVADM.fn_querystring(TDVADM.fn_querystring(V_QryStrAux,'PropBanco','=','*'), 'valor', '=', '|');
       V_PROPAGENCIA     := TDVADM.fn_querystring(TDVADM.fn_querystring(V_QryStrAux,'PropAgencia','=','*'), 'valor', '=', '|');
       V_PROPCONTA       := TDVADM.fn_querystring(TDVADM.fn_querystring(V_QryStrAux,'PropConta','=','*'), 'valor', '=', '|');
       V_PROPTIPOCONTA   := TDVADM.fn_querystring(TDVADM.fn_querystring(V_QryStrAux,'PropTipoConta','=','*'), 'valor', '=', '|');
       V_PROPCARTAO      := TDVADM.fn_querystring(TDVADM.fn_querystring(V_QryStrAux,'ProprietarioCartao','=','*'), 'valor', '=', '|'); 
       
       V_PLACA           := TDVADM.fn_querystring(TDVADM.fn_querystring(V_QryStrAux,'Placa','=','*'), 'valor', '=', '|');
       V_SAQUE           := TDVADM.fn_querystring(TDVADM.fn_querystring(V_QryStrAux,'PlacaSaque','=','*'), 'valor', '=', '|');
       
       vViagem            := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QRYSTR,'ViagemNumero','=','*'), 'valor', '=', '|');
       vViagemRota        := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QRYSTR,'ViagemRota','=','*'), 'valor', '=', '|');
         
       vValeFreteTipo    := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QRYSTR,'TpValeFrete','=','*'), 'valor', '=', '|');
       
       -- SE TEM FAVORECIDO PROPRIETARIO / MOTORISTA
       --V_TPFAVOPRECIDO := FN_GET_PAGAMENTOFAVORECIDO(V_VFRETE, V_VFSERIE, V_VFROTA, V_VFSAQUE);
         V_TPFAVOPRECIDO := FN_GET_PAGAMENTOFAVORECIDO2('', '', '', '');
        
     END;
     
    /*************************************************************************/
    
    
    /*************************************************************************/
    /******************             ID VIAGEM TDV       **********************/
    /*************************************************************************/
     
     BEGIN
     SELECT SEQ_CFE_IDVIAGEM.NEXTVAL
       INTO V_VIAGEMIDAUX1
       FROM DUAL;
     END;  
     
    /*************************************************************************/   
     
    /*************************************************************************/
    
    /*************************************************************************/
    /*                    ALIMENTANDO VALORES VIAGEM                         */
    /*************************************************************************/
    
     BEGIN  
     
      SELECT vg.glb_rota_codigo,
             vg.vgm_viagem_codigo,
             vg.vgm_viagem_nuncontra,
             vg.con_freteoper_id,
             vg.con_freteoper_rota,
             vg.vgm_viagem_qtdedocumentos,
             vg.vgm_viagem_qtdeparcelas,
             vg.vgm_viagem_qtdeitensfrete,
             vg.vgm_viagem_dtpartida,
             vg.vgm_viagem_dttermino,
             vg.glb_localidade_codigoorigem,
             vg.glb_localidade_codigodestino,
             vg.vgm_viagem_cargatipo,
             vg.vgm_viagem_naturezacarga,
             vg.vgm_viagem_peso,
             vg.vgm_viagem_valorbruto,
             vg.vgm_viagem_pegadiovalor
        INTO vInfViagem.glb_rota_codigo,
             vInfViagem.vgm_viagem_codigo,
             vInfViagem.vgm_viagem_nuncontra,
             vInfViagem.con_freteoper_id,
             vInfViagem.con_freteoper_rota,
             vInfViagem.vgm_viagem_qtdedocumentos,
             vInfViagem.vgm_viagem_qtdeparcelas,
             vInfViagem.vgm_viagem_qtdeitensfrete,
             vInfViagem.vgm_viagem_dtpartida,
             vInfViagem.vgm_viagem_dttermino,
             vInfViagem.glb_localidade_codigoorigem,
             vInfViagem.glb_localidade_codigodestino,
             vInfViagem.vgm_viagem_cargatipo,
             vInfViagem.vgm_viagem_naturezacarga,
             vInfViagem.vgm_viagem_peso,
             vInfViagem.vgm_viagem_valorbruto,
             vInfViagem.vgm_viagem_pegadiovalor 
   
        FROM T_VGM_VIAGEM VG
        WHERE VG.GLB_ROTA_CODIGO   = vViagemRota
          AND VG.VGM_VIAGEM_CODIGO = vViagem; 
      
        
        -- ALIMENTAR DEPOIS
           V_IDCARGA := NVL(FN_GET_TIPOCARGA('','','','', vValeFreteTipo),1);

    END; 
          
    /*************************************************************************/
    
    /*************************************************************************/
    /***                       INFORMAÇÕES ADICIONAIS                      ***/
    /*************************************************************************/
    
     BEGIN
    /***CNPJ DA ROTA QUE ESTA SOLICITANDO O CADASTRO DO FRETE***/
    SELECT R.GLB_ROTA_CGC INTO V_CNPJROTA FROM T_GLB_ROTA R WHERE R.GLB_ROTA_CODIGO = vViagemRota;
     
    -- EMPRESA
    BEGIN
      
      V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
      V_INSERT.con_freteoper_rota  := P_ROTA;
      V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
      V_INSERT.uti_vfintegra_chave := 'viagem.contratante.documento.numero';
      V_INSERT.uti_vfintegra_valor := TRIM(ContratanteNumero);
      
      PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                                              
    EXCEPTION WHEN OTHERS THEN
      V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
      V_MESSAGE := 'ERRO: '||sqlerrm;             
    END;
        
    -- SE FOR UMA UNIDADE
    IF TRIM(V_CNPJROTA) <> ContratanteNumero THEN
       -- TIPO DOCUMENTO UNIDADE
       BEGIN
         
         V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
         V_INSERT.con_freteoper_rota  := P_ROTA;
         V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
         V_INSERT.uti_vfintegra_chave := 'viagem.unidade.documento.tipo';
         V_INSERT.uti_vfintegra_valor := '88';
         
         PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                                                 
       EXCEPTION WHEN OTHERS THEN
         V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
         V_MESSAGE := 'ERRO: '||sqlerrm;             
       END;
       
       -- NUMERO DOCUMENTO UNIDADE
       BEGIN
         
         V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
         V_INSERT.con_freteoper_rota  := P_ROTA;
         V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
         V_INSERT.uti_vfintegra_chave := 'viagem.unidade.documento.numero';
         V_INSERT.uti_vfintegra_valor := TRIM(P_ROTA);
         
         PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                                                 
       EXCEPTION WHEN OTHERS THEN
         V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
         V_MESSAGE := 'ERRO: '||sqlerrm;             
       END;
    
    END IF;  
    
    -- NUMEROS DO CONTRATO
    BEGIN     
      V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
      V_INSERT.con_freteoper_rota  := P_ROTA;
      V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
      V_INSERT.uti_vfintegra_chave := 'viagem.id.cliente';
      V_INSERT.uti_vfintegra_valor := TRIM(to_char(V_VIAGEMIDAUX1));
      PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
      
      
      V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
      V_INSERT.con_freteoper_rota  := P_ROTA;
      V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
      V_INSERT.uti_vfintegra_chave := 'viagem.contrato.numero';
      V_INSERT.uti_vfintegra_valor := TRIM(vInfViagem.vgm_viagem_nuncontra);
      PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                                              
    EXCEPTION WHEN OTHERS THEN
      V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
      V_MESSAGE := 'ERRO: '||sqlerrm;             
    END;
    
    END;
    
    /*************************************************************************/
    
    
    /*************************************************************************/
    /***                         FAVORECIDOS                               ***/
    /*************************************************************************/
    
     BEGIN
      -- QUANTIDADE DE FAVORECIDOS
      BEGIN
        
        P_QTDEFAVOR := 0;
        
        IF V_TPFAVOPRECIDO.FavorProprietario = 'S' THEN
            P_QTDEFAVOR := P_QTDEFAVOR+1;
        END IF;     
        
        IF V_TPFAVOPRECIDO.FavorMotorista = 'S' THEN
            P_QTDEFAVOR := P_QTDEFAVOR+1;
        END IF; 
        
/*        IF V_TPFAVOPRECIDO.FavorResponsavel = 'S' THEN
            P_QTDEFAVOR := P_QTDEFAVOR+1;
        END IF;*/
        
        /********** SE FOR CARTAO PORTADOR FRETE **********/
        IF SUBSTR(V_MOTORISTACARTAO,1,6) = '441781' THEN  
           V_TPFAVOPRECIDO.FavorMotorista := 'S';
           P_QTDEFAVOR := P_QTDEFAVOR+1; 
        END IF;
        /**************************************************/
        
        
        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'viagem.favorecido.qtde';
        V_INSERT.uti_vfintegra_valor := TRIM(P_QTDEFAVOR);
        
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                                                
      EXCEPTION WHEN OTHERS THEN
        V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
        V_MESSAGE := 'ERRO: '||sqlerrm;             
      END;
          
      -- FAVORECIDO PROPRIETARIO
      FOR R_CURSORF1 IN (SELECT P.CAR_PROPRIETARIO_CGCCPFCODIGO ,
                                P.CAR_PROPRIETARIO_RAZAOSOCIAL  ,
                                P.CAR_PROPRIETARIO_CIDADE       ,
                                P.GLB_ESTADOPROPRIETARIO_CODIGO ,
                                P.CAR_PROPRIETARIO_BAIRRO       ,
                                P.CAR_PROPRIETARIO_ENDERECO     ,
                                P.CAR_PROPRIETARIO_CEP          ,
                                P.CAR_PROPRIETARIO_TELEFONE     ,
                                P.CAR_PROPRIETARIO_CELULAR      ,
                                P.CAR_PROPRIETARIO_DATANASC     ,
                                P.CAR_PROPRIETARIO_RGCODIGO     ,
                                P.GLB_ESTADORG_CODIGO           ,
                                P.CAR_PROPRIETARIO_RNTRC        ,
                                p.car_proprietario_complemento
                           FROM T_CAR_PROPRIETARIO P
                           WHERE P.CAR_PROPRIETARIO_CGCCPFCODIGO = V_PROPRIETARIO
                             AND V_TPFAVOPRECIDO.FavorProprietario = 'S')
      LOOP  
          
          -- TIPO FAVORECIDO
          BEGIN
            
            V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
            V_INSERT.con_freteoper_rota  := P_ROTA;
            V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
            V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.tipo';
            
            -- TIPO CONTRATANTE 
            V_INSERT.uti_vfintegra_valor := '1';
            
            PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                                                    
          EXCEPTION WHEN OTHERS THEN
            V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
            V_MESSAGE := 'ERRO: PKG_CFE_FRETE2.SP_GET_INTEGRACAO, '||sqlerrm;             
          END;
          
          
          -- QUANTIDADE DOCUMENTOS FAVORECIDO
          BEGIN
            
            V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
            V_INSERT.con_freteoper_rota  := P_ROTA;
            V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
            V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.documento.qtde';
            
           
            IF LENGTH(TRIM(R_CURSORF1.CAR_PROPRIETARIO_CGCCPFCODIGO)) = 14 THEN
               V_INSERT.uti_vfintegra_valor := '1';
            ELSIF LENGTH(TRIM(R_CURSORF1.CAR_PROPRIETARIO_CGCCPFCODIGO)) = 11 THEN
               V_INSERT.uti_vfintegra_valor := '1';
            END IF;
            
            PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                                                    
          EXCEPTION WHEN OTHERS THEN
            V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
            V_MESSAGE := 'ERRO: PKG_CFE_FRETE2.SP_GET_INTEGRACAO, '||sqlerrm;             
          END;    
          
          -- DOCUMENTOS
          IF LENGTH(TRIM(R_CURSORF1.CAR_PROPRIETARIO_CGCCPFCODIGO))    = 14 THEN      
             -- DOCUMENTO 1 PJ 
             BEGIN  
                V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                V_INSERT.con_freteoper_rota  := P_ROTA;
                V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.documento1.tipo';
                V_INSERT.uti_vfintegra_valor := '1';
                PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                
                V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                V_INSERT.con_freteoper_rota  := P_ROTA;
                V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.documento1.numero';
                V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORF1.CAR_PROPRIETARIO_CGCCPFCODIGO);
                PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                
             END;
             
             /*-- DOCUMENTO 2 PJ
             BEGIN  
                V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                V_INSERT.con_freteoper_rota  := P_ROTA;
                V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE2.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.documento2.tipo';
                V_INSERT.uti_vfintegra_valor := '5';
                PKG_CFE_FRETE2.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                
                V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                V_INSERT.con_freteoper_rota  := P_ROTA;
                V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE2.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.documento2.numero';
                V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORF1.CAR_PROPRIETARIO_RNTRC);
                PKG_CFE_FRETE2.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
             END;
             */
             
          ELSIF LENGTH(TRIM(R_CURSORF1.CAR_PROPRIETARIO_CGCCPFCODIGO)) = 11 THEN            
             -- DOCUMENTO 1 PF
             BEGIN  
                V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                V_INSERT.con_freteoper_rota  := P_ROTA;
                V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.documento1.tipo';
                V_INSERT.uti_vfintegra_valor := '2';
                PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                
                V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                V_INSERT.con_freteoper_rota  := P_ROTA;
                V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.documento1.numero';
                V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORF1.CAR_PROPRIETARIO_CGCCPFCODIGO);
                --V_INSERT.uti_vfintegra_valor   := '02445500850';
                PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                
                 
                V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                V_INSERT.con_freteoper_rota  := P_ROTA;
                V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.documento1.uf';
                V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORF1.GLB_ESTADOPROPRIETARIO_CODIGO);
                PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                
             END;
             
             /*-- DOCUMENTO 2 PF
             BEGIN  
                V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                V_INSERT.con_freteoper_rota  := P_ROTA;
                V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE2.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.documento2.tipo';
                V_INSERT.uti_vfintegra_valor := '5';
                PKG_CFE_FRETE2.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                
                V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                V_INSERT.con_freteoper_rota  := P_ROTA;
                V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE2.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.documento2.numero';
                V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORF1.CAR_PROPRIETARIO_RNTRC);
                PKG_CFE_FRETE2.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
             END;
             
             -- DOCUMENTO 3 PF
             BEGIN  
                 V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                 V_INSERT.con_freteoper_rota  := P_ROTA;
                 V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE2.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                 V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.documento3.tipo';
                 V_INSERT.uti_vfintegra_valor := '3';
                 PKG_CFE_FRETE2.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                 
                 V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                 V_INSERT.con_freteoper_rota  := P_ROTA;
                 V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE2.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                 V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.documento3.numero';
                 V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORF1.CAR_PROPRIETARIO_RGCODIGO);
                 PKG_CFE_FRETE2.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                 
                 V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                 V_INSERT.con_freteoper_rota  := P_ROTA;
                 V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE2.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                 V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.documento3.uf';
                 V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORF1.GLB_ESTADORG_CODIGO);
                 PKG_CFE_FRETE2.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                 
             END;*/
             
             
             /*
             -- INFORMAÇÕES FAVORECIDO
             BEGIN  
                 
                 -- NOME 
                 V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                 V_INSERT.con_freteoper_rota  := P_ROTA;
                 V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE2.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                 V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.nome';
                 V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORF1.CAR_PROPRIETARIO_RAZAOSOCIAL);
                 --V_INSERT.uti_vfintegra_valor := TRIM('VAIR DESTRO');
                 PKG_CFE_FRETE2.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                 
                 -- DATA NASCIMENTO
                 V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                 V_INSERT.con_freteoper_rota  := P_ROTA;
                 V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE2.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                 V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.data.nascimento';
                 V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORF1.CAR_PROPRIETARIO_DATANASC);
                 
                 PKG_CFE_FRETE2.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                 
                 
                 -- LOGRADOURO
                 V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                 V_INSERT.con_freteoper_rota  := P_ROTA;
                 V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE2.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                 V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.endereco.logradouro';
                 V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORF1.CAR_PROPRIETARIO_ENDERECO);
                 PKG_CFE_FRETE2.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                 
                 -- NUMERO
                 V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                 V_INSERT.con_freteoper_rota  := P_ROTA;
                 V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE2.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                 V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.endereco.numero';
                 V_INSERT.uti_vfintegra_valor := TRIM('0000');
                 PKG_CFE_FRETE2.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                 
                 -- COMPLEMENTO
                 V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                 V_INSERT.con_freteoper_rota  := P_ROTA;
                 V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE2.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                 V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.endereco.complemento';
                 V_INSERT.uti_vfintegra_valor := nvl(TRIM(R_CURSORF1.CAR_PROPRIETARIO_COMPLEMENTO),'complemento');
                 PKG_CFE_FRETE2.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                 
                 -- BAIRRO 
                 V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                 V_INSERT.con_freteoper_rota  := P_ROTA;
                 V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE2.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                 V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.endereco.bairro';
                 V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORF1.CAR_PROPRIETARIO_BAIRRO);
                 PKG_CFE_FRETE2.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                 
                 -- IBGE
                 V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                 V_INSERT.con_freteoper_rota  := P_ROTA;
                 V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE2.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                 V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.endereco.cidade.ibge';
                 V_INSERT.uti_vfintegra_valor := TRIM('3550308');
                 PKG_CFE_FRETE2.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                 
                 -- CEP
                 V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                 V_INSERT.con_freteoper_rota  := P_ROTA;
                 V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE2.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                 V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.endereco.cep';
                 V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORF1.CAR_PROPRIETARIO_CEP);
                 PKG_CFE_FRETE2.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                 
                 -- DDD TELEFONE
                 V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                 V_INSERT.con_freteoper_rota  := P_ROTA;
                 V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE2.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                 V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.telefone.ddd';
                 V_INSERT.uti_vfintegra_valor := TRIM('011');
                 PKG_CFE_FRETE2.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                 
                 -- NUMERO TELEFONE
                 V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                 V_INSERT.con_freteoper_rota  := P_ROTA;
                 V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE2.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                 V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.telefone.numero';
                 V_INSERT.uti_vfintegra_valor := SUBSTR(TRIM(R_CURSORF1.CAR_PROPRIETARIO_TELEFONE),-8);
                 PKG_CFE_FRETE2.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                 
                 -- DDD CELULAR
                 V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                 V_INSERT.con_freteoper_rota  := P_ROTA;
                 V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE2.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                 V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.celular.ddd';
                 V_INSERT.uti_vfintegra_valor := TRIM('011');
                 PKG_CFE_FRETE2.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                 
                 -- NUMERO CELULAR
                 V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                 V_INSERT.con_freteoper_rota  := P_ROTA;
                 V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE2.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                 V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.celular.numero';
                 V_INSERT.uti_vfintegra_valor := SUBSTR(TRIM(R_CURSORF1.CAR_PROPRIETARIO_TELEFONE),-8);
                 PKG_CFE_FRETE2.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                 
                 
                 -- NUMERO CELULAR
                 V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                 V_INSERT.con_freteoper_rota  := P_ROTA;
                 V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE2.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                 V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.email';
                 V_INSERT.uti_vfintegra_valor := trim('tdv.operacao@dellavolpe.com.br');
                 PKG_CFE_FRETE2.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                 
             END;*/
                 
          END IF;
          
          
          /********************       MEIOS DE PAGAMENTO       ******************/
          BEGIN
            
            V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
            V_INSERT.con_freteoper_rota  := P_ROTA;
            V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
            V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.meio.pagamento';
            
            IF (V_PROPCONTA IS NOT NULL) AND (V_PROPCARTAO IS NULL) THEN
               V_INSERT.uti_vfintegra_valor := TRIM('2');
            ELSIF (V_PROPCONTA IS NULL) AND (V_PROPCARTAO IS NOT NULL) THEN
               V_INSERT.uti_vfintegra_valor := TRIM('1');
            END IF;
            PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
            
            
            IF (V_PROPCONTA IS NOT NULL) AND (V_PROPCARTAO IS NULL) THEN             
                -- BANCO
                V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                V_INSERT.con_freteoper_rota  := P_ROTA;
                V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.conta.banco';
                V_INSERT.uti_vfintegra_valor := TRIM(V_PROPBANCO);
                PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                
                -- AGENCIA
                V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                V_INSERT.con_freteoper_rota  := P_ROTA;
                V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.conta.agencia';
                V_INSERT.uti_vfintegra_valor := TRIM(V_PROPAGENCIA);
                PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                
                -- NUMERO CONTA
                V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                V_INSERT.con_freteoper_rota  := P_ROTA;
                V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.conta.numero';
                V_INSERT.uti_vfintegra_valor := TRIM(V_PROPCONTA);
                PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                
                -- TIPO CONTA
                V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                V_INSERT.con_freteoper_rota  := P_ROTA;
                V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.conta.tipo';
                V_INSERT.uti_vfintegra_valor := TRIM(V_PROPTIPOCONTA);
                PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

            ELSIF (V_PROPCONTA IS NULL) AND (V_PROPCARTAO IS NOT NULL) THEN
                 
                -- NUMERO CARTÃO
                V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                V_INSERT.con_freteoper_rota  := P_ROTA;
                V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.cartao.numero';
                V_INSERT.uti_vfintegra_valor := TRIM(V_PROPCARTAO);
                --V_INSERT.uti_vfintegra_valor := '4417810094176014';
                PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

            END IF;
                                 
          EXCEPTION WHEN OTHERS THEN
            V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
            V_MESSAGE := 'ERRO: '||sqlerrm;             
          END;
      
             
      END LOOP;  
          
      -- FAVORECIDO MOTORISTA
      FOR R_CURSORf2 IN (SELECT C.CAR_CARRETEIRO_CPFCODIGO      ,
                                C.CAR_CARRETEIRO_NOME           ,
                                C.CAR_CARRETEIRO_CIDADE         ,
                                C.GLB_ESTADOCARRETEIRO_CODIGO   ,
                                C.CAR_CARRETEIRO_BAIRRO         ,
                                C.CAR_CARRETEIRO_ENDERECO       ,
                                C.CAR_CARRETEIRO_CEP            ,
                                C.CAR_CARRETEIRO_TELEFONE       ,
                                C.CAR_CARRETEIRO_CELULAR        ,
                                C.CAR_CARRETEIRO_DATANASC       ,
                                C.CAR_CARRETEIRO_RGCODIGO       ,
                                C.GLB_ESTADORG_CODIGO           
                           FROM T_CAR_CARRETEIRO C
                           WHERE C.CAR_CARRETEIRO_CPFCODIGO     = V_MOTORISTA
                             AND C.CAR_CARRETEIRO_SAQUE         = V_MOTORISTASAQUE
                             AND V_TPFAVOPRECIDO.FavorMotorista = 'S')
      LOOP  
          
          -- TIPO FAVORECIDO
          BEGIN
            
            V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
            V_INSERT.con_freteoper_rota  := P_ROTA;
            V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
            V_INSERT.uti_vfintegra_chave := 'viagem.favorecido2.tipo';
            
            -- TIPO MOTORISTA
            V_INSERT.uti_vfintegra_valor := '3';
            
            PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                                                    
          EXCEPTION WHEN OTHERS THEN
            V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
            V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
          END;
          
          
          -- QUANTIDADE DOCUMENTOS FAVORECIDO
        BEGIN
          
          V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.favorecido2.documento.qtde';
          
         
          IF LENGTH(TRIM(R_CURSORF2.CAR_CARRETEIRO_CPFCODIGO)) = 11 THEN
             V_INSERT.uti_vfintegra_valor := '1';
          END IF;
          
          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                                                  
        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE2.SP_GET_INTEGRACAO, '||sqlerrm;             
        END;    
          
        IF LENGTH(TRIM(R_CURSORF2.CAR_CARRETEIRO_CPFCODIGO)) = 11 THEN            
             -- DOCUMENTO 1 PF
             BEGIN  
                V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                V_INSERT.con_freteoper_rota  := P_ROTA;
                V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                V_INSERT.uti_vfintegra_chave := 'viagem.favorecido2.documento1.tipo';
                V_INSERT.uti_vfintegra_valor := '2';
                PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                
                V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                V_INSERT.con_freteoper_rota  := P_ROTA;
                V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                V_INSERT.uti_vfintegra_chave := 'viagem.favorecido2.documento1.numero';
                V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORF2.CAR_CARRETEIRO_CPFCODIGO);
                PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                
             END;
             
             
             /*-- DOCUMENTO 2 PF
             BEGIN  
                 V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                 V_INSERT.con_freteoper_rota  := P_ROTA;
                 V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                 V_INSERT.uti_vfintegra_chave := 'viagem.favorecido2.documento3.tipo';
                 V_INSERT.uti_vfintegra_valor := '3';
                 PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                 
                 V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                 V_INSERT.con_freteoper_rota  := P_ROTA;
                 V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                 V_INSERT.uti_vfintegra_chave := 'viagem.favorecido2.documento3.numero';
                 V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORF2.CAR_CARRETEIRO_RGCODIGO);
                 PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                 
                 V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                 V_INSERT.con_freteoper_rota  := P_ROTA;
                 V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                 V_INSERT.uti_vfintegra_chave := 'viagem.favorecido2.documento3.uf';
                 V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORF2.GLB_ESTADORG_CODIGO);
                 PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                 
             END;
             */
                 
        END IF;
          
          
        -- MEIOS DE PAGAMENTO
        BEGIN
          
          V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.favorecido2.meio.pagamento';
          V_INSERT.uti_vfintegra_valor := TRIM('1');
          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                                                  
          V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.favorecido2.cartao.numero';
          V_INSERT.uti_vfintegra_valor := TRIM(V_MOTORISTACARTAO);
          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
          
        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: '||sqlerrm;             
        END;
      
             
      END LOOP;  
      
      -- FAVORECIDO RESPONSAVEL
      FOR R_CURSORf3 IN (SELECT C.CAR_PROPRESP_CPFCODIGO   ,
                                C.CAR_PROPRESP_NOME        ,
                                C.CAR_PROPRESP_CIDADE      ,
                                C.GLB_ESTADORESP_CODIGO    ,
                                C.CAR_PROPRESP_BAIRRO      ,
                                C.CAR_PROPRESP_ENDERECO    ,
                                C.CAR_PROPRESP_CEP         ,
                                C.CAR_PROPRESP_TELEFONE    ,
                                C.CAR_PROPRESP_CELULAR     ,
                                C.CAR_PROPRESP_DATANASC    ,
                                C.CAR_PROPRESP_RGCODIGO     ,
                                C.GLB_ESTADORG_CODIGO       
                           FROM T_CAR_PROPRESP C
                           WHERE C.CAR_PROPRIETARIO_CGCCPFCODIGO  = V_PROPRIETARIO
                             AND V_TPFAVOPRECIDO.FavorResponsavel = 'S')
      LOOP  
          
          -- TIPO FAVORECIDO
          BEGIN
            
            V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
            V_INSERT.con_freteoper_rota  := P_ROTA;
            V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
            V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.tipo';
            
            -- TIPO MOTORISTA
            V_INSERT.uti_vfintegra_valor := '1';
            
            PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                                                    
          EXCEPTION WHEN OTHERS THEN
            V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
            V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
          END;
          
          
          -- QUANTIDADE DOCUMENTOS FAVORECIDO
        BEGIN
          
          V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.documento.qtde';
          
         
          IF LENGTH(TRIM(R_CURSORF3.CAR_PROPRESP_CPFCODIGO)) = 11 THEN
             V_INSERT.uti_vfintegra_valor := '1';
          END IF;
          
          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                                                  
        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE2.SP_GET_INTEGRACAO, '||sqlerrm;             
        END;    
          
        IF LENGTH(TRIM(R_CURSORF3.CAR_PROPRESP_CPFCODIGO)) = 11 THEN            
             -- DOCUMENTO 1 PF
             BEGIN  
                V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                V_INSERT.con_freteoper_rota  := P_ROTA;
                V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.documento1.tipo';
                V_INSERT.uti_vfintegra_valor := '2';
                PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                
                V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                V_INSERT.con_freteoper_rota  := P_ROTA;
                V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.documento1.numero';
                V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORF3.CAR_PROPRESP_CPFCODIGO);
                PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                
             END;
             
             
             /*-- DOCUMENTO 2 PF
             BEGIN  
                 V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                 V_INSERT.con_freteoper_rota  := P_ROTA;
                 V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                 V_INSERT.uti_vfintegra_chave := 'viagem.favorecido2.documento3.tipo';
                 V_INSERT.uti_vfintegra_valor := '3';
                 PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                 
                 V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                 V_INSERT.con_freteoper_rota  := P_ROTA;
                 V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                 V_INSERT.uti_vfintegra_chave := 'viagem.favorecido2.documento3.numero';
                 V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORF2.CAR_CARRETEIRO_RGCODIGO);
                 PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                 
                 V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                 V_INSERT.con_freteoper_rota  := P_ROTA;
                 V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                 V_INSERT.uti_vfintegra_chave := 'viagem.favorecido2.documento3.uf';
                 V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORF2.GLB_ESTADORG_CODIGO);
                 PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                 
             END;
             */
                 
        END IF;
          
          
        -- MEIOS DE PAGAMENTO
        BEGIN
          
          V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.meio.pagamento';
          V_INSERT.uti_vfintegra_valor := TRIM('1');
          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                                                  
          V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.favorecido1.cartao.numero';
          V_INSERT.uti_vfintegra_valor := TRIM(V_PROPCARTAO);
          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
          
        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: '||sqlerrm;             
        END;
      
             
      END LOOP;  
      
      
    END;     
    
    /*************************************************************************/

    /*************************************************************************/
    /***                           VEICULOS                                ***/
    /*************************************************************************/
    
     BEGIN
    -- QUANTIDADE DE VEICULOS
    BEGIN
       
       SELECT COUNT(*)
         INTO V_QTDEPLACA
         FROM V_CFE_VEICULOS K
        WHERE K.CAR_VEICULO_PLACA = V_PLACA
          AND K.CAR_VEICULO_SAQUE = V_SAQUE;
       
       V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
       V_INSERT.con_freteoper_rota  := P_ROTA;
       V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
       V_INSERT.uti_vfintegra_chave := 'viagem.veiculo.qtde';
       V_INSERT.uti_vfintegra_valor := V_QTDEPLACA;
       --V_INSERT.uti_vfintegra_valor := '1';
       PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                                               
     EXCEPTION WHEN OTHERS THEN
       V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
       V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
     END;
     
    --PLACAS  
    V_INDICEPLACA := 0;
    
    FOR C_CURSOR IN (SELECT V.PLACA              ,
                              V.SEQ                ,
                              V.CAR_VEICULO_PLACA  ,
                              V.CAR_VEICULO_SAQUE  ,
                              V.RNTRC 
                            FROM V_CFE_VEICULOS V 
                           WHERE V.CAR_VEICULO_PLACA = V_PLACA 
                             AND V.CAR_VEICULO_SAQUE = V_SAQUE)
    LOOP
        V_INDICEPLACA := V_INDICEPLACA+1;
        
        -- PLACA
        BEGIN
          
          V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := REPLACE('viagem.veiculoXX.placa','XX',TO_CHAR(V_INDICEPLACA));
          V_INSERT.uti_vfintegra_valor := C_CURSOR.PLACA;
          --V_INSERT.uti_vfintegra_valor := 'CNI4503';
          
          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                                                  
        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
        END; 
        
        -- RNTRC
        BEGIN
          
          V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := REPLACE('viagem.veiculoXX.rntrc','XX',TO_CHAR(V_INDICEPLACA));
          V_INSERT.uti_vfintegra_valor := trim(C_CURSOR.RNTRC);
          --V_INSERT.uti_vfintegra_valor := '00169354';
          
          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                                                  
        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
        END; 
        
    END LOOP;
    
   -- CATEGORIA DO VEICULO
   BEGIN
     
     V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
     V_INSERT.con_freteoper_rota  := P_ROTA;
     V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
     V_INSERT.uti_vfintegra_chave := TRIM('viagem.veiculo.categoria');
     
     V_INSERT.uti_vfintegra_valor := NVL(PKG_CFE_FRETE.FN_GET_CATEGORIAVEIC(V_PLACA,V_SAQUE),'6');
     
     PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                    
   EXCEPTION WHEN OTHERS THEN
     V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
     V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
   END; 
        
    
    END;       
    
    /*************************************************************************/
    
    
    /*************************************************************************/
    /***                        INFORMACÕES VIAGEM                         ***/
    /*************************************************************************/
    
     BEGIN
    -- DATA DE INICIO / TERMINO DA VIAGEM
     BEGIN
       
       V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
       V_INSERT.con_freteoper_rota  := P_ROTA;
       V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
       V_INSERT.uti_vfintegra_chave := 'viagem.data.partida';
       V_INSERT.uti_vfintegra_valor := to_char(TRUNC(SYSDATE),'dd/mm/yyyy');
    --   V_INSERT.uti_vfintegra_valor := to_char(v_InfValeFrete.con_valefrete_datacadastro,'dd/mm/yyyy');
       
       PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                      
     EXCEPTION WHEN OTHERS THEN
       V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
       V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
     END; 

     BEGIN
       
       V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
       V_INSERT.con_freteoper_rota  := P_ROTA;
       V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
       V_INSERT.uti_vfintegra_chave := 'viagem.data.termino';
       
       -- COLOCADO con_valefrete_dataprazomax + 7 DIAS
       V_INSERT.uti_vfintegra_valor := TRIM(to_char(vInfViagem.vgm_viagem_dttermino+7,'dd/mm/yyyy'));
       
       PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                      
     EXCEPTION WHEN OTHERS THEN
       V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
       V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
     END; 
    
    
    -- ORIGEM / DESTINO
    
     BEGIN
       
       V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
       V_INSERT.con_freteoper_rota  := P_ROTA;
       V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
       V_INSERT.uti_vfintegra_chave := 'viagem.origem.cidade.ibge';
       V_INSERT.uti_vfintegra_valor := trim(PKG_CFE_FRETE.FN_GET_IBGE(vInfViagem.glb_localidade_codigoorigem));
       
       PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                      
     EXCEPTION WHEN OTHERS THEN
       V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
       V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
     END; 
     
     BEGIN
       
       V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
       V_INSERT.con_freteoper_rota  := P_ROTA;
       V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
       V_INSERT.uti_vfintegra_chave := 'viagem.destino.cidade.ibge';
       V_INSERT.uti_vfintegra_valor := TRIM(PKG_CFE_FRETE.FN_GET_IBGE(vInfViagem.glb_localidade_codigodestino));
       
       PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                      
     EXCEPTION WHEN OTHERS THEN
       V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
       V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
     END; 
     
    /*************************________PEDAGIO_________***********************/
    
    IF NVL(vInfViagem.vgm_viagem_pegadiovalor,0) <> 0 THEN  
       
       BEGIN   
          
          
          -- SOLUCAO ENVIAMOS "5" PANCARD
          V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.pedagio.solucao.id';
          V_INSERT.uti_vfintegra_valor := TRIM('5');     
          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
           
          -- VALOR DO PEDAGIO
          V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.pedagio.valor';
          V_INSERT.uti_vfintegra_valor := TRIM(REPLACE(vInfViagem.vgm_viagem_pegadiovalor,',','.'));     
          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
            
          -- STATUS DO PEDAGIO
          V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.pedagio.status.id';
          V_INSERT.uti_vfintegra_valor := TRIM(2);     
          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
          
          -- RETERIZAR
          V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.pedagio.roteirizar';
          V_INSERT.uti_vfintegra_valor := TRIM('N');     
          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
          
          -- VALOR DO PEDAGIO
          V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.pedagio.obter.praca';
          V_INSERT.uti_vfintegra_valor := TRIM('N');    
          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
            
            
       
          -- UTILIZA SALDO
          V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.pedagio.utiliza.saldo';
          V_INSERT.uti_vfintegra_valor := TRIM('N');     
          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
          
          IF V_PROPCARTAO <>  V_MOTORISTACARTAO THEN
          
          -- CARTAO PEDAGIO
          V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.pedagio.cartao.numero';
          --V_INSERT.uti_vfintegra_valor := '4417810094176014';
          V_INSERT.uti_vfintegra_valor := TRIM(V_MOTORISTACARTAO);     
          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
          
          END IF;
          
       EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
       END; 
    
    END IF;
    
           
     -- IDENTIFICAÇÃO DA CARGA 1 LOTAÇÃO 2 FRACIONADA
     BEGIN
        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'viagem.carga.tipo';
        V_INSERT.uti_vfintegra_valor := TRIM(V_IDCARGA);     
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
        
     EXCEPTION WHEN OTHERS THEN
        V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
        V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
     END;     

     -- NATUREZA DA CARGA
     BEGIN
        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'viagem.carga.natureza';
        
        IF V_IDCARGA = '2' THEN
           V_INSERT.uti_vfintegra_valor := TRIM('0001');     
        ELSE
           V_INSERT.uti_vfintegra_valor := TRIM('8465');
        END IF;  
        --'2621'
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
        
     EXCEPTION WHEN OTHERS THEN
        V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
        V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
     END;     
          
     -- PESO DO CARREGAMENTO
     BEGIN
        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'viagem.carga.peso';
        V_INSERT.uti_vfintegra_valor := TRIM(TO_CHAR(vInfViagem.vgm_viagem_peso*1000,'999999999.00'));
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
        
     EXCEPTION WHEN OTHERS THEN
        V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
        V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
     END;     

    END;
    
    /*************************************************************************/    

    
    /*************************************************************************/
    /***                      DOCUMENTOS DE REFERENCIA                     ***/
    /*************************************************************************/
    
     BEGIN
      
    SELECT COUNT(*)
      INTO V_QTDEDOCREF
      FROM T_VGM_DOCUMENTOS CC
     WHERE CC.GLB_ROTA_CODIGO   = vViagemRota
       AND CC.VGM_VIAGEM_CODIGO = vViagem;
    
    
    IF V_QTDEDOCREF > 0 THEN
       
       -- QUANTIDADES DE DOCUMENTOS
       BEGIN     
         V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
         V_INSERT.con_freteoper_rota  := P_ROTA;
         V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
         V_INSERT.uti_vfintegra_chave := TRIM('viagem.documento.qtde');
         V_INSERT.uti_vfintegra_valor := TRIM(TO_CHAR(V_QTDEDOCREF));
         -- V_INSERT.uti_vfintegra_valor := '3';
         PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
       EXCEPTION WHEN OTHERS THEN
         V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
         V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
       END; 
       
       /***********************************************************/
       /********************    LOOP NOS DOC´S   ******************/
       /***********************************************************/
       V_INDICEDOCFIS := 0;

       FOR R_CURSORDOCS IN ( SELECT CC.GLB_ROTA_CODIGO      ,
                                    CC.VGM_VIAGEM_CODIGO    ,
                                    CC.VGM_DOCUMENTOS_SEQ   ,
                                    CC.VGM_DOCUMENTOS_NUMDOC,
                                    CC.VGM_DOCUMENTOS_SERIE ,
                                    CC.VGM_DOCUMENTOS_FILIAL,
                                    CC.CFE_TIPODOCUVIAG_ID
                               FROM T_VGM_DOCUMENTOS CC
                              WHERE CC.GLB_ROTA_CODIGO   = vViagemRota
                                AND CC.VGM_VIAGEM_CODIGO = vViagem )
       LOOP                         
       
         /***********************************************************/
         /********************    SE FOR CTRC      ******************/
         /***********************************************************/
         IF R_CURSORDOCS.CFE_TIPODOCUVIAG_ID = '5' THEN 
           
             FOR R_CURSORCONHEC IN (SELECT CH.CON_CONHECIMENTO_CODIGO,
                                           CH.CON_CONHECIMENTO_SERIE,
                                           CH.GLB_ROTA_CODIGO,
                                           CH.GLB_CLIENTE_CGCCPFREMETENTE,
                                           CH.GLB_TPCLIEND_CODIGOREMETENTE,
                                           CH.GLB_CLIENTE_CGCCPFDESTINATARIO,
                                           CH.GLB_TPCLIEND_CODIGODESTINATARI,
                                           R.GLB_ROTA_SERIE
                                      FROM T_CON_CONHECIMENTO CH,
                                           T_GLB_ROTA R
                                     WHERE CH.CON_CONHECIMENTO_CODIGO = R_CURSORDOCS.VGM_DOCUMENTOS_NUMDOC 
                                       AND CH.CON_CONHECIMENTO_SERIE  = R_CURSORDOCS.VGM_DOCUMENTOS_SERIE
                                       AND CH.GLB_ROTA_CODIGO         = R_CURSORDOCS.VGM_DOCUMENTOS_FILIAL
                                       AND CH.GLB_ROTA_CODIGO         = R.GLB_ROTA_CODIGO) 
             LOOP
                 -- INDICE DO DOC FISCAL
                 V_INDICEDOCFIS := V_INDICEDOCFIS+1;
                 
                 -- TIPO DO DOCUMENTO
                 BEGIN     
                   V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                   V_INSERT.con_freteoper_rota  := P_ROTA;
                   V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                   V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.tipo'),'XX',TO_CHAR(V_INDICEDOCFIS));
                   V_INSERT.uti_vfintegra_valor := TRIM('5');
                   PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
                 EXCEPTION WHEN OTHERS THEN
                   V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                   V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
                 END; 
                 
                 -- NUMERO DO DOCUMENTO
                 BEGIN     
                   V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                   V_INSERT.con_freteoper_rota  := P_ROTA;
                   V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                   V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.numero'),'XX',TO_CHAR(V_INDICEDOCFIS));
                   V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORCONHEC.CON_CONHECIMENTO_CODIGO);
                   PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
                 EXCEPTION WHEN OTHERS THEN
                   V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                   V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
                 END; 
                 
                 -- SERIE DO DOCUMENTO
                 BEGIN     
                   V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                   V_INSERT.con_freteoper_rota  := P_ROTA;
                   V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                   V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.serie'),'XX',TO_CHAR(V_INDICEDOCFIS));
                   V_INSERT.uti_vfintegra_valor := NVL(TRIM(R_CURSORCONHEC.GLB_ROTA_SERIE),'U');
                   PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
                 EXCEPTION WHEN OTHERS THEN
                   V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                   V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
                 END; 
                 
                 -- QUANTIDADES DE DOCUMENTOS
                 BEGIN     
                   V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                   V_INSERT.con_freteoper_rota  := P_ROTA;
                   V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                   V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.quantidade'),'XX',TO_CHAR(V_INDICEDOCFIS));
                   V_INSERT.uti_vfintegra_valor := TRIM('1');
                   PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
                 EXCEPTION WHEN OTHERS THEN
                   V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                   V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
                 END; 
                             
                 -- QUANTIDADE DE PESSOAS FISCAIS
                 BEGIN     
                   V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                   V_INSERT.con_freteoper_rota  := P_ROTA;
                   V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                   V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal.qtde'),'XX',TO_CHAR(V_INDICEDOCFIS));
                   V_INSERT.uti_vfintegra_valor := TRIM('2');
                   PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
                 EXCEPTION WHEN OTHERS THEN
                   V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                   V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
                 END; 
                 
                 -- PESSOA FISCAL 1 REMETENTE
                 FOR R_CURSORPESOAFISCAL1 IN (SELECT C.GLB_CLIENTE_CGCCPFCODIGO,
                                                     C.GLB_CLIENTE_RAZAOSOCIAL,
                                                     CD.GLB_CLIEND_ENDERECO,
                                                     CD.GLB_CLIEND_COMPLEMENTO,
                                                     CD.GLB_CEP_CODIGO,
                                                     CD.GLB_LOCALIDADE_CODIGO
                                                FROM T_GLB_CLIEND CD,
                                                     T_GLB_CLIENTE C
                                               WHERE CD.GLB_CLIENTE_CGCCPFCODIGO = R_CURSORCONHEC.GLB_CLIENTE_CGCCPFREMETENTE
                                                 AND CD.GLB_TPCLIEND_CODIGO      = R_CURSORCONHEC.GLB_TPCLIEND_CODIGOREMETENTE
                                                 AND CD.GLB_CLIENTE_CGCCPFCODIGO = C.GLB_CLIENTE_CGCCPFCODIGO)
                 LOOP
                   -- TIPO PESSOA FISCAL
                   BEGIN     
                     V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                     V_INSERT.con_freteoper_rota  := P_ROTA;
                     V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                     V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal1.tipo'),'XX',TO_CHAR(V_INDICEDOCFIS));
                     V_INSERT.uti_vfintegra_valor := TRIM('1');
                     PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
                   EXCEPTION WHEN OTHERS THEN
                     V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                     V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
                   END; 
                   
                   -- DOCUMENTO TIPO
                   BEGIN     
                     V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                     V_INSERT.con_freteoper_rota  := P_ROTA;
                     V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                     V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal1.documento.tipo'),'XX',TO_CHAR(V_INDICEDOCFIS));
                     
                     -- FISICA OU JURIDICA
                     IF LENGTH(TRIM(R_CURSORPESOAFISCAL1.GLB_CLIENTE_CGCCPFCODIGO)) = 11 THEN
                        V_INSERT.uti_vfintegra_valor := TRIM('2');
                     ELSIF LENGTH(TRIM(R_CURSORPESOAFISCAL1.GLB_CLIENTE_CGCCPFCODIGO)) = 14 THEN
                        V_INSERT.uti_vfintegra_valor := TRIM('1');
                     END IF;  
                     
                     PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
                   
                   EXCEPTION WHEN OTHERS THEN
                     V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                     V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
                   END;
                   
                   /*************************************************************************/
                   /*********************SE CLIENTE INTERNACIONAL****************************/
                   /*************************************************************************/
                   
                   BEGIN
                     SELECT NVL(CL.GLB_CLIENTE_NACIONAL,'N')
                       INTO vCnpjInter
                       FROM T_GLB_CLIENTE CL
                      WHERE CL.GLB_CLIENTE_CGCCPFCODIGO = R_CURSORPESOAFISCAL1.GLB_CLIENTE_CGCCPFCODIGO; 
                   EXCEPTION WHEN OTHERS THEN
                    vCnpjInter := 'N';
                   END;   
                   
                   /*************************************************************************/
                   -- DOCUMENTO NUMERO
                   BEGIN     
                     V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                     V_INSERT.con_freteoper_rota  := P_ROTA;
                     V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                     V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal1.documento.numero'),'XX',TO_CHAR(V_INDICEDOCFIS));
                     
                     /**********************************************************************/
                     /**************************INFORMO UM CNPJ COM DV VALIDO***************/
                     /**********************************************************************/
                     
                     IF vCnpjInter = 'I' THEN 
                        V_INSERT.uti_vfintegra_valor := TRIM('00000000000191');
                     ELSE
                        V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORPESOAFISCAL1.GLB_CLIENTE_CGCCPFCODIGO); 
                     END IF;  
                     
                     vCnpjInter := NULL;
                     
                     /**********************************************************************/
                     
                     PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
                   EXCEPTION WHEN OTHERS THEN
                     V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                     V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
                   END;
                   
                   -- NOME PESSOA FISCAL
                   BEGIN     
                     V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                     V_INSERT.con_freteoper_rota  := P_ROTA;
                     V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                     V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal1.nome'),'XX',TO_CHAR(V_INDICEDOCFIS));
                     V_INSERT.uti_vfintegra_valor := SUBSTR(TRIM(R_CURSORPESOAFISCAL1.GLB_CLIENTE_RAZAOSOCIAL),1,40);
                     PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
                   EXCEPTION WHEN OTHERS THEN
                     V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                     V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
                   END;
                   
                   -- LOGRADOURO
                   BEGIN     
                     V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                     V_INSERT.con_freteoper_rota  := P_ROTA;
                     V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                     V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal1.endereco.logradouro'),'XX',TO_CHAR(V_INDICEDOCFIS));
                     V_INSERT.uti_vfintegra_valor := SUBSTR(TRIM(R_CURSORPESOAFISCAL1.GLB_CLIEND_ENDERECO),1,40);
                     PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
                   EXCEPTION WHEN OTHERS THEN
                     V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                     V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
                   END;
                   
                   -- NUMERO
                   BEGIN     
                     V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                     V_INSERT.con_freteoper_rota  := P_ROTA;
                     V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                     V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal1.endereco.numero'),'XX',TO_CHAR(V_INDICEDOCFIS));
                     V_INSERT.uti_vfintegra_valor := TRIM('0');
                     PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
                   EXCEPTION WHEN OTHERS THEN
                     V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                     V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
                   END;
                   
                   
                   -- bAIRRO
                   BEGIN     
                     V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                     V_INSERT.con_freteoper_rota  := P_ROTA;
                     V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                     V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal1.endereco.bairro'),'XX',TO_CHAR(V_INDICEDOCFIS));
                     V_INSERT.uti_vfintegra_valor := TRIM('BAIRRO');
                     PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
                   EXCEPTION WHEN OTHERS THEN
                     V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                     V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
                   END;
                   
                   -- IBGE
                   BEGIN     
                     V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                     V_INSERT.con_freteoper_rota  := P_ROTA;
                     V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                     V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal1.endereco.cidade.ibge'),'XX',TO_CHAR(V_INDICEDOCFIS));
                     V_INSERT.uti_vfintegra_valor := TRIM(PKG_CFE_FRETE.FN_GET_IBGE(R_CURSORPESOAFISCAL1.GLB_LOCALIDADE_CODIGO));
                     PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
                   EXCEPTION WHEN OTHERS THEN
                     V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                     V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
                   END;
                   
                   -- CEP
                   BEGIN     
                     V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                     V_INSERT.con_freteoper_rota  := P_ROTA;
                     V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                     V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal1.endereco.cep'),'XX',TO_CHAR(V_INDICEDOCFIS));
                     V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORPESOAFISCAL1.GLB_CEP_CODIGO);
                     PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
                   EXCEPTION WHEN OTHERS THEN
                     V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                     V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
                   END;
                   
                 END LOOP;
                 
                 -- PESSOA FISCAL 2 DESTINATÁRIO
                 FOR R_CURSORPESOAFISCAL2 IN (SELECT C.GLB_CLIENTE_CGCCPFCODIGO,
                                                     C.GLB_CLIENTE_RAZAOSOCIAL,
                                                     CD.GLB_CLIEND_ENDERECO,
                                                     CD.GLB_CLIEND_COMPLEMENTO,
                                                     CD.GLB_CEP_CODIGO,
                                                     CD.GLB_LOCALIDADE_CODIGO
                                                FROM T_GLB_CLIEND CD,
                                                     T_GLB_CLIENTE C
                                               WHERE CD.GLB_CLIENTE_CGCCPFCODIGO = R_CURSORCONHEC.GLB_CLIENTE_CGCCPFDESTINATARIO
                                                 AND CD.GLB_TPCLIEND_CODIGO      = R_CURSORCONHEC.GLB_TPCLIEND_CODIGODESTINATARI
                                                 AND CD.GLB_CLIENTE_CGCCPFCODIGO = C.GLB_CLIENTE_CGCCPFCODIGO)
                 LOOP
                   
                    -- TIPO PESSOA FISCAL
                   BEGIN     
                     V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                     V_INSERT.con_freteoper_rota  := P_ROTA;
                     V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                     V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal2.tipo'),'XX',TO_CHAR(V_INDICEDOCFIS));
                     V_INSERT.uti_vfintegra_valor := TRIM('2');
                     PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
                   EXCEPTION WHEN OTHERS THEN
                     V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                     V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
                   END; 
                   
                   -- DOCUMENTO TIPO
                   BEGIN     
                     V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                     V_INSERT.con_freteoper_rota  := P_ROTA;
                     V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                     V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal2.documento.tipo'),'XX',TO_CHAR(V_INDICEDOCFIS));
                     
                     -- FISICA OU JURIDICA
                     IF LENGTH(TRIM(R_CURSORPESOAFISCAL2.GLB_CLIENTE_CGCCPFCODIGO)) = 11 THEN
                        V_INSERT.uti_vfintegra_valor := TRIM('2');
                     ELSIF LENGTH(TRIM(R_CURSORPESOAFISCAL2.GLB_CLIENTE_CGCCPFCODIGO)) = 14 THEN
                        V_INSERT.uti_vfintegra_valor := TRIM('1');
                     END IF;  
                     
                     PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
                   
                   EXCEPTION WHEN OTHERS THEN
                     V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                     V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
                   END;
                   
                   
                   /*************************************************************************/
                   /*********************SE CLIENTE INTERNACIONAL****************************/
                   /*************************************************************************/
                   
                   BEGIN
                     SELECT NVL(CL.GLB_CLIENTE_NACIONAL,'N')
                       INTO vCnpjInter
                       FROM T_GLB_CLIENTE CL
                      WHERE CL.GLB_CLIENTE_CGCCPFCODIGO = R_CURSORPESOAFISCAL2.GLB_CLIENTE_CGCCPFCODIGO; 
                   EXCEPTION WHEN OTHERS THEN
                   vCnpjInter := 'N';
                   END;   
                   
                   /*************************************************************************/

                   
                   
                   
                   -- DOCUMENTO NUMERO
                   BEGIN     
                     V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                     V_INSERT.con_freteoper_rota  := P_ROTA;
                     V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                     V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal2.documento.numero'),'XX',TO_CHAR(V_INDICEDOCFIS));
                     
                     
                     /**********************************************************************/
                     /**************************INFORMO UM CNPJ COM DV VALIDO***************/
                     /**********************************************************************/
                     
                     IF vCnpjInter = 'I' THEN 
                        V_INSERT.uti_vfintegra_valor := TRIM('00000000000191');
                     ELSE
                        V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORPESOAFISCAL2.GLB_CLIENTE_CGCCPFCODIGO); 
                     END IF;  
                     
                     vCnpjInter := NULL;
                     
                     /**********************************************************************/
                     
                     PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
                   EXCEPTION WHEN OTHERS THEN
                     V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                     V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
                   END;
                   
                   -- NOME PESSOA FISCAL
                   BEGIN     
                     V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                     V_INSERT.con_freteoper_rota  := P_ROTA;
                     V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                     V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal2.nome'),'XX',TO_CHAR(V_INDICEDOCFIS));
                     V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORPESOAFISCAL2.GLB_CLIENTE_RAZAOSOCIAL);
                     PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
                   EXCEPTION WHEN OTHERS THEN
                     V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                     V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
                   END;
                   
                   -- LOGRADOURO
                   BEGIN     
                     V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                     V_INSERT.con_freteoper_rota  := P_ROTA;
                     V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                     V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal2.endereco.logradouro'),'XX',TO_CHAR(V_INDICEDOCFIS));
                     V_INSERT.uti_vfintegra_valor := SUBSTR(TRIM(R_CURSORPESOAFISCAL2.GLB_CLIEND_ENDERECO),1,40);
                     PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
                   EXCEPTION WHEN OTHERS THEN
                     V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                     V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
                   END;
                   
                   -- NUMERO
                   BEGIN     
                     V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                     V_INSERT.con_freteoper_rota  := P_ROTA;
                     V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                     V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal2.endereco.numero'),'XX',TO_CHAR(V_INDICEDOCFIS));
                     V_INSERT.uti_vfintegra_valor := TRIM('0');
                     PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
                   EXCEPTION WHEN OTHERS THEN
                     V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                     V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
                   END;
                   
                   
                   -- bAIRRO
                   BEGIN     
                     V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                     V_INSERT.con_freteoper_rota  := P_ROTA;
                     V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                     V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal2.endereco.bairro'),'XX',TO_CHAR(V_INDICEDOCFIS));
                     V_INSERT.uti_vfintegra_valor := TRIM('BAIRRO');
                     PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
                   EXCEPTION WHEN OTHERS THEN
                     V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                     V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
                   END;
                   
                   -- IBGE
                   BEGIN     
                     V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                     V_INSERT.con_freteoper_rota  := P_ROTA;
                     V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                     V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal2.endereco.cidade.ibge'),'XX',TO_CHAR(V_INDICEDOCFIS));
                     V_INSERT.uti_vfintegra_valor := TRIM(PKG_CFE_FRETE.FN_GET_IBGE(R_CURSORPESOAFISCAL2.GLB_LOCALIDADE_CODIGO));
                     PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
                   EXCEPTION WHEN OTHERS THEN
                     V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                     V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
                   END;
                   
                   -- CEP
                   BEGIN     
                     V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                     V_INSERT.con_freteoper_rota  := P_ROTA;
                     V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                     V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal2.endereco.cep'),'XX',TO_CHAR(V_INDICEDOCFIS));
                     V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORPESOAFISCAL2.GLB_CEP_CODIGO);
                     PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
                   EXCEPTION WHEN OTHERS THEN
                     V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                     V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
                   END;
                   
                 END LOOP;
                                                         
             END LOOP;
         
         /***********************************************************/
         /****************    SE FOR ORDEM DE COLETA  ***************/
         /***********************************************************/         
         ELSIF R_CURSORDOCS.CFE_TIPODOCUVIAG_ID = '11' THEN 
             
             FOR R_COLETA IN (SELECT AC.ARM_COLETA_NCOMPRA,
                                     AC.ARM_ARMAZEM_CODIGO,
                                     AC.GLB_CLIENTE_CGCCPFCODIGOENTREG,
                                     AC.GLB_TPCLIEND_CODIGOENTREGA,
                                     AC.GLB_CLIENTE_CGCCPFCODIGOCOLETA,
                                     AC.GLB_TPCLIEND_CODIGOCOLETA
                            FROM T_ARM_COLETA AC
                             WHERE AC.ARM_COLETA_NCOMPRA = R_CURSORDOCS.VGM_DOCUMENTOS_NUMDOC
                               AND NVL(AC.ARM_COLETA_CICLO,0)   = NVL(R_CURSORDOCS.VGM_DOCUMENTOS_SERIE,0)
                               AND AC.ARM_ARMAZEM_CODIGO = R_CURSORDOCS.VGM_DOCUMENTOS_FILIAL 
                          ORDER BY AC.ARM_COLETA_NCOMPRA)
             LOOP
                
                V_INDICEDOCFIS := V_INDICEDOCFIS + 1;
                
                 -- TIPO DO DOCUMENTO
                 BEGIN     
                   V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                   V_INSERT.con_freteoper_rota  := P_ROTA;
                   V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                   V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.tipo'),'XX',TO_CHAR(V_INDICEDOCFIS));
                   V_INSERT.uti_vfintegra_valor := TRIM('11');
                   PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
                 EXCEPTION WHEN OTHERS THEN
                   V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                   V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
                 END;            
                 
                 -- NUMERO DO DOCUMENTO
                 BEGIN     
                   V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                   V_INSERT.con_freteoper_rota  := P_ROTA;
                   V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                   V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.numero'),'XX',TO_CHAR(V_INDICEDOCFIS));
                   V_INSERT.uti_vfintegra_valor := TRIM(R_COLETA.ARM_COLETA_NCOMPRA);
                   PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
                 EXCEPTION WHEN OTHERS THEN
                   V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                   V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
                 END; 
                 
                 -- SERIE DO DOCUMENTO
                 BEGIN     
                   V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                   V_INSERT.con_freteoper_rota  := P_ROTA;
                   V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                   V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.serie'),'XX',TO_CHAR(V_INDICEDOCFIS));
                   V_INSERT.uti_vfintegra_valor := NVL(TRIM(R_COLETA.ARM_ARMAZEM_CODIGO),'U');
                   PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
                 EXCEPTION WHEN OTHERS THEN
                   V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                   V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
                 END;     
                 
                 -- QUANTIDADES DE DOCUMENTOS
                 BEGIN     
                   V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                   V_INSERT.con_freteoper_rota  := P_ROTA;
                   V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                   V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.quantidade'),'XX',TO_CHAR(V_INDICEDOCFIS));
                   V_INSERT.uti_vfintegra_valor := TRIM('1');
                   PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
                 EXCEPTION WHEN OTHERS THEN
                   V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                   V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
                 END; 
                 
                 -- QUANTIDADE DE PESSOAS FISCAIS
                 BEGIN     
                   V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                   V_INSERT.con_freteoper_rota  := P_ROTA;
                   V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                   V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal.qtde'),'XX',TO_CHAR(V_INDICEDOCFIS));
                   V_INSERT.uti_vfintegra_valor := TRIM('2');
                   PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
                 EXCEPTION WHEN OTHERS THEN
                   V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                   V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
                 END;
                 
                 -- PESSOA FISCAL 1 REMETENTE
                 FOR R_CURSORPESOAFISCAL1 IN (SELECT C.GLB_CLIENTE_CGCCPFCODIGO,
                                                     C.GLB_CLIENTE_RAZAOSOCIAL,
                                                     CD.GLB_CLIEND_ENDERECO,
                                                     CD.GLB_CLIEND_COMPLEMENTO,
                                                     CD.GLB_CEP_CODIGO,
                                                     CD.GLB_LOCALIDADE_CODIGO,
                                                     NVL(C.GLB_CLIENTE_NACIONAL,'N') GLB_CLIENTE_NACIONAL
                                                FROM T_GLB_CLIEND CD,
                                                     T_GLB_CLIENTE C
                                               WHERE CD.GLB_CLIENTE_CGCCPFCODIGO = R_COLETA.GLB_CLIENTE_CGCCPFCODIGOCOLETA
                                                 AND CD.GLB_TPCLIEND_CODIGO      = R_COLETA.GLB_TPCLIEND_CODIGOCOLETA
                                                 AND CD.GLB_CLIENTE_CGCCPFCODIGO = C.GLB_CLIENTE_CGCCPFCODIGO)
                 LOOP
                   -- TIPO PESSOA FISCAL
                   BEGIN     
                     V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                     V_INSERT.con_freteoper_rota  := P_ROTA;
                     V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                     V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal1.tipo'),'XX',TO_CHAR(V_INDICEDOCFIS));
                     V_INSERT.uti_vfintegra_valor := TRIM('1');
                     PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
                   EXCEPTION WHEN OTHERS THEN
                     V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                     V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
                   END; 
                   
                   -- DOCUMENTO TIPO
                   BEGIN     
                     V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                     V_INSERT.con_freteoper_rota  := P_ROTA;
                     V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                     V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal1.documento.tipo'),'XX',TO_CHAR(V_INDICEDOCFIS));
                     
                     -- FISICA OU JURIDICA
                     IF LENGTH(TRIM(R_CURSORPESOAFISCAL1.GLB_CLIENTE_CGCCPFCODIGO)) = 11 THEN
                        V_INSERT.uti_vfintegra_valor := TRIM('2');
                     ELSIF LENGTH(TRIM(R_CURSORPESOAFISCAL1.GLB_CLIENTE_CGCCPFCODIGO)) = 14 THEN
                        V_INSERT.uti_vfintegra_valor := TRIM('1');
                     END IF;  
                     
                     PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
                   
                   EXCEPTION WHEN OTHERS THEN
                     V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                     V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
                   END;
                   
                   -- DOCUMENTO NUMERO
                   BEGIN     
                     V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                     V_INSERT.con_freteoper_rota  := P_ROTA;
                     V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                     V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal1.documento.numero'),'XX',TO_CHAR(V_INDICEDOCFIS));
                     
                     
                     /******************************************************/
                     /*******************SE CLIENTE INTERNACIONAL***********/
                     /******************************************************/
                     IF R_CURSORPESOAFISCAL1.GLB_CLIENTE_NACIONAL = 'I' THEN 
                        V_INSERT.uti_vfintegra_valor := TRIM('00000000000191');
                     ELSE
                        V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORPESOAFISCAL1.GLB_CLIENTE_CGCCPFCODIGO); 
                     END IF;  
                     /******************************************************/
                           
                     
                     
                     PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
                   EXCEPTION WHEN OTHERS THEN
                     V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                     V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
                   END;
                   
                   -- NOME PESSOA FISCAL
                   BEGIN     
                     V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                     V_INSERT.con_freteoper_rota  := P_ROTA;
                     V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                     V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal1.nome'),'XX',TO_CHAR(V_INDICEDOCFIS));
                     V_INSERT.uti_vfintegra_valor := SUBSTR(TRIM(R_CURSORPESOAFISCAL1.GLB_CLIENTE_RAZAOSOCIAL),1,40);
                     PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
                   EXCEPTION WHEN OTHERS THEN
                     V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                     V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
                   END;
                   
                   -- LOGRADOURO
                   BEGIN     
                     V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                     V_INSERT.con_freteoper_rota  := P_ROTA;
                     V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                     V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal1.endereco.logradouro'),'XX',TO_CHAR(V_INDICEDOCFIS));
                     V_INSERT.uti_vfintegra_valor := SUBSTR(TRIM(R_CURSORPESOAFISCAL1.GLB_CLIEND_ENDERECO),1,40);
                     PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
                   EXCEPTION WHEN OTHERS THEN
                     V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                     V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
                   END;
                   
                   -- NUMERO
                   BEGIN     
                     V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                     V_INSERT.con_freteoper_rota  := P_ROTA;
                     V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                     V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal1.endereco.numero'),'XX',TO_CHAR(V_INDICEDOCFIS));
                     V_INSERT.uti_vfintegra_valor := TRIM('0');
                     PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
                   EXCEPTION WHEN OTHERS THEN
                     V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                     V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
                   END;
                   
                   
                   -- bAIRRO
                   BEGIN     
                     V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                     V_INSERT.con_freteoper_rota  := P_ROTA;
                     V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                     V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal1.endereco.bairro'),'XX',TO_CHAR(V_INDICEDOCFIS));
                     V_INSERT.uti_vfintegra_valor := TRIM('BAIRRO');
                     PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
                   EXCEPTION WHEN OTHERS THEN
                     V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                     V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
                   END;
                   
                   -- IBGE
                   BEGIN     
                     V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                     V_INSERT.con_freteoper_rota  := P_ROTA;
                     V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                     V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal1.endereco.cidade.ibge'),'XX',TO_CHAR(V_INDICEDOCFIS));
                     V_INSERT.uti_vfintegra_valor := TRIM(PKG_CFE_FRETE.FN_GET_IBGE(R_CURSORPESOAFISCAL1.GLB_LOCALIDADE_CODIGO));
                     PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
                   EXCEPTION WHEN OTHERS THEN
                     V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                     V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
                   END;
                   
                   -- CEP
                   BEGIN     
                     V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                     V_INSERT.con_freteoper_rota  := P_ROTA;
                     V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                     V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal1.endereco.cep'),'XX',TO_CHAR(V_INDICEDOCFIS));
                     V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORPESOAFISCAL1.GLB_CEP_CODIGO);
                     PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
                   EXCEPTION WHEN OTHERS THEN
                     V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                     V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
                   END;
                   
                 END LOOP;
                 
                 -- PESSOA FISCAL 2 DESTINATÁRIO
                 FOR R_CURSORPESOAFISCAL2 IN (SELECT C.GLB_CLIENTE_CGCCPFCODIGO,
                                                     C.GLB_CLIENTE_RAZAOSOCIAL,
                                                     CD.GLB_CLIEND_ENDERECO,
                                                     CD.GLB_CLIEND_COMPLEMENTO,
                                                     CD.GLB_CEP_CODIGO,
                                                     CD.GLB_LOCALIDADE_CODIGO,
                                                     NVL(C.GLB_CLIENTE_NACIONAL,'N') GLB_CLIENTE_NACIONAL
                                                FROM T_GLB_CLIEND CD,
                                                     T_GLB_CLIENTE C
                                               WHERE CD.GLB_CLIENTE_CGCCPFCODIGO = R_COLETA.GLB_CLIENTE_CGCCPFCODIGOENTREG
                                                 AND CD.GLB_TPCLIEND_CODIGO      = R_COLETA.GLB_TPCLIEND_CODIGOENTREGA
                                                 AND CD.GLB_CLIENTE_CGCCPFCODIGO = C.GLB_CLIENTE_CGCCPFCODIGO)
                 LOOP
                   
                    -- TIPO PESSOA FISCAL
                   BEGIN     
                     V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                     V_INSERT.con_freteoper_rota  := P_ROTA;
                     V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                     V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal2.tipo'),'XX',TO_CHAR(V_INDICEDOCFIS));
                     V_INSERT.uti_vfintegra_valor := TRIM('2');
                     PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
                   EXCEPTION WHEN OTHERS THEN
                     V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                     V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
                   END; 
                   
                   -- DOCUMENTO TIPO
                   BEGIN     
                     V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                     V_INSERT.con_freteoper_rota  := P_ROTA;
                     V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                     V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal2.documento.tipo'),'XX',TO_CHAR(V_INDICEDOCFIS));
                     
                     -- FISICA OU JURIDICA
                     IF LENGTH(TRIM(R_CURSORPESOAFISCAL2.GLB_CLIENTE_CGCCPFCODIGO)) = 11 THEN
                        V_INSERT.uti_vfintegra_valor := TRIM('2');
                     ELSIF LENGTH(TRIM(R_CURSORPESOAFISCAL2.GLB_CLIENTE_CGCCPFCODIGO)) = 14 THEN
                        V_INSERT.uti_vfintegra_valor := TRIM('1');
                     END IF;  
                     
                     PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
                   
                   EXCEPTION WHEN OTHERS THEN
                     V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                     V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
                   END;
                   
                   -- DOCUMENTO NUMERO
                   BEGIN     
                     V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                     V_INSERT.con_freteoper_rota  := P_ROTA;
                     V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                     V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal2.documento.numero'),'XX',TO_CHAR(V_INDICEDOCFIS));
                     
                     /******************************************************/
                     /*******************SE CLIENTE INTERNACIONAL***********/
                     /******************************************************/
                     IF R_CURSORPESOAFISCAL2.GLB_CLIENTE_NACIONAL = 'I' THEN 
                        V_INSERT.uti_vfintegra_valor := TRIM('00000000000191');
                     ELSE
                        V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORPESOAFISCAL2.GLB_CLIENTE_CGCCPFCODIGO); 
                     END IF;  
                     /******************************************************/
                     --V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORPESOAFISCAL2.GLB_CLIENTE_CGCCPFCODIGO);
                     
                     PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
                   EXCEPTION WHEN OTHERS THEN
                     V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                     V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
                   END;
                   
                   -- NOME PESSOA FISCAL
                   BEGIN     
                     V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                     V_INSERT.con_freteoper_rota  := P_ROTA;
                     V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                     V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal2.nome'),'XX',TO_CHAR(V_INDICEDOCFIS));
                     V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORPESOAFISCAL2.GLB_CLIENTE_RAZAOSOCIAL);
                     PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
                   EXCEPTION WHEN OTHERS THEN
                     V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                     V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
                   END;
                   
                   -- LOGRADOURO
                   BEGIN     
                     V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                     V_INSERT.con_freteoper_rota  := P_ROTA;
                     V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                     V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal2.endereco.logradouro'),'XX',TO_CHAR(V_INDICEDOCFIS));
                     V_INSERT.uti_vfintegra_valor := SUBSTR(TRIM(R_CURSORPESOAFISCAL2.GLB_CLIEND_ENDERECO),1,40);
                     PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
                   EXCEPTION WHEN OTHERS THEN
                     V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                     V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
                   END;
                   
                   -- NUMERO
                   BEGIN     
                     V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                     V_INSERT.con_freteoper_rota  := P_ROTA;
                     V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                     V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal2.endereco.numero'),'XX',TO_CHAR(V_INDICEDOCFIS));
                     V_INSERT.uti_vfintegra_valor := TRIM('0');
                     PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
                   EXCEPTION WHEN OTHERS THEN
                     V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                     V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
                   END;
                   
                   
                   -- bAIRRO
                   BEGIN     
                     V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                     V_INSERT.con_freteoper_rota  := P_ROTA;
                     V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                     V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal2.endereco.bairro'),'XX',TO_CHAR(V_INDICEDOCFIS));
                     V_INSERT.uti_vfintegra_valor := TRIM('BAIRRO');
                     PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
                   EXCEPTION WHEN OTHERS THEN
                     V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                     V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
                   END;
                   
                   -- IBGE
                   BEGIN     
                     V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                     V_INSERT.con_freteoper_rota  := P_ROTA;
                     V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                     V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal2.endereco.cidade.ibge'),'XX',TO_CHAR(V_INDICEDOCFIS));
                     V_INSERT.uti_vfintegra_valor := TRIM(PKG_CFE_FRETE.FN_GET_IBGE(R_CURSORPESOAFISCAL2.GLB_LOCALIDADE_CODIGO));
                     PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
                   EXCEPTION WHEN OTHERS THEN
                     V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                     V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
                   END;
                   
                   -- CEP
                   BEGIN     
                     V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                     V_INSERT.con_freteoper_rota  := P_ROTA;
                     V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                     V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.pessoafiscal2.endereco.cep'),'XX',TO_CHAR(V_INDICEDOCFIS));
                     V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORPESOAFISCAL2.GLB_CEP_CODIGO);
                     PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
                   EXCEPTION WHEN OTHERS THEN
                     V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                     V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
                   END;
                   
                 END LOOP;        
                       
         END LOOP;    
         
         
         END IF;	
        
       END LOOP;
       /***********************************************************/                              
    
    ELSE
      V_QTDEDOCREF := V_QTDEDOCREF;
    END IF;    
    
      
    END;
    
    /*************************************************************************/
    


    /*************************************************************************/
    /***********************          PARCELAS        ***********************/
    /*************************************************************************/
    
     BEGIN
        -- QUANTIDADE DE PARCELAS
        SELECT COUNT(*)
          INTO V_QTDEPARCELAS                        
          FROM T_VGM_PARCELAS F
         WHERE F.GLB_ROTA_CODIGO            = vViagemRota
           AND F.VGM_VIAGEM_CODIGO          = vViagem
           AND F.VGM_PARCELAS_FLAGPGTO      = 'S'
           AND TO_NUMBER(F.VGM_PARCELAS_VALOR) <> '0';
     
    
          -- QUANTIDADE PARCELAS
         BEGIN     
           V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
           V_INSERT.con_freteoper_rota  := P_ROTA;
           V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
           V_INSERT.uti_vfintegra_chave := TRIM('viagem.parcela.qtde');
           V_INSERT.uti_vfintegra_valor := TRIM(TO_CHAR(V_QTDEPARCELAS));
           PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
         EXCEPTION WHEN OTHERS THEN
           V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
           V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
         END;
                                
        
        V_INDICEPARCELAS := 0;
        FOR R_PARCELAS IN (SELECT F.GLB_ROTA_CODIGO,
                                  F.VGM_VIAGEM_CODIGO,
                                  F.VGM_PARCELAS_SEQ,
                                  F.VGM_PARCELAS_TIPO,
                                  F.VGM_PARCELAS_VALOR,
                                  F.VGM_PARCELAS_VENCIMENTO,
                                  F.CON_CALCVALEFRETETP_CODIGO,
                                  F.VGM_PARCELAS_TPPESSOA,
                                  TP.CON_CALCVALEFRETETP_CODPAMCARY,
                                  NVL(F.VGM_PARCELAS_FLAGLIB,'N') VGM_PARCELAS_FLAGLIB
                             FROM T_VGM_PARCELAS F,
                                  T_CON_CALCVALEFRETETP TP
                            WHERE F.GLB_ROTA_CODIGO            = vViagemRota
                              AND F.VGM_VIAGEM_CODIGO          = vViagem
                              AND F.CON_CALCVALEFRETETP_CODIGO = TP.CON_CALCVALEFRETETP_CODIGO
                              AND F.VGM_PARCELAS_FLAGPGTO = 'S'
                              AND TO_NUMBER(F.VGM_PARCELAS_VALOR) <> 0
                          ORDER BY F.CON_CALCVALEFRETETP_CODIGO)
        LOOP
            V_INDICEPARCELAS := V_INDICEPARCELAS +1;
            
             -- EFETIVAÇÃO PARCELA
             BEGIN     
               V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := REPLACE('viagem.parcelaXX.efetivacao.tipo','XX',TRIM(TO_CHAR(V_INDICEPARCELAS)));
               V_INSERT.uti_vfintegra_valor := TRIM('1');
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
             END;
                  
             -- VALOR PARCELA
             BEGIN     
               V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := REPLACE('viagem.parcelaXX.valor','XX',TRIM(TO_CHAR(V_INDICEPARCELAS)));
               V_INSERT.uti_vfintegra_valor := TRIM(TO_CHAR(R_PARCELAS.VGM_PARCELAS_VALOR,'999999999.00'));
               
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
             END;
                  
             -- SUBTIPO PARCELA
             BEGIN     
               V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := REPLACE('viagem.parcelaXX.subtipo','XX',TRIM(TO_CHAR(V_INDICEPARCELAS)));
               V_INSERT.uti_vfintegra_valor := TRIM(TO_NUMBER(R_PARCELAS.CON_CALCVALEFRETETP_CODPAMCARY));
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
             END;
                  
             -- PARCELA BASE
             BEGIN     
               V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := REPLACE('viagem.parcelaXX.base','XX',TRIM(TO_CHAR(V_INDICEPARCELAS)));
               V_INSERT.uti_vfintegra_valor := TRIM('N');
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
             END;
             
             
             -- STATUS PARCELA
             BEGIN     
               V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := REPLACE('viagem.parcelaXX.status.id','XX',TRIM(TO_CHAR(V_INDICEPARCELAS)));
               
               IF R_PARCELAS.VGM_PARCELAS_FLAGLIB = 'N' THEN
                  V_INSERT.uti_vfintegra_valor := TRIM('1');
               ELSIF R_PARCELAS.VGM_PARCELAS_FLAGLIB = 'S' THEN
                  V_INSERT.uti_vfintegra_valor := TRIM('2');
               END IF;   
               
               
               
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
             END;
                  
             -- DATA PARCELA
             BEGIN     
               V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := REPLACE('viagem.parcelaXX.data','XX',TRIM(TO_CHAR(V_INDICEPARCELAS)));
               V_INSERT.uti_vfintegra_valor := TRIM(R_PARCELAS.VGM_PARCELAS_VENCIMENTO);
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
             END;
                  
             -- FAVORECIDO PARCELA
             BEGIN     
               V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := REPLACE('viagem.parcelaXX.favorecido.tipo.id','XX',TRIM(TO_CHAR(V_INDICEPARCELAS)));
               
               SELECT DECODE(R_PARCELAS.VGM_PARCELAS_TPPESSOA,'P','1','M','3')
                 INTO V_TIPOVAFORECIDO
                 FROM DUAL;
               
               V_INSERT.uti_vfintegra_valor := V_TIPOVAFORECIDO;
               
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
             END;
                  
             -- NUMERO CLIENTE
             BEGIN     
               V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := REPLACE('viagem.parcelaXX.numero.cliente','XX',TRIM(TO_CHAR(V_INDICEPARCELAS)));
               V_INSERT.uti_vfintegra_valor := TRIM(TO_CHAR(TO_NUMBER(R_PARCELAS.CON_CALCVALEFRETETP_CODIGO)));
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
             END; 
             
             
             
             BEGIN
               UPDATE T_VGM_PARCELAS CAL
                  SET CAL.VGM_PARCELAS_CODPAROPER      = V_INDICEPARCELAS
                WHERE CAL.GLB_ROTA_CODIGO              = R_PARCELAS.GLB_ROTA_CODIGO
                  AND CAL.VGM_VIAGEM_CODIGO            = R_PARCELAS.VGM_VIAGEM_CODIGO
                  AND CAL.VGM_PARCELAS_SEQ             = R_PARCELAS.VGM_PARCELAS_SEQ;
                    
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm; 
             END;  
             
             
        END LOOP;    

    END; 
    
    /*************************************************************************/
    
    
    /*************************************************************************/
    /*********************      VALOR FRETE BRUTO    *************************/
    /*************************************************************************/
    
     BEGIN
        -- BUSCANDO VALOR 
        BEGIN
         SELECT CAL.VGM_PARCELAS_VALOR
           INTO V_VALORFRETEBRUTO
           FROM T_VGM_PARCELAS CAL
          WHERE CAL.GLB_ROTA_CODIGO     = vViagemRota
            AND CAL.VGM_VIAGEM_CODIGO   = vViagem
            AND CAL.CON_CALCVALEFRETETP_CODIGO = '00';
        
        EXCEPTION WHEN OTHERS THEN
          V_VALORFRETEBRUTO := 0;
        END;  
        
         -- VALOR BRUTO
         BEGIN     
           V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
           V_INSERT.con_freteoper_rota  := P_ROTA;
           V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
           V_INSERT.uti_vfintegra_chave := TRIM('viagem.frete.valor.bruto');
           V_INSERT.uti_vfintegra_valor :=  TRIM(TO_CHAR(V_VALORFRETEBRUTO,'999999999.00'));
           PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
         EXCEPTION WHEN OTHERS THEN
           V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
           V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
         END;
         
    END;
      
    /*************************************************************************/
    
    
    /*************************************************************************/
    /*******************           ITENS DE FRETE               **************/
    /*************************************************************************/
     
     BEGIN  
     
      BEGIN
         -- QUANTIDADE DE ITENS DE FRETE
         SELECT COUNT(*)
          INTO V_QTDEITENSFRETE
          FROM T_VGM_PARCELAS F,
               T_CON_CALCVALEFRETETP TP
         WHERE F.GLB_ROTA_CODIGO   = vViagemRota
           AND F.VGM_VIAGEM_CODIGO = vViagem  
           AND F.CON_CALCVALEFRETETP_CODIGO = TP.CON_CALCVALEFRETETP_CODIGO
           AND NVL(F.VGM_PARCELAS_FLAGPGTO,'N') = 'N'
           AND NVL(TO_NUMBER(F.VGM_PARCELAS_VALOR),'0') <> 0
           AND NVL(TP.CON_CALCVALEFRETETP_CODPAMCARY,'00') <> 00;
    
         -- QUANTIDADE DE ITENS DE FRETE
         BEGIN     
           V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
           V_INSERT.con_freteoper_rota  := P_ROTA;
           V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
           V_INSERT.uti_vfintegra_chave := TRIM('viagem.frete.item.qtde');
           V_INSERT.uti_vfintegra_valor := TRIM(TO_CHAR(V_QTDEITENSFRETE));
           PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
         EXCEPTION WHEN OTHERS THEN
           V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
           V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
         END;
                                
        
        V_INDICEITENSFRETE := 0;
        FOR R_ITENSFRETE IN (SELECT F.GLB_ROTA_CODIGO,
                                    F.VGM_VIAGEM_CODIGO,
                                    F.VGM_PARCELAS_SEQ,
                                    F.VGM_PARCELAS_TIPO,
                                    F.VGM_PARCELAS_VALOR,
                                    F.VGM_PARCELAS_VENCIMENTO,
                                    F.CON_CALCVALEFRETETP_CODIGO,
                                    F.VGM_PARCELAS_TPPESSOA,
                                    TP.CON_CALCVALEFRETETP_CODPAMCARY
                               FROM T_VGM_PARCELAS F,
                                    T_CON_CALCVALEFRETETP TP
                              WHERE F.GLB_ROTA_CODIGO   =  vViagemRota
                                AND F.VGM_VIAGEM_CODIGO =  vViagem
                                AND F.CON_CALCVALEFRETETP_CODIGO = TP.CON_CALCVALEFRETETP_CODIGO
                                AND NVL(F.VGM_PARCELAS_FLAGPGTO,'N') = 'N'
                                AND NVL(TO_NUMBER(F.VGM_PARCELAS_VALOR),'0') <> 0
                                AND NVL(TP.CON_CALCVALEFRETETP_CODPAMCARY,'00') <> 00)
        LOOP
            V_INDICEITENSFRETE := V_INDICEITENSFRETE +1;
            
             -- TIPO ITEM DE FRETE
             BEGIN     
               V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := REPLACE('viagem.frete.itemXX.tipo','XX',TRIM(TO_CHAR(V_INDICEITENSFRETE)));
               V_INSERT.uti_vfintegra_valor := TRIM(TO_NUMBER(R_ITENSFRETE.CON_CALCVALEFRETETP_CODPAMCARY));
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
             END;
             
             -- VALOR ITEM DE FRETE
             BEGIN     
               
               V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := REPLACE('viagem.frete.itemXX.valor','XX',TRIM(TO_CHAR(V_INDICEITENSFRETE)));
               V_INSERT.uti_vfintegra_valor := TRIM(TO_CHAR(R_ITENSFRETE.VGM_PARCELAS_VALOR,'999999999.00'));
               
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
             END;
                  
        END LOOP;    

    END; 

      -- QUANTIDADE DE PARCELAS
        SELECT COUNT(*)
          INTO V_EXISTEPARCELASID                      
          FROM T_VGM_PARCELAS F
         WHERE F.GLB_ROTA_CODIGO   = vViagemRota
           AND F.VGM_VIAGEM_CODIGO = vViagem
           AND F.VGM_PARCELAS_FLAGPGTO= 'S'
           AND TO_NUMBER(NVL(F.VGM_PARCELAS_VALOR,'0')) <> '0'
           AND F.VGM_PARCELAS_CODPAROPER IS NULL;
           
           
           
      IF V_EXISTEPARCELASID > 0 THEN
            
            V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
            V_MESSAGE := 'PARCELAS SEM CODIGO DA GERENCIADORA!';
             
      END IF;    
     
     END;      
    
    /*************************************************************************/
    
    /************************************************************************/
    /************TABELA DE CIOT QUE VAIR ATUALIZADA DEPOIS*******************/
    /************************************************************************/
     
     BEGIN
      
        IF NVL(V_STATUS,'OK') <> tdvadm.pkg_glb_common.Status_Erro THEN 

          
           BEGIN
            
              INSERT INTO T_VGM_VGCIOT(GLB_ROTA_CODIGO       ,
                                       VGM_VIAGEM_CODIGO     ,
                                       VGM_VGCIOT_NUMERO     ,
                                       VGM_VGCIOT_PROTOCOLO  ,
                                       CON_FRETEOPER_ID      ,
                                       CON_FRETEOPER_ROTA    ,
                                       VGM_VGCIOT_ID         ,
                                       VGM_VGCIOT_IDCLIENTE  )
                                VALUES(vViagemRota           ,
                                       vViagem               ,
                                       NULL                  ,
                                       NULL                  ,
                                       P_IDCONSULTA          ,
                                       P_ROTA                ,
                                       NULL,
                                       vInfViagem.con_freteoper_id);                                                 
        
           EXCEPTION WHEN DUP_VAL_ON_INDEX THEN
              V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;  
              V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INSEREFRETE, '||sqlerrm;             
           END;                           
            
          /************************************************************************/    
           
           OPEN P_CURSOR FOR
             SELECT K.UTI_VFINTEGRA_CHAVE CHAVE,
                    K.UTI_VFINTEGRA_VALOR VALOR
               FROM T_UTI_VFINTEGRA K
               WHERE K.CON_FRETEOPER_ID   = P_IDCONSULTA
                 AND K.CON_FRETEOPER_ROTA = P_ROTA 
              ORDER BY K.UTI_VFINTEGRA_SEQ;
             
            DELETE T_UTI_VFINTEGRA D
            WHERE D.CON_FRETEOPER_ID   = P_IDCONSULTA  
              AND D.CON_FRETEOPER_ROTA = P_ROTA;
              
             COMMIT; 
             
            P_STATUS   := tdvadm.pkg_glb_common.Status_Nomal;
            P_MESSAGE := 'Processamento Normal.';
      
      ELSE
        
         P_STATUS   := V_STATUS;   
         P_MESSAGE  := V_MESSAGE;
         
         OPEN P_CURSOR FOR
         SELECT SYSDATE FROM DUAL;
         
         DELETE T_UTI_VFINTEGRA D
          WHERE D.CON_FRETEOPER_ID   = P_IDCONSULTA  
            AND D.CON_FRETEOPER_ROTA = P_ROTA;     
         
         COMMIT; 
             
        RETURN;
        
      END IF; 
        
     END;
     
    /************************************************************************/ 
   EXCEPTION WHEN OTHERS THEN
   
       P_STATUS    := tdvadm.pkg_glb_common.Status_Erro;
       P_MESSAGE  := 'Erro ao consultar. Erro='||SQLERRM;
       
       --INSERT INTO DROPME(X,A,L,B) VALUES (P_MESSAGE,'ErroCriaCiot',NULL,NULL) ;
       
       OPEN P_CURSOR FOR
       SELECT SYSDATE FROM DUAL;
       RETURN;
       
              
       DELETE T_UTI_VFINTEGRA D
        WHERE D.CON_FRETEOPER_ID   = P_IDCONSULTA  
          AND D.CON_FRETEOPER_ROTA = P_ROTA;     
       
       COMMIT;
       
   
   END;    
    
  
  END SP_GET_INSEREVIAGEM;              
 
   
---------------------------------------------------------------------------------------------------------------------               
-- Procedure utilizada para buscar um ID válido.                                                                   --
---------------------------------------------------------------------------------------------------------------------               
---------------------------------------------------------------------------------------------------------------------               
-- Procedure utilizada para buscar um ID válido.                                                                   --
---------------------------------------------------------------------------------------------------------------------               
PROCEDURE SP_GETIDVALIDO( P_APLIACACAO      IN  TDVADM.T_USU_APLICACAO.USU_APLICACAO_CODIGO%TYPE,
                          P_ROTA            IN  TDVADM.T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,
                          P_USUARIO         IN  TDVADM.T_USU_USUARIO.USU_USUARIO_CODIGO%TYPE,
                          P_PLACA_CODIGO    IN  TDVADM.T_CAR_VEICULO.CAR_VEICULO_PLACA%TYPE,
                          P_PLACA_SAQUE     IN  TDVADM.T_CAR_CARRETEIRO.CAR_VEICULO_SAQUE%TYPE,
                          P_MOTORCPF        IN  TDVADM.T_CAR_CARRETEIRO.CAR_CARRETEIRO_CPFCODIGO%TYPE,
                          P_MOTORSAQUE      IN  TDVADM.T_CAR_CARRETEIRO.CAR_CARRETEIRO_SAQUE%TYPE,
                          P_IDOPER_CODIGO   OUT VARCHAR2,
                          P_IDOPER_ROTA     OUT TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ROTA%TYPE,
                          P_STS_IDOPER      OUT TDVADM.T_CFE_STATUSFRETEOPER.CFE_STATUSFRETEOPER_STATUS%TYPE,
                          P_TPPAGAMENTO     OUT CHAR,
                          P_TPPROPRIETARIO  OUT TDVADM.T_CAR_PROPRIETARIO.CAR_PROPRIETARIO_CLASSANTT%TYPE,
                          P_STATUS          OUT CHAR,
                          P_MESSAGE         OUT VARCHAR2 
                        ) is
                        
  --Variável utilizada para buscar dados do Proprietário
  vCnpj_Proprietario    tdvadm.t_car_proprietario.car_proprietario_cgccpfcodigo%type;
  vClassAntt            tdvadm.t_car_proprietario.car_proprietario_classantt%type;
  vClassEqp             tdvadm.t_car_proprietario.car_proprietario_classeqp%type;
  vTpPagamento          char(01);
  
  --Variável que será utilizado para recuperar a o saque do carreteiro
  vMotor_Saq    tdvadm.t_car_carreteiro.car_carreteiro_saque%type;
  
  --Variavel de controle.
  vControl  boolean; 
  
  --Variável de paramentros.
  vParams    glbadm.pkg_glb_auxiliar.tParametros; 
 
  --Cursor utilizado para buscar todos os ids, de um determinado motorista que não tenham sido utilizados e que não tenham 
  --sido criado por uma operação de usuario.
  cursor vCursorIdRota (
    vCnpj_Prop    tdvadm.t_car_proprietario.car_proprietario_cgccpfcodigo%type,
    vPlaca_codigo tdvadm.t_car_veiculo.car_veiculo_placa%type,
    vPlaca_saque  tdvadm.t_car_veiculo.car_veiculo_saque%type,
    vMotor_CPF    tdvadm.t_car_carreteiro.car_carreteiro_cpfcodigo%type,
    vMotor_saque  tdvadm.t_car_carreteiro.car_carreteiro_saque%type
  ) is  
  SELECT 
    distinct
    oper.con_freteoper_id,
    oper.con_freteoper_rota,
    TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'IntegraTdv_Cod','=','*'), 'valor', '=', '|') Tp_pgto
  FROM
    tdvadm.t_con_freteoper oper
  WHERE
    0=0
       --A operação não pode ser uma operação de usuario.
    and 0 < ( select count(*) 
              from tdvadm.t_cfe_integratdv integr
              where integr.cfe_integratdv_cod = oper.cfe_integratdv_cod
               and integr.cfe_integratdv_operusuario = 'N'
             )

    --Não pode ter registro na tabela de ciot ( não pode ter sido utilizado ).
 --   and 0 = ( select count(*) from t_con_vfreteciot ciot
   --           where ciot.con_freteoper_id = oper.con_freteoper_id 
     --       )       

    --Paramentros de busca 
    and TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'Proprietario','=','*'), 'valor', '=', '|')   = Trim( vCnpj_Prop )
    and TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'Placa','=','*'), 'valor', '=', '|')          = Trim( vPlaca_codigo )
    and TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'PlacaSaque','=','*'), 'valor', '=', '|')     = Trim( vPlaca_saque )
    and TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'Motorista','=','*'), 'valor', '=', '|')      = Trim( vMotor_CPF )
    and TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'MotoristaSaque','=','*'), 'valor', '=', '|') = Trim( vMotor_saque )
    
    AND oper.cfe_statusfreteoper_status <> 'US'
 
    order by oper.con_freteoper_rota;    

  --Cursor utilizado para varrer cada id, para realizar as validações necessarias
  cursor vCursorDet (
    IdOper_codigo    t_con_freteoper.con_freteoper_id%type,
    IdRota_codigo    t_con_freteoper.con_freteoper_rota%type
  ) is 
  SELECT 
    OPER.CON_FRETEOPER_ID,
    OPER.CON_FRETEOPER_ROTA,
    OPER.CFE_STATUSFRETEOPER_STATUS,
    OPER.CON_FRETEOPER_RETORNO
  FROM 
    T_CON_FRETEOPER OPER
  WHERE 
    0=0
    AND OPER.CON_FRETEOPER_ID   = IdOper_codigo
    AND OPER.CON_FRETEOPER_ROTA = IdRota_codigo
    AND OPER.CFE_STATUSFRETEOPER_STATUS <> 'US';
    
                       
Begin


  --Inicializo as variáveis
  P_STATUS := 'N';
  vCnpj_Proprietario := '';
  vControl := False;
  
  --Caso o paramentro de saque do motorista esteja em branco,
  if nvl(trim(P_MOTORSAQUE), 'R') = 'R' then
    --Busco o maior saque do carreteiro.
    select 
      max(carret.car_carreteiro_saque) 
    into 
      vMotor_Saq from t_car_carreteiro carret
    where 
      carret.car_carreteiro_cpfcodigo = P_MOTORCPF;
  end if;
  
  BEGIN
    --A partir da placa e saque do veículo vou buscar o CNPJ/CPF do proprietário.
    SELECT 
      prop.car_proprietario_cgccpfcodigo,
      prop.car_proprietario_classantt,
      prop.car_proprietario_classeqp
    into 
      vCnpj_Proprietario,
      vClassAntt,
      vClassEqp
    FROM 
      T_CAR_VEICULO  VEICULO,
      T_CAR_PROPRIETARIO  PROP
    WHERE
      0=0
      AND VEICULO.CAR_PROPRIETARIO_CGCCPFCODIGO = PROP.CAR_PROPRIETARIO_CGCCPFCODIGO
      AND VEICULO.CAR_VEICULO_PLACA = Trim(P_PLACA_CODIGO)
      AND VEICULO.CAR_VEICULO_SAQUE = Trim(P_PLACA_SAQUE);

  EXCEPTION
    --Caso ocorra algum erro durante a busca do cnpj do proprietário.
    --encerro o processamento e devolvo mensagem de erro.
    WHEN NO_DATA_FOUND THEN
      P_STATUS := PKG_GLB_COMMON.Status_Erro;
      P_MESSAGE := 'CNPJ / CPF do proprietário do veiculo de placa '|| P_PLACA_CODIGO || ' e saque ' || P_PLACA_SAQUE || ' Não foi localizado.';
      return;
    
    WHEN OTHERS THEN
      P_STATUS := pkg_glb_common.Status_Erro;
      P_MESSAGE := 'Erro ao tentar buscar dados do proprietário do veículo de placa '|| P_PLACA_CODIGO || ' e saque ' || P_PLACA_SAQUE || chr(13) || sqlerrm;
      return;
  END;
  
  begin
    --Busco os dados do paramentro de data,
    glbadm.pkg_glb_auxiliar.sp_Espec_Params( P_USUARIO, 'vldmotor', P_ROTA, 'PRAZO_VALIDADE_ID', vParams);
  exception
    --caso ocorra algum erro durante a busca do paramentro de validade.
    --encerro o processamento e devolvo mensagem de erro.
    when others then
      P_STATUS := pkg_glb_common.Status_Erro;
      P_MESSAGE := 'Não foi possivel identificar o proza de validade de id.' || chr(13) || sqlerrm;
      return;
  end; 
  
  --Defino do retorno do Paramentro do Tipo de Proprietario,
  IF P_STATUS = pkg_glb_common.Status_Nomal THEN
      if vClassEqp = 'S' then
        IF vClassAntt in ('ETC', 'CTC') then
          P_TPPROPRIETARIO := 'EQP';
          -- mudando para ETC todos até que o Cartão PJ estaja OK
          -- Sirlano Klayton
          If P_PLACA_CODIGO <> 'MAC6428' Then
             P_TPPROPRIETARIO := 'ETC';
          End If;   
          
        ELSE
          P_TPPROPRIETARIO := vClassAntt;  
        END IF;  
      ELSE
        P_TPPROPRIETARIO := vClassAntt;  
      end if;
  ELSE
      P_TPPROPRIETARIO := '';
  END IF;     
  
  
  BEGIN
    --abro o cursor  inicio o loop para realizar validações em possiveis ID's
    FOR cCursorId IN vCursorIdRota ( vCnpj_Proprietario, 
                                     P_PLACA_CODIGO,
                                     P_PLACA_SAQUE,
                                     P_MOTORCPF,
                                     vMotor_Saq
                                   )
                                 LOOP
                                   --começo passando a variável de controle para verdadeira.
                                   vControl := True;
                                   BEGIN
                                     --Abro o cursor de detalhe, passando o ID e rota extraido do cursor de IDROTA.
                                     FOR cCursorDet IN vCursorDet( cCursorId.Con_Freteoper_Id,
                                                                   cCursorId.Con_Freteoper_Rota
                                                                 ) 
                                                                 loop
                                                                   --Caso o Status de alguma operação não for OK, 
                                                                   IF cCursordet.Cfe_Statusfreteoper_Status <> 'OK' THEN
                                                                     --seto a variavel de controle para false.
                                                                     vControl := False;
                                                                   END IF;
                                                                   
                                                                   --Se a data da consulta for mais antiga, menor que a data de hoje menos o paramentro de validade
                                                                   if Trunc(cCursordet.Con_Freteoper_Retorno) < ( Trunc(sysdate) - vparams.NUMERICO1 ) then
                                                                     --Seto a variável de controle para false
                                                                     vControl := false;
                                                                   end if;
                                                                 end loop;   
                                     
                                   EXCEPTION
                                     --Caso ocorra algum erro durante a abertura/tratamento do cursor, 
                                     --encerro o processamento e devolvo mensagem de erro.
                                     WHEN OTHERS THEN
                                       P_STATUS := pkg_glb_common.Status_Erro;
                                       P_MESSAGE := 'Erro ao abrir/tratar cursor de detalhe' || chr(13) || sqlerrm;
                                       return;
                                   END;
                                   
                                   --Saindo do laço de detalhe, caso a variável de controle ainda seja positiva
                                   IF vControl = true THEN
                                     --Saio do laço e seto as variáveis de retorno
                                     P_STS_IDOPER := 'OK';
                                     P_IDOPER_CODIGO := TRIM(TO_CHAR(cCursorId.Con_Freteoper_Id));
                                     P_IDOPER_ROTA   := cCursorId.Con_Freteoper_Rota;
                                     P_TPPAGAMENTO   := case cCursorId.Tp_Pgto
                                                          when  1 then pgtoFrete_Cartao
                                                          when 20 then pgtoFrete_Cartao
                                                          when  5 then pgtoFrete_ContaCorrente
                                                          when 21 then pgtoFrete_ContaCorrente    
                                                        end;    
                                     exit;
                                   ELSE
                                     P_STS_IDOPER := 'IV';
                                     P_IDOPER_CODIGO := 0;
                                     P_IDOPER_ROTA   := '';
                                   END IF;  
                                 END LOOP;  
   
    
  EXCEPTION
    --Caso ocorra algum erro durante o tratamento dos cursores, 
    WHEN OTHERS THEN
      P_STATUS := pkg_glb_common.Status_Erro;
      P_MESSAGE := 'Erro ao Abrir / Tratar Cursor de Id por rota.' || chr(13) || sqlerrm;
      return;
  END;
  
/*    if (P_PLACA_CODIGO = 'GPP3667') and (to_char(sysdate, 'dd/mm/yyyy') = '31/01/2012') then
      P_STS_IDOPER := 'OK';
      P_IDOPER_CODIGO := 94;
      P_IDOPER_ROTA   := '021';
      P_TPPAGAMENTO   := pgtoFrete_Cartao;
     end if;
*/
  
   
  
  --Chegando até aqui, a procedure, indiferente ao retorno, foi realizado com sucesso.
  P_STATUS := PKG_GLB_COMMON.Status_Nomal;
  P_MESSAGE := '';
  
END SP_GETIDVALIDO;

--------------------------------------------------------------------------------------------------------------
-- Procedure utilizada para retornar um ID através de um código de vale de Frete.                           --
--------------------------------------------------------------------------------------------------------------
procedure sp_get_IdValeFrete( pValeFrete_codigo in  tdvadm.t_con_valefrete.con_conhecimento_codigo%type,
                              pValeFrete_Serie  in  tdvadm.t_con_valefrete.con_conhecimento_serie%type,
                              pValeFrete_Rota   in  tdvadm.t_con_valefrete.glb_rota_codigo%type,
                              pValeFrete_Saque  in  tdvadm.t_con_valefrete.con_valefrete_saque%type,
                              pPropCnpj         in tdvadm.t_car_proprietario.car_proprietario_cgccpfcodigo%type,
                              pMotor_CNPJ       in tdvadm.t_car_carreteiro.car_carreteiro_cpfcodigo%type,
                              pMotor_Saque      in tdvadm.t_car_carreteiro.car_carreteiro_saque%type,
                              pPlaca_codigo     in tdvadm.t_car_veiculo.car_veiculo_placa%type,
                              pPlaca_saque      in tdvadm.t_car_veiculo.car_veiculo_saque%type,
                              pIdRetorno        out tdvadm.t_con_freteoper.con_freteoper_id%type,
                              pIdRota           out tdvadm.t_con_freteoper.con_freteoper_rota%type,
                              pFlagId           out char,
                              pStatus           out char,
                              pMessage          out varchar2 
                             ) is
 --Variável de controle.
 vControl  integer;        
 
 --Variável que sera utilizado como retorno da procedure.
 vRetornoId   tdvadm.t_con_freteoper.con_freteoper_id%type;  
 vIDRota      tdvadm.t_con_freteoper.con_freteoper_rota%type;
 
 --variáveis que serão utilizadas para recuperar valores do ID,
 vID_PropCnpj     tdvadm.t_car_proprietario.car_proprietario_cgccpfcodigo%type;
 vID_MotorCnpj    tdvadm.t_car_carreteiro.car_carreteiro_cpfcodigo%type;
 vID_MotorSaque   tdvadm.t_car_carreteiro.car_carreteiro_saque%type;
 vID_PlacaCodigo  tdvadm.t_car_veiculo.car_veiculo_placa%type;
 vID_PlacaSaque   tdvadm.t_car_veiculo.car_veiculo_saque%type;
 vVeicDispCod     tdvadm.t_con_valefrete.fcf_veiculodisp_codigo%type;
 vVeicDispSeq     tdvadm.t_con_valefrete.fcf_veiculodisp_sequencia%type;
 vExisteVIagem    integer;
 vTableVfreteIcot tdvadm.t_con_vfreteciot%ROWTYPE;
 vTableViagemCiot tdvadm.t_vgm_vgciot%ROWTYPE; 
 
 --cursor trazendo todos os Saques utilizados.
 cursor vCursorId ( 
   vVFreteCodigo    tdvadm.t_con_valefrete.con_conhecimento_codigo%type,
   vVFreteSerie     tdvadm.t_con_valefrete.con_conhecimento_serie%type,
   vVFreteRota      tdvadm.t_glb_rota.glb_rota_codigo%type
  ) is
  Select 
    ciot.con_freteoper_id,
    ciot.con_freteoper_rota
  from 
    t_con_vfreteciot ciot
  where
    0=0
    and ciot.con_conhecimento_codigo = vVFreteCodigo
    and ciot.con_conhecimento_serie  = vVFreteSerie
    and ciot.glb_rota_codigo         = vVFreteRota
    order by ciot.con_valefrete_saque desc;
 
                   
begin
  --Inicializa as variáveis que serão utilizadas nessa procedure.
  vControl := 0;
  vID_PropCnpj     := '';
  vID_MotorCnpj    := '';
  vID_MotorSaque   := '';
  vID_PlacaCodigo  := '';
  vID_PlacaSaque   := '';
  
  
  IF pValeFrete_codigo = '441867' THEN
      BEGIN
         SELECT VF.FCF_VEICULODISP_CODIGO,
                VF.FCF_VEICULODISP_SEQUENCIA
           INTO vVeicDispCod,
                vVeicDispSeq
           FROM T_CON_VALEFRETE VF
          WHERE VF.CON_CONHECIMENTO_CODIGO = pValeFrete_codigo
            AND VF.CON_CONHECIMENTO_SERIE  = pValeFrete_Serie 
            AND VF.GLB_ROTA_CODIGO         = pValeFrete_Rota
            AND VF.CON_VALEFRETE_SAQUE     = pValeFrete_Saque; 
      EXCEPTION WHEN OTHERS THEN
        vVeicDispCod  := NULL;
        vVeicDispSeq  := NULL;
      END;
      
      
      IF NVL(vVeicDispCod,'NULL') <> 'NULL' THEN
         
          SELECT L.CON_FRETEOPER_ID,
                 NVL(L.CON_FRETEOPER_ROTA,L.GLB_ROTA_CODIGO)
            INTO vRetornoId, 
                 vIDRota
            FROM T_FCF_VEICULODISP L
           WHERE L.FCF_VEICULODISP_CODIGO    = vVeicDispCod
             AND L.FCF_VEICULODISP_SEQUENCIA = vVeicDispSeq;
             
          if nvl(vRetornoId,0) <> 0 then
             
             begin
                 SELECT l.*
                   INTO vTableViagemCiot
                   FROM T_VGM_VGCIOT L,
                        T_VGM_VIAGEM VG
                  WHERE L.CON_FRETEOPER_ROTA = vIDRota
                    AND L.CON_FRETEOPER_ID   = vRetornoId
                    AND L.GLB_ROTA_CODIGO    = VG.GLB_ROTA_CODIGO
                    AND L.VGM_VIAGEM_CODIGO  = VG.VGM_VIAGEM_CODIGO
                    AND VG.USU_USUARIO_FECHAMENTO IS NULL;
            exception when others then
               vTableViagemCiot.Vgm_Vgciot_Numero := 0;
            end;      
             
             IF vTableViagemCiot.Vgm_Vgciot_Numero > 0 then
                
                vTableVfreteIcot.Con_Conhecimento_Codigo     := pValeFrete_codigo;
                vTableVfreteIcot.Con_Conhecimento_Serie      := pValeFrete_Serie ;
                vTableVfreteIcot.Glb_Rota_Codigo             := pValeFrete_Rota;
                vTableVfreteIcot.Con_Valefrete_Saque         := pValeFrete_Saque;
                vTableVfreteIcot.Con_Vfreteciot_Numero       := vTableViagemCiot.Vgm_Vgciot_Numero;
                vTableVfreteIcot.Con_Vfreteciot_Protocolo    := vTableViagemCiot.Vgm_Vgciot_Protocolo;
                vTableVfreteIcot.Con_Freteoper_Id            := vTableViagemCiot.Con_Freteoper_Id;
                vTableVfreteIcot.Con_Freteoper_Rota          := vTableViagemCiot.Con_Freteoper_Rota;
                vTableVfreteIcot.Con_Vfreteciot_Id           := vTableViagemCiot.Vgm_Vgciot_Id;
                vTableVfreteIcot.Con_Vfreteciot_Idcliente    := vTableViagemCiot.Vgm_Vgciot_Idcliente;
                vTableVfreteIcot.Con_Vfreteciot_Tppagamento  := vTableViagemCiot.Vgm_Vgciot_Tppagamento;
                vTableVfreteIcot.Con_Vfreteciot_Flagcancel   := vTableViagemCiot.Vgm_Vgciot_Flagcancel;
                vTableVfreteIcot.Con_Vfreteciot_Data         := vTableViagemCiot.Vgm_Vgciot_Data;
                vTableVfreteIcot.Con_Vfreteciot_Flagimprime  := 'N';
                vTableVfreteIcot.Con_Vfreteciot_Flagaltera   := 'S';
                vTableVfreteIcot.Con_Vfreteciot_Flagprocesal := 'N';
                
                INSERT INTO T_CON_VFRETECIOT VALUES vTableVfreteIcot;
                
                update t_vgm_viagem l
                   set l.vgm_viagem_dtfechamento = sysdate,
                       l.usu_usuario_fechamento  = 'jsantos'
                  where l.glb_rota_codigo    = vTableViagemCiot.Glb_Rota_Codigo
                    and l.vgm_viagem_codigo  = vTableViagemCiot.Vgm_Viagem_Codigo;    
                
                pIdRetorno := vRetornoId;
                pIdRota    := vIDRota;
                pStatus    := pkg_glb_common.Status_Nomal;
                pFlagId    := pkg_glb_common.Boolean_Sim;
                pMessage := '';
                RETURN;
                
             END IF;   
             
         end if;                 
      END IF; 
  END IF;     
  
  --Primeiro verifico se existe um ID na tabela de CIOT
  begin
    
    select 
      count(*) into vControl
    from 
      t_con_vfreteciot ciot
    where 
      0=0
      and ciot.con_conhecimento_codigo = pValeFrete_codigo
      and ciot.con_conhecimento_serie = pValeFrete_Serie
      and ciot.glb_rota_codigo = pValeFrete_Rota 
      and ciot.con_valefrete_saque = pValeFrete_Saque
      And NVL(CIOT.CON_VFRETECIOT_ID, 0) <> 0;
    
  exception
    --Caso ocorra algum erro dutante a verificação da existência de um ID com CIOT.
    when others then
      pStatus := pkg_glb_common.Status_Erro;
      pMessage := 'Erro ao tentar verificar a existência de ID com CIOT';
      return;
  end;
  
  --Caso a variavel seja igual a zero, encerra o processamento, não tem nenhum ID com CIOT.
  if vControl = 0 then
    pStatus := pkg_glb_common.Status_Nomal;
    pMessage := '';
    pIdRetorno := -1;
    pFlagId := pkg_glb_common.Boolean_Nao;
    return;
  end if;
  
  --Caso a variável seja maior que zero, preciso fazer algumas validações.
  if vControl > 0 then
    
    begin
      --Primeiro verifico se o saque é o mesmo que foi passado.
      select 
        ciot.con_freteoper_id,
        ciot.con_freteoper_rota
      into 
        vRetornoId,
        vIDRota
          
      from 
        t_con_vfreteciot ciot
       where
         0=0
         and ciot.con_conhecimento_codigo = pValeFrete_codigo
         and ciot.con_conhecimento_serie  = pValeFrete_Serie
         and ciot.con_valefrete_saque     = pValeFrete_Saque
         and ciot.glb_rota_codigo         = pValeFrete_Rota; 
      
    exception
      --caso não encontre o ID, seto o paramentro como -1;
      when no_data_found then
        vRetornoId := -1;
    end;

    --inicio a avaliação do retorno    
    if vRetornoId > -1 then
      --Caso a variável vRetornoId, seja maior que -1, seto os paramentros de retorno
      pIdRetorno := vRetornoId;
      pIdRota    := vIDRota;
      pStatus := pkg_glb_common.Status_Nomal;
      pFlagId := pkg_glb_common.Boolean_Sim;
      pMessage := '';
      return;
    else
      --Caso o retorno seja -1 quer dizer que não é do mesmo saque.

      begin
      --abro o cursor que trará todos os saques já utilizados.
        for cCursorId in vCursorId ( pValeFrete_codigo,
                                     pValeFrete_Serie,
                                     pValeFrete_Rota
                                   )
                                   loop
                                     --Seto a variável para boleano negativo, esperando que o processo retorne para positivo
                                     pFlagId := pkg_glb_common.Boolean_Nao;
                                     
                                     Begin
                                       --
                                       Select 
                                         distinct
                                          Trim( TDVADM.fn_querystring(TDVADM.fn_querystring(w.con_freteoper_paramqrystr,'Proprietario','=','*'), 'valor', '=', '|') ),
                                          Trim( TDVADM.fn_querystring(TDVADM.fn_querystring(w.con_freteoper_paramqrystr,'Placa','=','*'), 'valor', '=', '|') ),
                                          Trim( TDVADM.fn_querystring(TDVADM.fn_querystring(w.con_freteoper_paramqrystr,'PlacaSaque','=','*'), 'valor', '=', '|') ),
                                          Trim( TDVADM.fn_querystring(TDVADM.fn_querystring(w.con_freteoper_paramqrystr,'Motorista','=','*'), 'valor', '=', '|') ),
                                          Trim( TDVADM.fn_querystring(TDVADM.fn_querystring(w.con_freteoper_paramqrystr,'MotoristaSaque','=','*'), 'valor', '=', '|') )
                                       into
                                         vID_PropCnpj,
                                         vID_PlacaCodigo,
                                         vID_PlacaSaque,
                                         vID_MotorCnpj,
                                         vID_MotorSaque
                                       from 
                                         t_con_freteoper w
                                        where w.con_freteoper_id = cCursorid.Con_Freteoper_Id
                                         and w.con_freteoper_rota = cCursorid.Con_Freteoper_Rota
                                         and TDVADM.fn_querystring(TDVADM.fn_querystring(w.con_freteoper_paramqrystr,'Proprietario','=','*'), 'valor', '=', '|') is not null;

                                         
                                     Exception
                                       --Caso ocorra algum erro durante o select de busco dos IDS
                                       when others then
                                          pStatus := pkg_glb_common.Status_Erro;
                                          pMessage := 'Erro ao tentar correr o cursor de IDs/Rota' || sqlerrm;
                                          pFlagId := pkg_glb_common.Boolean_Nao;
                                          pIdRetorno := -1;
                                          pIdRota := '';
                                          return;
                                     end; 
                                     
                                     --Verifico se os dados utilizados para gerar o ID são os mesmos que serão utilizados na geração do VALE DE FRETE
                                     if    ( Trim(vID_PropCnpj)  = Trim(pPropCnpj) )       --Mesmo CNPJ de proprietario
                                       and ( Trim(vID_MotorCnpj) = Trim(pMotor_CNPJ) )     --Mesmo CNPJ de motorisa
                                       and ( Trim(vID_MotorSaque) = Trim(pMotor_Saque) )   --Mesmo saque de motorista
                                       and ( Trim(vID_PlacaCodigo) = Trim(pPlaca_codigo) ) --Mesma Placa
                                       and ( Trim(vID_PlacaSaque) = Trim(pPlaca_saque) )   --Mesmo saque de placa
                                     then  
                                       --Seto os paramentros de retorno;
                                       pIdRetorno := cCursorid.Con_Freteoper_Id;
                                       pIdRota    := cCursorid.Con_Freteoper_Rota;
                                       pStatus := pkg_glb_common.Status_Nomal;
                                       pFlagId := pkg_glb_common.Boolean_Sim;
                                       pMessage := '';
                                       EXIT;
                                     end if;
                                     
                                   end loop;   
      
      
      Exception
        --Caso ocorra algum erro durante o processo de abertura/tratamento do cursor com os IDs/ROTA
        when others then
          pStatus := pkg_glb_common.Status_Erro;
          pMessage := 'Erro ao tentar correr o cursor de IDs/Rota' || sqlerrm;
          pFlagId := pkg_glb_common.Boolean_Nao;
          pIdRetorno := -1;
          return;
      end;
    end if;  
  end if;
  
  pStatus := pkg_glb_common.Status_Nomal;
  pMessage := '';
  
end sp_get_IdValeFrete;                             
                       
  -------------------------------------------------------------------------------------------------------------
  --Função utilizada para buscar um ID válido, não precisa estár validado, apenas solicitado e não utilizado --
  -------------------------------------------------------------------------------------------------------------
  procedure sp_get_idValidacao( pQtdeDiasValid   in  integer,
                                pProp_Cnpj       in  tdvadm.t_car_proprietario.car_proprietario_cgccpfcodigo%type,
                                pMotor_Cpf       in  tdvadm.t_car_carreteiro.car_carreteiro_cpfcodigo%type,
                                pMotor_saque     in  tdvadm.t_car_carreteiro.car_carreteiro_saque%type,
                                pPlaca_Codigo    in  tdvadm.t_car_veiculo.car_veiculo_placa%type,
                                pPlaca_saque     in  tdvadm.t_car_veiculo.car_veiculo_saque%type,
                             
                                pIdRetorno       out tdvadm.t_con_freteoper.con_freteoper_id%type,
                                pIdRota          out tdvadm.t_con_freteoper.con_freteoper_rota%type,
                                pFlagId          out char,
                                pStatus          out char,
                                pMessage         out varchar2
                             ) is 

   --Variavel de controle.
   vControl  boolean;  
   vCount Integer;                          

   --Cursor utilizado para buscar IDs, desse motorista, com esse proprietário, nesse veiculo e nessa rota.
   cursor vCursorId (
     vId_PropCnpj       tdvadm.t_car_proprietario.car_proprietario_cgccpfcodigo%type,
     vID_PlacaCodigo    tdvadm.t_car_veiculo.car_veiculo_placa%type,
     vID_PlacaSaque     tdvadm.t_car_veiculo.car_veiculo_saque%type,
     vID_MotorCnpj      tdvadm.t_car_carreteiro.car_carreteiro_cpfcodigo%type,
     vID_MotorSaque     tdvadm.t_car_carreteiro.car_carreteiro_saque%type,
     vID_QtdediasValid  integer
     ) Is
      Select 
      Distinct
      oper.con_freteoper_id,
      oper.con_freteoper_rota,
      oper.con_freteoper_dtcad
     from 
       t_con_freteoper  oper,
       t_uti_sequencia seq
     where
       0=0
      
     And seq.uti_sequencia_rota = oper.con_freteoper_rota
     And seq.uti_sequencia_codigo = oper.con_freteoper_id
      
      and 0 < ( select count(*) 
                from tdvadm.t_cfe_integratdv integr
                where integr.cfe_integratdv_cod = oper.cfe_integratdv_cod
                 and integr.cfe_integratdv_operusuario = 'N'
               )
               
      And seq.car_veiculo_placa = vID_PlacaCodigo 

      And Case 
            When  substr(Trim(NVL(vID_PlacaCodigo, '0000')), 01, 03) <> '000' 
                Or  substr(Trim(NVL(vID_PlacaCodigo, '00000')), 01, 5) <> 'SLT00' 
                And seq.car_carreteiro_cpfcodigo  =  vID_MotorCnpj 
                and seq.car_carreteiro_saque = vID_MotorSaque               
                and seq.car_proprietario_cgccpfcodigo =  vId_PropCnpj
                And seq.car_veiculo_saque =  vID_PlacaSaque              
                
             Then 1
             When substr(Trim( NVL(vID_PlacaCodigo, '000')), 01, 03) = '000' And 0=0 Then 1
           End=1    
      
      --Id Originado em uma das operações de contratação de motorista.
      AND OPER.CFE_INTEGRATDV_COD IN (1, 5,  20, 21, 25, 26, 27, 28, 41,'70','75','81')
      
      --Verifica se o ID está dentro do prazo de validade.
      and Trunc(oper.con_freteoper_dtcad) >= (trunc(sysdate) -  vID_QtdediasValid)
      
      order by oper.con_freteoper_dtcad DESC,
               oper.con_freteoper_id Desc;

     
     /* 
     Select 
      Distinct
      oper.con_freteoper_id,
      oper.con_freteoper_rota,
      oper.con_freteoper_dtcad
     from 
       t_con_freteoper  oper
     where
       0=0
      and 0 < ( select count(*) 
                from tdvadm.t_cfe_integratdv integr
                where integr.cfe_integratdv_cod = oper.cfe_integratdv_cod
                 and integr.cfe_integratdv_operusuario = 'N'
               )
      and NVL( TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'Placa','=','*'), 'valor', '=', '|'), 'R')          = NVL( Trim( vID_PlacaCodigo ), 'R')
      And Case 
            When substr(Trim(NVL(vID_PlacaCodigo, '0000')), 01, 03) <> '000' 
                And NVL( TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'Motorista','=','*'), 'valor', '=', '|'), 'R')      = NVL( Trim( vID_MotorCnpj ), 'R') 
                and NVL( TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'MotoristaSaque','=','*'), 'valor', '=', '|'), 'R') = NVL( Trim( vID_MotorSaque ), 'R')               
                and NVL( TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'Proprietario','=','*'), 'valor', '=', '|'), 'R')    = NVL( Trim( vId_PropCnpj ), 'R')
                and NVL( TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'PlacaSaque','=','*'), 'valor', '=', '|'), 'R')     = NVL( Trim( vID_PlacaSaque ), 'R')              
                
             Then 1
             When substr(Trim( NVL(vID_PlacaCodigo, '000')), 01, 03) = '000' And 0=0 Then 1
           End=1    
      
      --Id Originado em uma das operações de contratação de motorista.
      AND OPER.CFE_INTEGRATDV_COD IN (1, 5,  20, 21, 25, 26, 27, 28)
      
      --Verifica se o ID está dentro do prazo de validade.
      and Trunc(oper.con_freteoper_dtcad) >= (trunc(sysdate) -  vID_QtdediasValid)
      
      order by oper.con_freteoper_dtcad DESC,
               oper.con_freteoper_id Desc;
  */
   --Segundo cursor, que trará individualmente cada ID por Rota, e todas as suas validações.
   --Esse cursor deve ser aberto dentro do laço do primeiro cursor, e dependerá dos resultados de sua linha
   cursor vCursorDetId (
     vId_codigo      tdvadm.t_con_freteoper.con_freteoper_id%type,
     vId_rota        tdvadm.t_con_freteoper.con_freteoper_rota%type
    ) is
    SELECT 
      OPER.CON_FRETEOPER_ID,
      OPER.CON_FRETEOPER_ROTA,
      OPER.CFE_STATUSFRETEOPER_STATUS,
      OPER.CON_FRETEOPER_RETORNO
    FROM 
      T_CON_FRETEOPER OPER
    WHERE 
      0=0
      AND OPER.CON_FRETEOPER_ID   = vId_codigo
      AND OPER.CON_FRETEOPER_ROTA = vId_rota
      --Cursor dependerá das operações de viagem,
      AND OPER.CFE_INTEGRATDV_COD IN (1, 5,  20, 21, 25, 26, 27, 28); 
      
                             
                             
  begin
   --Inicializo as variáveis que serão utilizadas nessa procedure
   vControl := false;  


    Begin
      --Abro o primeiro cursor para buscar todos os ID, não utilizados e que estejam dentro do prazo de validade.
      for cCursorId in vCursorId( Trim(pProp_Cnpj),
                                  Trim(pPlaca_Codigo),
                                  Trim(pPlaca_saque),
                                  Trim(pMotor_Cpf),
                                  Trim(pMotor_saque),
                                  pQtdeDiasValid
                                ) 
                                loop
                                  --Seto a variável de controle para True;
                                  vControl := true;
                                  
                                  Begin
                                    --a partir de um id, conto a quantidade de registros não validados.
                                    SELECT 
                                      Count(*) Into vCount
                                    FROM 
                                      T_CON_FRETEOPER OPER
                                    WHERE 
                                      0=0
                                      AND OPER.CON_FRETEOPER_ID   = cCursorid.Con_Freteoper_Id
                                      AND OPER.CON_FRETEOPER_ROTA = cCursorid.Con_Freteoper_Rota
                                      --Cursor dependerá das operações de viagem,
                                      AND OPER.CFE_INTEGRATDV_COD IN (1, 5,  20, 21, 25, 26, 27, 28)
                                      And oper.cfe_statusfreteoper_status <> 'OK';
                                    
                                    --caso tenha algum registro diferente de 'ok'
                                    If vCount > 0 Then
                                      --Mudo o status da variável para false;
                                      vControl := False;
                                    End If;  

                                    /* for cCursorDetId in vCursorDetId( cCursorid.Con_Freteoper_Id,
                                                                      cCursorid.Con_Freteoper_Rota
                                                                    ) 
                                                                    Loop
                                                                      --Verifico os status de cada ID, caso o STATUS seja diferente de ok
                                                                      if Trim(cCursorDetId.Cfe_Statusfreteoper_Status) <> 'OK' then
                                                                        --Mudo o status da variável de controle para false
                                                                        vControl:= False;
                                                                      end if;
                                                                      
                                                                    end loop;   */
                                    
                                  exception
                                    when others then
                                      pStatus := pkg_glb_common.Status_Erro;
                                      pMessage := 'Erro ao tentar abrir / tratar o cursor de detalhe de ID' || chr(13)|| sqlerrm;
                                  end;
                                  
                                  --Saindo do loop central, verifico se a variável continua verdadeira
                                  if vControl  = true then
                                    --seto os paramentros de saida
                                    pStatus := pkg_glb_common.Status_Nomal;
                                    pMessage := '';
                                    pIdRetorno := cCursorId.Con_Freteoper_Id;
                                    pIdRota    := cCursorId.Con_Freteoper_Rota;
                                    pFlagId    :=  pkg_glb_common.Boolean_Sim;
                                    Exit;
                                  else
                                    --caso não encontre nenhum id Valido.
                                    pStatus := pkg_glb_common.Status_Nomal;
                                    pMessage := '';
                                    pIdRetorno := 0;
                                    pIdRota := '';
                                    pFlagId := pkg_glb_common.Boolean_Nao;  
                                  end if;
                                  
                                  
                                end loop;  
                                  
    Exception
      --caso ocorra algum erro durante o processo de abertura/ tratamento do cursor.
      when others then
        --seto os paramenros de retorno
        pStatus := pkg_glb_common.Status_Erro;
        pMessage:= 'Erro ao tentar abrir / tratar cursor de IDs.' || chr(13) || sqlerrm ;
        return;
    end;                            
  end;   

  Procedure Sp_GetIdValido2(p_apliacacao     in  tdvadm.t_usu_aplicacao.usu_aplicacao_codigo%type,
                            p_rota           in  tdvadm.t_glb_rota.glb_rota_codigo%type,
                            p_usuario        in  tdvadm.t_usu_usuario.usu_usuario_codigo%type,
                            p_placa_codigo   in  tdvadm.t_car_veiculo.car_veiculo_placa%type,
                            p_placa_saque    in  tdvadm.t_car_carreteiro.car_veiculo_saque%type,
                            p_motorcpf       in  tdvadm.t_car_carreteiro.car_carreteiro_cpfcodigo%type,
                            p_motorsaque     in  tdvadm.t_car_carreteiro.car_carreteiro_saque%type,
                            p_vfretecodigo   in tdvadm.t_con_valefrete.con_conhecimento_codigo%type,
                            p_vfreteserie    in tdvadm.t_con_valefrete.con_conhecimento_serie%type,
                            p_vfreterota     in tdvadm.t_glb_rota.glb_rota_codigo%type,
                            p_vfretesaque    in tdvadm.t_glb_rota.glb_rota_codigo%type,
                            p_idoper_codigo  out varchar2,
                            p_idoper_rota    out tdvadm.t_con_freteoper.con_freteoper_rota%type,
                            p_sts_idoper     out tdvadm.t_cfe_statusfreteoper.cfe_statusfreteoper_status%type,
                            p_tppagamento    out char,
                            p_tpproprietario out tdvadm.t_car_proprietario.car_proprietario_classantt%type,
                            p_status         out char,
                            p_message        out varchar2 ) is
                             
      --Variável utilizada para buscar dados do Proprietário
      vCnpj_Proprietario    tdvadm.t_car_proprietario.car_proprietario_cgccpfcodigo%type;
      vClassAntt            tdvadm.t_car_proprietario.car_proprietario_classantt%type;
      vClassEqp             tdvadm.t_car_proprietario.car_proprietario_classeqp%type;
      vTpPagamento          char(01);
      
      --Variável utilizada para recuperar o saque do motorista, caso não seja passado por paramentro.
      vMotor_Saq            tdvadm.t_car_carreteiro.car_carreteiro_saque%type;
      
      --Variáveis utilizadas para apoio a busca de ID
      vIdRetorno    tdvadm.t_con_freteoper.con_freteoper_id%type;
      vIdRota       tdvadm.t_con_freteoper.con_freteoper_rota%type;
      vFlagId       char(01);
      
      --Variável que será utilizada para buscar o paramentro de validade.
      vQtdDiasValid    glbadm.pkg_glb_auxiliar.tParametros;
      
      --Variável utilizada para buscar a QryString passada pelo ID,
      vtpPgto   varchar2(10);
      
      -- Variável de controle
      vCount  integer;
      
      -- Criando Variavel de controle para Status e Message
      vSTATUS             Char(1);
      vMESSAGE            Varchar2(23000);
      vPlacaIdNovo        varchar2(2000);    
      vStatusFrota        char(1);
      vMessageFrota       varchar2(2000);
                        
    Begin

       -- inicializa o Status
       vSTATUS := pkg_glb_common.Status_Nomal;  
       
       -- Raise nos parametros
       if lower(Trim(P_USUARIO)) = 'jsantosx' then
         raise_application_error(-20001, p_apliacacao  || chr(13) ||       
                                         p_rota        || chr(13) || 
                                         p_usuario     || chr(13) ||
                                         p_placa_codigo|| chr(13) ||
                                         p_placa_saque || chr(13) ||
                                         p_motorcpf    || chr(13) ||
                                         p_motorsaque  || chr(13) ||
                                         p_vfretecodigo|| chr(13) ||
                                         p_vfreteserie || chr(13) ||
                                         p_vfreterota  || chr(13) ||
                                         p_vfretesaque );
         
         
         
         
       end if;
      
       /***********************************************************/
       /*   provisóriamente caso a placa seja frota, devolve etc **/
       /***********************************************************/
       
       begin
         
          
          
       
          If (substr(Trim(P_PLACA_CODIGO), 1, 3) = '000')  Then
          
             pkg_cfe_frete.Sp_Get_PgtoFrota(P_PLACA_CODIGO,
                                            vStatusFrota, 
                                            vMessageFrota);
             
             
                                            
             
             if (NVL(vStatusFrota,'N') = PKG_GLB_COMMON.Status_Nomal) then
              
              begin
                
                begin
                  --busco o paramentro que vai definir a quantia de dias de validade para o ID.
                  glbadm.pkg_glb_auxiliar.sp_Espec_Params( P_USUARIO,
                                                           'vldmotor',
                                                           P_ROTA,
                                                           'PRAZO_VALIDADE_ID',
                                                           vQtdDiasValid
                                                         );  
                  
                exception
                  when others then
                    vstatus   := pkg_glb_common.Status_Erro;
                    vmessage  := 'Erro ao buscar paramentro de validade.' || chr(13) || sqlerrm;
                    p_status  := vSTATUS;
                    p_message := vMESSAGE;
                    return;
                end;
                
                --Executo a procedure responsável em trazer um ID valido.
                sp_get_idvalidacaofrota( vQtdDiasValid.NUMERICO1,
                                         vCnpj_Proprietario,
                                         P_MOTORCPF,
                                         vMotor_Saq,
                                         P_PLACA_CODIGO,
                                         P_PLACA_SAQUE,
                                         vIdRetorno,
                                         vIdRota,
                                         vFlagId,
                                         vSTATUS,
                                         vMESSAGE  
                                        );
                --Caso a procedure tenha retornado corretamente, seto os paramentros de saida.
                if vSTATUS = pkg_glb_common.Status_Nomal then

                  --verifico se o flag de ID retornou positivo
                  if vFlagId = pkg_glb_common.Boolean_Sim then
                     --seto os paramentros de retorno
                     P_IDOPER_CODIGO  := vIdRetorno;
                     P_IDOPER_ROTA    := vIdRota;
                     P_STATUS         := vSTATUS;
                     P_MESSAGE        := vMESSAGE;
                     P_TPPROPRIETARIO := 'EQP';
                     P_TPPAGAMENTO    := '0';
                     P_STS_IDOPER     := 'OK';
                    
                  end if;
                  
                  return;
                  
                end if;
                
                
                --Caso o retorno da pocedure não seja normal.                  
                iF nvl(vSTATUS,'E') <> pkg_glb_common.Status_Nomal Then
                   
                   sp_get_IdValeFrete( p_VfreteCodigo,
                                       p_VfreteSerie,
                                       p_VfreteRota,
                                       p_VfreteSaque,
                                       vCnpj_Proprietario,
                                       P_MOTORCPF,
                                       vMotor_Saq,
                                       P_PLACA_CODIGO,
                                       P_PLACA_SAQUE,
                                       vIdRetorno,
                                       vIdRota,
                                       vFlagId,
                                       vSTATUS,
                                       vMESSAGE
                                     );  
                   
                   if vFlagId = pkg_glb_common.Boolean_Sim then
                          
                      P_IDOPER_CODIGO  := vIdRetorno;
                      P_IDOPER_ROTA    := vIdRota;
                      P_TPPROPRIETARIO := 'EQP';
                      P_TPPAGAMENTO    := '0';
                      P_STS_IDOPER     := 'OK';
                      P_STATUS         := vSTATUS;
                      P_MESSAGE        := vMESSAGE;
                          
                   else
                      
                      P_TPPROPRIETARIO := 'EQP';
                      P_TPPAGAMENTO    := '0';
                      P_STATUS         := vSTATUS;
                      P_MESSAGE        := vMESSAGE;
                      
                   end if;
                          
                   return;
                   
                end if;  
     
                                    
              Exception
              --caso ocorra algum erro durante a execução da procedure responsável por trazer um id valido sem Ciot.
                when others then
                  vSTATUS := pkg_glb_common.Status_Erro;
                  vMESSAGE := 'Erro ao buscar ID Válido' || chr(13) || sqlerrm;
                  P_STATUS := vSTATUS;
                  P_MESSAGE := vMESSAGE;
                  return;
              end;
               
            else
              
                P_IDOPER_CODIGO  := '0';
                P_STS_IDOPER     := 'OK';
                P_IDOPER_ROTA    := '015';
                P_TPPROPRIETARIO := 'ETC';
                P_TPPAGAMENTO    := '0';
                vSTATUS         := TDVADM.PKG_GLB_COMMON.Status_Nomal;
                vMESSAGE        := Null;
                P_STATUS := vSTATUS;
                P_MESSAGE := vMESSAGE;
                Return;
            
            
            end if;
           
          End If; 
       
       end;
       
       /***********************************************************/
        
        
       -- Para pegar os parametros
       If (lower(Trim(P_USUARIO)) = '' ) Then
          
          vSTATUS := 'E';
          raise_application_error(-20001, 'Placa: ' || P_PLACA_CODIGO         || chr(13) ||
                       'Placa saque: ' || P_PLACA_SAQUE    || chr(13) ||
                       'Motorista: ' || P_MOTORCPF         || chr(13) ||
                       'P_MOTORSAQUE: ' || P_MOTORSAQUE    || chr(13) ||
                       'Vale Frete: ' || p_VfreteCodigo || chr(13) ||
                       'Vale Rota: ' || p_VfreteRota || chr(13) ||
                       'Vale Serie: ' || p_VfreteSerie || chr(13) ||
                       'Vale Saque: ' || p_VfreteSaque);

       End If;
       
       -- Raise nos parametros
       if lower(Trim(P_USUARIO)) = 'jsantosx' then
           
           raise_application_error(-20001, P_APLIACACAO    || chr(13) ||       
                                           P_ROTA          || chr(13) || 
                                           P_USUARIO       || chr(13) ||
                                           P_PLACA_CODIGO  || chr(13) ||
                                           P_PLACA_SAQUE   || chr(13) ||
                                           P_MOTORCPF      || chr(13) ||
                                           P_MOTORSAQUE    || chr(13) ||
                                           p_VfreteCodigo  || chr(13) ||
                                           p_VfreteSerie   || chr(13) ||
                                           p_VfreteRota    || chr(13) ||
                                           p_VfreteSaque );
                                           
       end if;
      
       --Inicializa as variáveis que serão utilizadas nessa procedure
       vCnpj_Proprietario    := '';
       vClassAntt            := '';
       vClassEqp             := '';
       vTpPagamento          := '';
       
       vIdRetorno := 0;
       vIdRota := '';
       vFlagId := '';
      
       If nvl(Trim(p_VfreteCodigo), 'R') <> 'R' Then
         --vrifico se o vale de frete existe.
         select count(*) 
           into vCount
           from t_con_valefrete frete
          where 0=0
            and frete.con_conhecimento_codigo = Trim(p_VfreteCodigo)
            and frete.con_conhecimento_serie  = Trim(p_VfreteSerie)
            and frete.glb_rota_codigo         = Trim(p_VfreteRota)
            and frete.con_valefrete_saque     = Trim(p_VfreteSaque);
           
         if vCount = 0 then
           vSTATUS := pkg_glb_common.Status_Erro;
           vMESSAGE := 'Vale de frete passado não existe.' ;
           P_STATUS := vSTATUS;
           P_MESSAGE := vMESSAGE;
           return;
         end if;    
         
       End If;
      
       -- A partir da placa e saque do veículo vou buscar o CNPJ/CPF do proprietário.
       begin
         
         SELECT prop.car_proprietario_cgccpfcodigo,
                prop.car_proprietario_classantt,
                prop.car_proprietario_classeqp
           into vCnpj_Proprietario,
                vClassAntt,
                vClassEqp
           FROM T_CAR_VEICULO  VEICULO,
                T_CAR_PROPRIETARIO  PROP
          WHERE 0=0
            AND VEICULO.CAR_PROPRIETARIO_CGCCPFCODIGO = PROP.CAR_PROPRIETARIO_CGCCPFCODIGO
            AND VEICULO.CAR_VEICULO_PLACA             = Trim(P_PLACA_CODIGO)
            AND VEICULO.CAR_VEICULO_SAQUE             = Trim(P_PLACA_SAQUE);
            
       Exception
         --Caso não encontre o CNPJ do proprietário
         when no_data_found then
           vSTATUS := pkg_glb_common.Status_Erro;
           vMESSAGE := 'CNPJ / CPF do proprietário não foi localizado.';
           P_STATUS := vSTATUS;
           P_MESSAGE := vMESSAGE;
           return;
           
         --caso ocorra algum outro erro.  
         when others then
           vSTATUS := pkg_glb_common.Status_Erro;
           vMESSAGE := 'Erro ao tentar localizar CNPJ de proprietário.' || chr(13) || sqlerrm;
           P_STATUS := vSTATUS;
           P_MESSAGE := vMESSAGE;
           return;
       End;
      
       -- Caso o paramentro de saque do motorista esteja em branco,
       if ( nvl(trim(P_MOTORSAQUE), 'R') = 'R' and ( substr(Trim(P_PLACA_CODIGO), 01, 02) <> '00') )  then
        --Busco o maior saque do carreteiro.
        begin
          select max(carret.car_carreteiro_saque) 
            into vMotor_Saq 
            from t_car_carreteiro carret
           where carret.car_carreteiro_cpfcodigo = P_MOTORCPF;
        Exception
          when others then
            vSTATUS := PKG_GLB_COMMON.Status_Erro;
            vMESSAGE := 'Erro ao tentar definir o saque do motorista.' || sqlerrm;
        end; 
      
      else
        --caso o saque do motorista seja passado por paramentro, iguala a 
        --variável com o paramentro.
        vMotor_Saq := P_MOTORSAQUE;
      end if;
      
       -- Define a classe ANTT do proprietário 
       if vClassEqp = 'S' then
        
        IF vClassAntt in ('ETC', 'CTC') then
           P_TPPROPRIETARIO := 'EQP';
        ELSE
          P_TPPROPRIETARIO := vClassAntt;  
        END IF;  
        
      ELSE
        P_TPPROPRIETARIO := vClassAntt;  
      end if;
      
       begin
        --Vou buscar um ID, baseando-se no Vale de Frete.
        if (nvl(Trim(p_VfreteCodigo), 'R') <> 'R') then 
          sp_get_IdValeFrete( p_VfreteCodigo,
                              p_VfreteSerie,
                              p_VfreteRota,
                              p_VfreteSaque,
                              vCnpj_Proprietario,
                              P_MOTORCPF,
                              vMotor_Saq,
                              P_PLACA_CODIGO,
                              P_PLACA_SAQUE,
                              vIdRetorno,
                              vIdRota,
                              vFlagId,
                              vSTATUS,
                              vMESSAGE
                            );  
        else
          --Caso o Vale de frete, não tenha sido passado, seto o flag para não para poder buscar um id disponivel.
          vSTATUS := pkg_glb_common.Status_Nomal;
          vFlagId  := pkg_glb_common.Boolean_Nao;                    
        end if;                    
        
      Exception
        when others then
          vSTATUS := pkg_glb_common.Status_Erro;
          vMESSAGE := 'Erro ao buscar ID, através do vale de frete.';
          P_STATUS := vSTATUS;
          P_MESSAGE := vMESSAGE;
          return;
      End;                      
      
       -- Caso o status não tenha retornado como normal, 
       if vSTATUS <> pkg_glb_common.Status_Nomal then
         vMESSAGE := 'Erro apos Rodar sp_get_IdValeFrete';
        --simplesmente encerro o processamento, deixando o status e mensagem que foi gerado na procedure.
        P_STATUS := vSTATUS;
        P_MESSAGE := vMESSAGE;
        return;
       end if;
      
       -- Caso - status tenha retornarnado normal, 
       if vSTATUS = pkg_glb_common.Status_Nomal then
        --verifico se o flag de id, retornou positivo
        if vFlagId = pkg_glb_common.Boolean_Sim then
          P_IDOPER_CODIGO := vIdRetorno;
          P_IDOPER_ROTA := vIdRota;
        else
          --Caso o flag não seja positivo, vou buscar o id sem Vale de Frete.
          
          begin
            --busco o paramentro que vai definir a quantia de dias de validade para o ID.
            glbadm.pkg_glb_auxiliar.sp_Espec_Params( P_USUARIO,
                                                     'vldmotor',
                                                     P_ROTA,
                                                     'PRAZO_VALIDADE_ID',
                                                     vQtdDiasValid
                                                    );  
            
          exception
            when others then
              vSTATUS := pkg_glb_common.Status_Erro;
              vMESSAGE := 'Erro ao buscar paramentro de validade.' || chr(13) || sqlerrm;
              P_STATUS := vSTATUS;
              P_MESSAGE := vMESSAGE;
              return;
          end;
          
          begin
            --Executo a procedure responsável em trazer um ID valido.
            sp_get_idValidacao( vQtdDiasValid.NUMERICO1,
                                vCnpj_Proprietario,
                                P_MOTORCPF,
                                vMotor_Saq,
                                P_PLACA_CODIGO,
                                P_PLACA_SAQUE,
                                vIdRetorno,
                                vIdRota,
                                vFlagId,
                                vSTATUS,
                                vMESSAGE  
                              );
            --Caso o retorno da pocedure não seja normal.                  
            if vSTATUS <> pkg_glb_common.Status_Nomal Then
               vMESSAGE := 'Erro apos Rodar sp_get_idValidacao';
              --simplesmente encerro o processamento, devolvendo status e mensagem gerados dentro da procedure.
              P_STATUS := vSTATUS;
              P_MESSAGE := vMESSAGE;
              return;
            end if;  
            
            --Caso a procedure tenha retornado corretamente, seto os paramentros de saida.
            if vSTATUS = pkg_glb_common.Status_Nomal then

              --verifico se o flag de ID retornou positivo
              if vFlagId = pkg_glb_common.Boolean_Sim then
                --seto os paramentros de retorno
                P_IDOPER_CODIGO := vIdRetorno;
                P_IDOPER_ROTA := vIdRota;
              end if;
            end if;
                            
                                  
          Exception
            --caso ocorra algum erro durante a execução da procedure responsável por trazer um id valido sem Ciot.
            when others then
              vSTATUS := pkg_glb_common.Status_Erro;
              vMESSAGE := 'Erro ao buscar ID Válido' || chr(13) || sqlerrm;
              P_STATUS := vSTATUS;
              P_MESSAGE := vMESSAGE;
              return;
          end;                      
          
          
            
        end if;
        
       end if;
      
       -- Se o flag de Id estiver positivo quer dizer que em algum momento, procedure de busca por vale de frete, 
       -- ou busca por id sem ciot, foi encontrado um ID... vou buscar o meio de pagamento definido.
       if vFlagId = pkg_glb_common.Boolean_Sim then
        
        --busco a operação que foi realizada na optenção desse ID.
        select
         distinct
          w.con_freteoper_id,
          w.con_freteoper_rota,
          TDVADM.fn_querystring(TDVADM.fn_querystring(w.con_freteoper_paramqrystr,'IntegraTdv_Cod','=','*'), 'valor', '=', '|') Tp_pgto
        into
          vIdRetorno,
          vIdRota,
          vtpPgto        
        from 
          t_con_freteoper w
        where
          0=0
          and w.con_freteoper_id = P_IDOPER_CODIGO
          and w.con_freteoper_rota = P_IDOPER_ROTA
          and TDVADM.fn_querystring(TDVADM.fn_querystring(w.con_freteoper_paramqrystr,'IntegraTdv_Cod','=','*'), 'valor', '=', '|') is not null
          AND w.CFE_INTEGRATDV_COD IN (1, 5,  20, 21, 25, 26, 27, 28,41, 81, 75, 70);
          
        --devolvo o tipo de pagamento.
        P_STS_IDOPER := 'OK';
        P_TPPAGAMENTO   := case Trim(vtpPgto)
                             when  '1' then pgtoFrete_Cartao
                             when '20' then pgtoFrete_Cartao
                             when  '5' then pgtoFrete_ContaCorrente
                             when '21' then pgtoFrete_ContaCorrente    
                           end;    
        
        If vSTATUS = 'N' Then
           P_STATUS := vSTATUS;
        End If;  
        
      end if;
     
                           
    end Sp_GetIdValido2;
    
  Procedure Sp_GetIdValidoGer(p_apliacacao     in  tdvadm.t_usu_aplicacao.usu_aplicacao_codigo%type,
                              p_rota           in  tdvadm.t_glb_rota.glb_rota_codigo%type,
                              p_usuario        in  tdvadm.t_usu_usuario.usu_usuario_codigo%type,
                              p_placa_codigo   in  tdvadm.t_car_veiculo.car_veiculo_placa%type,
                              p_placa_saque    in  tdvadm.t_car_carreteiro.car_veiculo_saque%type,
                              p_motorcpf       in  tdvadm.t_car_carreteiro.car_carreteiro_cpfcodigo%type,
                              p_motorsaque     in  tdvadm.t_car_carreteiro.car_carreteiro_saque%type,
                              p_vfretecodigo   in  tdvadm.t_con_valefrete.con_conhecimento_codigo%type,
                              p_vfreteserie    in  tdvadm.t_con_valefrete.con_conhecimento_serie%type,
                              p_vfreterota     in  tdvadm.t_glb_rota.glb_rota_codigo%type,
                              p_vfretesaque    in  tdvadm.t_glb_rota.glb_rota_codigo%type,
                              p_idoper_codigo  out varchar2,
                              p_idoper_rota    out tdvadm.t_con_freteoper.con_freteoper_rota%type,
                              p_Gererenciadora out varchar2,
                              p_sts_idoper     out tdvadm.t_cfe_statusfreteoper.cfe_statusfreteoper_status%type,
                              p_tppagamento    out char,
                              p_tpproprietario out tdvadm.t_car_proprietario.car_proprietario_classantt%type,
                              p_status         out char,
                              p_message        out varchar2 ) is
                          
      --Variável utilizada para buscar dados do Proprietário
      vCnpj_Proprietario    tdvadm.t_car_proprietario.car_proprietario_cgccpfcodigo%type;
      vClassAntt            tdvadm.t_car_proprietario.car_proprietario_classantt%type;
      vClassEqp             tdvadm.t_car_proprietario.car_proprietario_classeqp%type;
      vTpPagamento          char(01);
      
      --Variável utilizada para recuperar o saque do motorista, caso não seja passado por paramentro.
      vMotor_Saq            tdvadm.t_car_carreteiro.car_carreteiro_saque%type;
      
      --Variáveis utilizadas para apoio a busca de ID
      vIdRetorno    tdvadm.t_con_freteoper.con_freteoper_id%type;
      vIdRota       tdvadm.t_con_freteoper.con_freteoper_rota%type;
      vFlagId       char(01);
      
      --Variável que será utilizada para buscar o paramentro de validade.
      vQtdDiasValid    glbadm.pkg_glb_auxiliar.tParametros;
      
      --Variável utilizada para buscar a QryString passada pelo ID,
      vtpPgto   varchar2(10);
      
      -- Variável de controle
      vCount  integer;
      
      -- Criando Variavel de controle para Status e Message
      vSTATUS             Char(1);
      vMESSAGE            Varchar2(23000);
      vPlacaIdNovo        varchar2(2000);    
      vStatusFrota        char(1);
      vMessageFrota       varchar2(2000);
                        
    Begin

       -- inicializa o Status
       vSTATUS := pkg_glb_common.Status_Nomal;  
       
       -- Raise nos parametros
       if lower(Trim(P_USUARIO)) = 'jsantosx' then
         raise_application_error(-20001, P_APLIACACAO    || chr(13) ||       
                                         P_ROTA          || chr(13) || 
                                         P_USUARIO       || chr(13) ||
                                         P_PLACA_CODIGO  || chr(13) ||
                                         P_PLACA_SAQUE   || chr(13) ||
                                         P_MOTORCPF      || chr(13) ||
                                         P_MOTORSAQUE    || chr(13) ||
                                         p_VfreteCodigo  || chr(13) ||
                                         p_VfreteSerie   || chr(13) ||
                                         p_VfreteRota    || chr(13) ||
                                         p_VfreteSaque );
         
         
         
         
       end if;
      
       /***********************************************************/
       /*   provisóriamente caso a placa seja frota, devolve etc **/
       /***********************************************************/
       
       begin
         
          
          
       
          If (substr(Trim(P_PLACA_CODIGO), 1, 3) = '000')  Then
          
             pkg_cfe_frete.Sp_Get_PgtoFrota(P_PLACA_CODIGO,
                                            vStatusFrota, 
                                            vMessageFrota);
             
             
                                            
             
             if (NVL(vStatusFrota,'N') = PKG_GLB_COMMON.Status_Nomal) then
              
              begin
                
                begin
                  --busco o paramentro que vai definir a quantia de dias de validade para o ID.
                  glbadm.pkg_glb_auxiliar.sp_Espec_Params( P_USUARIO,
                                                           'vldmotor',
                                                           P_ROTA,
                                                           'PRAZO_VALIDADE_ID',
                                                           vQtdDiasValid
                                                         );  
                  
                exception
                  when others then
                    vstatus   := pkg_glb_common.Status_Erro;
                    vmessage  := 'Erro ao buscar paramentro de validade.' || chr(13) || sqlerrm;
                    p_status  := vSTATUS;
                    p_message := vMESSAGE;
                    return;
                end;
                
                --Executo a procedure responsável em trazer um ID valido.
                sp_get_idvalidacaofrota( vQtdDiasValid.NUMERICO1,
                                         vCnpj_Proprietario,
                                         P_MOTORCPF,
                                         vMotor_Saq,
                                         P_PLACA_CODIGO,
                                         P_PLACA_SAQUE,
                                         vIdRetorno,
                                         vIdRota,
                                         vFlagId,
                                         vSTATUS,
                                         vMESSAGE  
                                        );
                --Caso a procedure tenha retornado corretamente, seto os paramentros de saida.
                if vSTATUS = pkg_glb_common.Status_Nomal then

                  --verifico se o flag de ID retornou positivo
                  if vFlagId = pkg_glb_common.Boolean_Sim then
                     --seto os paramentros de retorno
                     P_IDOPER_CODIGO  := vIdRetorno;
                     P_IDOPER_ROTA    := vIdRota;
                     P_STATUS         := vSTATUS;
                     P_MESSAGE        := vMESSAGE;
                     P_TPPROPRIETARIO := 'EQP';
                     P_TPPAGAMENTO    := '0';
                     P_STS_IDOPER     := 'OK';
                    
                  end if;
                  
                  return;
                  
                end if;
                
                
                --Caso o retorno da pocedure não seja normal.                  
                iF nvl(vSTATUS,'E') <> pkg_glb_common.Status_Nomal Then
                   
                   sp_get_IdValeFrete( p_VfreteCodigo,
                                       p_VfreteSerie,
                                       p_VfreteRota,
                                       p_VfreteSaque,
                                       vCnpj_Proprietario,
                                       P_MOTORCPF,
                                       vMotor_Saq,
                                       P_PLACA_CODIGO,
                                       P_PLACA_SAQUE,
                                       vIdRetorno,
                                       vIdRota,
                                       vFlagId,
                                       vSTATUS,
                                       vMESSAGE
                                     );  
                   
                   if vFlagId = pkg_glb_common.Boolean_Sim then
                          
                      P_IDOPER_CODIGO  := vIdRetorno;
                      P_IDOPER_ROTA    := vIdRota;
                      P_TPPROPRIETARIO := 'EQP';
                      P_TPPAGAMENTO    := '0';
                      P_STS_IDOPER     := 'OK';
                      P_STATUS         := vSTATUS;
                      P_MESSAGE        := vMESSAGE;
                          
                   else
                      
                      P_TPPROPRIETARIO := 'EQP';
                      P_TPPAGAMENTO    := '0';
                      P_STATUS         := vSTATUS;
                      P_MESSAGE        := vMESSAGE;
                      
                   end if;
                          
                   return;
                   
                end if;  
     
                                    
              Exception
              --caso ocorra algum erro durante a execução da procedure responsável por trazer um id valido sem Ciot.
                when others then
                  vSTATUS := pkg_glb_common.Status_Erro;
                  vMESSAGE := 'Erro ao buscar ID Válido' || chr(13) || sqlerrm;
                  P_STATUS := vSTATUS;
                  P_MESSAGE := vMESSAGE;
                  return;
              end;
               
            else
              
                P_IDOPER_CODIGO  := '0';
                P_STS_IDOPER     := 'OK';
                P_IDOPER_ROTA    := '015';
                P_TPPROPRIETARIO := 'ETC';
                P_TPPAGAMENTO    := '0';
                vSTATUS         := TDVADM.PKG_GLB_COMMON.Status_Nomal;
                vMESSAGE        := Null;
                P_STATUS := vSTATUS;
                P_MESSAGE := vMESSAGE;
                Return;
            
            
            end if;
           
          End If; 
       
       end;
       
       /***********************************************************/
        
        
       -- Para pegar os parametros
       If (lower(Trim(P_USUARIO)) = '' ) Then
          
          vSTATUS := 'E';
          raise_application_error(-20001, 'Placa: ' || P_PLACA_CODIGO         || chr(13) ||
                       'Placa saque: ' || P_PLACA_SAQUE    || chr(13) ||
                       'Motorista: ' || P_MOTORCPF         || chr(13) ||
                       'P_MOTORSAQUE: ' || P_MOTORSAQUE    || chr(13) ||
                       'Vale Frete: ' || p_VfreteCodigo || chr(13) ||
                       'Vale Rota: ' || p_VfreteRota || chr(13) ||
                       'Vale Serie: ' || p_VfreteSerie || chr(13) ||
                       'Vale Saque: ' || p_VfreteSaque);

       End If;
       
       -- Raise nos parametros
       if lower(Trim(P_USUARIO)) = 'jsantosx' then
           
           raise_application_error(-20001, P_APLIACACAO    || chr(13) ||       
                                           P_ROTA          || chr(13) || 
                                           P_USUARIO       || chr(13) ||
                                           P_PLACA_CODIGO  || chr(13) ||
                                           P_PLACA_SAQUE   || chr(13) ||
                                           P_MOTORCPF      || chr(13) ||
                                           P_MOTORSAQUE    || chr(13) ||
                                           p_VfreteCodigo  || chr(13) ||
                                           p_VfreteSerie   || chr(13) ||
                                           p_VfreteRota    || chr(13) ||
                                           p_VfreteSaque );
                                           
       end if;
      
       --Inicializa as variáveis que serão utilizadas nessa procedure
       vCnpj_Proprietario    := '';
       vClassAntt            := '';
       vClassEqp             := '';
       vTpPagamento          := '';
       
       vIdRetorno := 0;
       vIdRota := '';
       vFlagId := '';
      
       If nvl(Trim(p_VfreteCodigo), 'R') <> 'R' Then
         --vrifico se o vale de frete existe.
         select count(*) 
           into vCount
           from t_con_valefrete frete
          where 0=0
            and frete.con_conhecimento_codigo = Trim(p_VfreteCodigo)
            and frete.con_conhecimento_serie  = Trim(p_VfreteSerie)
            and frete.glb_rota_codigo         = Trim(p_VfreteRota)
            and frete.con_valefrete_saque     = Trim(p_VfreteSaque);
           
         if vCount = 0 then
           vSTATUS := pkg_glb_common.Status_Erro;
           vMESSAGE := 'Vale de frete passado não existe.' ;
           P_STATUS := vSTATUS;
           P_MESSAGE := vMESSAGE;
           return;
         end if;    
         
       End If;
      
       -- A partir da placa e saque do veículo vou buscar o CNPJ/CPF do proprietário.
       begin
         
         SELECT prop.car_proprietario_cgccpfcodigo,
                prop.car_proprietario_classantt,
                prop.car_proprietario_classeqp
           into vCnpj_Proprietario,
                vClassAntt,
                vClassEqp
           FROM T_CAR_VEICULO  VEICULO,
                T_CAR_PROPRIETARIO  PROP
          WHERE 0=0
            AND VEICULO.CAR_PROPRIETARIO_CGCCPFCODIGO = PROP.CAR_PROPRIETARIO_CGCCPFCODIGO
            AND VEICULO.CAR_VEICULO_PLACA             = Trim(P_PLACA_CODIGO)
            AND VEICULO.CAR_VEICULO_SAQUE             = Trim(P_PLACA_SAQUE);
            
       Exception
         --Caso não encontre o CNPJ do proprietário
         when no_data_found then
           vSTATUS := pkg_glb_common.Status_Erro;
           vMESSAGE := 'CNPJ / CPF do proprietário não foi localizado.';
           P_STATUS := vSTATUS;
           P_MESSAGE := vMESSAGE;
           return;
           
         --caso ocorra algum outro erro.  
         when others then
           vSTATUS := pkg_glb_common.Status_Erro;
           vMESSAGE := 'Erro ao tentar localizar CNPJ de proprietário.' || chr(13) || sqlerrm;
           P_STATUS := vSTATUS;
           P_MESSAGE := vMESSAGE;
           return;
       End;
      
       -- Caso o paramentro de saque do motorista esteja em branco,
       if ( nvl(trim(P_MOTORSAQUE), 'R') = 'R' and ( substr(Trim(P_PLACA_CODIGO), 01, 02) <> '00') )  then
        --Busco o maior saque do carreteiro.
        begin
          select max(carret.car_carreteiro_saque) 
            into vMotor_Saq 
            from t_car_carreteiro carret
           where carret.car_carreteiro_cpfcodigo = P_MOTORCPF;
        Exception
          when others then
            vSTATUS := PKG_GLB_COMMON.Status_Erro;
            vMESSAGE := 'Erro ao tentar definir o saque do motorista.' || sqlerrm;
        end; 
      
      else
        --caso o saque do motorista seja passado por paramentro, iguala a 
        --variável com o paramentro.
        vMotor_Saq := P_MOTORSAQUE;
      end if;
      
       -- Define a classe ANTT do proprietário 
       if vClassEqp = 'S' then
        
        IF vClassAntt in ('ETC', 'CTC') then
           P_TPPROPRIETARIO := 'EQP';
        ELSE
          P_TPPROPRIETARIO := vClassAntt;  
        END IF;  
        
      ELSE
        P_TPPROPRIETARIO := vClassAntt;  
      end if;
      
       begin
        --Vou buscar um ID, baseando-se no Vale de Frete.
        if (nvl(Trim(p_VfreteCodigo), 'R') <> 'R') then 
          sp_get_IdValeFrete( p_VfreteCodigo,
                              p_VfreteSerie,
                              p_VfreteRota,
                              p_VfreteSaque,
                              vCnpj_Proprietario,
                              P_MOTORCPF,
                              vMotor_Saq,
                              P_PLACA_CODIGO,
                              P_PLACA_SAQUE,
                              vIdRetorno,
                              vIdRota,
                              vFlagId,
                              vSTATUS,
                              vMESSAGE
                            );  
        else
          --Caso o Vale de frete, não tenha sido passado, seto o flag para não para poder buscar um id disponivel.
          vSTATUS := pkg_glb_common.Status_Nomal;
          vFlagId  := pkg_glb_common.Boolean_Nao;                    
        end if;                    
        
      Exception
        when others then
          vSTATUS := pkg_glb_common.Status_Erro;
          vMESSAGE := 'Erro ao buscar ID, através do vale de frete.';
          P_STATUS := vSTATUS;
          P_MESSAGE := vMESSAGE;
          return;
      End;                      
      
       -- Caso o status não tenha retornado como normal, 
       if vSTATUS <> pkg_glb_common.Status_Nomal then
         vMESSAGE := 'Erro apos Rodar sp_get_IdValeFrete';
        --simplesmente encerro o processamento, deixando o status e mensagem que foi gerado na procedure.
        P_STATUS := vSTATUS;
        P_MESSAGE := vMESSAGE;
        return;
       end if;
      
       -- Caso - status tenha retornarnado normal, 
       if vSTATUS = pkg_glb_common.Status_Nomal then
        --verifico se o flag de id, retornou positivo
        if vFlagId = pkg_glb_common.Boolean_Sim then
          P_IDOPER_CODIGO := vIdRetorno;
          P_IDOPER_ROTA := vIdRota;
        else
          --Caso o flag não seja positivo, vou buscar o id sem Vale de Frete.
          
          begin
            --busco o paramentro que vai definir a quantia de dias de validade para o ID.
            glbadm.pkg_glb_auxiliar.sp_Espec_Params( P_USUARIO,
                                                     'vldmotor',
                                                     P_ROTA,
                                                     'PRAZO_VALIDADE_ID',
                                                     vQtdDiasValid
                                                    );  
            
          exception
            when others then
              vSTATUS := pkg_glb_common.Status_Erro;
              vMESSAGE := 'Erro ao buscar paramentro de validade.' || chr(13) || sqlerrm;
              P_STATUS := vSTATUS;
              P_MESSAGE := vMESSAGE;
              return;
          end;
          
          begin
            --Executo a procedure responsável em trazer um ID valido.
            sp_get_idValidacao( vQtdDiasValid.NUMERICO1,
                                vCnpj_Proprietario,
                                P_MOTORCPF,
                                vMotor_Saq,
                                P_PLACA_CODIGO,
                                P_PLACA_SAQUE,
                                vIdRetorno,
                                vIdRota,
                                vFlagId,
                                vSTATUS,
                                vMESSAGE  
                              );
            --Caso o retorno da pocedure não seja normal.                  
            if vSTATUS <> pkg_glb_common.Status_Nomal Then
               vMESSAGE := 'Erro apos Rodar sp_get_idValidacao';
              --simplesmente encerro o processamento, devolvendo status e mensagem gerados dentro da procedure.
              P_STATUS := vSTATUS;
              P_MESSAGE := vMESSAGE;
              return;
            end if;  
            
            --Caso a procedure tenha retornado corretamente, seto os paramentros de saida.
            if vSTATUS = pkg_glb_common.Status_Nomal then

              --verifico se o flag de ID retornou positivo
              if vFlagId = pkg_glb_common.Boolean_Sim then
                --seto os paramentros de retorno
                P_IDOPER_CODIGO := vIdRetorno;
                P_IDOPER_ROTA := vIdRota;
              end if;
            end if;
                            
                                  
          Exception
            --caso ocorra algum erro durante a execução da procedure responsável por trazer um id valido sem Ciot.
            when others then
              vSTATUS := pkg_glb_common.Status_Erro;
              vMESSAGE := 'Erro ao buscar ID Válido' || chr(13) || sqlerrm;
              P_STATUS := vSTATUS;
              P_MESSAGE := vMESSAGE;
              return;
          end;                      
          
          
            
        end if;
        
       end if;
      
       -- Se o flag de Id estiver positivo quer dizer que em algum momento, procedure de busca por vale de frete, 
       -- ou busca por id sem ciot, foi encontrado um ID... vou buscar o meio de pagamento definido.
       if vFlagId = pkg_glb_common.Boolean_Sim then
        
        --busco a operação que foi realizada na optenção desse ID.
        Begin 
            select
             distinct
              w.con_freteoper_id,
              w.con_freteoper_rota,
              TDVADM.fn_querystring(TDVADM.fn_querystring(w.con_freteoper_paramqrystr,'IntegraTdv_Cod','=','*'), 'valor', '=', '|') Tp_pgto
            into
              vIdRetorno,
              vIdRota,
              vtpPgto        
            from 
              t_con_freteoper w
            where
              0=0
              and w.con_freteoper_id = P_IDOPER_CODIGO
              and w.con_freteoper_rota = vIdRota
              and TDVADM.fn_querystring(TDVADM.fn_querystring(w.con_freteoper_paramqrystr,'IntegraTdv_Cod','=','*'), 'valor', '=', '|') is not null
              AND w.CFE_INTEGRATDV_COD IN (1, 5,  20, 21, 25, 26, 27, 28,41, 81, 75, 70);
        Exception
          When NO_DATA_FOUND Then
             vIdRetorno := null;
             vIdRota := null;
             vtpPgto := null;

          End;
        --devolvo o tipo de pagamento.
        P_STS_IDOPER := 'OK';
        P_TPPAGAMENTO   := case Trim(vtpPgto)
                             when  '1' then pgtoFrete_Cartao
                             when '20' then pgtoFrete_Cartao
                             when  '5' then pgtoFrete_ContaCorrente
                             when '21' then pgtoFrete_ContaCorrente    
                           end;    
        
        If vSTATUS = 'N' Then
           P_STATUS := vSTATUS;
        End If;  
        
      end if;
      
       -- retornando a Gerenciadora do Id
       if (vIdRota is not null) then
        
        select nvl(s.cfe_gerenbco_cod,'1')||'-'||TRIM(NVL(G.CFE_GERENBCO_DESC,'Pamcary'))
          into p_Gererenciadora
          from t_uti_sequencia s,
               t_cfe_gerenbco g
         where s.uti_sequencia_rota   = vIdRota
           and s.uti_sequencia_codigo = p_idoper_codigo
           and s.cfe_gerenbco_cod     = g.cfe_gerenbco_cod(+);   
           
      end if;  
     
                           
    end Sp_GetIdValidoGer;


  ---------------------------------------------------------------------------------------------------------------------               
  -- Procedure utilizada para buscar um CIOT.                                                                   --
  ---------------------------------------------------------------------------------------------------------------------               
  PROCEDURE SP_GETCIOT(P_APLIACACAO    IN  TDVADM.T_USU_APLICACAO.USU_APLICACAO_CODIGO%TYPE,
                       P_ROTA          IN  TDVADM.T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,
                       P_USUARIO       IN  TDVADM.T_USU_USUARIO.USU_USUARIO_CODIGO%TYPE,
                       P_IDOPER_CODIGO IN OUT VARCHAR2,
                       P_IDOPER_ROTA   IN OUT CHAR,
                       P_VFRETE        IN  T_CON_VALEFRETE.CON_CONHECIMENTO_CODIGO%TYPE,
                       P_VFSERIE       IN  T_CON_VALEFRETE.CON_CONHECIMENTO_SERIE%TYPE,
                       P_VFROTA        IN  T_CON_VALEFRETE.GLB_ROTA_CODIGO%TYPE,
                       P_VFSAQUE       IN  T_CON_VALEFRETE.CON_VALEFRETE_SAQUE%TYPE,
                       P_CIOT          OUT VARCHAR2,
                       P_TPPAGAMENTO   OUT VARCHAR2,
                       P_STATUS        OUT CHAR,
                       P_MESSAGE       OUT VARCHAR2) IS
  vTemColeta   number;
  vTemCte      number;
  BEGIN
     P_STATUS := tdvadm.pkg_glb_common.Status_Nomal;
     P_MESSAGE := NULL;
     
     vTemColeta := 0;
     vTemCte    := 0;
     -- Conta se existe coletas vinculadas no VFRETE
     select count(*)
       into vTemColeta
     From tdvadm.t_con_vfretecoleta c
     where c.con_valefrete_codigo = P_VFRETE
       and c.con_valefrete_serie = P_VFSERIE
       and c.glb_rota_codigovalefrete = P_VFROTA
       and c.con_valefrete_saque = P_VFSAQUE;
     
     select count(*)
       into vTemCte
     From tdvadm.t_con_vfreteconhec c
     where c.con_valefrete_codigo = P_VFRETE
       and c.con_valefrete_serie = P_VFSERIE
       and c.glb_rota_codigovalefrete = P_VFROTA
       and c.con_valefrete_saque = P_VFSAQUE;
     
     If ( vTemColeta > 0 ) and ( vTemCte = 0 ) and ( P_VFROTA < '900' ) then
     
        Begin  
         select vc.vgm_vgciot_numero,
                vc.con_freteoper_id,
                vc.con_freteoper_rota,
                vc.vgm_vgciot_tppagamento
            INTO P_CIOT,
                 P_IDOPER_CODIGO,
                 P_IDOPER_ROTA,
                 P_TPPAGAMENTO
         from tdvadm.t_vgm_documentos l,
              tdvadm.T_VGM_VGCIOT VC
              ,tdvadm.t_fcf_fretecarmemo m
         where l.glb_rota_codigo = vc.glb_rota_codigo
           and l.vgm_viagem_codigo = vc.vgm_viagem_codigo
           and instr(m.arm_coleta_ncompra,l.vgm_documentos_numdoc || l.vgm_documentos_serie) > 0
           and m.con_valefrete_codigo = P_VFRETE
           and m.con_valefrete_serie = P_VFSERIE
           and m.glb_rota_codigo = P_VFROTA
           and m.con_valefrete_saque = P_VFSAQUE;
         EXCEPTION
           WHEN NO_DATA_FOUND THEN
              P_STATUS := tdvadm.pkg_glb_common.Status_Erro;
              P_MESSAGE := 'CIOT Não Encontrado, para este Vale de Frete (Coleta)';
              P_CIOT := '';
              P_TPPAGAMENTO := '';
           WHEN OTHERS THEN
              P_STATUS := tdvadm.pkg_glb_common.Status_Erro;
              P_MESSAGE := 'Problemas para pegar o CIOT - ' ||  SQLERRM;
              P_CIOT := '';
              P_TPPAGAMENTO := '';
           END;   
     ElsIF P_VFRETE IS NOT NULL THEN
        BEGIN
          SELECT VC.CON_VFRETECIOT_NUMERO,
                 vc.con_freteoper_id,
                 vc.con_freteoper_rota,
                 vc.con_vfreteciot_tppagamento
            INTO P_CIOT,
                 P_IDOPER_CODIGO,
                 P_IDOPER_ROTA,
                 P_TPPAGAMENTO
          FROM TDVADM.T_CON_VFRETECIOT VC
          WHERE VC.CON_CONHECIMENTO_CODIGO = P_VFRETE
            AND VC.CON_CONHECIMENTO_SERIE  = P_VFSERIE
            AND VC.GLB_ROTA_CODIGO         = P_VFROTA
            AND VC.CON_VALEFRETE_SAQUE     = P_VFSAQUE;
         EXCEPTION
           WHEN NO_DATA_FOUND THEN
              P_STATUS := tdvadm.pkg_glb_common.Status_Erro;
              P_MESSAGE := 'CIOT Não Encontrado, para este Vale de Frete';
              P_CIOT := '';
              P_TPPAGAMENTO := '';
           WHEN OTHERS THEN
              P_STATUS := tdvadm.pkg_glb_common.Status_Erro;
              P_MESSAGE := 'Problemas para pegar o CIOT - ' ||  SQLERRM;
              P_CIOT := '';
              P_TPPAGAMENTO := '';
           END;   
     ELSIF P_IDOPER_CODIGO IS NOT NULL THEN
        BEGIN
          SELECT VC.CON_VFRETECIOT_NUMERO,
                 vc.con_vfreteciot_tppagamento
            INTO P_CIOT,
                 P_TPPAGAMENTO
          FROM TDVADM.T_CON_VFRETECIOT VC
          WHERE VC.CON_FRETEOPER_ID = P_IDOPER_CODIGO
            AND vc.glb_rota_codigo  = P_IDOPER_ROTA;
         EXCEPTION
           WHEN NO_DATA_FOUND THEN
              P_STATUS := tdvadm.pkg_glb_common.Status_Erro;
              P_MESSAGE := 'CIOT Não Encontrado, para este ID';
              P_CIOT := '';
              P_TPPAGAMENTO := '';
           WHEN OTHERS THEN
              P_STATUS := tdvadm.pkg_glb_common.Status_Erro;
              P_MESSAGE := 'Problemas para pegar o CIOT - ' ||  SQLERRM;
              P_CIOT := '';
              P_TPPAGAMENTO := '';
           END;   
     ELSE
        P_STATUS := tdvadm.pkg_glb_common.Status_Erro;
        P_MESSAGE := 'Faltam Parametros para Pesquisa';  
        P_CIOT := '';
        P_TPPAGAMENTO := '';
     END IF;           


  END SP_GETCIOT;

  PROCEDURE SP_GET_ALTERARSTATUSPARCELA(P_QRYSTR       IN  CLOB,
                                        P_IDCONSULTA   IN  NUMBER,
                                        P_ROTA         IN  CHAR,                           
                                        P_CURSOR       OUT T_CURSOR,
                                        P_STATUS       OUT CHAR,
                                        P_MESSAGE      OUT VARCHAR2) AS
  /* MODELO DE QRYSTR

  VFNumero=nome=VFNumero|tipo=String|valor=329777*
  VFSerie=nome=VFSerie|tipo=String|valor=A1*
  VFRota=nome=VFRota|tipo=String|valor=021*
  VFSaque=nome=VFSaque|tipo=String|valor=1*
  VFParcelGer=nome=VFParcelGer|tipo=String|valor=1*
  VFParcelTdv=nome=VFParcelTdv|tipo=String|valor=1*
  VFParcelIdSt=nome=VFParcelIdSt|tipo=String|valor=2*     ¿Parametro só é usado na alteração de parcela¿


  */

      V_INSERT   TpRegTxt;
      V_STATUS   CHAR(1);
      V_MESSAGE  VARCHAR2(200); 
      
      v_ViagemId            NUMBER;                                   
      v_ViagemCliente       NUMBER;
      v_ContratanteDocNum   VARCHAR2(20);
      v_ViagemDocTipo       NUMBER;
      v_ViagemDocNum        VARCHAR2(20);
      v_ViagemParcelaQtde   NUMBER;
      v_ViagemAnttCiot      NUMBER;
      
      V_VFRETE          T_CON_VALEFRETE.CON_CONHECIMENTO_CODIGO%TYPE;
      V_VFSERIE         T_CON_VALEFRETE.CON_CONHECIMENTO_SERIE%TYPE;
      V_VFROTA          T_CON_VALEFRETE.GLB_ROTA_CODIGO%TYPE;
      V_VFSAQUE         T_CON_VALEFRETE.CON_VALEFRETE_SAQUE%TYPE;
      V_CodParcelaOper  T_CON_CALCVALEFRETE.CON_CALCVALEFRETE_CODPAROPER%TYPE;
      V_CodParcelaTdv   T_CON_CALCVALEFRETE.CON_CALCVALEFRETETP_CODIGO%TYPE;
      V_StatusParcel    T_CFE_STATUSPARC.CFE_STATUSPARC_ID%TYPE;
      
      
      v_CnpjRota        T_GLB_ROTA.GLB_ROTA_CGC%TYPE;
      
    BEGIN

      BEGIN
        
        -- Fabiano
        -- Pegar parametro da QueryString
        -- não peguei porque não sei o que esperear da QueryString.                
      
           
        -- Buscar as informações que já existe em nossas tabelas
      
         /********************************************************************/
         /**************        VARIAVEIS DO QRYSTR  *************************/
         /********************************************************************/
         
         V_VFRETE          := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QRYSTR,'VFNumero','=','*'), 'valor', '=', '|');
         V_VFSERIE         := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QRYSTR,'VFSerie','=','*'), 'valor', '=', '|');
         V_VFROTA          := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QRYSTR,'VFRota','=','*'), 'valor', '=', '|');
         V_VFSAQUE         := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QRYSTR,'VFSaque','=','*'), 'valor', '=', '|');
         
         V_CodParcelaOper  := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QRYSTR,'VFParcelGer','=','*'), 'valor', '=', '|');
         V_CodParcelaTdv   := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QRYSTR,'VFParcelTdv','=','*'), 'valor', '=', '|');
         V_StatusParcel    := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QRYSTR,'VFParcelIdSt','=','*'), 'valor', '=', '|');
         
         v_ViagemParcelaQtde := 1;
         /********************************************************************/


        /********************************************************************/
        /*****************     VARIAVEIS DA TABELA DE CIOT    ***************/
        /********************************************************************/
        
        BEGIN
           
            SELECT ci.con_vfreteciot_id        ,      
                   ci.con_vfreteciot_idcliente ,
                   ci.con_vfreteciot_numero 
              INTO v_ViagemId                  ,
                   v_ViagemCliente             ,
                   v_ViagemAnttCiot
              FROM T_CON_VFRETECIOT CI
              WHERE CI.CON_CONHECIMENTO_CODIGO = V_VFRETE
                AND CI.CON_CONHECIMENTO_SERIE  = V_VFSERIE
                AND CI.GLB_ROTA_CODIGO         = V_VFROTA
                AND CI.CON_VALEFRETE_SAQUE     = V_VFSAQUE;
        
        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_ALTERARSTATUSPARCELA, '||sqlerrm;     
        END;          
              
         
         v_ContratanteDocNum := ContratanteNumero;  
         
         -- DEFININDO O CONTRANTE E FILIAL
         BEGIN
             SELECT RT.GLB_ROTA_CGC  INTO v_CnpjRota FROM T_GLB_ROTA RT WHERE RT.GLB_ROTA_CODIGO = V_VFROTA;
            
             IF TRIM(v_CnpjRota) = contratanteNumero THEN 
                v_ViagemDocTipo     := '88'; 
                v_ViagemDocNum      := V_VFROTA;
             END IF;
         END;
        
        /********************************************************************/
                
        BEGIN -- VIAGEM ID
          V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.id';
          V_INSERT.uti_vfintegra_valor := v_ViagemId;
          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_ALTERARSTATUSPARCELA, '||sqlerrm;             
        END;  
        
        BEGIN -- viagem.id.cliente
          V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.id.cliente';
          V_INSERT.uti_vfintegra_valor := v_ViagemCliente;
          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_ALTERARSTATUSPARCELA, '||sqlerrm;             
        END;       

        BEGIN -- viagem.contratante.documento.numero
          
          v_ContratanteDocNum := ContratanteNumero;  
        
          V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.contratante.documento.numero';
          V_INSERT.uti_vfintegra_valor := v_ContratanteDocNum;
          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_ALTERARSTATUSPARCELA, '||sqlerrm;             
        END;       
       
        
        
        IF (v_ViagemDocTipo IS NOT NULL) AND (v_ViagemDocNum is NOT NULL)  THEN
             
           BEGIN -- viagem.unidade.documento.tipo
             V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
             V_INSERT.con_freteoper_rota  := P_ROTA;
             V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
             V_INSERT.uti_vfintegra_chave := 'viagem.unidade.documento.tipo';
             V_INSERT.uti_vfintegra_valor := v_ViagemDocTipo;
             PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
           EXCEPTION WHEN OTHERS THEN
             V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
             V_MESSAGE := 'ERRO: PKG_CFE_FRETE2.SP_GET_ALTERARSTATUSPARCELA, '||sqlerrm;             
           END;       

           BEGIN -- viagem.unidade.documento.numero
             V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
             V_INSERT.con_freteoper_rota  := P_ROTA;
             V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
             V_INSERT.uti_vfintegra_chave := 'viagem.unidade.documento.numero';
             V_INSERT.uti_vfintegra_valor := v_ViagemDocNum;
             PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
           EXCEPTION WHEN OTHERS THEN
             V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
             V_MESSAGE := 'ERRO: PKG_CFE_FRETE2.SP_GET_ALTERARSTATUSPARCELA, '||sqlerrm;             
           END;       
        
        END IF;
         
        BEGIN -- viagem.parcela.qtde
          V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.parcela.qtde';
          V_INSERT.uti_vfintegra_valor := v_ViagemParcelaQtde;
          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE2.SP_GET_ALTERARSTATUSPARCELA, '||sqlerrm;             
        END;       
  /*
        BEGIN -- viagem.parcela1.numero
          V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.parcela1.numero';
          V_INSERT.uti_vfintegra_valor := V_CodParcelaOper;
          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE2.SP_GET_ALTERARSTATUSPARCELA, '||sqlerrm;             
        END;   */    

        BEGIN -- viagem.parcela1.status.id
          V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.parcela1.status.id';
          V_INSERT.uti_vfintegra_valor := V_StatusParcel;
          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE2.SP_GET_ALTERARSTATUSPARCELA, '||sqlerrm;             
        END;       

        IF V_CodParcelaOper IN ('1','2') THEN
        
        BEGIN -- viagem.parcela1.numero.cliente
          V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.parcela1.numero.cliente';
          V_INSERT.uti_vfintegra_valor := TO_NUMBER(V_CodParcelaTdv);
          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE2.SP_GET_ALTERARSTATUSPARCELA, '||sqlerrm;             
        END; 
              
        else
          
        BEGIN -- viagem.parcela1.numero
          V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.parcela1.numero';
          V_INSERT.uti_vfintegra_valor := V_CodParcelaOper;
          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE2.SP_GET_ALTERARSTATUSPARCELA, '||sqlerrm;             
        END;   
        END IF;

        BEGIN -- viagem.antt.ciot.numero
          V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.antt.ciot.numero';
          V_INSERT.uti_vfintegra_valor := v_ViagemAnttCiot;
          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE2.SP_GET_ALTERARSTATUSPARCELA, '||sqlerrm;             
        END;       

        OPEN P_CURSOR FOR
        SELECT K.UTI_VFINTEGRA_CHAVE CHAVE,
               K.UTI_VFINTEGRA_VALOR VALOR
          FROM T_UTI_VFINTEGRA K
         WHERE K.CON_FRETEOPER_ID   = P_IDCONSULTA
           AND K.CON_FRETEOPER_ROTA = P_ROTA
        ORDER BY K.UTI_VFINTEGRA_SEQ;
       
        DELETE T_UTI_VFINTEGRA D
         WHERE D.CON_FRETEOPER_ID   = P_IDCONSULTA  
           AND D.CON_FRETEOPER_ROTA = P_ROTA;

      COMMIT;
      
      EXCEPTION WHEN OTHERS THEN
        P_STATUS    := tdvadm.pkg_glb_common.Status_Erro;
        P_MESSAGE  := 'Erro ao consultar. Erro='||SQLERRM;
      END;
            
       P_STATUS   := tdvadm.pkg_glb_common.Status_Nomal; 
       P_MESSAGE := 'Processamento Normal.';

    END SP_GET_ALTERARSTATUSPARCELA;
    
  
  PROCEDURE SP_GET_PAGAMENTOPARCELA(P_QRYSTR       IN  CLOB,
                                   P_IDCONSULTA   IN  NUMBER,
                                   P_ROTA         IN  CHAR,                           
                                   P_CURSOR       OUT T_CURSOR,
                                   P_STATUS       OUT CHAR,
                                   P_MESSAGE      OUT VARCHAR2) AS
    V_INSERT   TpRegTxt;
    V_STATUS   CHAR(1);
    V_MESSAGE  VARCHAR2(200); 
    
    v_ViagemId            NUMBER;                                   
    v_ViagemCliente       NUMBER;
    v_ContratanteDocNum   VARCHAR2(20);
    v_ViagemDocTipo       NUMBER;
    v_ViagemDocNum        VARCHAR2(20);
    v_ViagemParcelaQtde   NUMBER;
    v_ViagemAnttCiot      NUMBER;
    
    V_VFRETE          T_CON_VALEFRETE.CON_CONHECIMENTO_CODIGO%TYPE;
    V_VFSERIE         T_CON_VALEFRETE.CON_CONHECIMENTO_SERIE%TYPE;
    V_VFROTA          T_CON_VALEFRETE.GLB_ROTA_CODIGO%TYPE;
    V_VFSAQUE         T_CON_VALEFRETE.CON_VALEFRETE_SAQUE%TYPE;
    V_CodParcelaOper  T_CON_CALCVALEFRETE.CON_CALCVALEFRETE_CODPAROPER%TYPE;
    V_CodParcelaTdv   T_CON_CALCVALEFRETE.CON_CALCVALEFRETETP_CODIGO%TYPE;
    v_CnpjRota        T_GLB_ROTA.GLB_ROTA_CGC%TYPE;
    
  BEGIN

    BEGIN
      
      -- Fabiano
      -- Pegar parametro da QueryString
      -- não peguei porque não sei o que esperear da QueryString.                
    
         
      -- Buscar as informações que já existe em nossas tabelas
    
       /********************************************************************/
       /**************        VARIAVEIS DO QRYSTR  *************************/
       /********************************************************************/
       
       V_VFRETE          := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QRYSTR,'VFNumero','=','*'), 'valor', '=', '|');
       V_VFSERIE         := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QRYSTR,'VFSerie','=','*'), 'valor', '=', '|');
       V_VFROTA          := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QRYSTR,'VFRota','=','*'), 'valor', '=', '|');
       V_VFSAQUE         := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QRYSTR,'VFSaque','=','*'), 'valor', '=', '|');
       
       V_CodParcelaOper  := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QRYSTR,'VFParcelGer','=','*'), 'valor', '=', '|');
       V_CodParcelaTdv   := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QRYSTR,'VFParcelTdv','=','*'), 'valor', '=', '|');
       
       v_ViagemParcelaQtde := 1;
       /********************************************************************/


      /********************************************************************/
      /*****************     VARIAVEIS DA TABELA DE CIOT    ***************/
      /********************************************************************/
      
      BEGIN
         
          SELECT ci.con_vfreteciot_id        ,      
                 ci.con_vfreteciot_idcliente ,
                 ci.con_vfreteciot_numero 
            INTO v_ViagemId                  ,
                 v_ViagemCliente             ,
                 v_ViagemAnttCiot
            FROM T_CON_VFRETECIOT CI
            WHERE CI.CON_CONHECIMENTO_CODIGO = V_VFRETE
              AND CI.CON_CONHECIMENTO_SERIE  = V_VFSERIE
              AND CI.GLB_ROTA_CODIGO         = V_VFROTA
              AND CI.CON_VALEFRETE_SAQUE     = V_VFSAQUE;
      
      EXCEPTION WHEN OTHERS THEN
        V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
        V_MESSAGE := 'ERRO: PKG_CFE_FRETE2.SP_GET_ALTERARSTATUSPARCELA, '||sqlerrm;     
      END;    
      
      -- Verifico se já foi executada essa solicitação.
             
      
      if (V_CodParcelaOper is null) or (V_CodParcelaTdv is null) then
         V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
         V_MESSAGE := 'Erro ao solicitar pagamento, codigo da parcela TDV ou gerenciadora não informada!';   
         return;
      end if;
             
      v_ContratanteDocNum := ContratanteNumero;  
       
       -- DEFININDO O CONTRANTE E FILIAL
       BEGIN
           SELECT RT.GLB_ROTA_CGC  
             INTO v_CnpjRota 
             FROM T_GLB_ROTA RT 
            WHERE RT.GLB_ROTA_CODIGO = P_ROTA;
          
           IF TRIM(v_CnpjRota) <> contratanteNumero THEN 
              v_ViagemDocTipo     := '88'; 
              v_ViagemDocNum      := P_ROTA;
           END IF;
       END;
      
      /********************************************************************/
              
      BEGIN -- VIAGEM ID
        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'viagem.id';
        V_INSERT.uti_vfintegra_valor := v_ViagemId;
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
      EXCEPTION WHEN OTHERS THEN
        V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
        V_MESSAGE := 'ERRO: PKG_CFE_FRETE2.SP_GET_ALTERARSTATUSPARCELA, '||sqlerrm;             
      END;  
      
      BEGIN -- viagem.id.cliente
        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'viagem.id.cliente';
        V_INSERT.uti_vfintegra_valor := v_ViagemCliente;
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
      EXCEPTION WHEN OTHERS THEN
        V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
        V_MESSAGE := 'ERRO: PKG_CFE_FRETE2.SP_GET_ALTERARSTATUSPARCELA, '||sqlerrm;             
      END;       

      BEGIN -- viagem.contratante.documento.numero
        
        v_ContratanteDocNum := ContratanteNumero;  
      
        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'viagem.contratante.documento.numero';
        V_INSERT.uti_vfintegra_valor := v_ContratanteDocNum;
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
      EXCEPTION WHEN OTHERS THEN
        V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
        V_MESSAGE := 'ERRO: PKG_CFE_FRETE2.SP_GET_ALTERARSTATUSPARCELA, '||sqlerrm;             
      END;       
     
      
      
      IF (v_ViagemDocTipo IS NOT NULL) AND (v_ViagemDocNum is NOT NULL)  THEN
           
         BEGIN -- viagem.unidade.documento.tipo
           V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
           V_INSERT.con_freteoper_rota  := P_ROTA;
           V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
           V_INSERT.uti_vfintegra_chave := 'viagem.unidade.documento.tipo';
           V_INSERT.uti_vfintegra_valor := v_ViagemDocTipo;
           PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
         EXCEPTION WHEN OTHERS THEN
           V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
           V_MESSAGE := 'ERRO: PKG_CFE_FRETE2.SP_GET_ALTERARSTATUSPARCELA, '||sqlerrm;             
         END;       

         BEGIN -- viagem.unidade.documento.numero
           V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
           V_INSERT.con_freteoper_rota  := P_ROTA;
           V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
           V_INSERT.uti_vfintegra_chave := 'viagem.unidade.documento.numero';
           V_INSERT.uti_vfintegra_valor := v_ViagemDocNum;
           PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
         EXCEPTION WHEN OTHERS THEN
           V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
           V_MESSAGE := 'ERRO: PKG_CFE_FRETE2.SP_GET_ALTERARSTATUSPARCELA, '||sqlerrm;             
         END;       
      
      END IF;
       
      BEGIN -- viagem.parcela.qtde
        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'viagem.parcela.qtde';
        V_INSERT.uti_vfintegra_valor := v_ViagemParcelaQtde;
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
      EXCEPTION WHEN OTHERS THEN
        V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
        V_MESSAGE := 'ERRO: PKG_CFE_FRETE2.SP_GET_ALTERARSTATUSPARCELA, '||sqlerrm;             
      END;       

/*      BEGIN -- viagem.parcela1.numero
        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'viagem.parcela1.numero';
        V_INSERT.uti_vfintegra_valor := V_CodParcelaOper;
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
      EXCEPTION WHEN OTHERS THEN
        V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
        V_MESSAGE := 'ERRO: PKG_CFE_FRETE2.SP_GET_ALTERARSTATUSPARCELA, '||sqlerrm;             
      END;       
*/

      IF V_CodParcelaOper IN ('1','2') THEN
      
          BEGIN -- viagem.parcela1.numero.cliente
            V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
            V_INSERT.con_freteoper_rota  := P_ROTA;
            V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
            V_INSERT.uti_vfintegra_chave := 'viagem.parcela1.numero.cliente';
            V_INSERT.uti_vfintegra_valor := TO_NUMBER(V_CodParcelaTdv);
            PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
          EXCEPTION WHEN OTHERS THEN
            V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
            V_MESSAGE := 'ERRO: PKG_CFE_FRETE2.SP_GET_ALTERARSTATUSPARCELA, '||sqlerrm;             
          END;  
      
      else
          
          BEGIN -- viagem.parcela1.numero
            V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
            V_INSERT.con_freteoper_rota  := P_ROTA;
            V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
            V_INSERT.uti_vfintegra_chave := 'viagem.parcela1.numero';
            V_INSERT.uti_vfintegra_valor := V_CodParcelaOper;
            PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
          EXCEPTION WHEN OTHERS THEN
            V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
            V_MESSAGE := 'ERRO: PKG_CFE_FRETE2.SP_GET_ALTERARSTATUSPARCELA, '||sqlerrm;             
          END;    
      
      
      END IF;     

           -- Sómente enviar o codigo do Ciot quanto Ciot = v_ViagemAnttCiot maior que 7 digitos
      -- v_ViagemAnttCiot = 7 digitos é de viagem para o Frota, não tem Ciot.
      IF (length(v_ViagemAnttCiot) > 7) then
           
            BEGIN -- viagem.antt.ciot.numero
              V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
              V_INSERT.con_freteoper_rota  := P_ROTA;
              V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
              V_INSERT.uti_vfintegra_chave := 'viagem.antt.ciot.numero';
              V_INSERT.uti_vfintegra_valor := v_ViagemAnttCiot;
              PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
            EXCEPTION WHEN OTHERS THEN
              V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
              V_MESSAGE := 'ERRO: PKG_CFE_FRETE2.SP_GET_ALTERARSTATUSPARCELA, '||sqlerrm;             
            END;       
      
      end if;

      OPEN P_CURSOR FOR
      SELECT K.UTI_VFINTEGRA_CHAVE CHAVE,
             K.UTI_VFINTEGRA_VALOR VALOR
        FROM T_UTI_VFINTEGRA K
       WHERE K.CON_FRETEOPER_ID   = P_IDCONSULTA
         AND K.CON_FRETEOPER_ROTA = P_ROTA
      ORDER BY K.UTI_VFINTEGRA_SEQ;
     
      DELETE T_UTI_VFINTEGRA D
       WHERE D.CON_FRETEOPER_ID   = P_IDCONSULTA  
         AND D.CON_FRETEOPER_ROTA = P_ROTA;
         
       COMMIT;  

    EXCEPTION WHEN OTHERS THEN
      P_STATUS    := tdvadm.pkg_glb_common.Status_Erro;
      P_MESSAGE  := 'Erro ao consultar. Erro='||SQLERRM;
    END;
          
     P_STATUS   := tdvadm.pkg_glb_common.Status_Nomal; 
     P_MESSAGE := 'Processamento Normal.';

  END SP_GET_PAGAMENTOPARCELA;
  
  
  PROCEDURE SP_GET_CANCELAFRETE(P_QRYSTR       IN  CLOB,
                                P_IDCONSULTA   IN  NUMBER,
                                P_ROTA         IN  CHAR,                           
                                P_CURSOR       OUT T_CURSOR,
                                P_STATUS       OUT CHAR,
                                P_MESSAGE      OUT VARCHAR2) AS
    V_INSERT   TpRegTxt;
    V_STATUS   CHAR(1);
    V_MESSAGE  VARCHAR2(200); 
    
    v_ViagemId            NUMBER;                                   
    v_ViagemCliente       NUMBER;
    v_ContratanteDocNum   VARCHAR2(20);
    v_ViagemDocTipo       NUMBER;
    v_ViagemDocNum        CHAR(3); 
    v_ViagemAnttCiot      NUMBER;
    
    V_VFRETE          T_CON_VALEFRETE.CON_CONHECIMENTO_CODIGO%TYPE;
    V_VFSERIE         T_CON_VALEFRETE.CON_CONHECIMENTO_SERIE%TYPE;
    V_VFROTA          T_CON_VALEFRETE.GLB_ROTA_CODIGO%TYPE;
    V_VFSAQUE         T_CON_VALEFRETE.CON_VALEFRETE_SAQUE%TYPE;
    v_CnpjRota        T_GLB_ROTA.GLB_ROTA_CGC%TYPE;
    V_MsgCancel       VARCHAR2(500);
    
  BEGIN

    BEGIN
      
      -- Fabiano
      -- Pegar parametro da QueryString
      -- não peguei porque não sei o que esperear da QueryString.                
    
         
      -- Buscar as informações que já existe em nossas tabelas
    
       /********************************************************************/
       /**************        VARIAVEIS DO QRYSTR  *************************/
       /********************************************************************/
       
       V_VFRETE          := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QRYSTR,'VFNumero','=','*'), 'valor', '=', '|');
       V_VFSERIE         := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QRYSTR,'VFSerie','=','*'), 'valor', '=', '|');
       V_VFROTA          := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QRYSTR,'VFRota','=','*'), 'valor', '=', '|');
       V_VFSAQUE         := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QRYSTR,'VFSaque','=','*'), 'valor', '=', '|');
       V_MsgCancel       := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QRYSTR,'VFMsgMotCancel','=','*'), 'valor', '=', '|');
       
       /********************************************************************/


      /********************************************************************/
      /*****************     VARIAVEIS DA TABELA DE CIOT    ***************/
      /********************************************************************/
      
      BEGIN
         
          SELECT ci.con_vfreteciot_id        ,      
                 ci.con_vfreteciot_idcliente ,
                 ci.con_vfreteciot_numero 
            INTO v_ViagemId                  ,
                 v_ViagemCliente             ,
                 v_ViagemAnttCiot
            FROM T_CON_VFRETECIOT CI
            WHERE CI.CON_CONHECIMENTO_CODIGO = V_VFRETE
              AND CI.CON_CONHECIMENTO_SERIE  = V_VFSERIE
              AND CI.GLB_ROTA_CODIGO         = V_VFROTA
              AND CI.CON_VALEFRETE_SAQUE     = V_VFSAQUE;
      
      EXCEPTION WHEN OTHERS THEN
        V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
        V_MESSAGE := 'ERRO: PKG_CFE_FRETE2.SP_GET_ALTERARSTATUSPARCELA, '||sqlerrm;     
      END;          
            
       
       v_ContratanteDocNum := ContratanteNumero;  
       
       -- DEFININDO O CONTRANTE E FILIAL
       BEGIN
           SELECT RT.GLB_ROTA_CGC  INTO v_CnpjRota FROM T_GLB_ROTA RT WHERE RT.GLB_ROTA_CODIGO = V_VFROTA;
          
           IF TRIM(v_CnpjRota) = contratanteNumero THEN 
              v_ViagemDocTipo     := '88'; 
              v_ViagemDocNum      := V_VFROTA;
           END IF;
       END;
      
      /********************************************************************/
              
      BEGIN -- VIAGEM ID
        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'viagem.id';
        V_INSERT.uti_vfintegra_valor := v_ViagemId;
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
      EXCEPTION WHEN OTHERS THEN
        V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
        V_MESSAGE := 'ERRO: PKG_CFE_FRETE2.SP_GET_ALTERARSTATUSPARCELA, '||sqlerrm;             
      END;  
      
      BEGIN -- viagem.id.cliente
        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'viagem.id.cliente';
        V_INSERT.uti_vfintegra_valor := v_ViagemCliente;
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
      EXCEPTION WHEN OTHERS THEN
        V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
        V_MESSAGE := 'ERRO: PKG_CFE_FRETE2.SP_GET_ALTERARSTATUSPARCELA, '||sqlerrm;             
      END;       

      BEGIN -- viagem.contratante.documento.numero
        
        v_ContratanteDocNum := ContratanteNumero;  
      
        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'viagem.contratante.documento.numero';
        V_INSERT.uti_vfintegra_valor := v_ContratanteDocNum;
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
      EXCEPTION WHEN OTHERS THEN
        V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
        V_MESSAGE := 'ERRO: PKG_CFE_FRETE2.SP_GET_ALTERARSTATUSPARCELA, '||sqlerrm;             
      END;       
     
      
/*      
      IF (v_ViagemDocTipo IS NOT NULL) AND (v_ViagemDocNum is NOT NULL)  THEN
           
         BEGIN -- viagem.unidade.documento.tipo
           V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
           V_INSERT.con_freteoper_rota  := P_ROTA;
           V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
           V_INSERT.uti_vfintegra_chave := 'viagem.unidade.documento.tipo';
           V_INSERT.uti_vfintegra_valor := v_ViagemDocTipo;
           PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
         EXCEPTION WHEN OTHERS THEN
           V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
           V_MESSAGE := 'ERRO: PKG_CFE_FRETE2.SP_GET_ALTERARSTATUSPARCELA, '||sqlerrm;             
         END;       

         BEGIN -- viagem.unidade.documento.numero
           V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
           V_INSERT.con_freteoper_rota  := P_ROTA;
           V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
           V_INSERT.uti_vfintegra_chave := 'viagem.unidade.documento.numero';
           V_INSERT.uti_vfintegra_valor := v_ViagemDocNum;
           PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
         EXCEPTION WHEN OTHERS THEN
           V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
           V_MESSAGE := 'ERRO: PKG_CFE_FRETE2.SP_GET_ALTERARSTATUSPARCELA, '||sqlerrm;             
         END;       
      
      END IF;
      */ 
      BEGIN -- viagem.antt.canecelamento.motivo
        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'viagem.antt.cancelamento.motivo';
        V_INSERT.uti_vfintegra_valor := V_MsgCancel;
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
      EXCEPTION WHEN OTHERS THEN
        V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
        V_MESSAGE := 'ERRO: PKG_CFE_FRETE2.SP_GET_ALTERARSTATUSPARCELA, '||sqlerrm;             
      END;       

      BEGIN -- viagem.antt.ciot.numero
        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'viagem.antt.ciot.numero';
        V_INSERT.uti_vfintegra_valor := v_ViagemAnttCiot;
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
      EXCEPTION WHEN OTHERS THEN
        V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
        V_MESSAGE := 'ERRO: PKG_CFE_FRETE2.SP_GET_ALTERARSTATUSPARCELA, '||sqlerrm;             
      END;       

      OPEN P_CURSOR FOR
      SELECT K.UTI_VFINTEGRA_CHAVE CHAVE,
             K.UTI_VFINTEGRA_VALOR VALOR
        FROM T_UTI_VFINTEGRA K
       WHERE K.CON_FRETEOPER_ID   = P_IDCONSULTA
         AND K.CON_FRETEOPER_ROTA = P_ROTA
      ORDER BY K.UTI_VFINTEGRA_SEQ;
     
      DELETE T_UTI_VFINTEGRA D
       WHERE D.CON_FRETEOPER_ID   = P_IDCONSULTA  
         AND D.CON_FRETEOPER_ROTA = P_ROTA;
         
         COMMIT;

    EXCEPTION WHEN OTHERS THEN
      P_STATUS    := tdvadm.pkg_glb_common.Status_Erro;
      P_MESSAGE  := 'Erro ao consultar. Erro='||SQLERRM;
    END;
          
     P_STATUS   := tdvadm.pkg_glb_common.Status_Nomal; 
     P_MESSAGE := 'Processamento Normal.';

  END SP_GET_CANCELAFRETE;
  
  
  
  PROCEDURE SP_SET_ALTERARPARCELA(P_QRYSTR       IN  VARCHAR2,
                                  P_IDCONSULTA   IN  VARCHAR2,
                                  P_ROTA         IN  CHAR, 
                                  P_STATUS       OUT CHAR,
                                  P_MESSAGE      OUT VARCHAR2)AS
  V_IDVALIDO               CHAR(1);
  V_TIPO                   TDVADM.T_CFE_INTEGRATDV.CFE_INTEGRATDV_COD%TYPE;
  V_QTDELOOP               INTEGER;
  V_EXISTESEQ              INTEGER;
  
  --variável utilizada para guardar o número da parcela;
  vParcela                 VARCHAR2(10);
  vParcelaOper             VARCHAR2(20);

  --variável de controle.
  vControl                 Integer;
  vControlB                Integer;
  
  --Variáveis utilizadas para recuperar valores do Vale de Frete
  vVFrete_Codigo           tdvadm.t_con_valefrete.con_conhecimento_codigo%Type;
  vVFrete_Serie            tdvadm.t_con_valefrete.con_conhecimento_serie%Type;
  vVFrete_Rota             tdvadm.t_con_valefrete.glb_rota_codigo%Type;
  vVFrete_Saque            tdvadm.t_con_valefrete.con_valefrete_saque%Type;
  vExisteImpresso          INTEGER;
  vTipoPgto                T_CON_CALCVALEFRETE.CON_CALCVALEFRETE_TIPO%TYPE;
  vParcelStatus            VARCHAR2(10);
  
  --Variaveis para conferencia do que esta sendo liberado contra a aba de contratados
  vValorParcCalc           t_con_calcvalefrete.con_calcvalefrete_valor%TYPE;
  vValorParcAdto           t_con_valefrete.con_valefrete_adiantamento%TYPE;
  vValorParcSaldo          t_con_valefrete.con_valefrete_valorliquido%TYPE;
  vExisteParcela           INTEGER; 
  
  vVfFrota                 boolean := False;
  vValeFreteInf            t_con_valefrete%rowtype; 

  -- Variaveis para conta imagens de cte
  vTomador                 number;
  vComprovante             number;
  vTotal                   number;
  vControl2                Integer;
  vParametros              VARCHAR2(2000);
  vStatus                  char(1);
  vUsuarioApp              varchar2(10);
  vPodeBloquear            char(1);
  vMessagem                varchar2(2000);
  
  vCodDePara               t_cfe_integratdvdp.cfe_integratdv_cod%type;
  vGerenciadora            t_cfe_gerenbco.cfe_gerenbco_cod%type;
  vValorSqTransf           t_con_calcvalefrete.con_calcvalefrete_valor%type; 
  vExisteParcelaNaoPaga    integer;
  
  Begin
    vParcela       := '';
    vControl       := 0;
    vVFrete_Codigo := '';
    vVFrete_Serie  := '';
    vVFrete_Rota   := '';
    vVFrete_Saque  := '';
    
    Begin

        /*     TIPO DA CONSULTA    */
        
        V_TIPO         := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'IntegraTdv_Cod','=','*'), 'valor', '=', '|');
        vParcela       := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFParcelTdv','=','*'), 'valor', '=', '|');
        vParcelaOper   := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFParcelGer','=','*'), 'valor', '=', '|');
        
        --Dados do Vale de Frete
        vVFrete_Codigo := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFNumero','=','*'), 'valor', '=', '|');
        vVFrete_Serie  := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFSerie','=','*'), 'valor', '=', '|');
        vVFrete_Rota   := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFRota','=','*'), 'valor', '=', '|');
        vVFrete_Saque  := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFSaque','=','*'), 'valor', '=', '|');
        vParcelStatus  := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFParcelIdSt','=','*'), 'valor', '=', '|');  
        vUsuarioApp    := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'Usuario_App','=','*'), 'valor', '=', '|');  
        
        if nvl(vUsuarioApp, '0') <> '0' then
        
          SELECT P.USU_APLICACAOPERFIL_PARAT
            INTO vPodeBloquear 
          FROM TDVADM.T_USU_APLICACAOPERFIL P
          WHERE P.USU_APLICACAO_CODIGO = 'pagtofrete'
            AND lower(P.USU_USUARIO_CODIGO) = 'jsantos'
            AND P.USU_PERFIL_CODIGO LIKE '%BLOQUEAR_PAGTO%';
            
          vPodeBloquear := Nvl(vPodeBloquear, 'N');
        end if;
        
        /***************************************************/
        /*** BUSCANDO INFORMAÇÕES DO VALE DE FRET        ***/
        /***************************************************/
        
        begin
          
          select *
            into vValeFreteInf
            from t_con_valefrete vf
           where vf.con_conhecimento_codigo = vVFrete_Codigo
             and vf.con_conhecimento_serie  = vVFrete_Serie
             and vf.glb_rota_codigo         = vVFrete_Rota
             and vf.con_valefrete_saque     = vVFrete_Saque;  
       
        end;
       
        /***************************************************/
        
        
        
        /**************************************************/
        /*****          Codigo da tabela DePara       *****/
        /**************************************************/
        begin
          
           select nvl(s.cfe_gerenbco_cod,'1')
             into vGerenciadora
             from t_uti_sequencia s
            where s.uti_sequencia_rota   = P_ROTA       
              and s.uti_sequencia_codigo = P_IDCONSULTA; 
                
           select l.cfe_integratdv_cod
             into vCodDePara
             from t_cfe_integratdvdp l
            where l.cfe_integratdvdp_cod = V_TIPO
              and l.cfe_gerenbco_cod     = vGerenciadora;
          
        end;
        /**************************************************/
        
        /***************************************************/
        /*** SETO A VARIAVEL DIZENDO QUE É UM FROTA      ***/
        /***************************************************/
        
        begin
          
          if (substr(vValeFreteInf.Con_Valefrete_Placa,1,3)) = '000' and (vValeFreteInf.Glb_Tpmotorista_Codigo = 'F') then
            
            vVfFrota := True;
        
          end if;
        
        end;
        
        /***************************************************/
    
       
        Select Count(*)
          Into vControl2
          From t_con_vfreteciot ciot
         where ciot.con_conhecimento_codigo = vVFrete_Codigo
           and ciot.con_conhecimento_serie  = vVFrete_Serie
           and ciot.glb_rota_codigo         = vVFrete_Rota
           and ciot.con_valefrete_saque     = vVFrete_Saque;
       if vControl2 <= 0 then
           P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
           P_MESSAGE := 'Erro: Vale de Frete não possuí Ciot Impossivel Pagamento Eletrônico!!';
           RETURN;          
       end if;   
       
       
       /*  SE NÃO FOR ID DE INTEGRAÇÃO DE VALE DE FRETE BLOQUEAMOS */
       IF V_TIPO NOT IN (22) THEN
           P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
           P_MESSAGE := 'ERRO: INTEGRAÇÃO TDV INFORMADA NÃO É VALIDA!';
           RETURN;
       Else
             
          if vParcela = '01' Then  -- Adiantamento
             if pkg_con_valefrete.fn_DiarioBordoEmitido(vVFrete_Codigo,
                                                        vVFrete_Serie,
                                                        vVFrete_Rota,
                                                        vVFrete_Saque) = 'N' Then
                 P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                 P_MESSAGE := 'EMISSAO OBRIGATORIO DO DIARIO DE BORDO!';
                 RETURN;
             End If;
          End If;
       
          -- verifica se falta imagens 
          If vParcela = '20' Then -- se for SALDO
              
            IF (vVfFrota = FALSE) THEN 
              
            SELECT SUM(DECODE(CI.GLB_SUBGRUPOIMAGEM_CODIGO,'01',1,0)) TOMADOR,
                  SUM(DECODE(CI.GLB_SUBGRUPOIMAGEM_CODIGO,'01',0,1))  COMPROVANTE,
                  COUNT(*) TOTAL
                  into vTomador,
                       vComprovante,
                       vTotal
            FROM T_GLB_COMPIMAGEM   CI,
                 T_CON_VFRETECONHEC VC,
                 T_CON_VALEFRETE    VF
            WHERE VC.CON_VALEFRETE_CODIGO     = vVFrete_Codigo
              AND VC.CON_VALEFRETE_SERIE      = vVFrete_Serie
              AND VC.GLB_ROTA_CODIGOVALEFRETE = vVFrete_Rota
              AND VC.CON_VALEFRETE_SAQUE      = vVFrete_Saque
              AND VC.CON_VALEFRETE_CODIGO     = VF.CON_CONHECIMENTO_CODIGO    
              AND VC.CON_VALEFRETE_SERIE      = VF.CON_CONHECIMENTO_SERIE
              AND VC.GLB_ROTA_CODIGOVALEFRETE = VF.GLB_ROTA_CODIGO
              AND VC.CON_VALEFRETE_SAQUE      = VF.CON_VALEFRETE_SAQUE  
              AND VC.CON_CONHECIMENTO_CODIGO  = CI.CON_CONHECIMENTO_CODIGO (+)
              AND VC.CON_CONHECIMENTO_SERIE   = CI.CON_CONHECIMENTO_SERIE (+)
              AND VC.GLB_ROTA_CODIGO          = CI.GLB_ROTA_CODIGO (+)
              AND CI.GLB_COMPIMAGEM_ARQUIVADO = 'S'
              AND nvl(VC.CON_VFRETECONHEC_TRANSFCHEKIN,'Não') <> 'Sim';
              /*AND TDVADM.PKG_CON_VALEFRETE.FN_GET_EMBTRANSFERENCIA2(VC.CON_CONHECIMENTO_CODIGO,
                                                                    VC.CON_CONHECIMENTO_SERIE,
                                                                    VC.GLB_ROTA_CODIGO,
                                                                    trunc(vf.con_valefrete_datacadastro)) <> 'Sim';*/

             -- Se estiver faltando vias de comprovantes
             If vtotal <> vComprovante Then 
                P_STATUS  := tdvadm.pkg_glb_common.Status_Nomal;
                P_MESSAGE := 'Faltam Scanear ' || to_char(vTomador) || ' Comprovantes dos ' || to_char(vTotal) || ' Comprovantes contidos neste Vale de Frete' ; --|| chr(10) || ' PAGAMENTO NAO SERA LIBERADO ';
--                RETURN;                
             End if;

             if (pkg_con_valefrete.fn_DiarioBordoRecebido(vVFrete_Codigo,
                                                         vVFrete_Serie,
                                                         vVFrete_Rota,
                                                         vVFrete_Saque) = 'N') 
                AND  
                
                (pkg_con_valefrete.fn_DiarioBordoEmitido(vVFrete_Codigo,
                                                         vVFrete_Serie,
                                                         vVFrete_Rota,
                                                         vVFrete_Saque) <> 'L')
                                                         Then
                 P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                 P_MESSAGE := 'TRANSMISSAO DO DIARIO DE BORDO OBRIGATORIO!';
                 RETURN;
             End If;
             
             -- Analise da parcela adiantamento quando o valor for o valor das parcelas 29.96.
             select count(*)
               into vExisteParcelaNaoPaga
               from tdvadm.t_con_calcvalefrete vv
              where vv.con_conhecimento_codigo = vVFrete_Codigo
                and vv.con_conhecimento_serie  = vVFrete_Serie
                and vv.glb_rota_codigo         = vVFrete_Rota
                and vv.con_valefrete_saque     = vVFrete_Saque
                and vv.con_calcvalefrete_flagpgto = 'S'
                and vv.CON_CALCVALEFRETETP_CODIGO = '01'
                and vv.con_calcvalefrete_valor    = '29.96'
                and vv.con_calcvalefrete_dtpgto   is null;
             
             
             if (vExisteParcelaNaoPaga > 0) then
               P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               P_MESSAGE := 'Vale frete possue sua parcela de adiantamento não paga. É obrigatorio o pagamento do Adiantamento antes do saldo!';
               RETURN;
             end if;          
             
             
             END IF;


          End If;
       
          /***************************************************************/
          /*** Analise da emissão do MDF-e                             ***/
          /*** Klayton em 19/01/2014                                   ***/
          /***************************************************************/
          
          begin
            
            if vParcela = '01' Then
            
            --if (vVFrete_Rota = '999') then  
          
              vParametros := '<Parametros>                                                                   '||
                                  '  <Input>                                                                 '||  
                                  '    <VFUsuarioTDV>'    ||trim(TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFUsuarioTDV','=','*'), 'valor', '=', '|'))||'</VFUsuarioTDV>    '||
                                  '    <VFRotaUsuarioTDV>'||trim(TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFRotaUsuarioTDV','=','*'), 'valor', '=', '|'))||'</VFRotaUsuarioTDV>'||
                                  '    <VFAplicacaoTDV>'  ||'comvlfrete'                                                                                          ||'</VFAplicacaoTDV>  '||
                                  '    <VFVersaoAplicao>' ||trim(TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFAplicacaoTDV','=','*'), 'valor', '=', '|'))||'</VFVersaoAplicao> '||
                                  '  </Input>                                                                '||
                                  '</Parametros>                                                             ';

              pkg_con_valefrete.Sp_Con_ValidavfretemdfeNew(vVFrete_Codigo,
                                                           vVFrete_Serie ,
                                                           vVFrete_Rota  ,
                                                           vVFrete_Saque ,
                                                           vParametros   ,
                                                           vStatus       ,
                                                           vMessagem); 
              
              If ( vStatus <> pkg_glb_common.Status_Nomal) Then
                
                P_STATUS  := vStatus;
                P_MESSAGE := vMessagem;
                RETURN;
              
              End If;
            
            --end if;
          
            end if;
            
          end;
          
          /***************************************************************/    
          

       END IF;  
        
        
        
       
        /************************************************************/
        /******VERIFICAÇÃO DE VALORES CALC_VFRETE X CONTRATADOS******/
        /************************************************************/
        
        FOR P_CURSORPARCELA IN(SELECT CAL.CON_CONHECIMENTO_CODIGO     ,
                                      CAL.CON_CONHECIMENTO_SERIE      ,
                                      CAL.GLB_ROTA_CODIGO             ,
                                      CAL.CON_VALEFRETE_SAQUE         ,
                                      CAL.CON_CALCVALEFRETE_VALOR     ,
                                      CAL.CON_CALCVALEFRETE_FLAGPGTO  ,
                                      CAL.CON_CALCVALEFRETETP_CODIGO  ,
                                      CAL.CON_CALCVALEFRETE_CODPAROPER,
                                      TP.con_calcvalefretetp_descricao,
                                      CAL.usu_usuario_codigocancel,
                                      CAL.con_calcvalefrete_dtcancel
                                 FROM T_CON_CALCVALEFRETE CAL,
                                      T_CON_CALCVALEFRETETP TP
                                WHERE CAL.CON_CONHECIMENTO_CODIGO = vVFrete_Codigo
                                  AND CAL.CON_CONHECIMENTO_SERIE  = vVFrete_Serie 
                                  AND CAL.GLB_ROTA_CODIGO         = vVFrete_Rota  
                                  AND CAL.CON_VALEFRETE_SAQUE     = vVFrete_Saque 
                                  AND CAL.CON_CALCVALEFRETETP_CODIGO = TP.CON_CALCVALEFRETETP_CODIGO
                                  AND NVL(CAL.CON_CALCVALEFRETE_FLAGPGTO,'N') = 'S'
                                  AND CAL.CON_CALCVALEFRETE_VALOR  <> '0'
                                  AND CAL.CON_CALCVALEFRETE_DTPGTO IS NULL )
        LOOP
          
        /***********************************************************************/
        /**  Se vale de frete não for de frota, verifica as parcelas          **/
        /***********************************************************************/
          
        If (vVfFrota = false) then
          
           -- Obtendo o valor do saque + transferencia
           select sum(ll.con_calcvalefrete_valor)
             into vValorSqTransf
             from t_con_calcvalefrete ll
            where ll.con_conhecimento_codigo = vVFrete_Codigo
              and ll.con_conhecimento_serie  = vVFrete_Serie 
              and ll.glb_rota_codigo         = vVFrete_Rota  
              and ll.con_valefrete_saque     = vVFrete_Saque 
              and ll.con_calcvalefretetp_codigo in ('06','07');
          
          
          /***********************************************************************/
          /** Novo Conceito de Cancelar / Excluir a Parcela Junto a Gerenciadora**/
          /**  Klayton em 11/12/2014                                            **/
          /***********************************************************************/
          
          BEGIN
            
            
            IF (P_CURSORPARCELA.usu_usuario_codigocancel IS NOT NULL)   OR 
               (P_CURSORPARCELA.CON_CALCVALEFRETE_DTCANCEL IS NOT NULL) THEN
               
              P_STATUS  := pkg_glb_common.Status_Erro;
              P_MESSAGE := 'Esta parcela ja esta Cancelada junto a Gerenciadora, Impossivel mudar Status da mesma!';
              RETURN;
            
            END IF;
            
          END;
          
          /********************************************/
            
          
          IF P_CURSORPARCELA.CON_CALCVALEFRETETP_CODIGO = '01' THEN
             
             BEGIN  
               SELECT NVL(VF.CON_VALEFRETE_ADIANTAMENTO,0)-
                      NVL(VF.CON_VALEFRETE_PEDAGIO,0)
                 INTO vValorParcAdto
                 FROM T_CON_VALEFRETE VF
               WHERE VF.CON_CONHECIMENTO_CODIGO    = vVFrete_Codigo
                 AND VF.CON_CONHECIMENTO_SERIE     = vVFrete_Serie 
                 AND VF.GLB_ROTA_CODIGO            = vVFrete_Rota  
                 AND VF.CON_VALEFRETE_SAQUE        = vVFrete_Saque;        
             EXCEPTION WHEN OTHERS THEN
                vValorParcAdto := 0;
             END;   
             
             
             /************************************************************/
             /***   SE VALOR PARC ADTO <> VALOR ADTO ABA CONTRATADOS   ***/
             /************************************************************/ 
             IF not(vValorParcAdto between P_CURSORPARCELA.CON_CALCVALEFRETE_VALOR-vValorSqTransf 
                                       and P_CURSORPARCELA.CON_CALCVALEFRETE_VALOR+vValorSqTransf)THEN
                                    
                P_STATUS  := pkg_glb_common.Status_Erro;
                P_MESSAGE := 'Valor da parcela '||TRIM(P_CURSORPARCELA.CON_CALCVALEFRETETP_DESCRICAO)||' esta diferente da aba contratados! Valor parcela: '||to_char(P_CURSORPARCELA.CON_CALCVALEFRETE_VALOR);
                -- P_MESSAGE :=  vValorParcAdto||' - '||P_CURSORPARCELA.CON_CALCVALEFRETE_VALOR||' - '|| vValorSqTransf;
                RETURN;
                
             END IF;     
              
          
          ELSIF P_CURSORPARCELA.CON_CALCVALEFRETETP_CODIGO = '20' THEN  
            
             
             BEGIN  
               SELECT NVL(VF.CON_VALEFRETE_VALORLIQUIDO,0)
                 INTO vValorParcSaldo
                 FROM T_CON_VALEFRETE VF
               WHERE VF.CON_CONHECIMENTO_CODIGO    = vVFrete_Codigo
                 AND VF.CON_CONHECIMENTO_SERIE     = vVFrete_Serie 
                 AND VF.GLB_ROTA_CODIGO            = vVFrete_Rota  
                 AND VF.CON_VALEFRETE_SAQUE        = vVFrete_Saque;        
             EXCEPTION WHEN OTHERS THEN
                vValorParcSaldo := 0;
             END;
             
             
             /************************************************************/
             /***   SE VALOR PARC SALD <> VALOR SALD ABA CONTRATADOS   ***/
             /************************************************************/
             IF not(vValorParcSaldo between P_CURSORPARCELA.CON_CALCVALEFRETE_VALOR-vValorSqTransf 
                                       and P_CURSORPARCELA.CON_CALCVALEFRETE_VALOR+vValorSqTransf)THEN
                P_STATUS  := pkg_glb_common.Status_Erro;
                P_MESSAGE := 'Valor da parcela '||TRIM(P_CURSORPARCELA.CON_CALCVALEFRETETP_DESCRICAO)||' esta diferente da aba contratados! Valor parcela: '||to_char(P_CURSORPARCELA.CON_CALCVALEFRETE_VALOR);
                RETURN;
             END IF;
             
          END IF;  
          
        end if;
        
        /***********************************************************************/
        
        END LOOP;
        
        /************************************************************/
           

        IF nvl(vParcelaOper,' NULO') = 'NULO' THEN
           P_STATUS  := pkg_glb_common.Status_Erro;
           P_MESSAGE := 'Codigo da parcela Gerenciadora não valida!';
           RETURN;
        END IF;
          
        BEGIN
              SELECT k.con_calcvalefrete_tipo
                INTO vTipoPgto
                FROM T_CON_CALCVALEFRETE K
                WHERE K.CON_CONHECIMENTO_CODIGO             = vVFrete_Codigo
                  AND k.con_conhecimento_serie              = vVFrete_Serie 
                  AND k.glb_rota_codigo                     = vVFrete_Rota  
                  AND k.con_valefrete_saque                 = vVFrete_Saque
                  AND NVL(K.CON_CALCVALEFRETE_FLAGPGTO,'N') = 'S'
                  AND K.CON_CALCVALEFRETE_CODPAROPER        = TO_NUMBER(vParcelaOper); 
                
        EXCEPTION WHEN OTHERS THEN
           P_STATUS  := pkg_glb_common.Status_Erro;
           P_MESSAGE := 'Erro ao autorizar Parcela. Erro: '||SQLERRM;
           RETURN;
        END;     
        
        
        IF NVL(vTipoPgto,'X') <> 'C' THEN
           P_STATUS  := pkg_glb_common.Status_Erro;
           P_MESSAGE := 'Parcela não pode ser Liberada, tipo de Pagamento Invalido!';
           RETURN;
        END IF; 
               
        Begin
          --verifico se a solicitação já foi realizada. ( Mesma parcela, no mesmo saque do  mesmo Vale de Frete )
          
          
          /********************KLAYTON 07/08/2012************************/
          /*******VERIFICO SE TEM UMA OPER DE AUT E OUTRA DE BLQ*********/
          /**********SE TIVER AUTORIZANDO********************************/
          IF vParcelStatus = '2' THEN     
             
             Select Count(*) 
               Into vControl
               From t_con_freteoper oper
              WHERE 0=0
                And oper.con_freteoper_id    = P_IDCONSULTA
                And oper.con_freteoper_rota  = P_ROTA
                And Trim(TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'VFParcelTdv','=','*'), 'valor', '=', '|')) = Trim(vParcela)
                                                                                                                                                                     
                And Trim(TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'IntegraTdv_Cod','=','*'), 'valor', '=', '|')) = Trim(V_TIPO)
                And Trim(TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'VFParcelIdSt','=','*'), 'valor', '=', '|')) = Trim(vParcelStatus)
                
                And Trim(TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'VFNumero','=','*'), 'valor', '=', '|')) = Trim(vVFrete_Codigo)
                And Trim(TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'VFSerie','=','*'), 'valor', '=', '|')) = Trim(vVFrete_Serie)        
                And Trim(TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'VFRota','=','*'), 'valor', '=', '|')) = Trim(vVFrete_Rota)
                And Trim(TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'VFSaque','=','*'), 'valor', '=', '|')) = Trim(vVFrete_Saque);
               
              
             Select Count(*) 
               Into vControlb
               From t_con_freteoper oper
              WHERE 0=0
                And oper.con_freteoper_id    = P_IDCONSULTA
                And oper.con_freteoper_rota  = P_ROTA
                And Trim(TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'VFParcelTdv','=','*'), 'valor', '=', '|')) = Trim(vParcela)
                                                                                                                                                                     
                And Trim(TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'IntegraTdv_Cod','=','*'), 'valor', '=', '|')) = Trim(V_TIPO)
                And Trim(TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'VFParcelIdSt','=','*'), 'valor', '=', '|')) = Trim('3')
                
                And Trim(TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'VFNumero','=','*'), 'valor', '=', '|')) = Trim(vVFrete_Codigo)
                And Trim(TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'VFSerie','=','*'), 'valor', '=', '|')) = Trim(vVFrete_Serie)        
                And Trim(TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'VFRota','=','*'), 'valor', '=', '|')) = Trim(vVFrete_Rota)
                And Trim(TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'VFSaque','=','*'), 'valor', '=', '|')) = Trim(vVFrete_Saque);
     
         
         ELSE
           
           Select Count(*) 
             Into vControl
             From t_con_freteoper oper
            WHERE 0=0
              And oper.con_freteoper_id    = P_IDCONSULTA
              And oper.con_freteoper_rota  = P_ROTA
              And Trim(TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'VFParcelTdv','=','*'), 'valor', '=', '|')) = Trim(vParcela)
                                                                                                                                                                   
              And Trim(TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'IntegraTdv_Cod','=','*'), 'valor', '=', '|')) = Trim(V_TIPO)
              And Trim(TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'VFParcelIdSt','=','*'), 'valor', '=', '|')) = Trim(vParcelStatus)
              
              And Trim(TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'VFNumero','=','*'), 'valor', '=', '|')) = Trim(vVFrete_Codigo)
              And Trim(TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'VFSerie','=','*'), 'valor', '=', '|')) = Trim(vVFrete_Serie)        
              And Trim(TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'VFRota','=','*'), 'valor', '=', '|')) = Trim(vVFrete_Rota)
              And Trim(TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'VFSaque','=','*'), 'valor', '=', '|')) = Trim(vVFrete_Saque);

         END IF;   
            
        Exception
          --caso ocorra algum erro durante a busca, encerro o processamento.
          When Others Then
            P_STATUS := pkg_glb_common.Status_Erro;
            P_MESSAGE := 'Erro ao tentar buscar dados de Id.' || chr(13) || Sqlerrm;
            Return;
        End;
        
        --Caso tenha encontrado algum registro.
        
        IF (vParcelStatus = '2') and (vPodeBloquear = 'N') THEN
           If vControl <> vControlB  Then
             P_STATUS := pkg_glb_common.Status_Erro;
             P_MESSAGE := 'Operação já solicitada.';
             Return;
           End If;
        ELSE
          If (vControl > 0) and (vPodeBloquear = 'N') Then
             P_STATUS := pkg_glb_common.Status_Erro;
             P_MESSAGE := 'Operação já solicitada.';
             Return;
           End If;
        END IF;  
        
        BEGIN
         SELECT COUNT(*)
           INTO vExisteImpresso
           FROM T_CON_VALEFRETE K
          WHERE K.CON_CONHECIMENTO_CODIGO         = vVFrete_Codigo
            AND K.CON_CONHECIMENTO_SERIE          = vVFrete_Serie
            AND K.GLB_ROTA_CODIGO                 = vVFrete_Rota
            AND K.CON_VALEFRETE_SAQUE             = vVFrete_Saque
            AND NVL(K.CON_VALEFRETE_IMPRESSO,'N') = 'S';    
        EXCEPTION WHEN OTHERS THEN
           vExisteImpresso:= 0;
        END;    
        
        IF vExisteImpresso = 0 THEN
          
          P_STATUS := pkg_glb_common.Status_Erro;
          P_MESSAGE := 'Vale frete não impresso, para o pagamento do vale de frete Eletrônico, o mesmo tem que estar Impresso! vf='||vVFrete_Saque;
          
          Return;
          
        END IF;  
        
        /*     VALIDA ID    */
        V_IDVALIDO := 'N';    
    
        IF V_IDVALIDO = 'N' THEN
          
           V_QTDELOOP := 0;
           
           /*     CADASTRA OPERAÇÃO PARA INTEGRAÇÃO DO FRETE      */
           FOR R_CURSOR IN (SELECT K.CFE_INTEGRATDV_COD,
                                    K.CFE_OPERACOES_COD,
                                    K.CFE_OPERATDV_SEQOP,
                                    K.CFE_OPERATDV_SEQINT
                               FROM T_CFE_OPERATDV K
                               WHERE K.CFE_INTEGRATDV_COD = vCodDePara)
           LOOP
              V_QTDELOOP := V_QTDELOOP +1;
              
              
               SELECT COUNT(*)+1
                 INTO V_EXISTESEQ
                 FROM T_CON_FRETEOPER K
                 WHERE K.CON_FRETEOPER_ID   = P_IDCONSULTA
                   AND K.CON_FRETEOPER_ROTA = P_ROTA
                   AND K.CFE_INTEGRATDV_COD = R_CURSOR.CFE_INTEGRATDV_COD
                   AND K.CFE_OPERACOES_COD  = R_CURSOR.CFE_OPERACOES_COD;  
              
              
              INSERT INTO T_CON_FRETEOPER F VALUES(P_IDCONSULTA,
                                                   P_ROTA,
                                                   R_CURSOR.CFE_INTEGRATDV_COD,
                                                   R_CURSOR.CFE_OPERACOES_COD,
                                                   'AG',
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   P_QRYSTR,
                                                   SYSDATE,
                                                   NULL,
                                                   NULL,
                                                   V_EXISTESEQ,
                                                   0);
           END LOOP;    
           
        IF V_QTDELOOP = 0 THEN
           P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
           P_MESSAGE := 'ERRO: NENHUMA OPERAÇÃO CADASTRADA PARA ESSE VALE DE FRETE!!';
          RETURN;
        END IF;  
            
        ELSE
          P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          P_MESSAGE := 'ERRO: ID PARA CADASTRO DE INTEGRAÇÃO DO VALE DE FRETE NÃO VALIDADO!';
          RETURN;
        END IF;  
        
        P_STATUS  := tdvadm.pkg_glb_common.Status_Nomal;
        P_MESSAGE := 'Solicitação de autorização da parcela realizado com sucesso!';
        
        COMMIT;
    
    EXCEPTION WHEN OTHERS THEN
          P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          P_MESSAGE := 'ERRO: PKG_CFE_FRETE2.SP_GET_INTEGRACAO, '||sqlerrm;
    END;    
  
  END SP_SET_ALTERARPARCELA;       
  
  PROCEDURE SP_SET_PAGARPARCELA(P_QRYSTR       IN  VARCHAR2,
                                P_IDCONSULTA   IN  VARCHAR2,
                                P_ROTA         IN  CHAR, 
                                P_STATUS       OUT CHAR,
                                P_MESSAGE      OUT VARCHAR2)AS
  V_IDVALIDO CHAR(1);
  V_TIPO     TDVADM.T_CFE_INTEGRATDV.CFE_INTEGRATDV_COD%TYPE;
  V_QTDELOOP INTEGER; 
  V_QTDESEQ  INTEGER;
  
  --Variável utilizada para recuperar número da parcela.
  vParcela  Varchar2(10);
  --Variável de controle 
  vControl Integer;
  
  --Variáveis utilizadas para recuperar valores do Vale de Frete
  vVFrete_Codigo    tdvadm.t_con_valefrete.con_conhecimento_codigo%Type;
  vVFrete_Serie     tdvadm.t_con_valefrete.con_conhecimento_serie%Type;
  vVFrete_Rota      tdvadm.t_con_valefrete.glb_rota_codigo%Type;
  vVFrete_Saque     tdvadm.t_con_valefrete.con_valefrete_saque%Type;
  vUsuario          tdvadm.t_usu_usuario.usu_usuario_codigo%type;
  vRotaUsuario      tdvadm.t_usu_usuario.glb_rota_codigo%type;
  
  -- Variaveis para conta imagens de cte
  vTomador     number;
  vComprovante number;
  vTotal       number;
  vVfFrota     integer:=0;

  vCodDePara       t_cfe_integratdvdp.cfe_integratdv_cod%type;
  vGerenciadora    t_cfe_gerenbco.cfe_gerenbco_cod%type;
  
  Begin
    vParcela := '';
    vControl := 0;
    BEGIN
      
        /*     TIPO DA CONSULTA    */
        
        V_TIPO := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'IntegraTdv_Cod','=','*'), 'valor', '=', '|');
        vParcela := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFParcelTdv','=','*'), 'valor', '=', '|');

        --Dados do Vale de Frete
        vVFrete_Codigo := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFNumero','=','*'), 'valor', '=', '|');
        vVFrete_Serie  := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFSerie','=','*'), 'valor', '=', '|');
        vVFrete_Rota   := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFRota','=','*'), 'valor', '=', '|');
        vVFrete_Saque  := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFSaque','=','*'), 'valor', '=', '|');
        vUsuario       := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFUsuarioTDV','=','*'), 'valor', '=', '|');   
        vRotaUsuario   := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFRotaUsuarioTDV','=','*'), 'valor', '=', '|');
        
        /**************************************************/
        /*****          Codigo da tabela DePara       *****/
        /**************************************************/
        begin
          
           select nvl(s.cfe_gerenbco_cod,'1')
             into vGerenciadora
             from t_uti_sequencia s
            where s.uti_sequencia_rota   = P_ROTA       
              and s.uti_sequencia_codigo = P_IDCONSULTA; 
                
           select l.cfe_integratdv_cod
             into vCodDePara
             from t_cfe_integratdvdp l
            where l.cfe_integratdvdp_cod = V_TIPO
              and l.cfe_gerenbco_cod     = vGerenciadora;
          
        end;
        /**************************************************/
        
        
        
        IF nvl(vRotaUsuario,'000') = '000' THEN
           P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
           P_MESSAGE := 'Erro: Rota do usuario para pagamento de parcela, não informada!!';
           RETURN;
        END IF;  
       
        Select Count(*)
          Into vControl
          From t_con_vfreteciot ciot
         where ciot.con_conhecimento_codigo = vVFrete_Codigo
           and ciot.con_conhecimento_serie  = vVFrete_Serie
           and ciot.glb_rota_codigo         = vVFrete_Rota
           and ciot.con_valefrete_saque     = vVFrete_Saque;
        
        select count(*)
          into vVfFrota  
          from t_con_valefrete vf
         where vf.con_conhecimento_codigo               = vVFrete_Codigo
           and vf.con_conhecimento_serie                = vVFrete_Serie
           and vf.glb_rota_codigo                       = vVFrete_Rota
           and vf.con_valefrete_saque                   = vVFrete_Saque
           and vf.glb_tpmotorista_codigo                = 'F'
           and substr(vf.con_valefrete_placa,1,3)       = '000';   
       
       if vControl <= 0 then
           P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
           P_MESSAGE := 'Erro: Vale de Frete não possuí Ciot Impossivel Pagamento Eletrônico!!';
           RETURN;          
       end if;     
    
    
       /*  SE NÃO FOR ID DE INTEGRAÇÃO DE VALE DE FRETE BLOQUEAMOS */
       IF V_TIPO NOT IN (23) THEN
           P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
           P_MESSAGE := 'ERRO: INTEGRAÇÃO TDV INFORMADA NÃO É VALIDA!';
           RETURN;
        Else
          -- Verifica Diario de Bordo
          
          if vParcela = '01' Then  -- Adiantamento
             if pkg_con_valefrete.fn_DiarioBordoEmitido(vVFrete_Codigo,
                                                        vVFrete_Serie,
                                                        vVFrete_Rota,
                                                        vVFrete_Saque) = 'N' Then
                 P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                 P_MESSAGE := 'EMISSAO OBRIGATORIO DO DIARIO DE BORDO!';
                 RETURN;
             End If;
          End If;
          
          
          -- verifica se falta imagens 
          If vParcela = '20' Then -- se for SALDO
            
            SELECT SUM(DECODE(CI.GLB_SUBGRUPOIMAGEM_CODIGO,'01',1,0)) TOMADOR,
                  SUM(DECODE(CI.GLB_SUBGRUPOIMAGEM_CODIGO,'01',0,1))  COMPROVANTE,
                  COUNT(*) TOTAL
                  into vTomador,
                       vComprovante,
                       vTotal
            FROM T_GLB_COMPIMAGEM  CI,
                 T_CON_VFRETECONHEC VC
            WHERE VC.CON_VALEFRETE_CODIGO    = vVFrete_Codigo
             AND VC.CON_VALEFRETE_SERIE      = vVFrete_Serie
             AND VC.GLB_ROTA_CODIGOVALEFRETE = vVFrete_Rota
             AND VC.CON_VALEFRETE_SAQUE      = vVFrete_Saque
             AND VC.CON_CONHECIMENTO_CODIGO  = CI.CON_CONHECIMENTO_CODIGO (+)
             AND VC.CON_CONHECIMENTO_SERIE   = CI.CON_CONHECIMENTO_SERIE (+)
             AND VC.GLB_ROTA_CODIGO          = CI.GLB_ROTA_CODIGO (+)
             AND CI.GLB_COMPIMAGEM_ARQUIVADO = 'S'
             AND TDVADM.PKG_CON_VALEFRETE.FN_GET_EMBTRANSFERENCIA(VC.CON_CONHECIMENTO_CODIGO,
                                                                  VC.CON_CONHECIMENTO_SERIE,
                                                                  VC.GLB_ROTA_CODIGO) = 'N';

             -- Se estiver faltando vias de comprovantes
             If vtotal <> vComprovante Then 
                P_STATUS  := tdvadm.pkg_glb_common.Status_Nomal;
                P_MESSAGE := 'Faltam Scanear ' || to_char(vTomador) || ' Comprovantes dos ' || to_char(vTotal) || ' Comprovantes contidos neste Vale de Frete';
--                RETURN;                
             End if;


             /******************************************************************/
             /**  SE VALE FRETE ELETRONICO PARA FROTA NÃO PEDI DIARIO DE BORDO**/
             /******************************************************************/
             
             IF (vVfFrota = 0) THEN 
               
                   if pkg_con_valefrete.fn_DiarioBordoRecebido(vVFrete_Codigo,
                                                               vVFrete_Serie,
                                                               vVFrete_Rota,
                                                               vVFrete_Saque) = 'N' Then
                       P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                       P_MESSAGE := 'TRANSMISSAO DO DIARIO DE BORDO OBRIGATORIO!';
                       RETURN;
                   End If;
             
             End If;
             
             /******************************************************/
             
          End If;
          
        End If; 
        
        Begin
          --verifico se a solicitação já foi realizada. 
          Select Count(*) Into vControl
          From t_con_freteoper oper
          Where
            0=0
            And oper.con_freteoper_id    = P_IDCONSULTA
            And oper.con_freteoper_rota  = P_ROTA
            AND oper.cfe_integratdv_cod  = vCodDePara
            And Trim(TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'VFParcelTdv','=','*'), 'valor', '=', '|')) = Trim(vParcela)
            
            And Trim(TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'VFNumero','=','*'), 'valor', '=', '|')) = Trim(vVFrete_Codigo)
            And Trim(TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'VFSerie','=','*'), 'valor', '=', '|')) = Trim(vVFrete_Serie)        
            And Trim(TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'VFRota','=','*'), 'valor', '=', '|')) = Trim(vVFrete_Rota)
            And Trim(TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'VFSaque','=','*'), 'valor', '=', '|')) = Trim(vVFrete_Saque);
            
        Exception
          --caso ocorra algum erro durante a busca, encerro o processamento.
          When Others Then
            P_STATUS := pkg_glb_common.Status_Erro;
            P_MESSAGE := 'Erro ao tentar buscar dados de Id.' || chr(13) || Sqlerrm;
            Return;
        End;
        
        --Caso tenha encontrado algum registro.
        If (vControl > 0)  Then
          P_STATUS := pkg_glb_common.Status_Erro;
          P_MESSAGE := 'Operação já solicitada.';
          Return;
        End If;
        
        
        /*     VALIDA ID    */
        V_IDVALIDO := 'N';  
    
        IF V_IDVALIDO = 'N' THEN
          
           V_QTDELOOP := 0;
           
           /*     CADASTRA OPERAÇÃO PARA INTEGRAÇÃO DO FRETE      */
           FOR R_CURSOR IN (SELECT K.CFE_INTEGRATDV_COD,
                                    K.CFE_OPERACOES_COD,
                                    K.CFE_OPERATDV_SEQOP,
                                    K.CFE_OPERATDV_SEQINT
                               FROM T_CFE_OPERATDV K
                               WHERE K.CFE_INTEGRATDV_COD = vCodDePara)
           LOOP
              V_QTDELOOP := V_QTDELOOP +1;
              
                            
               SELECT COUNT(*)+1
                 INTO V_QTDESEQ
                 FROM T_CON_FRETEOPER K
                 WHERE K.CON_FRETEOPER_ID   = P_IDCONSULTA
                   AND K.CON_FRETEOPER_ROTA = P_ROTA
                   AND K.CFE_INTEGRATDV_COD = R_CURSOR.CFE_INTEGRATDV_COD
                   AND K.CFE_OPERACOES_COD  = R_CURSOR.CFE_OPERACOES_COD;  
              
              
              INSERT INTO T_CON_FRETEOPER F VALUES(P_IDCONSULTA,
                                                   P_ROTA,
                                                   R_CURSOR.CFE_INTEGRATDV_COD,
                                                   R_CURSOR.CFE_OPERACOES_COD,
                                                   'AG',
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   P_QRYSTR,
                                                   SYSDATE,
                                                   NULL,
                                                   NULL,
                                                   V_QTDESEQ,
                                                   0);
           END LOOP;    
           
        IF V_QTDELOOP = 0 THEN
           P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
           P_MESSAGE := 'ERRO: NENHUMA OPERAÇÃO CADASTRADA PARA ESSE VALE DE FRETE!!';
          RETURN;
        END IF;  
            
        ELSE
          P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          P_MESSAGE := 'ERRO: ID PARA CADASTRO DE INTEGRAÇÃO DO VALE DE FRETE NÃO VALIDADO!';
          RETURN;
        END IF;  
        
        
        P_STATUS  := tdvadm.pkg_glb_common.Status_Nomal;
        P_MESSAGE := 'Solicitação de pagamento da parcela solicitada com sucesso!';
        
        COMMIT;
    
    EXCEPTION WHEN OTHERS THEN
          P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          P_MESSAGE := 'ERRO: PKG_CFE_FRETE2.SP_GET_INTEGRACAO, '||sqlerrm;
    END;    
  
  END SP_SET_PAGARPARCELA;
  
  
  PROCEDURE SP_SET_CANCELARCIOT(P_QRYSTR       IN  VARCHAR2,
                                P_IDCONSULTA   IN  VARCHAR2,
                                P_ROTA         IN  CHAR,
                                P_STATUS       OUT CHAR,
                                P_MESSAGE      OUT VARCHAR2)AS
  V_IDVALIDO      CHAR(1);
  V_TIPO          TDVADM.T_CFE_INTEGRATDV.CFE_INTEGRATDV_COD%TYPE;
  V_QTDELOOP      INTEGER;
  V_EXISTESEQ     INTEGER;
  V_EXISTCIOTVGN  INTEGER;
  vControl        Integer;
  vCiotNumero     t_con_vfreteciot.con_vfreteciot_numero%TYPE; 
  vCiotProtocolo  t_con_vfreteciot.con_vfreteciot_protocolo%TYPE;
  vValeFreteNun   t_con_vfreteciot.con_conhecimento_codigo%TYPE;
  vValeFreteSerie t_con_vfreteciot.con_conhecimento_serie%TYPE;
  vValeFreteRota  t_con_vfreteciot.glb_rota_codigo%TYPE;
  vValeFreteSaque t_con_vfreteciot.con_valefrete_saque%TYPE;
  vTpViagem       t_vgm_vgciot%ROWTYPE;
  vCodDePara       t_cfe_integratdvdp.cfe_integratdv_cod%type;
  vGerenciadora    t_cfe_gerenbco.cfe_gerenbco_cod%type;                              
  Begin

    Begin

       /***********************************/
       /*****     TIPO DA CONSULTA    *****/
       /***********************************/

       BEGIN
            V_TIPO                     := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'IntegraTdv_Cod','=','*'), 'valor', '=', '|');
            vValeFreteNun              := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFNumero','=','*'), 'valor', '=', '|');
            vValeFreteSerie            := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFSerie','=','*'), 'valor', '=', '|'); 
            vValeFreteRota             := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFRota','=','*'), 'valor', '=', '|');
            vValeFreteSaque            := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFSaque','=','*'), 'valor', '=', '|');
            
            /*  SE NÃO FOR ID DE INTEGRAÇÃO DE VALE DE FRETE BLOQUEAMOS */
            IF V_TIPO NOT IN (24) THEN
                P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                P_MESSAGE := 'ERRO: INTEGRAÇÃO TDV INFORMADA NÃO É VALIDA!';
                RETURN;
            END IF;
            
            
            /**************************************************/
            /*****          Codigo da tabela DePara       *****/
            /**************************************************/
            begin
             
              select nvl(s.cfe_gerenbco_cod,'1')
                into vGerenciadora
                from t_uti_sequencia s
               where s.uti_sequencia_rota   = P_ROTA       
                 and s.uti_sequencia_codigo = P_IDCONSULTA; 
                   
              select l.cfe_integratdv_cod
                into vCodDePara
                from t_cfe_integratdvdp l
               where l.cfe_integratdvdp_cod = V_TIPO
                 and l.cfe_gerenbco_cod     = vGerenciadora;
            end;
        /**************************************************/
       
       END;
       
       /***********************************/

       /******************************************************************************************
        **     EXEMPLO DE QRYSTRING CRIADA PARA A OPERAÇÃO DE CANCELAMENTO DE CIOT.             **
        **                                                                                      **
        **       IntegraTdv_Cod=nome=IntegraTdv_Cod|tipo=String|valor=24*                       **
        **       VFNumero=nome=VFNumero|tipo=String|valor=340399*                               **
        **       VFSerie=nome=VFSerie|tipo=String|valor=A1*                                     **
        **       VFRota=nome=VFRota|tipo=String|valor=021*                                      **
        **       VFSaque=nome=VFSaque|tipo=String|valor=1*                                      **
        **       VFParcelGer=nome=VFParcelGer|tipo=String|valor=*                               **
        **       VFParcelTdv=nome=VFParcelTdv|tipo=String|valor=*                               **
        **       VFUsuarioTDV=nome=VFUsuarioTDV|tipo=String|valor=jsantos*                      **
        **       VFRotaUsuarioTDV=nome=VFUsuarioTDV|tipo=String|valor=021*                      **
        **       VFAplicacaoTDV=nome=VFAplicacaoTDV|tipo=String|valor=comvlfrete*               **
        **       VFMsgMotCancel=nome=VFMsgMotCancel|tipo=String|valor=ESTOU CANCELANDO*         **
        **       VFParcelIdSt=nome=VFParcelIdSt|tipo=String|valor=*                             **
        *****************************************************************************************/

       /***********************************/
       /***** VALIDANDO SE JA FOI PAGO  ***/
       /***********************************/
       
       BEGIN   
      
           Begin
             --Inicializo a variavel
             vControl := 0;

             --Antes de solicitar o cancelamento vou verificar se já não existe uma solicitação de pagamento.
             Select
              Count(*) Into vControl
             From
              tdvadm.t_con_freteoper oper
             Where
              0=0
              And oper.cfe_integratdv_cod         = 23
              And oper.cfe_operacoes_cod          = 2
              And oper.cfe_statusfreteoper_status = 'OK'
              And Trim(TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'VFNumero','=','*'), 'valor', '=', '|') ) = vValeFreteNun  
              And Trim(TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'VFSerie','=','*'), 'valor', '=', '|') )  = vValeFreteSerie
              And Trim(TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'VFRota','=','*'), 'valor', '=', '|') )   = vValeFreteRota 
              And Trim(TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'VFSaque','=','*'), 'valor', '=', '|') )  = vValeFreteSaque
              and oper.con_freteoper_id = P_IDCONSULTA 
              AND OPER.CON_FRETEOPER_ROTA = P_ROTA;


           Exception
             --Caso ocorra algum erro durante a busca
             When Others Then
               raise_application_error(-20001, 'Erro ao procurar por solicitações de pagamento');
           End;


           -- caso a variável de controle seja maior que zero, mostra o erro.
           If vControl > 0 Then
              P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
              P_MESSAGE := 'Erro: CIOT NÃO PODE SER CANCELADO' || CHR(13) || CHR(13) ||
                                        'Existe uma solicitação aprovada para realizar pagamento para esse CIOT';
              RETURN;
           
           End If;
       

           -- verifica se ja houve algum pagamento antes de fazer o cancelamento
           Select Count(*)
             Into vControl
             From t_con_calcvalefrete cvf
            Where cvf.con_conhecimento_codigo       = vValeFreteNun  
              And cvf.con_conhecimento_serie         = vValeFreteSerie
              And cvf.glb_rota_codigo                = vValeFreteRota 
              And cvf.con_valefrete_saque            = vValeFreteSaque
              And ( ( cvf.con_calcvalefrete_dtliberacao Is Not Null ) Or(  cvf.con_calcvalefrete_dtpgto Is Not Null)) ;

           If vControl > 0 Then
              P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
              P_MESSAGE := 'ALERTA: IMPOSSIVEL CANCELAMENTO!'|| chr(13) || 'Exixtem parcela(s) Autorizada(s) ou Paga(s).';
              RETURN;
           End If;
           
       END;
      
       /***********************************/
      
      
       /***********************************/
       /***** VERIFICAÇÃO DO CIOT       ***/
       /***********************************/
      
       BEGIN
        
      
        BEGIN
            SELECT l.con_vfreteciot_numero   ,
                   l.con_vfreteciot_protocolo
              INTO vCiotNumero               ,
                   vCiotProtocolo  
              FROM T_CON_VFRETECIOT L
             WHERE L.CON_CONHECIMENTO_CODIGO = vValeFreteNun  
               AND l.con_conhecimento_serie  = vValeFreteSerie
               AND l.glb_rota_codigo         = vValeFreteRota 
               AND l.con_valefrete_saque     = vValeFreteSaque;
       EXCEPTION WHEN OTHERS THEN
         vCiotNumero    := '0000000000';  
         vCiotProtocolo := '00000';
       END;  
       
       BEGIN
           SELECT l.*
             INTO vTpViagem
             FROM T_VGM_VGCIOT L
            WHERE L.VGM_VGCIOT_NUMERO     = vCiotNumero
              AND l.vgm_vgciot_protocolo  = vCiotProtocolo;
              
            V_EXISTCIOTVGN := 1;   
            
       EXCEPTION WHEN OTHERS THEN
          V_EXISTCIOTVGN := 0;
       END;      
          
         
          
       IF V_EXISTCIOTVGN > 0 THEN
          
         INSERT INTO T_CON_VFRETECIOTHIST
           SELECT *
             FROM T_CON_VFRETECIOT K
            WHERE K.CON_CONHECIMENTO_CODIGO   = VVALEFRETENUN
              AND K.CON_CONHECIMENTO_SERIE    = VVALEFRETESERIE
              AND K.GLB_ROTA_CODIGO           = VVALEFRETEROTA
              AND K.CON_VALEFRETE_SAQUE       = VVALEFRETESAQUE;
         
         DELETE T_CON_VFRETECIOT K
          WHERE K.CON_CONHECIMENTO_CODIGO     = VVALEFRETENUN
            AND K.CON_CONHECIMENTO_SERIE      = VVALEFRETESERIE
            AND K.GLB_ROTA_CODIGO             = VVALEFRETEROTA
            AND K.CON_VALEFRETE_SAQUE         = VVALEFRETESAQUE;            
         
         DELETE T_CON_VFRETECOLETA COL
          WHERE COL.CON_VALEFRETE_CODIGO      = VVALEFRETENUN
            AND COL.CON_VALEFRETE_SERIE       = VVALEFRETESERIE
            AND COL.GLB_ROTA_CODIGOVALEFRETE  = VVALEFRETEROTA
            AND COL.CON_VALEFRETE_SAQUE       = VVALEFRETESAQUE;   
         
         UPDATE T_VGM_VIAGEM VG
            SET VG.VGM_VIAGEM_DTFECHAMENTO    = NULL,
                VG.USU_USUARIO_FECHAMENTO     = NULL
          WHERE VG.GLB_ROTA_CODIGO            = VTPVIAGEM.GLB_ROTA_CODIGO
            AND VG.VGM_VIAGEM_CODIGO          = VTPVIAGEM.VGM_VIAGEM_CODIGO;
            
            
         P_STATUS  := tdvadm.pkg_glb_common.Status_Nomal;
         P_MESSAGE := 'Ciot de Viagem foi desvinculando com sucesso do Vale de Frete: '||vValeFreteNun||
                      ' Serie: '||vValeFreteSerie||
                      ' Rota: '||vValeFreteRota ||
                      ' Saque: '||vValeFreteSaque;
         RETURN;   
          
       END IF;     
          
      END;  
      
       /***********************************/

       /***********************************/
       /***** CRIANDO INTEGRAÇÃO        ***/
       /***********************************/
       
        BEGIN
        
        V_IDVALIDO := 'N';

        IF V_IDVALIDO = 'N' THEN

           V_QTDELOOP := 0;

           /*     CADASTRA OPERAÇÃO PARA INTEGRAÇÃO DO FRETE      */
           FOR R_CURSOR IN (SELECT K.CFE_INTEGRATDV_COD,
                                   K.CFE_OPERACOES_COD,
                                   K.CFE_OPERATDV_SEQOP,
                                   K.CFE_OPERATDV_SEQINT
                              FROM T_CFE_OPERATDV K
                             WHERE K.CFE_INTEGRATDV_COD = vCodDePara)
           LOOP
              V_QTDELOOP := V_QTDELOOP +1;


                SELECT COUNT(*)+1
                  INTO V_EXISTESEQ
                  FROM T_CON_FRETEOPER K
                 WHERE K.CON_FRETEOPER_ID   = P_IDCONSULTA
                   AND K.CON_FRETEOPER_ROTA = P_ROTA
                   AND K.CFE_INTEGRATDV_COD = R_CURSOR.CFE_INTEGRATDV_COD
                   AND K.CFE_OPERACOES_COD  = R_CURSOR.CFE_OPERACOES_COD;


              INSERT INTO T_CON_FRETEOPER F VALUES(P_IDCONSULTA,
                                                   P_ROTA,
                                                   R_CURSOR.CFE_INTEGRATDV_COD,
                                                   R_CURSOR.CFE_OPERACOES_COD,
                                                   'AG',
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   P_QRYSTR,
                                                   SYSDATE,
                                                   NULL,
                                                   NULL,
                                                   V_EXISTESEQ,
                                                   0);
           END LOOP;

        IF V_QTDELOOP = 0 THEN
           P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
           P_MESSAGE := 'ERRO: NENHUMA OPERAÇÃO CADASTRADA PARA ESSE VALE DE FRETE!!';
          RETURN;
        END IF;

        ELSE
          P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          P_MESSAGE := 'ERRO: ID PARA CADASTRO DE INTEGRAÇÃO DO VALE DE FRETE NÃO VALIDADO!';
          RETURN;
        END IF;
        
        END;
        
       /***********************************/     
        COMMIT;
        
         P_STATUS  := tdvadm.pkg_glb_common.Status_Nomal;
         P_MESSAGE := 'Solicitação de Cancelamento de CIOT realizada com sucesso!';

    EXCEPTION WHEN OTHERS THEN
          P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          P_MESSAGE := Sqlerrm || chr(13) || chr(13) || 'PKG_CFE_FRETE.SP_SET_CANCELARCIOT';
    END;

  END SP_SET_CANCELARCIOT;
  
  FUNCTION Get_RetornoDescricao(P_ID          TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ID%TYPE,                                
                               P_ROTA        TDVADM.T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,      
                               P_OPERACAOWS  TDVADM.T_CON_FRETEOPER.CFE_OPERACOES_COD%TYPE,
                               P_OPERACAOTDV TDVADM.T_CON_FRETEOPER.CFE_INTEGRATDV_COD%TYPE,
                               P_SEQUENCIA   TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_SEQ%TYPE) 
    RETURN VARCHAR2
  AS
    vStatus CHAR(2);
    vReturn VARCHAR2(1000);
  BEGIN

    vStatus := 'ER';
    vReturn := NULL;
    FOR R_CURSOR IN (SELECT extractvalue(VALUE(Params), 'ResponseToRow/Chave') Chave,
                            extractvalue(VALUE(Params), 'ResponseToRow/Valor') Valor
                       FROM tdvadm.t_con_freteoper fo,
                            Table(XMLSequence(Extract(XMLTYPE.createXML(fo.con_freteoper_msgret),'/ResponseTo/ResponseToRows/ResponseToRow'))) Params
                      WHERE fo.con_freteoper_id   = p_id
                        AND fo.con_freteoper_rota = P_ROTA
                        AND fo.cfe_operacoes_cod  = P_OPERACAOWS
                        AND fo.cfe_integratdv_cod = P_OPERACAOTDV
                        AND fo.con_freteoper_seq  = P_SEQUENCIA)
    LOOP  
    
      IF (R_CURSOR.CHAVE = 'mensagem.codigo') AND (R_CURSOR.VALOR = '0') THEN
        vStatus := 'OK';
      END IF;
        
      IF ( vStatus = 'OK' ) AND ( R_CURSOR.CHAVE = 'mensagem.descricao' ) THEN
        --DBMS_OUTPUT.put_line(  ); 
        vReturn := R_CURSOR.VALOR;
        EXIT;
      END IF;       
      
    END LOOP;   
    RETURN vReturn;
  END Get_RetornoDescricao;
  
   PROCEDURE SP_SET_CONSULTARRNTRC(P_QRYSTR       IN CLOB,
                                 P_IDCONSULTA   IN  NUMBER,
                                 P_ROTA         IN  CHAR, 
                                 P_STATUS       OUT CHAR,
                                 P_MESSAGE      OUT VARCHAR2)AS
  V_IDVALIDO CHAR(1);
  V_TIPO     TDVADM.T_CFE_INTEGRATDV.CFE_INTEGRATDV_COD%TYPE;
  V_QTDELOOP INTEGER; 
  V_QTDESEQ  INTEGER;
  BEGIN
    BEGIN
      
        /*     TIPO DA CONSULTA    */
        
        V_TIPO := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'IntegraTdv_Cod','=','*'), 'valor', '=', '|');
        
        
       /*  SE NÃO FOR ID DE INTEGRAÇÃO DE VALE DE FRETE BLOQUEAMOS */
       IF V_TIPO NOT IN (19) THEN
           P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
           P_MESSAGE := 'ERRO: INTEGRAÇÃO TDV INFORMADA NÃO É VALIDA!';
           RETURN;
        END IF;  
        
        
        /*     VALIDA ID    */
        V_IDVALIDO := 'N';  
    
        IF V_IDVALIDO = 'N' THEN
          
           V_QTDELOOP := 0;
           
           /*     CADASTRA OPERAÇÃO PARA INTEGRAÇÃO DO FRETE      */
           FOR R_CURSOR IN (SELECT K.CFE_INTEGRATDV_COD,
                                    K.CFE_OPERACOES_COD,
                                    K.CFE_OPERATDV_SEQOP,
                                    K.CFE_OPERATDV_SEQINT
                               FROM T_CFE_OPERATDV K
                               WHERE K.CFE_INTEGRATDV_COD = V_TIPO)
           LOOP
              V_QTDELOOP := V_QTDELOOP +1;
              
                            
               SELECT COUNT(*)+1
                 INTO V_QTDESEQ
                 FROM T_CON_FRETEOPER K
                 WHERE K.CON_FRETEOPER_ID   = P_IDCONSULTA
                   AND K.CON_FRETEOPER_ROTA = P_ROTA
                   AND K.CFE_INTEGRATDV_COD = R_CURSOR.CFE_INTEGRATDV_COD
                   AND K.CFE_OPERACOES_COD  = R_CURSOR.CFE_OPERACOES_COD;  
              
              
              INSERT INTO T_CON_FRETEOPER F VALUES(P_IDCONSULTA,
                                                   P_ROTA,
                                                   R_CURSOR.CFE_INTEGRATDV_COD,
                                                   R_CURSOR.CFE_OPERACOES_COD,
                                                   'AG',
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   P_QRYSTR,
                                                   SYSDATE,
                                                   NULL,
                                                   NULL,
                                                   V_QTDESEQ,
                                                   0);
           END LOOP;    
           
        IF V_QTDELOOP = 0 THEN
           P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
           P_MESSAGE := 'ERRO: NENHUMA OPERAÇÃO CADASTRADA PARA ESSE VALE DE FRETE!!';
          RETURN;
        END IF;  
            
        ELSE
          P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          P_MESSAGE := 'ERRO: ID PARA CADASTRO DE INTEGRAÇÃO DO VALE DE FRETE NÃO VALIDADO!';
          RETURN;
        END IF;  
        
        COMMIT;
    
    EXCEPTION WHEN OTHERS THEN
          P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          P_MESSAGE := 'ERRO: PKG_CFE_FRETE2.SP_GET_INTEGRACAO, '||sqlerrm;
    END;    
  
  END SP_SET_CONSULTARRNTRC;
  
  function fn_Get_MsgPedagio(P_VFRETE  IN  T_CON_VALEFRETE.CON_CONHECIMENTO_CODIGO%TYPE,
                             P_VFSERIE IN  T_CON_VALEFRETE.CON_CONHECIMENTO_SERIE%TYPE,
                             P_VFROTA  IN  T_CON_VALEFRETE.GLB_ROTA_CODIGO%TYPE,
                             P_VFSAQUE IN  T_CON_VALEFRETE.CON_VALEFRETE_SAQUE%TYPE) 
    return varchar2
  is
    vValor varchar2(20);
    vMsgRetorno varchar2(2000);
  begin
    begin
      select trim(to_char(c.con_calcvalefrete_valor, '999999999.00'))
        into vValor
        from t_con_calcvalefrete c
       where 0=0 
         and c.con_conhecimento_codigo = P_VFRETE
         and c.glb_rota_codigo = P_VFROTA
         and c.con_conhecimento_serie = P_VFSERIE
         and c.con_valefrete_saque = P_VFSAQUE
         and c.con_calcvalefretetp_codigo = '02'; -- 02=Pedagio
      
      vMsgRetorno := '                                     NAO PAGAR PED R$ '||vValor||' PAGO EM CARTÃO';  
    exception when no_data_found then
      RAISE_APPLICATION_ERROR(-20001, 'Erro ao tentar montar mensagem de pedagio, VF: '||P_VFRETE ||', '||
                                                                              'Série: '||P_VFSERIE||', '||
                                                                               'Rota: '||P_VFROTA ||', '|| 
                                                                              'Saque: '||P_VFSAQUE||' - '||
                                                                               SQLERRM);  
    end;
    return vMsgRetorno;
  end fn_Get_MsgPedagio;
     
  function fn_ExistVerbaCiot(P_VFRETE  IN  T_CON_VALEFRETE.CON_CONHECIMENTO_CODIGO%TYPE,
                             P_VFSERIE IN  T_CON_VALEFRETE.CON_CONHECIMENTO_SERIE%TYPE,
                             P_VFROTA  IN  T_CON_VALEFRETE.GLB_ROTA_CODIGO%TYPE,
                             P_VFSAQUE IN  T_CON_VALEFRETE.CON_VALEFRETE_SAQUE%TYPE)
    return integer
  is 
    vExist integer; 
  begin

    select count(*)
      into vExist
      from t_con_calcvalefrete c,
           t_con_vfreteciot ciot
     where 0=0 
       and c.con_conhecimento_codigo = ciot.con_conhecimento_codigo
       and c.con_conhecimento_serie = ciot.con_conhecimento_serie
       and c.glb_rota_codigo = ciot.glb_rota_codigo
       and c.con_valefrete_saque = ciot.con_valefrete_saque
       and ciot.con_vfreteciot_numero is not null
       and c.con_conhecimento_codigo = P_VFRETE
       and c.glb_rota_codigo = P_VFROTA
       and c.con_conhecimento_serie = P_VFSERIE
       and c.con_valefrete_saque = P_VFSAQUE
       and c.con_calcvalefretetp_codigo = '02';      
    
    return vExist;
  end fn_ExistVerbaCiot;
  
  procedure sp_GravaLogErro(pMsgLog     in  tdvadm.t_log_system.log_system_message%type,
                            pCampoChave in  tdvadm.t_log_system.log_system_campochave%type,
                            pStatus     out char,
                            pMessage    out varchar2)
  as
    vAppLog       tdvadm.t_usu_aplicacao.usu_aplicacao_codigo%type := 'servicevfe';
    vMacroLog     tdvadm.t_log_macro.log_macro_codigo%type := 'integFreteEletronico';
    vTipoLog      tdvadm.t_log_tipo.log_tipo_codigo%type := 'E'; 
    vEmailAssunto varchar2(2000) := 'Erro Frete Eletronico';
    vEmailPara    varchar2(2000) := 'ksouza@dellavolpe.com.br';
    vEmailCc      varchar2(2000) := 'tdv.ti04@dellavolpe.com.br';
    vEnviarEmail  boolean := false;
    vMsgEmail     varchar2(2000);
  begin
      
    begin
      
    
      vMsgEmail := 'Erro Frete Eletronico'||chr(13)||chr(10);
      vMsgEmail := vMsgEmail||'Campo Chave: '||pCampoChave||chr(13)||chr(10);
      vMsgEmail := vMsgEmail||chr(13)||chr(10);
      vMsgEmail := vMsgEmail||pMsgLog;
    
      -- Fabiano Góes - 31/05/2012
      -- por enquando iniciei a variavel como false propositalmente pra não entrar neste if
      -- vou criar uma regra pra decidir se envia email ou não, talvés conforme a mensagem ainda não decidi.
      -- então essa variavel deve ser preenchida com o retorno de uma regra
      
      -- Fabiano Góes: Estou testando a regra p/ enviar email
      vEnviarEmail := pkg_cfe_frete.fn_EnviaEmailLogErro( pMsgLog );
      if( vEnviarEmail ) then
    
        tdvadm.pkg_glb_log.sp_GravaLogEmail(
          vMsgEmail, 
          vAppLog, 
          vTipoLog, 
          vMacroLog, 
          pCampoChave, 
          vEmailAssunto,
          vEmailPara,
          vEmailCc);      
        
        pStatus  := 'N';
        pMessage := 'Log de Erro gravado em banco com sucesso!';      
                  
      end if;
      
    exception when others then
      pStatus  := 'E';
      pMessage := 'Erro ao tentar gravar log de Erro para a chave: '||pCampoChave||', '||sqlerrm;  
    end;    
                          
  end;
  
  procedure sp_GetTimeOutRequest(pGerenciadoraCodigo in  tdvadm.t_cfe_gerenbco.cfe_gerenbco_cod%type,
                                 pWMethodoOperacao   in  tdvadm.t_cfe_operacoes.cfe_operacoes_wmethodo%type,
                                 pTimeOut            out VARCHAR2,
                                 pStatus             out char,
                                 pMessage            out varchar2)
  as
    vTimeOutGerenciadora t_cfe_gerenbco.cfe_gerenbco_timeoutrequest%type;
  begin
    
    begin     
      
      select nvl(g.cfe_gerenbco_timeoutrequest, 60000)
        into vTimeOutGerenciadora
        from t_cfe_gerenbco g
       where 0=0
         and g.cfe_gerenbco_cod = pGerenciadoraCodigo;
     
      select nvl(O.CFE_OPERACOES_TIMEOUTREQUEST, vTimeOutGerenciadora)
        into pTimeOut
        from T_CFE_OPERACOES O
       where 0=0
         and O.CFE_GERENBCO_COD = pGerenciadoraCodigo
         and O.CFE_OPERACOES_WMETHODO = pWMethodoOperacao
         and rownum = 1;
    
      pStatus  := 'N';
      pMessage := 'Timeout obtido com sucesso';      
    exception 
      when no_data_found then
        pTimeOut := 60000;
        pStatus  := 'N';
        pMessage := 'Timeout obtido com sucesso';  
      when others then
        pStatus  := 'E';
        pMessage := 'Erro ao tentar obter o Timeout de request para a gerenciadora: '||pGerenciadoraCodigo||', '||sqlerrm;  
    end;  
    
  end sp_GetTimeOutRequest;                                   
  
  function fn_EnviaEmailLogErro(pMensagem in varchar2) 
    return boolean
  as 
    vEnviar boolean := false;
  begin
    
    -- Erro de Timeout
    vEnviar := (InStr(pMensagem, 'O tempo limite da operação foi atingido') > 0) or
               (InStr(pMensagem, 'ORA-24338: statement handle not executed') > 0);
   
    return nvl(vEnviar, false);
                          
  end fn_EnviaEmailLogErro;
  
  PROCEDURE SP_GET_MANTERVIAGEM(P_QRYSTR       IN  CLOB,
                                P_IDCONSULTA   IN  NUMBER,
                                P_ROTA         IN  CHAR,                           
                                P_CURSOR       OUT T_CURSOR,
                                P_STATUS       OUT CHAR,
                                P_MESSAGE      OUT VARCHAR2)
  AS
  V_INSERT      TpRegTxt;
  V_STATUS      CHAR(1);
  V_MESSAGE     VARCHAR2(200);
  BEGIN
    BEGIN
             
      BEGIN  
        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'Operacao';
        V_INSERT.uti_vfintegra_valor := 'INC';          
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
                                                  
        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'TipoViagem';
        V_INSERT.uti_vfintegra_valor := 'FRE - Contrato de Frete';          
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
        
        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'DadosViagem.NumeroViagem';
        V_INSERT.uti_vfintegra_valor := '10';          
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);

        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'DadosViagem.Embarque';
        V_INSERT.uti_vfintegra_valor := TO_CHAR(SYSDATE, 'DD/MM/YYYY HH24:MI:SS');--'13/07/2012 10:46:12';          
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);

        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'DadosViagem.PrevisaoEntrega';
        V_INSERT.uti_vfintegra_valor := TO_CHAR(SYSDATE+1, 'DD/MM/YYYY HH24:MI:SS'); --'14/07/2012 10:46:12';          
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);

        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'DadosViagem.DataVigencia';
        V_INSERT.uti_vfintegra_valor := TO_CHAR(SYSDATE+2, 'DD/MM/YYYY HH24:MI:SS');--'15/07/2012 10:46:12';          
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);

        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'DadosViagem.DocumentoRef';
        V_INSERT.uti_vfintegra_valor := '123d6';          
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);

        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'DadosViagem.Observacao';
        V_INSERT.uti_vfintegra_valor := 'VIAGEM DE FRETE';          
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);

        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'DadosViagem.Foro.Estado';
        V_INSERT.uti_vfintegra_valor := 'SC';          
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);

        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'DadosViagem.Foro.Cidade';
        V_INSERT.uti_vfintegra_valor := 'Criciuma';          
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);

        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'Transportador.NomeTransportador';
        V_INSERT.uti_vfintegra_valor := 'IVONIR PEREIRA DE ALMEIDA';          
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
 
        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'Transportador.CNPJCPFTransportador';
        V_INSERT.uti_vfintegra_valor := '08572398805';          
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);

        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'Transportador.RNTRC';
        V_INSERT.uti_vfintegra_valor := '00239000';          
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
 
        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'Veiculo.CNPJCPF';
        V_INSERT.uti_vfintegra_valor := '08572398805';          
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);

        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'Veiculo.RNTRC';
        V_INSERT.uti_vfintegra_valor := '00239000';          
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);

        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'Veiculo.PlacaVeiculo';
        V_INSERT.uti_vfintegra_valor := 'BWA7696';          
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
 
        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'Veiculo.TipoRodagem';
        V_INSERT.uti_vfintegra_valor := 'D';          
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
 
        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'Veiculo.TipoVeiculo';
        V_INSERT.uti_vfintegra_valor := '3';          
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);

        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'Veiculo.QtdeEixos';
        V_INSERT.uti_vfintegra_valor := '5';          
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
 
        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'Motorista.NomeMotorista';
        V_INSERT.uti_vfintegra_valor := 'IVONIR PEREIRA DE ALMEIDA';          
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);

        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'Motorista.CPFMotorista';
        V_INSERT.uti_vfintegra_valor := '08572398805';          
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);

        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'Viagem.PesoCarga';
        V_INSERT.uti_vfintegra_valor := '100';          
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);

        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'Viagem.ValorCombustivel';
        V_INSERT.uti_vfintegra_valor := '50';          
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);

        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'Viagem.ValorDespesas';
        V_INSERT.uti_vfintegra_valor := '50';          
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
 
        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'Viagem.ValorFrete';
        V_INSERT.uti_vfintegra_valor := '1000';          
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);

        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'EnvolvidosTransporteViagem.EnvolvidosTransporte.TipoEnvolvido';
        V_INSERT.uti_vfintegra_valor := 'REM';          
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);

        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'EnvolvidosTransporteViagem.EnvolvidosTransporte.CNPJCPF';
        V_INSERT.uti_vfintegra_valor := '79585524000141';          
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);

        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'EnvolvidosTransporteViagem.EnvolvidosTransporte.NomeEnvolvido';
        V_INSERT.uti_vfintegra_valor := 'Lojas Bahia Ltda';          
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
 
        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'EnvolvidosTransporteViagem.EnvolvidosTransporte.CEP';
        V_INSERT.uti_vfintegra_valor := '88811500';          
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
 
        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'EnvolvidosTransporteViagem.EnvolvidosTransporte.TipoEndereco';
        V_INSERT.uti_vfintegra_valor := 'C';          
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
 
        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'RotaViagem.CodigoIBGEOrigem';
        V_INSERT.uti_vfintegra_valor := '4204608';          
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);

        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'RotaViagem.CodigoIBGEDestino';
        V_INSERT.uti_vfintegra_valor := '3304102';          
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
 
        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'ImpostoINSS.BaseCalculoImposto';
        V_INSERT.uti_vfintegra_valor := '100';          
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
 
        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'ImpostoINSS.PercentualImposto';
        V_INSERT.uti_vfintegra_valor := '100';          
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
 
        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'ImpostoINSS.RetencaoImposto';
        V_INSERT.uti_vfintegra_valor := 'True';          
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);

        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'ImpostoINSS.ValorImposto';
        V_INSERT.uti_vfintegra_valor := '10000';          
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
 
        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'ImpostoINSS.Add';
        V_INSERT.uti_vfintegra_valor := 'True';          
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
 
        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'impostoIRRF.BaseCalculoImposto';
        V_INSERT.uti_vfintegra_valor := '100';          
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
 
        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'impostoIRRF.PercentualImposto';
        V_INSERT.uti_vfintegra_valor := '100';          
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
 
        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'impostoIRRF.RetencaoImposto';
        V_INSERT.uti_vfintegra_valor := 'True';          
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);

        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'impostoIRRF.ValorImposto';
        V_INSERT.uti_vfintegra_valor := '10000';          
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
 
        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'ImpostoIRRF.Add';
        V_INSERT.uti_vfintegra_valor := 'True';          
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
 
        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'impostoSENAT.BaseCalculoImposto';
        V_INSERT.uti_vfintegra_valor := '100';          
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
 
        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'impostoSENAT.PercentualImposto';
        V_INSERT.uti_vfintegra_valor := '100';          
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
 
        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'impostoSENAT.RetencaoImposto';
        V_INSERT.uti_vfintegra_valor := 'True';          
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);

        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'impostoSENAT.ValorImposto';
        V_INSERT.uti_vfintegra_valor := '10000';          
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
 
        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'ImpostoSENAT.Add';
        V_INSERT.uti_vfintegra_valor := 'True';          
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
 
        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'ImpostosViagem.ValorTotalImpostos';
        V_INSERT.uti_vfintegra_valor := '30000';          
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
 
        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'ValePedagioViagem.MeioPagamentoValePedagio';
        V_INSERT.uti_vfintegra_valor := '5';          
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
 
        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'ValePedagioViagem.ValorPedagio';
        V_INSERT.uti_vfintegra_valor := '150.00';          
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
        
      EXCEPTION WHEN OTHERS THEN
        V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
        V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_MANTERVIAGEM, '||sqlerrm;             
      END;   
            
      OPEN P_CURSOR FOR
      SELECT K.UTI_VFINTEGRA_CHAVE CHAVE,
             K.UTI_VFINTEGRA_VALOR VALOR
        FROM T_UTI_VFINTEGRA K
       WHERE K.CON_FRETEOPER_ID   = P_IDCONSULTA
         AND K.CON_FRETEOPER_ROTA = P_ROTA
      ORDER BY K.UTI_VFINTEGRA_SEQ;
     
      DELETE T_UTI_VFINTEGRA D
       WHERE D.CON_FRETEOPER_ID   = P_IDCONSULTA  
         AND D.CON_FRETEOPER_ROTA = P_ROTA;
              
     COMMIT;
     
     EXCEPTION WHEN OTHERS THEN
       P_STATUS    := tdvadm.pkg_glb_common.Status_Erro;
       P_MESSAGE  := 'Erro ao consultar. Erro='||SQLCODE;
     END;          
     P_STATUS   := tdvadm.pkg_glb_common.Status_Nomal; 
     P_MESSAGE := 'Processamento Normal.';          
  END;                                  
  
  
  
  PROCEDURE SP_SET_CANCELARCIOTVGM(P_QRYSTR       IN  VARCHAR2,
                                   P_IDCONSULTA   IN  VARCHAR2,
                                   P_ROTA         IN  CHAR, 
                                   P_STATUS       OUT CHAR,
                                   P_MESSAGE      OUT VARCHAR2)AS
  V_IDVALIDO CHAR(1);
  V_TIPO     TDVADM.T_CFE_INTEGRATDV.CFE_INTEGRATDV_COD%TYPE;
  V_QTDELOOP INTEGER;
  V_EXISTESEQ INTEGER;
  
    --Variável de controle
    vControl Integer;
  Begin

    Begin
      
        /*     TIPO DA CONSULTA    */
        
        V_TIPO := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'IntegraTdv_Cod','=','*'), 'valor', '=', '|');
        
        
       /*  SE NÃO FOR ID DE INTEGRAÇÃO DE VALE DE FRETE BLOQUEAMOS */
       IF V_TIPO NOT IN (24) THEN
           P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
           P_MESSAGE := 'ERRO: INTEGRAÇÃO TDV INFORMADA NÃO É VALIDA!';
           RETURN;
        END IF;  
        
  /******************************************************************************************
   **     EXEMPLO DE QRYSTRING CRIADA PARA A OPERAÇÃO DE CANCELAMENTO DE CIOT.             **
   **                                                                                      **
   **       IntegraTdv_Cod=nome=IntegraTdv_Cod|tipo=String|valor=24*                       **
   **       VFNumero=nome=VFNumero|tipo=String|valor=340399*                               ** 
   **       VFSerie=nome=VFSerie|tipo=String|valor=A1*                                     **
   **       VFRota=nome=VFRota|tipo=String|valor=021*                                      **
   **       VFSaque=nome=VFSaque|tipo=String|valor=1*                                      **
   **       VFParcelGer=nome=VFParcelGer|tipo=String|valor=*                               **
   **       VFParcelTdv=nome=VFParcelTdv|tipo=String|valor=*                               **
   **       VFUsuarioTDV=nome=VFUsuarioTDV|tipo=String|valor=jsantos*                      **
   **       VFRotaUsuarioTDV=nome=VFUsuarioTDV|tipo=String|valor=021*                      **
   **       VFAplicacaoTDV=nome=VFAplicacaoTDV|tipo=String|valor=comvlfrete*               **
   **       VFMsgMotCancel=nome=VFMsgMotCancel|tipo=String|valor=ESTOU CANCELANDO*         **
   **       VFParcelIdSt=nome=VFParcelIdSt|tipo=String|valor=*                             **
   *****************************************************************************************/
   
   
   Begin
     --Inicializo a variavel 
     vControl := 0;
     
     --Antes de solicitar o cancelamento vou verificar se já não existe uma solicitação de pagamento.
     Select 
      Count(*) Into vControl 
     From 
      tdvadm.t_con_freteoper oper
     Where
      0=0
      And oper.cfe_integratdv_cod = 23
      And oper.cfe_operacoes_cod = 2
      And oper.cfe_statusfreteoper_status = 'OK'
      And Trim(TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'VFNumero','=','*'), 'valor', '=', '|') ) = TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFNumero','=','*'), 'valor', '=', '|')
      And Trim(TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'VFSerie','=','*'), 'valor', '=', '|') )  = TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFSerie','=','*'), 'valor', '=', '|')
      And Trim(TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'VFRota','=','*'), 'valor', '=', '|') )   = TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFRota','=','*'), 'valor', '=', '|')
      And Trim(TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'VFSaque','=','*'), 'valor', '=', '|') )  = TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFSaque','=','*'), 'valor', '=', '|');
   
   Exception
     --Caso ocorra algum erro durante a busca
     When Others Then
       raise_application_error(-20001, 'Erro ao procurar por solicitações de pagamento');
   End;   
   
   
   --caso a variável de controle seja maior que zero, mostra o erro.
   If vControl > 0 Then
           P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
           P_MESSAGE := 'Erro: CIOT NÃO PODE SER CANCELADO' || CHR(13) || CHR(13) ||
                                     'Existe uma solicitação aprovada para realizar pagamento para esse CIOT';
           RETURN;                          
   End If;
   

   -- verifica se ja houve algum pagamento antes de fazer o cancelamento
     Select Count(*)
        Into vControl
     From t_con_calcvalefrete cvf
     Where  cvf.con_conhecimento_codigo = TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFNumero','=','*'), 'valor', '=', '|')
      And cvf.con_conhecimento_serie = TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFSerie','=','*'), 'valor', '=', '|')
      And cvf.glb_rota_codigo = TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFRota','=','*'), 'valor', '=', '|')
      And cvf.con_valefrete_saque = TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFSaque','=','*'), 'valor', '=', '|')
      And ( ( cvf.con_calcvalefrete_dtliberacao Is Not Null ) Or(  cvf.con_calcvalefrete_dtpgto Is Not Null)) ;
     
     If vControl > 0 Then
           P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
           P_MESSAGE := 'ALERTA: IMPOSSIVEL CANCELAMENTO!'|| chr(13) || 'Exixtem parcela(s) Autorizada(s) ou Paga(s).';
           RETURN;
     End If;       


        
        
        /*     VALIDA ID    */
        V_IDVALIDO := 'N';    
    
        IF V_IDVALIDO = 'N' THEN
          
           V_QTDELOOP := 0;
           
           /*     CADASTRA OPERAÇÃO PARA INTEGRAÇÃO DO FRETE      */
           FOR R_CURSOR IN (SELECT K.CFE_INTEGRATDV_COD,
                                    K.CFE_OPERACOES_COD,
                                    K.CFE_OPERATDV_SEQOP,
                                    K.CFE_OPERATDV_SEQINT
                               FROM T_CFE_OPERATDV K
                               WHERE K.CFE_INTEGRATDV_COD = V_TIPO)
           LOOP
              V_QTDELOOP := V_QTDELOOP +1;
              
              
               SELECT COUNT(*)+1
                 INTO V_EXISTESEQ
                 FROM T_CON_FRETEOPER K
                 WHERE K.CON_FRETEOPER_ID   = P_IDCONSULTA
                   AND K.CON_FRETEOPER_ROTA = P_ROTA
                   AND K.CFE_INTEGRATDV_COD = R_CURSOR.CFE_INTEGRATDV_COD
                   AND K.CFE_OPERACOES_COD  = R_CURSOR.CFE_OPERACOES_COD;  
              
              
              INSERT INTO T_CON_FRETEOPER F VALUES(P_IDCONSULTA,
                                                   P_ROTA,
                                                   R_CURSOR.CFE_INTEGRATDV_COD,
                                                   R_CURSOR.CFE_OPERACOES_COD,
                                                   'AG',
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   P_QRYSTR,
                                                   SYSDATE,
                                                   NULL,
                                                   NULL,
                                                   V_EXISTESEQ,
                                                   0);
           END LOOP;    
           
        IF V_QTDELOOP = 0 THEN
           P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
           P_MESSAGE := 'ERRO: NENHUMA OPERAÇÃO CADASTRADA PARA ESSE VALE DE FRETE!!';
          RETURN;
        END IF;  
            
        ELSE
          P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          P_MESSAGE := 'ERRO: ID PARA CADASTRO DE INTEGRAÇÃO DO VALE DE FRETE NÃO VALIDADO!';
          RETURN;
        END IF;  
        
        COMMIT;
    
    EXCEPTION WHEN OTHERS THEN
          P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          P_MESSAGE := Sqlerrm || chr(13) || chr(13) || 'PKG_CFE_FRETE2.SP_GET_INTEGRACAO';
    END;    
  
  END SP_SET_CANCELARCIOTVGM;  
  
   FUNCTION FN_GET_CARTAOFRETE(P_VALEFRETE IN T_CON_VALEFRETE.CON_CONHECIMENTO_CODIGO%TYPE,
                               P_SERIE     IN T_CON_VALEFRETE.CON_CONHECIMENTO_SERIE%TYPE,
                               P_ROTA      IN T_CON_VALEFRETE.GLB_ROTA_CODIGO%TYPE,
                               P_SAQUE     IN T_CON_VALEFRETE.CON_VALEFRETE_SAQUE%TYPE,
                               P_TPPARCELA IN T_CON_CALCVALEFRETETP.CON_CALCVALEFRETETP_CODIGO%TYPE)RETURN VARCHAR IS

  vCartaoPgto       t_con_calcvalefrete.con_calcvalefrete_cartao%TYPE;
  vIdOpere          t_con_freteoper.con_freteoper_id%TYPE;
  vIdRota           t_con_freteoper.con_freteoper_rota%TYPE;
  vQryStr           t_con_freteoper.con_freteoper_paramqrystr%TYPE;
  vCiotViagem       t_con_vfreteciot.con_vfreteciot_numero%type;

  vProprietario     T_CAR_PROPRIETARIO.CAR_PROPRIETARIO_CGCCPFCODIGO%TYPE;
  vPropbanco        VARCHAR2(20);    
  vPropagencia      VARCHAR2(20);
  vPropconta        VARCHAR2(20); 
  vProptipoconta    VARCHAR2(20);
  vPropcartao       VARCHAR2(20);  

  vMotorista        T_CAR_CARRETEIRO.CAR_CARRETEIRO_CPFCODIGO%TYPE;
  vMotoristasaque   T_CAR_CARRETEIRO.CAR_CARRETEIRO_SAQUE%TYPE;
  vMotoristacartao  VARCHAR2(20);
  vAchou            BOOLEAN;  
  vFrota            BOOLEAN:= false;  
   
   BEGIN
          
        BEGIN
          vAchou := FALSE;
          FOR R_PARCELAS IN (SELECT L.CON_CONHECIMENTO_CODIGO,
                                    L.CON_CONHECIMENTO_SERIE,
                                    L.GLB_ROTA_CODIGO,
                                    L.CON_VALEFRETE_SAQUE,
                                    L.CON_CALCVALEFRETETP_CODIGO
                               FROM T_CON_CALCVALEFRETE L
                              WHERE L.CON_CONHECIMENTO_CODIGO    = P_VALEFRETE 
                                AND L.CON_CONHECIMENTO_SERIE     = P_SERIE     
                                AND L.GLB_ROTA_CODIGO            = P_ROTA      
                                AND L.CON_VALEFRETE_SAQUE        = P_SAQUE     
                                AND L.CON_CALCVALEFRETETP_CODIGO = P_TPPARCELA)
          LOOP

           vAchou := TRUE;
           
           BEGIN
               SELECT CI.CON_FRETEOPER_ID     ,
                      CI.CON_FRETEOPER_ROTA   ,
                      CI.CON_VFRETECIOT_NUMERO
                 INTO vIdOpere                ,
                      vIdRota                 ,
                      vCiotViagem
                 FROM T_CON_VFRETECIOT CI
                 WHERE CI.CON_CONHECIMENTO_CODIGO = R_PARCELAS.CON_CONHECIMENTO_CODIGO
                   AND CI.CON_CONHECIMENTO_SERIE  = R_PARCELAS.CON_CONHECIMENTO_SERIE
                   AND CI.GLB_ROTA_CODIGO         = R_PARCELAS.GLB_ROTA_CODIGO
                   AND CI.CON_VALEFRETE_SAQUE     = R_PARCELAS.CON_VALEFRETE_SAQUE;

             EXCEPTION WHEN OTHERS THEN
               vIdOpere := NULL;
               vIdRota  := NULL;
             END;

             IF vidOpere IS NOT NULL THEN

                BEGIN
                  -- PARA PEGAR O VCARTÃO DO PROPRIETARIO
                  SELECT FO.CON_FRETEOPER_PARAMQRYSTR
                    INTO vQryStr
                    FROM T_CON_FRETEOPER FO
                   WHERE FO.CON_FRETEOPER_ID   = vIdOpere
                     AND FO.CON_FRETEOPER_ROTA = vIdRota
                     AND FO.CFE_OPERACOES_COD  IN ('8','58');
                EXCEPTION 
                   WHEN NO_DATA_FOUND THEN
                   BEGIN
                     
                     -- PARA PEGAR O CARTÃO DO FROTA
                     SELECT FO.CON_FRETEOPER_PARAMQRYSTR
                       INTO vQryStr
                       FROM T_CON_FRETEOPER FO
                      WHERE FO.CON_FRETEOPER_ID   = vIdOpere
                        AND FO.CON_FRETEOPER_ROTA = vIdRota
                        AND FO.CFE_OPERACOES_COD  = '38';
                        
                     vFrota := true;   
                     
                   END;  
                   
                   WHEN OTHERS THEN
                   BEGIN
                     vQryStr := NULL;
                   END; 
                END;


                   IF vQryStr IS NOT NULL THEN
                       
                       vproprietario    := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryStr,'Proprietario','=','*'), 'valor', '=', '|');
                       vmotorista       := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryStr,'Motorista','=','*'), 'valor', '=', '|');
                       vmotoristasaque  := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryStr,'MotoristaSaque','=','*'), 'valor', '=', '|');
                       vmotoristacartao := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryStr,'MotoristaCartao','=','*'), 'valor', '=', '|');

                       vpropbanco       := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryStr,'PropBanco','=','*'), 'valor', '=', '|');
                       vpropagencia     := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryStr,'PropAgencia','=','*'), 'valor', '=', '|');
                       vpropconta       := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryStr,'PropConta','=','*'), 'valor', '=', '|');
                       vproptipoconta   := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryStr,'PropTipoConta','=','*'), 'valor', '=', '|');

                       vpropcartao      := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryStr,'ProprietarioCartao','=','*'), 'valor', '=', '|');
                       
                       -- SE FOR UM Cior / Viagem de frota retorno o cartão do Motorista
                       if (vFrota = true) AND (vpropcartao is null) then
                          vpropcartao := vmotoristacartao; 
                          vFrota := false;
                       end if;  
                       
                       
                   END IF;

            END IF;
        END LOOP;
     
    IF vAchou = TRUE THEN
       IF P_TPPARCELA IN ('01','20') THEN
          vCartaoPgto := vpropcartao;
       ELSIF P_TPPARCELA IN ('02') THEN 
          IF nvl(vmotoristacartao,'NULO') <> 'NULO' THEN
             IF vmotoristacartao <> vpropcartao THEN
                vCartaoPgto :=  vmotoristacartao;
             ELSE
                vCartaoPgto :=  vpropcartao;
             END IF;  
          ELSE
             vCartaoPgto :=  vpropcartao;
          END IF;  
       END IF;
    ELSE 
      vCartaoPgto := '';       
    END IF;  
    
    EXCEPTION WHEN OTHERS THEN
      vCartaoPgto := ''; 
    END;  
          
   RETURN vCartaoPgto;
    
   END FN_GET_CARTAOFRETE;  

   PROCEDURE SP_SET_CANCELARPARCELA(P_QRYSTR       IN  CLOB,
                                    P_IDCONSULTA   IN  NUMBER,
                                    P_ROTA         IN  CHAR,
                                    P_STATUS       OUT CHAR,
                                    P_MESSAGE      OUT VARCHAR2) AS

  vVFrete          T_CON_VALEFRETE.CON_CONHECIMENTO_CODIGO%TYPE;
  vVFserie         T_CON_VALEFRETE.CON_CONHECIMENTO_SERIE%TYPE;
  vVFrota          T_CON_VALEFRETE.GLB_ROTA_CODIGO%TYPE;
  vVFsaque         T_CON_VALEFRETE.CON_VALEFRETE_SAQUE%TYPE;
  vCodParcelaOper  T_CON_CALCVALEFRETE.CON_CALCVALEFRETE_CODPAROPER%TYPE;
  vCodParcelaTdv   T_CON_CALCVALEFRETE.CON_CALCVALEFRETETP_CODIGO%TYPE;
  vDatePgto        T_CON_CALCVALEFRETE.CON_CALCVALEFRETE_DTPGTO%TYPE; 

  BEGIN
    BEGIN
      
      /*****************************************************/
      /********  EXTRAINDO VALORES DA QUERY STR  ***********/
      /*****************************************************/
      BEGIN
        vVFrete          := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QRYSTR,'VFNumero','=','*'), 'valor', '=', '|');
        vVFserie         := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QRYSTR,'VFSerie','=','*'), 'valor', '=', '|');
        vVFrota          := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QRYSTR,'VFRota','=','*'), 'valor', '=', '|');
        vVFsaque         := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QRYSTR,'VFSaque','=','*'), 'valor', '=', '|');
        vCodParcelaOper  := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QRYSTR,'VFParcelGer','=','*'), 'valor', '=', '|');
        vCodParcelaTdv   := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QRYSTR,'VFParcelTdv','=','*'), 'valor', '=', '|');
      END;
      /*****************************************************/
      /*****************************************************/
      /*****************************************************/
      
      
      
      BEGIN
         SELECT CAL.CON_CALCVALEFRETE_DTPGTO
           INTO vDatePgto
           FROM tdvadm.t_Con_Calcvalefrete CAL
          WHERE CAL.CON_CONHECIMENTO_CODIGO      = vVFrete        
            AND CAL.CON_CONHECIMENTO_SERIE       = vVFserie       
            AND CAL.GLB_ROTA_CODIGO              = vVFrota        
            AND CAL.CON_VALEFRETE_SAQUE          = vVFsaque       
            AND CAL.CON_CALCVALEFRETE_CODPAROPER = vCodParcelaOper
            AND CAL.CON_CALCVALEFRETETP_CODIGO   = vCodParcelaTdv;
     EXCEPTION 
       WHEN NO_DATA_FOUND THEN
       BEGIN
          P_STATUS    := tdvadm.pkg_glb_common.Status_Erro;
          P_MESSAGE   := 'Parcela não existe';
          RETURN;
       END;
          
       WHEN OTHERS THEN
       BEGIN
          P_STATUS    := tdvadm.pkg_glb_common.Status_Erro;
          P_MESSAGE   := 'Erro ao consultar. Erro='||SQLERRM;
       END;    
     END;
     
     IF vDatePgto IS NULL THEN
        UPDATE tdvadm.t_Con_Calcvalefrete CAL
           SET CAL.USU_USUARIO_BLOQUEOU         = 'jsantos',
               cal.con_calcvalefrete_dtbloqueio = SYSDATE,
               cal.con_calcvalefrete_cancelada  = 'S',
               cal.con_calcvalefrete_tipo       = 'H'
         WHERE CAL.CON_CONHECIMENTO_CODIGO      = vVFrete        
           AND CAL.CON_CONHECIMENTO_SERIE       = vVFserie       
           AND CAL.GLB_ROTA_CODIGO              = vVFrota        
           AND CAL.CON_VALEFRETE_SAQUE          = vVFsaque       
           AND CAL.CON_CALCVALEFRETE_CODPAROPER = vCodParcelaOper
           AND CAL.CON_CALCVALEFRETETP_CODIGO   = vCodParcelaTdv;
           
        P_STATUS   := tdvadm.pkg_glb_common.Status_Nomal;
        P_MESSAGE := 'Processamento Normal.';
     
     ELSE
      P_STATUS    := tdvadm.pkg_glb_common.Status_Erro;
      P_MESSAGE   := 'Parcela TDV: '||vCodParcelaTdv||' ja esta paga, impossivel Cancelamento!';
     END IF;    
     
     
    EXCEPTION WHEN OTHERS THEN
      P_STATUS    := tdvadm.pkg_glb_common.Status_Erro;
      P_MESSAGE   := 'Erro ao consultar. Erro='||SQLERRM;
    END;
    
    COMMIT;
  END SP_SET_CANCELARPARCELA;

   PROCEDURE SP_GET_ALTERFRETE(P_QRYSTR       IN  CLOB,
                                                P_IDCONSULTA   IN  NUMBER,
                                                P_ROTA         IN  CHAR,
                                                P_CURSOR       OUT PKG_GLB_COMMON.T_CURSOR,
                                                P_STATUS       OUT CHAR,
                                                P_MESSAGE      OUT VARCHAR2)AS

    vInsertTxt            pkg_cfe_frete.TpRegTxt;
    vStatus               CHAR(1);
    vMessage              VARCHAR2(200);

    vProprietario         T_CAR_PROPRIETARIO.CAR_PROPRIETARIO_CGCCPFCODIGO%TYPE;

    vPropBanco            VARCHAR2(20);
    vPropAgencia          VARCHAR2(20);
    vPropConta            VARCHAR2(20);
    vPropTipoConta        VARCHAR2(20);
    vPropCartao           VARCHAR2(20);

    vMotorista            T_CAR_CARRETEIRO.CAR_CARRETEIRO_CPFCODIGO%TYPE;
    vMotoristaSaque       T_CAR_CARRETEIRO.CAR_CARRETEIRO_SAQUE%TYPE;
    vMotoristaCartao      VARCHAR2(20);

    vCnpjRota             T_GLB_ROTA.GLB_ROTA_CGC%TYPE;
    vPlaca                T_CAR_VEICULO.CAR_VEICULO_PLACA%TYPE;
    vSaque                T_CAR_VEICULO.CAR_VEICULO_SAQUE%TYPE;

    vVfrete               T_CON_VALEFRETE.CON_CONHECIMENTO_CODIGO%TYPE;
    vVfreteSerie          T_CON_VALEFRETE.CON_CONHECIMENTO_SERIE%TYPE;
    vVfreteRota           T_CON_VALEFRETE.GLB_ROTA_CODIGO%TYPE;
    vVfreteSaque          T_CON_VALEFRETE.CON_VALEFRETE_SAQUE%TYPE;

    vValorBruto           T_CON_CALCVALEFRETE.CON_CALCVALEFRETE_VALOR%TYPE;
    V_QryStrAux           T_CON_FRETEOPER.CON_FRETEOPER_PARAMQRYSTR%TYPE;
    vValeFreteTipo        CHAR(2);
    tPVfreteCiot          tdvadm.t_Con_Vfreteciot%rowtype;
    vExisteValefrete      INTEGER;
    vqtdeparcelas         INTEGER;  
    vIndiceParcelas       INTEGER;
    vIndiceParcelasInf    INTEGER;
    v_tipovaforecido      CHAR(1); 
    V_QTDEITENSFRETE      INTEGER;
    V_INDICEITENSFRETE    INTEGER;
    V_VALORFRETEBRUTO    T_CON_CALCVALEFRETE.CON_CALCVALEFRETE_VALOR%TYPE;
    V_QTDETRANSFSAQUE    INTEGER;
    BEGIN

      BEGIN

      /*************************************************************************/
      /*                    ALIMENTANTO VARIAVEIS DE PARAMETROS                */
      /*************************************************************************/
      BEGIN

         BEGIN

         SELECT L.CON_FRETEOPER_PARAMQRYSTR
           INTO V_QryStrAux
           FROM T_CON_FRETEOPER L
           WHERE L.CON_FRETEOPER_ID   = P_IDCONSULTA
             AND L.CON_FRETEOPER_ROTA = P_ROTA
             AND L.CFE_OPERACOES_COD  = '8';

         EXCEPTION WHEN OTHERS THEN
            vStatus  := tdvadm.pkg_glb_common.Status_Erro;
            vMessage := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
         END;

         VPROPRIETARIO    := TDVADM.fn_querystring(TDVADM.fn_querystring(V_QryStrAux,'Proprietario','=','*'), 'valor', '=', '|');
         VMOTORISTA       := TDVADM.fn_querystring(TDVADM.fn_querystring(V_QryStrAux,'Motorista','=','*'), 'valor', '=', '|');
         VMOTORISTASAQUE  := TDVADM.fn_querystring(TDVADM.fn_querystring(V_QryStrAux,'MotoristaSaque','=','*'), 'valor', '=', '|');
         VMOTORISTACARTAO := TDVADM.fn_querystring(TDVADM.fn_querystring(V_QryStrAux,'MotoristaCartao','=','*'), 'valor', '=', '|');

         VPROPBANCO       := TDVADM.fn_querystring(TDVADM.fn_querystring(V_QryStrAux,'PropBanco','=','*'), 'valor', '=', '|');
         VPROPAGENCIA     := TDVADM.fn_querystring(TDVADM.fn_querystring(V_QryStrAux,'PropAgencia','=','*'), 'valor', '=', '|');
         VPROPCONTA       := TDVADM.fn_querystring(TDVADM.fn_querystring(V_QryStrAux,'PropConta','=','*'), 'valor', '=', '|');
         VPROPTIPOCONTA   := TDVADM.fn_querystring(TDVADM.fn_querystring(V_QryStrAux,'PropTipoConta','=','*'), 'valor', '=', '|');
         VPROPCARTAO      := TDVADM.fn_querystring(TDVADM.fn_querystring(V_QryStrAux,'ProprietarioCartao','=','*'), 'valor', '=', '|');

         VPLACA           := TDVADM.fn_querystring(TDVADM.fn_querystring(V_QryStrAux,'Placa','=','*'), 'valor', '=', '|');
         VSAQUE           := TDVADM.fn_querystring(TDVADM.fn_querystring(V_QryStrAux,'PlacaSaque','=','*'), 'valor', '=', '|');

         VVFRETE          := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QRYSTR,'VFNumero','=','*'), 'valor', '=', '|');
         vVfreteSerie     := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QRYSTR,'VFSerie','=','*'), 'valor', '=', '|');
         vVfreteRota      := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QRYSTR,'VFRota','=','*'), 'valor', '=', '|');
         VVFreteSAQUE     := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QRYSTR,'VFSaque','=','*'), 'valor', '=', '|');

         vValeFreteTipo    := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QRYSTR,'TpValeFrete','=','*'), 'valor', '=', '|');

         -- SE TEM FAVORECIDO PROPRIETARIO / MOTORISTA
         --V_TPFAVOPRECIDO := FN_GET_PAGAMENTOFAVORECIDO(V_VFRETE, V_VFSERIE, V_VFROTA, V_VFSAQUE);

       END;
      /*************************************************************************/    
      
      /*************************************************************************/
      /*                        SE VALE FRETE EXISTE                           */
      /*************************************************************************/
      BEGIN
       
       BEGIN
          SELECT COUNT(*)
            INTO vExisteValefrete
            FROM T_CON_VALEFRETE CF
           WHERE CF.CON_CONHECIMENTO_CODIGO = vVfrete      
             AND CF.CON_CONHECIMENTO_SERIE  = vVfreteSerie 
             AND CF.GLB_ROTA_CODIGO         = vVfreteRota  
             AND CF.CON_VALEFRETE_SAQUE     = vVfreteSaque
             AND NVL(CF.CON_VALEFRETE_STATUS,'N') = 'N';
             
       EXCEPTION WHEN OTHERS THEN
         P_STATUS   := tdvadm.pkg_glb_common.Status_Erro;
         P_MESSAGE  := 'Erro ao consultar vale frete, Erro: '||Sqlerrm;
       END;  
       
       
       IF vExisteValefrete = 0 THEN       
          P_STATUS   := tdvadm.pkg_glb_common.Status_Erro;
          P_MESSAGE  := 'Vale frete não existe!';
       END IF;  
       
      END;  
      /*************************************************************************/  
      
      /*************************************************************************/
      /*                    ALIMENTANTO VARIAVEL DA TABELA DE CIOT             */
      /*************************************************************************/
      BEGIN
        
       SELECT K.*
         INTO tPVfreteCiot
         FROM T_CON_VFRETECIOT K
        WHERE K.CON_CONHECIMENTO_CODIGO = vVfrete      
          AND K.CON_CONHECIMENTO_SERIE  = vVfreteSerie 
          AND K.GLB_ROTA_CODIGO         = vVfreteRota  
          AND K.CON_VALEFRETE_SAQUE     = vVfreteSaque;            
      END;
      /*************************************************************************/
      
      /*************************************************************************/
      /**************   Alimentando variavel com o CNPJ da rota    *************/
      /*************************************************************************/
      BEGIN
       
        BEGIN
         SELECT RT.GLB_ROTA_CGC
           INTO vCnpjRota
           FROM TDVADM.T_GLB_ROTA RT 
          WHERE RT.GLB_ROTA_CODIGO = tPVfreteCiot.Glb_Rota_Codigo;
        EXCEPTION WHEN OTHERS THEN
          vCnpjRota := pkg_cfe_frete.ContratanteNumero;
        END;  
           
      END;  
      /*************************************************************************/
      
      /*************************************************************************/
      /*                    CRIANDO ARQUIVO DE INTEGRAÇÃO                      */
      /*************************************************************************/
      BEGIN
       -- CONTRATANTE
       BEGIN    
        vInsertTxt.con_freteoper_id    := P_IDCONSULTA; 
        vInsertTxt.con_freteoper_rota  := P_ROTA;
        vInsertTxt.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        vInsertTxt.uti_vfintegra_chave := 'viagem.contratante.documento.numero';
        vInsertTxt.uti_vfintegra_valor := TRIM(ContratanteNumero);
        
        PKG_CFE_FRETE.SP_GRAVALINHATXT(vInsertTxt,
                                        VSTATUS, 
                                        VMESSAGE);
      
      EXCEPTION WHEN OTHERS THEN
        VSTATUS  := tdvadm.pkg_glb_common.Status_Erro;
        VMESSAGE := 'ERRO: '||sqlerrm;             
      END;
      
       -- CNPJ DA ROTA 
       IF TRIM(vCnpjRota) <> pkg_cfe_frete.ContratanteNumero THEN
         -- TIPO DOCUMENTO UNIDADE
         BEGIN
           
           vInsertTxt.con_freteoper_id    := P_IDCONSULTA; 
           vInsertTxt.con_freteoper_rota  := P_ROTA;
           vInsertTxt.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
           vInsertTxt.uti_vfintegra_chave := 'viagem.unidade.documento.tipo';
           vInsertTxt.uti_vfintegra_valor := '88';
           
           PKG_CFE_FRETE.SP_GRAVALINHATXT(vInsertTxt,VSTATUS, VMESSAGE);
                                                   
         EXCEPTION WHEN OTHERS THEN
           VSTATUS  := tdvadm.pkg_glb_common.Status_Erro;
           VMESSAGE := 'ERRO: '||sqlerrm;             
         END;
         
         -- NUMERO DOCUMENTO UNIDADE
         BEGIN
           
           vInsertTxt.con_freteoper_id    := P_IDCONSULTA; 
           vInsertTxt.con_freteoper_rota  := P_ROTA;
           vInsertTxt.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
           vInsertTxt.uti_vfintegra_chave := 'viagem.unidade.documento.numero';
           vInsertTxt.uti_vfintegra_valor := TRIM(P_ROTA);
           
           PKG_CFE_FRETE.SP_GRAVALINHATXT(vInsertTxt,VSTATUS, VMESSAGE);
                                                   
         EXCEPTION WHEN OTHERS THEN
           VSTATUS  := tdvadm.pkg_glb_common.Status_Erro;
           VMESSAGE := 'ERRO: '||sqlerrm;             
         END;
      
      END IF;   
      
       -- ID CLIENTE
       BEGIN    
        vInsertTxt.con_freteoper_id    := P_IDCONSULTA; 
        vInsertTxt.con_freteoper_rota  := P_ROTA;
        vInsertTxt.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        vInsertTxt.uti_vfintegra_chave := 'viagem.id.cliente';
        vInsertTxt.uti_vfintegra_valor := TRIM(tPVfreteCiot.Con_Vfreteciot_Idcliente);
        
        PKG_CFE_FRETE.SP_GRAVALINHATXT(vInsertTxt,
                                        VSTATUS, 
                                        VMESSAGE);
      
      EXCEPTION WHEN OTHERS THEN
        VSTATUS  := tdvadm.pkg_glb_common.Status_Erro;
        VMESSAGE := 'ERRO: '||sqlerrm;             
      END;
      
       -- ID PAMCARY
       BEGIN    
        vInsertTxt.con_freteoper_id    := P_IDCONSULTA; 
        vInsertTxt.con_freteoper_rota  := P_ROTA;
        vInsertTxt.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        vInsertTxt.uti_vfintegra_chave := 'viagem.id';
        vInsertTxt.uti_vfintegra_valor := TRIM(tPVfreteCiot.Con_Vfreteciot_Id);
        
        PKG_CFE_FRETE.SP_GRAVALINHATXT(vInsertTxt,
                                        VSTATUS, 
                                        VMESSAGE);
      
      EXCEPTION WHEN OTHERS THEN
        VSTATUS  := tdvadm.pkg_glb_common.Status_Erro;
        VMESSAGE := 'ERRO: '||sqlerrm;             
      END;
      
       -- CIOT
       BEGIN    
        vInsertTxt.con_freteoper_id    := P_IDCONSULTA; 
        vInsertTxt.con_freteoper_rota  := P_ROTA;
        vInsertTxt.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        vInsertTxt.uti_vfintegra_chave := 'viagem.antt.ciot.numero';
        vInsertTxt.uti_vfintegra_valor := TRIM(tPVfreteCiot.Con_Vfreteciot_Numero);
        
        PKG_CFE_FRETE.SP_GRAVALINHATXT(vInsertTxt,
                                        VSTATUS, 
                                        VMESSAGE);
      
      EXCEPTION WHEN OTHERS THEN
        VSTATUS  := tdvadm.pkg_glb_common.Status_Erro;
        VMESSAGE := 'ERRO: '||sqlerrm;             
      END;
      
       /*************************************************************************/
       /***********************          PARCELAS        ***********************/
       /*************************************************************************/
        
        BEGIN
            -- QUANTIDADE DE PARCELAS
            SELECT COUNT(*)
              INTO vqtdeparcelas
              FROM T_CON_CALCVALEFRETE F
             WHERE F.CON_CONHECIMENTO_CODIGO    = VVFRETE
               AND F.CON_CONHECIMENTO_SERIE     = VVFRETESERIE
               AND F.GLB_ROTA_CODIGO            = VVFRETEROTA
               AND F.CON_VALEFRETE_SAQUE        = VVFRETESAQUE
               AND F.CON_CALCVALEFRETE_FLAGPGTO = 'S'
               AND TO_NUMBER(F.CON_CALCVALEFRETE_VALOR) <> '0';
            
            
               --  ANALISE DOS VALORES DE SAQUE E TRANSFERENCIA
              SELECT COUNT(*)
                INTO V_QTDETRANSFSAQUE                        
                FROM T_CON_CALCVALEFRETE F
               WHERE F.CON_CONHECIMENTO_CODIGO    = VVFRETE
                 AND F.CON_CONHECIMENTO_SERIE     = VVFRETESERIE
                 AND F.GLB_ROTA_CODIGO            = VVFRETEROTA
                 AND F.CON_VALEFRETE_SAQUE        = VVFRETESAQUE
                 AND F.CON_CALCVALEFRETE_FLAGPGTO = 'N'
                 AND TO_NUMBER(F.CON_CALCVALEFRETE_VALOR) <> '0';   
                 
              
              
              IF (V_QTDETRANSFSAQUE > 0 ) AND (VQTDEPARCELAS = 1) THEN
           
                  VQTDEPARCELAS := VQTDEPARCELAS +1;
            
              END IF;   
         
        
              -- QUANTIDADE PARCELAS
             BEGIN     
               vInsertTxt.con_freteoper_id    := P_IDCONSULTA; 
               vInsertTxt.con_freteoper_rota  := P_ROTA;
               vInsertTxt.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               vInsertTxt.uti_vfintegra_chave := TRIM('viagem.parcela.qtde');
               vInsertTxt.uti_vfintegra_valor := TRIM(TO_CHAR(VQTDEPARCELAS));
               PKG_CFE_FRETE.SP_GRAVALINHATXT(vInsertTxt,VSTATUS, VMESSAGE);             
             EXCEPTION WHEN OTHERS THEN
               VSTATUS  := tdvadm.pkg_glb_common.Status_Erro;
               VMESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
             END;
                                    
            
            VINDICEPARCELAS := 0;
            FOR R_PARCELAS IN (SELECT F.CON_CONHECIMENTO_CODIGO,
                                      F.CON_CONHECIMENTO_SERIE,
                                      F.GLB_ROTA_CODIGO,
                                      F.CON_VALEFRETE_SAQUE,
                                      F.CON_CALCVALEFRETE_SEQ,
                                      F.CON_CALCVALEFRETE_TIPO,
                                      DECODE(F.con_calcvalefretetp_codigo,
                                         '01',F.CON_CALCVALEFRETE_VALOR + Fn_Get_VlrTransfSaque(F.con_conhecimento_codigo, F.con_conhecimento_serie, F.glb_rota_codigo, F.con_valefrete_saque),
                                         '20',F.CON_CALCVALEFRETE_VALOR) CON_CALCVALEFRETE_VALOR,
                                      --F.CON_CALCVALEFRETE_VALOR,
                                      F.CON_CALCVALEFRETE_VENCIMENTO,
                                      F.CON_CALCVALEFRETETP_CODIGO,
                                      F.CON_CALCVALEFRETE_TPPESSOA,
                                      TP.CON_CALCVALEFRETETP_CODPAMCARY,
                                      NVL(F.CON_CALCVALEFRETE_FLAGLIB,'N') CON_CALCVALEFRETE_FLAGLIB,
                                      NVL(F.CON_CALCVALEFRETE_CODPAROPER,0) CON_CALCVALEFRETE_CODPAROPER
                                  FROM T_CON_CALCVALEFRETE F,
                                       T_CON_CALCVALEFRETETP TP
                                 WHERE F.CON_CONHECIMENTO_CODIGO   = VVFRETE
                                   AND F.CON_CONHECIMENTO_SERIE    = VVFRETESERIE
                                   AND F.GLB_ROTA_CODIGO           = VVFRETEROTA
                                   AND F.CON_VALEFRETE_SAQUE       = VVFRETESAQUE
                                   AND F.CON_CALCVALEFRETE_FLAGPGTO = 'S'
                                   AND F.CON_CALCVALEFRETETP_CODIGO = TP.CON_CALCVALEFRETETP_CODIGO
                                   AND TO_NUMBER(F.CON_CALCVALEFRETE_VALOR) <> 0
                                   ORDER BY NVL(F.CON_CALCVALEFRETE_CODPAROPER,99))
            LOOP
                
                IF (TO_NUMBER(R_PARCELAS.CON_CALCVALEFRETE_VALOR) <> 0) THEN 
                  
                  VINDICEPARCELAS := VINDICEPARCELAS +1;
                  
                  IF R_PARCELAS.CON_CALCVALEFRETE_CODPAROPER = 0 THEN
                     vIndiceParcelasInf := VINDICEPARCELAS;  
                  ELSE
                     vIndiceParcelasInf :=  R_PARCELAS.CON_CALCVALEFRETE_CODPAROPER;
                  END IF;
                     
                   -- EFETIVAÇÃO PARCELA
                   BEGIN     
                     vInsertTxt.con_freteoper_id    := P_IDCONSULTA; 
                     vInsertTxt.con_freteoper_rota  := P_ROTA;
                     vInsertTxt.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                     vInsertTxt.uti_vfintegra_chave := REPLACE('viagem.parcelaXX.efetivacao.tipo','XX',TRIM(TO_CHAR(vIndiceParcelasInf)));
                     vInsertTxt.uti_vfintegra_valor := TRIM('1');
                     PKG_CFE_FRETE.SP_GRAVALINHATXT(vInsertTxt,VSTATUS, VMESSAGE);             
                   EXCEPTION WHEN OTHERS THEN
                     VSTATUS  := tdvadm.pkg_glb_common.Status_Erro;
                     VMESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
                   END;
                        
                   -- VALOR PARCELA
                   BEGIN     
                     vInsertTxt.con_freteoper_id    := P_IDCONSULTA; 
                     vInsertTxt.con_freteoper_rota  := P_ROTA;
                     vInsertTxt.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                     vInsertTxt.uti_vfintegra_chave := REPLACE('viagem.parcelaXX.valor','XX',TRIM(TO_CHAR(vIndiceParcelasInf)));
                     vInsertTxt.uti_vfintegra_valor := TRIM(TO_CHAR(R_PARCELAS.CON_CALCVALEFRETE_VALOR,'999999999.00'));
                     
                     PKG_CFE_FRETE.SP_GRAVALINHATXT(vInsertTxt,VSTATUS, VMESSAGE);             
                   EXCEPTION WHEN OTHERS THEN
                     VSTATUS  := tdvadm.pkg_glb_common.Status_Erro;
                     VMESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
                   END;
                        
                   -- SUBTIPO PARCELA
                   BEGIN     
                     vInsertTxt.con_freteoper_id    := P_IDCONSULTA; 
                     vInsertTxt.con_freteoper_rota  := P_ROTA;
                     vInsertTxt.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                     vInsertTxt.uti_vfintegra_chave := REPLACE('viagem.parcelaXX.subtipo','XX',TRIM(TO_CHAR(vIndiceParcelasInf)));
                     vInsertTxt.uti_vfintegra_valor := TRIM(TO_NUMBER(R_PARCELAS.CON_CALCVALEFRETETP_CODPAMCARY));
                     PKG_CFE_FRETE.SP_GRAVALINHATXT(vInsertTxt,VSTATUS, VMESSAGE);             
                   EXCEPTION WHEN OTHERS THEN
                     VSTATUS  := tdvadm.pkg_glb_common.Status_Erro;
                     VMESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
                   END;
                        
                   -- PARCELA BASE
                   BEGIN     
                     vInsertTxt.con_freteoper_id    := P_IDCONSULTA; 
                     vInsertTxt.con_freteoper_rota  := P_ROTA;
                     vInsertTxt.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                     vInsertTxt.uti_vfintegra_chave := REPLACE('viagem.parcelaXX.base','XX',TRIM(TO_CHAR(vIndiceParcelasInf)));
                     vInsertTxt.uti_vfintegra_valor := TRIM('N');
                     PKG_CFE_FRETE.SP_GRAVALINHATXT(vInsertTxt,VSTATUS, VMESSAGE);             
                   EXCEPTION WHEN OTHERS THEN
                     VSTATUS  := tdvadm.pkg_glb_common.Status_Erro;
                     VMESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
                   END;
                   
                   
                   -- STATUS PARCELA
                   BEGIN     
                     vInsertTxt.con_freteoper_id    := P_IDCONSULTA; 
                     vInsertTxt.con_freteoper_rota  := P_ROTA;
                     vInsertTxt.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                     vInsertTxt.uti_vfintegra_chave := REPLACE('viagem.parcelaXX.status.id','XX',TRIM(TO_CHAR(vIndiceParcelasInf)));
                     
                     IF R_PARCELAS.CON_CALCVALEFRETE_FLAGLIB = 'N' THEN
                        vInsertTxt.uti_vfintegra_valor := TRIM('1');
                     ELSIF R_PARCELAS.CON_CALCVALEFRETE_FLAGLIB = 'S' THEN
                        vInsertTxt.uti_vfintegra_valor := TRIM('2');
                     END IF;   
                     
                     
                     
                     PKG_CFE_FRETE.SP_GRAVALINHATXT(vInsertTxt,VSTATUS, VMESSAGE);             
                   EXCEPTION WHEN OTHERS THEN
                     VSTATUS  := tdvadm.pkg_glb_common.Status_Erro;
                     VMESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
                   END;
                        
                   -- DATA PARCELA
                   BEGIN     
                     vInsertTxt.con_freteoper_id    := P_IDCONSULTA; 
                     vInsertTxt.con_freteoper_rota  := P_ROTA;
                     vInsertTxt.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                     vInsertTxt.uti_vfintegra_chave := REPLACE('viagem.parcelaXX.data','XX',TRIM(TO_CHAR(vIndiceParcelasInf)));
                     vInsertTxt.uti_vfintegra_valor := TRIM(R_PARCELAS.CON_CALCVALEFRETE_VENCIMENTO);
                     PKG_CFE_FRETE.SP_GRAVALINHATXT(vInsertTxt,VSTATUS, VMESSAGE);             
                   EXCEPTION WHEN OTHERS THEN
                     VSTATUS  := tdvadm.pkg_glb_common.Status_Erro;
                     VMESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
                   END;
                        
                   -- FAVORECIDO PARCELA
                   BEGIN     
                     vInsertTxt.con_freteoper_id    := P_IDCONSULTA; 
                     vInsertTxt.con_freteoper_rota  := P_ROTA;
                     vInsertTxt.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                     vInsertTxt.uti_vfintegra_chave := REPLACE('viagem.parcelaXX.favorecido.tipo.id','XX',TRIM(TO_CHAR(vIndiceParcelasInf)));
                     
                     SELECT DECODE(R_PARCELAS.CON_CALCVALEFRETE_TPPESSOA,'P','1','M','3')
                       INTO V_TIPOVAFORECIDO
                       FROM DUAL;
                     
                     vInsertTxt.uti_vfintegra_valor := V_TIPOVAFORECIDO;
                     
                     PKG_CFE_FRETE.SP_GRAVALINHATXT(vInsertTxt,VSTATUS, VMESSAGE);
                                  
                   EXCEPTION WHEN OTHERS THEN
                     VSTATUS  := tdvadm.pkg_glb_common.Status_Erro;
                     VMESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
                   END;
                        
                   -- NUMERO CLIENTE
                   BEGIN     
                     vInsertTxt.con_freteoper_id    := P_IDCONSULTA; 
                     vInsertTxt.con_freteoper_rota  := P_ROTA;
                     vInsertTxt.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                     vInsertTxt.uti_vfintegra_chave := REPLACE('viagem.parcelaXX.numero.cliente','XX',TRIM(TO_CHAR(vIndiceParcelasInf)));
                     vInsertTxt.uti_vfintegra_valor := TRIM(TO_CHAR(TO_NUMBER(R_PARCELAS.CON_CALCVALEFRETETP_CODIGO)));
                     PKG_CFE_FRETE.SP_GRAVALINHATXT(vInsertTxt,VSTATUS, VMESSAGE);             
                   EXCEPTION WHEN OTHERS THEN
                     VSTATUS  := tdvadm.pkg_glb_common.Status_Erro;
                     VMESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
                   END; 
                   

                   BEGIN
                     UPDATE T_CON_CALCVALEFRETE CAL
                        SET CAL.CON_CALCVALEFRETE_CODPAROPER = vIndiceParcelasInf
                      WHERE CAL.CON_CONHECIMENTO_CODIGO      = R_PARCELAS.CON_CONHECIMENTO_CODIGO
                        AND CAL.CON_CONHECIMENTO_SERIE       = R_PARCELAS.CON_CONHECIMENTO_SERIE
                        AND CAL.GLB_ROTA_CODIGO              = R_PARCELAS.GLB_ROTA_CODIGO
                        AND CAL.CON_VALEFRETE_SAQUE          = R_PARCELAS.CON_VALEFRETE_SAQUE
                        AND CAL.CON_CALCVALEFRETE_SEQ        = R_PARCELAS.CON_CALCVALEFRETE_SEQ;
                          
                   EXCEPTION WHEN OTHERS THEN
                     VSTATUS  := tdvadm.pkg_glb_common.Status_Erro;
                     VMESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm; 
                   END;  
                   
                 end if;
                 
            END LOOP;    

        END; 
        
       /*************************************************************************/
        
       /*************************************************************************/
       /*********************      VALOR FRETE BRUTO    *************************/
       /*************************************************************************/
      
        BEGIN
          -- BUSCANDO VALOR 
          BEGIN
           SELECT CAL.CON_CALCVALEFRETE_VALOR
             INTO V_VALORFRETEBRUTO
             FROM T_CON_CALCVALEFRETE CAL
            WHERE CAL.CON_CONHECIMENTO_CODIGO    = VVFRETE
              AND CAL.CON_CONHECIMENTO_SERIE     = VVFRETESERIE
              AND CAL.GLB_ROTA_CODIGO            = VVFRETEROTA
              AND CAL.CON_VALEFRETE_SAQUE        = VVFRETESAQUE
              AND CAL.CON_CALCVALEFRETETP_CODIGO = '00';
          
          EXCEPTION WHEN OTHERS THEN
            V_VALORFRETEBRUTO := 0;
          END;  
          
           -- VALOR BRUTO
           BEGIN     
             vInsertTxt.con_freteoper_id    := P_IDCONSULTA; 
             vInsertTxt.con_freteoper_rota  := P_ROTA;
             vInsertTxt.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
             vInsertTxt.uti_vfintegra_chave := TRIM('viagem.frete.valor.bruto');
             vInsertTxt.uti_vfintegra_valor :=  TRIM(TO_CHAR(V_VALORFRETEBRUTO,'999999999.00'));
             
             PKG_CFE_FRETE.SP_GRAVALINHATXT(vInsertTxt,
                                            VSTATUS   , 
                                            VMESSAGE);             
           
           EXCEPTION WHEN OTHERS THEN
             VSTATUS  := tdvadm.pkg_glb_common.Status_Erro;
             VMESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
           END;
           
      END;
       
       /*************************************************************************/
       
       /*************************************************************************/
       /*******************           ITENS DE FRETE               **************/
       /*************************************************************************/   
        
        BEGIN
             -- QUANTIDADE DE ITENS DE FRETE
             SELECT COUNT(*)
              INTO V_QTDEITENSFRETE
              FROM T_CON_CALCVALEFRETE F,
                   T_CON_CALCVALEFRETETP TP
             WHERE F.CON_CONHECIMENTO_CODIGO   = VVFRETE
               AND F.CON_CONHECIMENTO_SERIE    = VVFRETESERIE
               AND F.GLB_ROTA_CODIGO           = VVFRETEROTA
               AND F.CON_VALEFRETE_SAQUE       = VVFRETESAQUE
               AND F.CON_CALCVALEFRETETP_CODIGO = TP.CON_CALCVALEFRETETP_CODIGO
               AND NVL(F.CON_CALCVALEFRETE_FLAGPGTO,'N') = 'N'
               AND NVL(TO_NUMBER(F.CON_CALCVALEFRETE_VALOR),'0') <> 0
               AND NVL(TP.CON_CALCVALEFRETETP_CODPAMCARY,'00') <> 00;
        
             -- QUANTIDADE DE ITENS DE FRETE
             BEGIN     
               vInsertTxt.con_freteoper_id    := P_IDCONSULTA; 
               vInsertTxt.con_freteoper_rota  := P_ROTA;
               vInsertTxt.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               vInsertTxt.uti_vfintegra_chave := TRIM('viagem.frete.item.qtde');
               vInsertTxt.uti_vfintegra_valor := TRIM(TO_CHAR(V_QTDEITENSFRETE));
               
               PKG_CFE_FRETE.SP_GRAVALINHATXT(vInsertTxt,VSTATUS, VMESSAGE);             
             
             EXCEPTION WHEN OTHERS THEN
               VSTATUS  := tdvadm.pkg_glb_common.Status_Erro;
               VMESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
             END;
                                    
            
            V_INDICEITENSFRETE := 0;
            FOR R_ITENSFRETE IN (SELECT F.CON_CONHECIMENTO_CODIGO,
                                        F.CON_CONHECIMENTO_SERIE,
                                        F.GLB_ROTA_CODIGO,
                                        F.CON_VALEFRETE_SAQUE,
                                        F.CON_CALCVALEFRETE_SEQ,
                                        F.CON_CALCVALEFRETE_TIPO,
                                        F.CON_CALCVALEFRETE_VALOR,
                                        F.CON_CALCVALEFRETE_VENCIMENTO,
                                        F.CON_CALCVALEFRETETP_CODIGO,
                                        F.CON_CALCVALEFRETE_TPPESSOA,
                                        TP.CON_CALCVALEFRETETP_CODPAMCARY
                                   FROM T_CON_CALCVALEFRETE F,
                                        T_CON_CALCVALEFRETETP TP
                                  WHERE F.CON_CONHECIMENTO_CODIGO    = VVFRETE
                                    AND F.CON_CONHECIMENTO_SERIE     = VVFRETESERIE
                                    AND F.GLB_ROTA_CODIGO            = VVFRETEROTA
                                    AND F.CON_VALEFRETE_SAQUE        = VVFRETESAQUE
                                    AND F.CON_CALCVALEFRETETP_CODIGO = TP.CON_CALCVALEFRETETP_CODIGO
                                    AND F.CON_CALCVALEFRETE_FLAGPGTO = 'N'
                                    AND NVL(TO_NUMBER(F.CON_CALCVALEFRETE_VALOR),'0') <> 0
                                    AND NVL(TP.CON_CALCVALEFRETETP_CODPAMCARY,'00') <> 00)
            LOOP
                V_INDICEITENSFRETE := V_INDICEITENSFRETE +1;
                
                 -- TIPO ITEM DE FRETE
                 BEGIN     
                   vInsertTxt.con_freteoper_id    := P_IDCONSULTA; 
                   vInsertTxt.con_freteoper_rota  := P_ROTA;
                   vInsertTxt.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                   vInsertTxt.uti_vfintegra_chave := REPLACE('viagem.frete.itemXX.tipo','XX',TRIM(TO_CHAR(V_INDICEITENSFRETE)));
                   vInsertTxt.uti_vfintegra_valor := TRIM(TO_NUMBER(R_ITENSFRETE.CON_CALCVALEFRETETP_CODPAMCARY));
                   PKG_CFE_FRETE.SP_GRAVALINHATXT(vInsertTxt,VSTATUS, VMESSAGE);            
                 EXCEPTION WHEN OTHERS THEN
                   VSTATUS  := tdvadm.pkg_glb_common.Status_Erro;
                   VMESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
                 END;
                 
                  if (R_ITENSFRETE.CON_CALCVALEFRETETP_CODPAMCARY in ('315','316')) then
                
                       -- QTDE DE TARIFAS / SAQUES
                       BEGIN     
                         vInsertTxt.con_freteoper_id    := P_IDCONSULTA; 
                         vInsertTxt.con_freteoper_rota  := P_ROTA;
                         vInsertTxt.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                         vInsertTxt.uti_vfintegra_chave := REPLACE('viagem.frete.itemXX.tarifa.quantidade','XX',TRIM(TO_CHAR(V_INDICEITENSFRETE)));
                         vInsertTxt.uti_vfintegra_valor := '4';
                         PKG_CFE_FRETE.SP_GRAVALINHATXT(vInsertTxt,VSTATUS, VMESSAGE);             
                       EXCEPTION WHEN OTHERS THEN
                         VSTATUS  := tdvadm.pkg_glb_common.Status_Erro;
                         VMESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
                       END;
             
             
                 end if;
                 
                 -- VALOR ITEM DE FRETE
                 BEGIN     
                   
                   vInsertTxt.con_freteoper_id    := P_IDCONSULTA; 
                   vInsertTxt.con_freteoper_rota  := P_ROTA;
                   vInsertTxt.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                   vInsertTxt.uti_vfintegra_chave := REPLACE('viagem.frete.itemXX.valor','XX',TRIM(TO_CHAR(V_INDICEITENSFRETE)));
                   vInsertTxt.uti_vfintegra_valor := TRIM(TO_CHAR(R_ITENSFRETE.CON_CALCVALEFRETE_VALOR,'999999999.00'));
                   
                   PKG_CFE_FRETE.SP_GRAVALINHATXT(vInsertTxt,VSTATUS, VMESSAGE);
                                
                 EXCEPTION WHEN OTHERS THEN
                   VSTATUS  := tdvadm.pkg_glb_common.Status_Erro;
                   VMESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
                 END;
                      
            END LOOP;    

        END;    
       
       /*************************************************************************/
        
      END;    
      /*************************************************************************/
      
      
      IF NVL(vStatus,tdvadm.pkg_glb_common.Status_Nomal) <> tdvadm.pkg_glb_common.Status_Erro THEN
        
           OPEN P_CURSOR FOR
             SELECT K.UTI_VFINTEGRA_CHAVE CHAVE,
                    K.UTI_VFINTEGRA_VALOR VALOR
               FROM T_UTI_VFINTEGRA K
               WHERE K.CON_FRETEOPER_ID   = P_IDCONSULTA
                 AND K.CON_FRETEOPER_ROTA = P_ROTA 
              ORDER BY K.UTI_VFINTEGRA_SEQ;
             
            DELETE T_UTI_VFINTEGRA D
            WHERE D.CON_FRETEOPER_ID   = P_IDCONSULTA  
              AND D.CON_FRETEOPER_ROTA = P_ROTA;
              
             COMMIT; 
             
            P_STATUS   := tdvadm.pkg_glb_common.Status_Nomal;
            P_MESSAGE := 'Processamento Normal.';
            
          ELSE
        
             P_STATUS   := VSTATUS;   
             P_MESSAGE  := VMESSAGE;
             
             OPEN P_CURSOR FOR
             SELECT SYSDATE FROM DUAL;
             
             DELETE T_UTI_VFINTEGRA D
              WHERE D.CON_FRETEOPER_ID   = P_IDCONSULTA  
                AND D.CON_FRETEOPER_ROTA = P_ROTA;     
             
             COMMIT; 
                 
            RETURN;
        
           END IF;
       
   
     EXCEPTION WHEN OTHERS THEN
        
        P_STATUS   := tdvadm.pkg_glb_common.Status_Erro;
        P_MESSAGE  := 'Erro ao gerar integração para alterar Frete!';
        
     END;

  END SP_GET_ALTERFRETE;

   PROCEDURE SP_SET_ALTERARCIOT(P_QRYSTR       IN  VARCHAR2,
                                P_IDCONSULTA   IN  VARCHAR2,
                                P_ROTA         IN  CHAR, 
                                P_STATUS       OUT CHAR,
                                P_MESSAGE      OUT VARCHAR2)AS
  V_IDVALIDO     CHAR(1);
  V_TIPO         TDVADM.T_CFE_INTEGRATDV.CFE_INTEGRATDV_COD%TYPE;
  V_QTDELOOP     INTEGER;
  V_EXISTESEQ    INTEGER;
  vControl       Integer;
  VFNumero       T_CON_VALEFRETE.CON_CONHECIMENTO_CODIGO%TYPE;
  VFSerie        T_CON_VALEFRETE.CON_CONHECIMENTO_SERIE%TYPE;
  VFRota         T_CON_VALEFRETE.GLB_ROTA_CODIGO%TYPE;
  VFSaque        T_CON_VALEFRETE.CON_VALEFRETE_SAQUE%TYPE;
  vCodDePara     t_cfe_integratdvdp.cfe_integratdv_cod%type;
  vGerenciadora  t_cfe_gerenbco.cfe_gerenbco_cod%type;
  BEGIN
    
    BEGIN
      
     /************************************************/
     /************CAPTURANDO PARAMETROS***************/
     /************************************************/
     BEGIN
       
         V_TIPO       := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'IntegraTdv_Cod','=','*'), 'valor', '=', '|');
         VFNumero     :=  TDVADM.fn_querystring(TDVADM.fn_querystring(P_QRYSTR,'VFNumero','=','*'), 'valor', '=', '|');
         VFSerie      :=  TDVADM.fn_querystring(TDVADM.fn_querystring(P_QRYSTR,'VFSerie','=','*'), 'valor', '=', '|');
         VFRota       :=  TDVADM.fn_querystring(TDVADM.fn_querystring(P_QRYSTR,'VFRota','=','*'), 'valor', '=', '|');
         VFSaque      :=  TDVADM.fn_querystring(TDVADM.fn_querystring(P_QRYSTR,'VFSaque','=','*'), 'valor', '=', '|');
     
     END;
     /************************************************/
       
     /**************************************************/
     /*****          Codigo da tabela DePara       *****/
     /**************************************************/
     begin
       
        select nvl(s.cfe_gerenbco_cod,'1')
          into vGerenciadora
          from t_uti_sequencia s
         where s.uti_sequencia_rota   = P_ROTA       
           and s.uti_sequencia_codigo = P_IDCONSULTA; 
             
        select l.cfe_integratdv_cod
          into vCodDePara
          from t_cfe_integratdvdp l
         where l.cfe_integratdvdp_cod = V_TIPO
           and l.cfe_gerenbco_cod     = vGerenciadora;
       
     end;
     /**************************************************/
     
     
     
     
     /************************************************/
     /**SE NÃO FOR ID DE INT. DE VALE DE FRETE BLOQ.**/
     /************************************************/
     IF V_TIPO NOT IN (35) THEN
       
       P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
       P_MESSAGE := 'ERRO: INTEGRAÇÃO TDV INFORMADA NÃO É VALIDA!';
       RETURN;
       
     END IF;  
     /************************************************/
        
     /*****************************************************************************************
     **     EXEMPLO DE QRYSTRING CRIADA PARA A OPERAÇÃO DE CANCELAMENTO DE CIOT.             **
     **                                                                                      **
     **       IntegraTdv_Cod=nome=IntegraTdv_Cod|tipo=String|valor=24*                       **
     **       VFNumero=nome=VFNumero|tipo=String|valor=340399*                               ** 
     **       VFSerie=nome=VFSerie|tipo=String|valor=A1*                                     **
     **       VFRota=nome=VFRota|tipo=String|valor=021*                                      **
     **       VFSaque=nome=VFSaque|tipo=String|valor=1*                                      **
     **       VFParcelGer=nome=VFParcelGer|tipo=String|valor=*                               **
     **       VFParcelTdv=nome=VFParcelTdv|tipo=String|valor=*                               **
     **       VFUsuarioTDV=nome=VFUsuarioTDV|tipo=String|valor=jsantos*                      **
     **       VFRotaUsuarioTDV=nome=VFUsuarioTDV|tipo=String|valor=021*                      **
     **       VFAplicacaoTDV=nome=VFAplicacaoTDV|tipo=String|valor=comvlfrete*               **
     **       VFMsgMotCancel=nome=VFMsgMotCancel|tipo=String|valor=ESTOU CANCELANDO*         **
     **       VFParcelIdSt=nome=VFParcelIdSt|tipo=String|valor=*                             **
     *****************************************************************************************/
         
     /************************************************/
     /**             VALIDA ID                      **/
     /************************************************/
     V_IDVALIDO := 'N';    
     
     IF V_IDVALIDO = 'N' THEN
       
        V_QTDELOOP := 0;
        
        /************************************************/
        /**CADASTRA OPERAÇÃO PARA INTEGRAÇÃO DO FRETE  **/
        /************************************************/
        FOR R_CURSOR IN (SELECT K.CFE_INTEGRATDV_COD,
                                K.CFE_OPERACOES_COD,
                                K.CFE_OPERATDV_SEQOP,
                                K.CFE_OPERATDV_SEQINT
                           FROM T_CFE_OPERATDV K
                          WHERE K.CFE_INTEGRATDV_COD = vCodDePara)
        LOOP
          
          V_QTDELOOP := V_QTDELOOP +1;
          
          SELECT COUNT(*)+1
            INTO V_EXISTESEQ
            FROM T_CON_FRETEOPER K
           WHERE K.CON_FRETEOPER_ID   = P_IDCONSULTA
             AND K.CON_FRETEOPER_ROTA = P_ROTA
             AND K.CFE_INTEGRATDV_COD = R_CURSOR.CFE_INTEGRATDV_COD
             AND K.CFE_OPERACOES_COD  = R_CURSOR.CFE_OPERACOES_COD;  
              
          INSERT INTO T_CON_FRETEOPER F VALUES(P_IDCONSULTA,
                                               P_ROTA,
                                               R_CURSOR.CFE_INTEGRATDV_COD,
                                               R_CURSOR.CFE_OPERACOES_COD,
                                               'AG',
                                               NULL,
                                               NULL,
                                               NULL,
                                               NULL,
                                               NULL,
                                               P_QRYSTR,
                                               SYSDATE,
                                               NULL,
                                               NULL,
                                               V_EXISTESEQ,
                                                0);
        
        END LOOP;    
        
        IF V_QTDELOOP = 0 THEN
          
           P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
           P_MESSAGE := 'ERRO: NENHUMA OPERAÇÃO CADASTRADA PARA ESSE VALE DE FRETE!!';
           RETURN;
           
        ELSE
          
           BEGIN
              
             UPDATE T_CON_VFRETECIOT L
                SET L.CON_VFRETECIOT_FLAGPROCESAL = 'S',
                    L.CON_VFRETECIOT_FLAGIMPRIME  = 'N',
                    L.CON_VFRETECIOT_FLAGALTERA   = 'N'
              WHERE L.CON_CONHECIMENTO_CODIGO     = VFNumero
                AND L.CON_CONHECIMENTO_SERIE      = VFSerie
                AND L.GLB_ROTA_CODIGO             = VFRota
                AND L.CON_VALEFRETE_SAQUE         = VFSaque;
                    
           EXCEPTION WHEN OTHERS THEN
             BEGIN
               P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               P_MESSAGE := 'Erro ao solicitar integração Erro: '||SQLERRM;
               RETURN;   
             END; 
           END;  
             
           P_STATUS   := tdvadm.pkg_glb_common.Status_Nomal;
           P_MESSAGE := 'Alteração de Valores solicitada com sucesso!';
           
        END IF;  
         
     ELSE
       
       P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
       P_MESSAGE := 'ERRO: ID PARA CADASTRO DE INTEGRAÇÃO DO VALE DE FRETE NÃO VALIDADO!';
       RETURN;
       
     END IF;  
     
     COMMIT;
     /************************************************/
    
    EXCEPTION WHEN OTHERS THEN
    
      P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
      P_MESSAGE := Sqlerrm || chr(13) || chr(13) || 'PKG_CFE_FRETE.SP_SET_ALTERARCIOT';
    
    END;    
  
  END SP_SET_ALTERARCIOT;  

   procedure sp_Refresh
   /***************************************************************************************/
   /* Fabiano, Klayton, Sirlano - 04/10/2012
   /* A execução dessa procedure [ sp_refresh ] é necessário apenas pra tratar o erro:
   /*    ORA-24338: statement handle not executed
   /* que acontece toda vez que compila a package tdvadm.pkg_glb_common 
   / ***************************************************************************************/
   is
     vRefresh date;
   begin
     begin
       vRefresh := tdvadm.pkg_glb_common.fn_Refresh;
     exception when others then
       vRefresh := sysdate;
     end;  
   end;
  
   PROCEDURE SP_SET_CONSULTAPEDROTA(P_QRYSTR       IN CLOB,
                                    P_IDCONSULTA   IN  NUMBER,
                                    P_ROTA         IN  CHAR, 
                                    P_STATUS       OUT CHAR,
                                    P_MESSAGE      OUT VARCHAR2)AS
    V_IDVALIDO CHAR(1);
    V_TIPO     TDVADM.T_CFE_INTEGRATDV.CFE_INTEGRATDV_COD%TYPE;
    V_QTDELOOP INTEGER; 
    V_QTDESEQ  INTEGER;
    BEGIN
      BEGIN
        
          /*     TIPO DA CONSULTA    */
          
          V_TIPO := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'IntegraTdv_Cod','=','*'), 'valor', '=', '|');
          
          
          /*  SE NÃO FOR ID DE INTEGRAÇÃO DE PEDAGIO BLOQUEAMOS */
          IF V_TIPO NOT IN (37) THEN
             P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
             P_MESSAGE := 'ERRO: INTEGRAÇÃO TDV INFORMADA NÃO É VALIDA!';
             RETURN;
          END IF;  
          
          V_QTDELOOP := 0;
          
          /*     CADASTRA OPERAÇÃO PARA INTEGRAÇÃO DO FRETE      */
          FOR R_CURSOR IN (SELECT K.CFE_INTEGRATDV_COD,
                                   K.CFE_OPERACOES_COD,
                                   K.CFE_OPERATDV_SEQOP,
                                   K.CFE_OPERATDV_SEQINT
                              FROM T_CFE_OPERATDV K
                              WHERE K.CFE_INTEGRATDV_COD = V_TIPO)
          LOOP
              V_QTDELOOP := V_QTDELOOP +1;
              
                            
               SELECT COUNT(*)+1
                 INTO V_QTDESEQ
                 FROM T_CON_FRETEOPER K
                 WHERE K.CON_FRETEOPER_ID   = P_IDCONSULTA
                   AND K.CON_FRETEOPER_ROTA = P_ROTA
                   AND K.CFE_INTEGRATDV_COD = R_CURSOR.CFE_INTEGRATDV_COD
                   AND K.CFE_OPERACOES_COD  = R_CURSOR.CFE_OPERACOES_COD;  
              
              
              INSERT INTO T_CON_FRETEOPER F VALUES(P_IDCONSULTA,
                                                   P_ROTA,
                                                   R_CURSOR.CFE_INTEGRATDV_COD,
                                                   R_CURSOR.CFE_OPERACOES_COD,
                                                   'AG',
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   P_QRYSTR,
                                                   SYSDATE,
                                                   NULL,
                                                   NULL,
                                                   V_QTDESEQ,
                                                   1);
          END LOOP;    
           
          IF V_QTDELOOP = 0 THEN
             P_STATUS  := tdvadm.pkg_glb_common.Status_Warning;
             P_MESSAGE := 'Nenhuma operação cadastrada!';
            RETURN;
          END IF;  

          P_STATUS  := tdvadm.pkg_glb_common.Status_Nomal;
          P_MESSAGE := 'Processamento Normal';
          
          COMMIT;
      
      EXCEPTION WHEN OTHERS THEN
            P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
            P_MESSAGE := 'Erro: pkg_cfe_frete.sp_set_consultapedrota, '||sqlerrm;
      END;    
    
    END SP_SET_CONSULTAPEDROTA;
  
   PROCEDURE SP_GET_CONSULTAPED(P_QryStr       IN  clob,
                                P_IDCONSULTA   IN  NUMBER,
                                P_ROTA         IN  CHAR,
                                P_CURSOR       OUT T_CURSOR,
                                P_STATUS       OUT CHAR,
                                P_MESSAGE      OUT VARCHAR2)AS
  V_INSERT           TpRegTxt;
  vCatVeiculo        varchar2(10);
  vIbgeOrigem        t_glb_localidade.glb_localidade_codigoibge%type;
  vIbgeDestino       t_glb_localidade.glb_localidade_codigoibge%type;
  vIbgePassandoPor   t_glb_localidade.glb_localidade_codigoibge%type;
  vObtemPraca        varchar2(10);
  vObtemRota         varchar2(10);
  
  V_MESSAGE          varchar2(100);
  V_STATUS           char(1);
  vPrograma          varchar2(200);
  vContratante       varchar2(200); 
  vTipoCaminho       varchar2(100);
  
  BEGIN
      
  
       SELECT B.PROGRAM
         INTO vPrograma
         FROM V_GLB_AMBIENTE B;
       
       
       IF (LOWER(vPrograma) = 'consultawsgerenciadora.exe') THEN
         
          vContratante := ContratanteNumeroNovo;
       
       ELSE
        
          vContratante := ContratanteNumeroNovo;
          
       END IF;   
    
   
   BEGIN
      
      vCatVeiculo      := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'CategoriaVeiculo','=','*'), 'valor', '=', '|');
      vIbgeOrigem      := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'IbgeOrigem','=','*'), 'valor', '=', '|');
      vIbgeDestino     := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'IbgeDestino','=','*'), 'valor', '=', '|');
      vIbgePassandoPor := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'IbgePassaPor1','=','*'), 'valor', '=', '|');
      vObtemPraca      := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'ObterPraca','=','*'), 'valor', '=', '|');
      vObtemRota       := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'ObterRota','=','*'), 'valor', '=', '|');
      vTipoCaminho     := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'ViagemCaminho','=','*'), 'valor', '=', '|');
      
      -- EMPRESA
      BEGIN
        V_INSERT.con_freteoper_id    := P_IDCONSULTA;
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'viagem.contratante.documento.numero';
        V_INSERT.uti_vfintegra_valor := TRIM(vContratante);

        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,V_STATUS, V_MESSAGE);

      EXCEPTION WHEN OTHERS THEN
        V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
        V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_CONSULTAPED, '||sqlerrm;
      END;
      
      -- UNIDADE
      BEGIN
        V_INSERT.con_freteoper_id    := P_IDCONSULTA;
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'viagem.unidade.documento.tipo';
        V_INSERT.uti_vfintegra_valor := TRIM('1');

        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,V_STATUS, V_MESSAGE);

      EXCEPTION WHEN OTHERS THEN
        V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
        V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_CONSULTAPED, '||sqlerrm;
      END;

      -- CATEGORIA VEICULO
      BEGIN
        V_INSERT.con_freteoper_id    := P_IDCONSULTA;
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'viagem.veiculo.categoria';
        V_INSERT.uti_vfintegra_valor := TRIM(vCatVeiculo);

        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,V_STATUS, V_MESSAGE);

      EXCEPTION WHEN OTHERS THEN
        V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
        V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_CONSULTAPED, '||sqlerrm;
      END;

      -- IBGE ORIGEM
      BEGIN
        V_INSERT.con_freteoper_id    := P_IDCONSULTA;
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'viagem.origem.cidade.ibge';
        V_INSERT.uti_vfintegra_valor := TRIM(vIbgeOrigem);

        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,V_STATUS, V_MESSAGE);

      EXCEPTION WHEN OTHERS THEN
        V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
        V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_CONSULTAPED, '||sqlerrm;
      END;

      -- IBGE DESTINO
      BEGIN
        V_INSERT.con_freteoper_id    := P_IDCONSULTA;
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'viagem.destino.cidade.ibge';
        V_INSERT.uti_vfintegra_valor := TRIM(vIbgeDestino);

        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,V_STATUS, V_MESSAGE);

      EXCEPTION WHEN OTHERS THEN
        V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
        V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_CONSULTAPED, '||sqlerrm;
      END;



      if (nvl(TRIM(vIbgePassandoPor),'0000000') <> '0000000') AND 
         (F_ENUMERICO(vIbgePassandoPor) = 'S')                THEN
        -- QUANTIDADES PONTOS
      BEGIN
        V_INSERT.con_freteoper_id    := P_IDCONSULTA;
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'viagem.ponto.qtde';
        V_INSERT.uti_vfintegra_valor := TRIM('1');

        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,V_STATUS, V_MESSAGE);

      EXCEPTION WHEN OTHERS THEN
        V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
        V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_CONSULTAPED, '||sqlerrm;
      END;
      
      
      -- IBGE PASSANDO POR
      BEGIN
        V_INSERT.con_freteoper_id    := P_IDCONSULTA;
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'viagem.ponto1.cidade.ibge';
        V_INSERT.uti_vfintegra_valor := TRIM(vIbgePassandoPor);

        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,V_STATUS, V_MESSAGE);

      EXCEPTION WHEN OTHERS THEN
        V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
        V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_CONSULTAPED, '||sqlerrm;
      END;
      
      END IF;


      -- OBTER PRAÇA
      BEGIN
        V_INSERT.con_freteoper_id    := P_IDCONSULTA;
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'viagem.pedagio.obter.praca';
        V_INSERT.uti_vfintegra_valor := TRIM(vObtemPraca);

        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,V_STATUS, V_MESSAGE);

      EXCEPTION WHEN OTHERS THEN
        V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
        V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_CONSULTAPED, '||sqlerrm;
      END;

      -- OBTER ROTA
      BEGIN
        V_INSERT.con_freteoper_id    := P_IDCONSULTA;
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'Viagem.pedagio.obter.rota';
        V_INSERT.uti_vfintegra_valor := TRIM(vObtemRota);

        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,V_STATUS, V_MESSAGE);

      EXCEPTION WHEN OTHERS THEN
        V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
        V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_CONSULTAPED, '||sqlerrm;
      END;
      
        -- TIPO DO CAMINHO
      BEGIN
        V_INSERT.con_freteoper_id    := P_IDCONSULTA;
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'viagem.pedagio.caminho';
        V_INSERT.uti_vfintegra_valor := TRIM(vTipoCaminho);

        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,V_STATUS, V_MESSAGE);

      EXCEPTION WHEN OTHERS THEN
        V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
        V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_CONSULTAPED, '||sqlerrm;
      END;
      
      
      OPEN P_CURSOR FOR
      SELECT K.UTI_VFINTEGRA_CHAVE CHAVE,
             K.UTI_VFINTEGRA_VALOR VALOR
        FROM T_UTI_VFINTEGRA K
       WHERE K.CON_FRETEOPER_ID   = P_IDCONSULTA
         AND K.CON_FRETEOPER_ROTA = P_ROTA 
    ORDER BY K.UTI_VFINTEGRA_SEQ;
       
      DELETE T_UTI_VFINTEGRA D
       WHERE D.CON_FRETEOPER_ID   = P_IDCONSULTA  
         AND D.CON_FRETEOPER_ROTA = P_ROTA;
        
       COMMIT; 

    EXCEPTION WHEN OTHERS THEN
       P_STATUS    := tdvadm.pkg_glb_common.Status_Erro;
       P_MESSAGE  := 'Erro ao consultar. Erro='||SQLCODE;
    END;

    P_STATUS   := tdvadm.pkg_glb_common.Status_Nomal;
    P_MESSAGE := 'Processamento Normal.';
    
  END SP_GET_CONSULTAPED;
  
   procedure SP_VLD_CONSULTAPED( P_XMLRETORNO      IN  CLOB,
                                 P_IDCONSULTA      IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ID%TYPE,
                                 P_ROTA            IN  TDVADM.T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,
                                 P_CODOPERACAOTDV  IN  VARCHAR2,
                                 P_CODOPERACAOWS   IN  VARCHAR2,
                                 P_SEQUENCIA       IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_SEQ%TYPE
                               ) is
 --Variávei utilizada para guardar mensagem de erro gerada em raise.
 vMsgErro varchar2(100);

 --Variavel de controle
 vControle integer;
 
 vQryStr         t_con_freteoper.con_freteoper_paramqrystr%type;
 vQtdePracas     integer;
 vValorTotal     number;
 vKmTotalPerc    t_slf_percurso.slf_percurso_kmtdv%type;
 vSlfPercusorCod t_slf_percurso.slf_percurso_codigo%type;
 vGlbLocalidade  t_slf_percurso.glb_localidade_codigoorigem%type;
 vTipoRota       char(1);


begin
  --Inicializo as variáveis que serão utilizadas durante o processamento.
  vControle   := 0;
  vMsgErro    := '';

  
  begin
    
    select k.con_freteoper_paramqrystr
      into vQryStr
      FROM T_CON_FRETEOPER K
     WHERE K.CON_FRETEOPER_ID   = P_IDCONSULTA
       and k.con_freteoper_rota = P_ROTA
       and k.con_freteoper_seq  = P_SEQUENCIA;      
  
    --Para essa consulta, caso a mensagem seja "0" o favorecido está cadastrado.
    IF PKG_CFE_FRETE.FN_Get_ChaveXml(P_XMLRETORNO, 'mensagem.codigo') = '0' THEN

      --Caso a variavel tenha valor maior que 0, Registra consulta.

         update tdvadm.t_con_freteoper  oper
           set
             OPER.CFE_STATUSFRETEOPER_STATUS  = STATUS_OK,
             oper.con_freteoper_obs     = PKG_CFE_FRETE.FN_Get_ChaveXml(P_XMLRETORNO, 'mensagem.descricao'),
             oper.con_freteoper_retorno = sysdate,
             oper.con_freteoper_confret = Trim(P_XMLRETORNO)
         where
            0=0
           and oper.con_freteoper_id     = P_IDCONSULTA
           and oper.con_freteoper_rota   = P_ROTA
           and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
           and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
           and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;
        
       vQtdePracas     := PKG_CFE_FRETE.FN_Get_ChaveXml(P_XMLRETORNO, 'viagem.pedagio.pracas.quantidade'); 
       vValorTotal     := PKG_CFE_FRETE.FN_Get_ChaveXml(P_XMLRETORNO, 'viagem.pedagio.valor');       
       vSlfPercusorCod := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryStr,'SlfPercursoPed','=','*'), 'valor', '=', '|');
       vGlbLocalidade  := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryStr,'GlbLocalidaCod','=','*'), 'valor', '=', '|');
       vKmTotalPerc    := PKG_CFE_FRETE.FN_Get_ChaveXml(P_XMLRETORNO, 'viagem.pedagio.km');
       vTipoRota       := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryStr,'ViagemCaminho','=','*'), 'valor', '=', '|');   
       
         if vTipoRota =  '1' Then -- MAIS RAPIDO - VIAS PRIORITARIAS
             update t_slf_percursoped l
                set l.slf_percursoped_qtdeped      = vQtdePracas,
                    l.slf_percursoped_valoreixo    = vValorTotal/5,
                    -- Sirlano
                    -- 08/01/2020 - Caso o GJDV perguntar
                    -- Para atualizar a MESA mudar o REPROCESSA PARA M, onde temos um JOB que atualiza a MESA
                    l.slf_percursoped_reprocessa   = 'N',
                    L.SLF_PERCURSOPED_ATUALIZACAO  = SYSDATE,
                    l.slf_percursoped_km           = vKmTotalPerc,
                    l.con_freteoper_id             = P_IDCONSULTA,
                    l.con_freteoper_rota           = P_ROTA,
                    l.CFE_INTEGRATDV_COD           = P_CODOPERACAOTDV,
                    l.CFE_OPERACOES_COD            = P_CODOPERACAOWS,
                    l.CON_FRETEOPER_SEQ            = P_SEQUENCIA,
                    l.slf_percursoped_xml          = P_XMLRETORNO
              where l.slf_percursoped_codigo       = vSlfPercusorCod
                and l.glb_localidade_codigopasspor = vGlbLocalidade;
             
             update t_slf_percursopedalt l
                set l.slf_percursopedalt_vlreixo    = vValorTotal/5,
                    l.slf_percursopedalt_km         = vKmTotalPerc,
                    L.slf_percursopedalt_dtretorno  = SYSDATE  
              where l.slf_percursoped_codigo        = vSlfPercusorCod
                and l.slf_percursopedalt_cod        = vTipoRota;           
        End If;
      else
        --Caso a chave "MENSAGEM.CODIGO não
         update tdvadm.t_con_freteoper  oper
           set
             OPER.CFE_STATUSFRETEOPER_STATUS  = STATUS_INVALIDO,
             oper.con_freteoper_obs     = PKG_CFE_FRETE.FN_Get_ChaveXml(P_XMLRETORNO, 'mensagem.descricao'),
             oper.con_freteoper_retorno = sysdate,
             oper.con_freteoper_confret = Trim(P_XMLRETORNO)
         where
            0=0
           and oper.con_freteoper_id     = P_IDCONSULTA
           and oper.con_freteoper_rota   = P_ROTA
           and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
           and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
           and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;
           
   
       vSlfPercusorCod := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryStr,'SlfPercursoPed','=','*'), 'valor', '=', '|');
       
       update t_slf_percursoped l
          set l.slf_percursoped_reprocessa  = 'E',
              L.SLF_PERCURSOPED_ATUALIZACAO = SYSDATE,
              l.con_freteoper_id            = P_IDCONSULTA,
              l.con_freteoper_rota          = P_ROTA,
              l.CFE_INTEGRATDV_COD          = P_CODOPERACAOTDV,
              l.CFE_OPERACOES_COD           = P_CODOPERACAOWS,
              l.CON_FRETEOPER_SEQ           = P_SEQUENCIA
        where l.slf_percursoped_codigo    = vSlfPercusorCod
          and l.glb_localidade_codigopasspor = vGlbLocalidade;

      end if;
  exception
    --caso ocorra algum erro durante o processamento. Registra o erro
    when others then
      --Transfiro a mensagem de erro, para uma variável para poder registrar no campo obs.
      vMsgErro := substr(sqlerrm, 1, 90);

      --atualizo a tabela de freteOperacao
      update tdvadm.t_con_freteoper  oper
        set
          OPER.CFE_STATUSFRETEOPER_STATUS  = STATUS_ERRO,
          oper.con_freteoper_obs     = 'Erro: ' || vMsgErro,
          oper.con_freteoper_retorno = sysdate,
          oper.con_freteoper_confret = Trim(P_XMLRETORNO)
      where
         0=0
        and oper.con_freteoper_id     = P_IDCONSULTA
        and oper.con_freteoper_rota   = P_ROTA
        and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
        and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
        and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;
        
        
       vSlfPercusorCod := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryStr,'SlfPercursoPed','=','*'), 'valor', '=', '|');
       
       update t_slf_percursoped l
          set l.slf_percursoped_reprocessa  = 'E',
              L.SLF_PERCURSOPED_ATUALIZACAO = SYSDATE,
              l.con_freteoper_id            = P_IDCONSULTA,
              l.con_freteoper_rota          = P_ROTA,
              l.CFE_INTEGRATDV_COD          = P_CODOPERACAOTDV,
              l.CFE_OPERACOES_COD           = P_CODOPERACAOWS,
              l.CON_FRETEOPER_SEQ           = P_SEQUENCIA
        where l.slf_percursoped_codigo    = vSlfPercusorCod
          and l.glb_localidade_codigopasspor = vGlbLocalidade;
  end;

end SP_VLD_CONSULTAPED;

  PROCEDURE SP_SLF_ATUPEDAGIO AS
   vIdOperacao  t_con_freteoper.con_freteoper_id%type;
   vQryStr      t_con_freteoper.con_freteoper_paramqrystr%type; 
   vStatus      char(1);
   vMessage     varchar2(2000);
   VnUMBER      NUMBER;
  BEGIN
    
    VnUMBER := '100.00';
    
    FOR P_CURSOR IN (SELECT T.SLF_PERCURSOPED_CODIGO          SLF_PERCURSO,
                            PER.GLB_LOCALIDADE_CODIGOORIGEM   LOCAL_ORI,
                            PER.GLB_LOCALIDADE_CODIGODESTINO  LOCAL_DES,
                            LO.GLB_LOCALIDADE_CODIGOIBGE      IBGE_ORI,
                            LD.GLB_LOCALIDADE_CODIGOIBGE      IBGE_DES,
                            t.glb_localidade_codigopasspori   IBGE_PASPOR1,
                            t.GLB_LOCALIDADE_CODIGOPASSPOR    LOCAL_PAS 
                       FROM T_SLF_PERCURSOPED T,
                            T_SLF_PERCURSO PER,
                            T_GLB_LOCALIDADE LO,
                            T_GLB_LOCALIDADE LD
                      WHERE T.SLF_PERCURSOPED_CODIGO         = PER.SLF_PERCURSO_CODIGO
                        AND PER.GLB_LOCALIDADE_CODIGOORIGEM  = LO.GLB_LOCALIDADE_CODIGO
                        AND PER.GLB_LOCALIDADE_CODIGODESTINO = LD.GLB_LOCALIDADE_CODIGO
                        AND T.SLF_PERCURSOPED_REPROCESSA     = 'S'
                      /*  AND 0 = 1*/)
    LOOP

      vQryStr:= 'CategoriaVeiculo=nome=CategoriaVeiculo|tipo=String|valor=7*'||
                'IbgeOrigem=nome=IbgeOrigem|tipo=String|valor='              ||trim(P_CURSOR.IBGE_ORI)||'*'||
                'IbgeDestino=nome=IbgeDestino|tipo=String|valor='            ||trim(P_CURSOR.IBGE_DES)||'*'||
                'IbgePassaPor1=nome=IbgeDestino|tipo=String|valor='          ||trim(P_CURSOR.IBGE_PASPOR1)||'*'||
                'ObterPraca=nome=ObterPraca|tipo=String|valor=S*'            ||
                'ObterRota=nome=ObterRota|tipo=String|valor=S*'              ||
                'SlfPercursoPed=nome=SlfPercursoPed|tipo=String|valor='      ||trim(P_CURSOR.SLF_PERCURSO)||'*'||
                'GlbLocalidaCod=nome=GlbLocalidaCod|tipo=String|valor='      ||trim(P_CURSOR.LOCAL_PAS)||'*'||
                'IntegraTdv_Cod=nome=IntegraTdv_Cod|tipo=String|valor=37*'   ||
                'ViagemCaminho=nome=ViagemCaminho|tipo=String|valor=1*';
      
      vIdOperacao := pkg_cfe_frete.FN_GET_IDOPERACAO('010','comvlfrete',vQryStr);
      
      pkg_cfe_frete.SP_SET_CONSULTAPEDROTA(vQryStr,vIdOperacao,'010',vStatus,vMessage);
      
      update T_SLF_PERCURSOPED l
        set l.slf_percursoped_reprocessa   = 'A',
            l.slf_percursoped_atualizacao = sysdate
      where l.slf_percursoped_codigo       = P_CURSOR.SLF_PERCURSO
        and l.glb_localidade_codigopasspor = P_CURSOR.LOCAL_PAS;   
      
    END LOOP;   
    
    commit; 
    
  END SP_SLF_ATUPEDAGIO;
  
  FUNCTION FN_GET_VALORPED(P_LOCORIGEM     IN CHAR,
                           P_LOCDESTINO    IN CHAR,
                           P_LOCPASSANDOPO IN CHAR,
                           P_DATA          IN CHAR DEFAULT trunc(sysdate))
      RETURN NUMBER
  IS
     vData DATE;
     vValor NUMBER;
  BEGIN
        vData := Nvl(substr(P_DATA,1,10),TRUNC(SYSDATE));

        BEGIN
           -- PESQUISA O PEDAGIO USANDO O PASSANDO POR 
           SELECT pp.slf_percursoped_valoreixo,
                  nvl(pp.slf_percursoped_atualizacao,to_date('01/01/1900','dd/mm/yyyy'))
              into vValor,
                   vData
           FROM T_SLF_PERCURSO P,
                T_SLF_PERCURSOPED PP
           WHERE P.SLF_PERCURSO_CODIGO = PP.SLF_PERCURSOPED_CODIGO
             AND P.GLB_LOCALIDADE_CODIGOORIGEM = P_LOCORIGEM
             AND P.GLB_LOCALIDADE_CODIGODESTINO = P_LOCDESTINO
             AND trim(nvl(PP.GLB_LOCALIDADE_CODIGOPASSPOR,'99999')) = trim(nvl(P_LOCPASSANDOPO,'99999'))
             and pp.slf_percursoped_atualizacao = (select max(pp1.slf_percursoped_atualizacao)
                                                   from T_SLF_PERCURSOPED PP1
                                                   where pp1.slf_percursoped_codigo = pp.slf_percursoped_codigo
                                                     and pp1.GLB_LOCALIDADE_CODIGOPASSPOR = pp.GLB_LOCALIDADE_CODIGOPASSPOR
                                                     and trunc(pp1.slf_percursoped_atualizacao) <= vData)
                                                     and rownum = '1'
              ;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN -- se não achou pela localidade
             BEGIN
                 -- PESQUISA UTILIZANDO O CODIGO DO IBGE 
                 SELECT pp.slf_percursoped_valoreixo,
                        nvl(pp.slf_percursoped_atualizacao,to_date('01/01/1900','dd/mm/yyyy'))
                    into vValor,
                         vData
                 FROM T_SLF_PERCURSO P,
                      T_SLF_PERCURSOPED PP
                 WHERE P.SLF_PERCURSO_CODIGO = PP.SLF_PERCURSOPED_CODIGO
                   AND P.GLB_LOCALIDADE_CODIGOORIGEMI = FN_BUSCA_CODIGOIBGE(P_LOCORIGEM,'IBC')
                   AND P.GLB_LOCALIDADE_CODIGODESTINOI = FN_BUSCA_CODIGOIBGE(P_LOCDESTINO,'IBC')
                   AND trim(nvl(PP.GLB_LOCALIDADE_CODIGOPASSPOR,'99999')) = trim(nvl(P_LOCPASSANDOPO,'99999'))
                   and pp.slf_percursoped_atualizacao = (select max(pp1.slf_percursoped_atualizacao)
                                                         from T_SLF_PERCURSOPED PP1
                                                         where pp1.slf_percursoped_codigo = pp.slf_percursoped_codigo
                                                           and pp1.GLB_LOCALIDADE_CODIGOPASSPOR = pp.GLB_LOCALIDADE_CODIGOPASSPOR
                                                           and trunc(pp1.slf_percursoped_atualizacao) <= vData)
                   ;

                 EXCEPTION
                   WHEN NO_DATA_FOUND THEN -- se não achou pelo IBGE
                       vValor := -1;
                 END;
        END;
        
        if vData <= sysdate - 180 Then
           vValor := -1;
        End If;
        
        RETURN vValor;               
        
  END FN_GET_VALORPED;
                                     
  PROCEDURE SP_SET_SOLICITAPED(P_LOCORIGEM in char,
                              P_LOCDESTINO in char,
                              P_LOCPASSANDOPO in char)
 AS
   vAuxiliar    NUMBER;
   vCommit      char(1);
   vLocalidadePP  t_glb_localidade.glb_localidade_codigo%type;
 BEGIN
     vCommit := 'N';
     
     if P_LOCPASSANDOPO IS NULL THEN
        vLocalidadePP := '99999';
     ELSE
        vLocalidadePP := P_LOCPASSANDOPO;
     END IF;  
     
 /*    if trim(P_LOCORIGEM) = '09900' then 
        RAISE_APPLICATION_ERROR(-20001,trim(P_LOCORIGEM));
     end if; */

     select count(*)
       into vAuxiliar
     from t_slf_percurso p
     where p.slf_percurso_codigo = trim(P_LOCORIGEM) || trim(P_LOCDESTINO);

     iF Length(trim(P_LOCORIGEM) || trim(P_LOCDESTINO)) > 10 Then
        Raise_application_error(-20011,'Veja a Origem e o Destino ' || trim(P_LOCORIGEM) || trim(P_LOCDESTINO));
     End If;
     
     if vAuxiliar = 0 Then -- se não existir o percurso cadastra
         INSERT INTO T_SLF_PERCURSO p
         (SLF_PERCURSO_CODIGO,
          SLF_PERCUSO_DESCRICAO,
          GLB_LOCALIDADE_CODIGOORIGEM,
          GLB_LOCALIDADE_CODIGODESTINO,
          SLF_PERCURSO_KM,
          USU_USUARIO_CODIGO,
          SLF_PERCURSO_DATACADASTRO,
          SLF_PERCURSO_KMTDV,
          GLB_LOCALIDADE_CODIGOORIGEMI,
          GLB_LOCALIDADE_CODIGODESTINOI
         ) Values
         ( trim(P_LOCORIGEM) || trim(P_LOCDESTINO),
           substr(FN_BUSCA_CODIGOIBGE(trim(P_LOCORIGEM),'LOD') || '-' || FN_BUSCA_CODIGOIBGE(trim(P_LOCDESTINO),'LOD'),1,50),
           trim(P_LOCORIGEM),
           trim(P_LOCDESTINO),
           0,
           'jsantos',
           sysdate,
           0,
           trim(FN_BUSCA_CODIGOIBGE(trim(P_LOCORIGEM),'IBC')),
           trim(FN_BUSCA_CODIGOIBGE(trim(P_LOCDESTINO),'IBC'))
          );
          vCommit := 'S';
     end if;

     select count(*)
        into vAuxiliar
     from t_slf_percursoped p
     where p.slf_percursoped_codigo = trim(P_LOCORIGEM) || trim(P_LOCDESTINO)
     -- sirlano 10/05/2013
       AND TRIM(NVL(P.GLB_LOCALIDADE_CODIGOPASSPOR,'99999')) = trim(NVL(vLocalidadePP,'99999'));
     if vAuxiliar = 0 Then
        INSERT INTO T_SLF_PERCURSOPED 
          (SLF_PERCURSOPED_CODIGO,
           GLB_LOCALIDADE_CODIGOPASSPOR,
           GLB_LOCALIDADE_CODIGOPASSPORI,
           SLF_PERCURSOPED_KM,
           USU_USUARIO_CODIGO,
           SLF_PERCURSOPED_DATACADASTRO,
           SLF_PERCURSOPED_ATUALIZACAO,
           SLF_PERCURSOPED_REPROCESSA,
           SLF_PERCURSOPED_VALOREIXO,
           SLF_PERCURSOPED_QTDEPED,
           SLF_PERCURSOPED_QTDEUSO) 
        Values
          (trim(P_LOCORIGEM) || trim(P_LOCDESTINO),
           trim(vLocalidadePP),  
           -- se a localidade vier default 00000 (5 zeros) trocar para 0000000 (7 zeros)
           decode(trim(vLocalidadePP),'99999','9999999',FN_BUSCA_CODIGOIBGE(trim(vLocalidadePP),'IBC')),
           0,
           'jsantos',
           sysdate,
           null,
           'S',
           0,
           0,
           1
          );
          vCommit := 'S';
     Else
        update T_SLF_PERCURSOPED ped
           set ped.slf_percursoped_reprocessa = 'S'
        where ped.slf_percursoped_codigo = trim(P_LOCORIGEM) || trim(P_LOCDESTINO)
          AND PED.SLF_PERCURSOPED_ATUALIZACAO <= ADD_MONTHS(SYSDATE, -3)
          and ped.slf_percursoped_reprocessa <> 'A';
        if sql%rowcount > 0 Then
           vCommit := 'S';
        End if;   
     End if;  
     
     if vCommit = 'S' then
        commit;
     end if;   
   
 END SP_SET_SOLICITAPED;                              
  
  PROCEDURE sp_get_valorpedagio(P_LOCORIGEM     IN  CHAR,
                               P_LOCDESTINO    IN  CHAR,
                               P_LOCPASSANDOPO IN  CHAR,
                               P_DATA          IN  CHAR DEFAULT trunc(sysdate),
                               P_ESPERA        IN  CHAR DEFAULT 'N',
                               P_VALOR         OUT char,
                               P_STATUS        OUT CHAR,
                               P_MESSAGE       OUT VARCHAR2)
  AS
    V_DATA          CHAR(10); 
    vAuxiliar       number;
    vContinua       char(1);
    vContador       number;
    vValor          number;
  BEGIN
     vContinua := 'S';
     vContador := 0;
     p_status  := pkg_glb_common.Status_Nomal;
     P_MESSAGE := '';

     loop
        vValor := PKG_CFE_FRETE.FN_GET_VALORPED(P_LOCORIGEM,
                                                P_LOCDESTINO,
                                                NVL(P_LOCPASSANDOPO,'99999'),
                                                NVL(P_DATA,SYSDATE));
        IF (vValor > 0) OR (NVL(P_ESPERA,'N') = 'N') THEN
           vContinua := 'N';
        Else
          PKG_CFE_FRETE.SP_SET_SOLICITAPED(P_LOCORIGEM,
                                           P_LOCDESTINO,
                                           NVL(P_LOCPASSANDOPO,'99999'));
          if NVL(P_ESPERA,'N') = 'S' then
             PKG_CFE_FRETE.SP_SLF_ATUPEDAGIO;     
          End if;                                         
          -- da uma pausa entre as pesquisas   
          dbms_lock.sleep(pkg_cfe_frete.vTimeIntervaloPesqPed);
          vContador := vContador + pkg_cfe_frete.vTimeIntervaloPesqPed;
          
          -- Verifica se deu o tempo limite para o loop
          if vContador > pkg_cfe_frete.vTimeOutPesqPed Then
             vContinua := 'N';
          End if;        
        End If; 
            
        exit when vContinua = 'N';
     end loop;   

     if vValor < 0 Then
       if ( vContador > pkg_cfe_frete.vTimeOutPesqPed ) Then
          P_STATUS := pkg_glb_common.Status_Warning;
          P_MESSAGE := 'Percurso Cadastrado. ' || chr(10) || 'Sem Retorno da Operadora. ' || chr(10) || 'Favor consulta mais novamente ';
       Else
         if P_ESPERA = 'S' Then
             P_STATUS := pkg_glb_common.Status_Erro;
             P_MESSAGE := 'Problema no Percurso. ' || chr(10) || 'Verifique e tente novamente ';
         End if;    
       End if;
       vValor := 0;                                
     Elsif vValor = 0 Then  
       P_STATUS := pkg_glb_common.Status_Nomal;
       P_MESSAGE := 'Percurso Sem Pedagio. ';
     End if;  
     
     --vValor := 0;               
   
  P_VALOR := trim(to_char(vValor)); 

  END sp_get_valorpedagio;
  
  PROCEDURE SP_GET_CONSULTASTFRETE(P_QryStr       IN  clob,
                                   P_IDCONSULTA   IN  NUMBER,
                                   P_ROTA         IN  CHAR,
                                   P_CURSOR       OUT PKG_CFE_FRETE.T_CURSOR,
                                   P_STATUS       OUT CHAR,
                                   P_MESSAGE      OUT VARCHAR2)AS
  V_INSERT     PKG_CFE_FRETE.TpRegTxt;
  V_MESSAGE    varchar2(100);
  V_STATUS     char(1);
  vVFNumero    t_con_valefrete.con_conhecimento_codigo%type;
  vVFSerie     t_con_valefrete.con_conhecimento_serie%type;
  vVFRota      t_con_valefrete.glb_rota_codigo%type;
  vVFSaque     t_con_valefrete.con_valefrete_saque%type;
  vCiot        t_con_vfreteciot.con_vfreteciot_numero%type;
  vIdPancary   t_con_vfreteciot.con_vfreteciot_id%type;
  vIdTdv       t_con_vfreteciot.con_vfreteciot_idcliente%type;
  
  BEGIN

   BEGIN
       
      -- EXTRAINDO VALORES
      BEGIN
         vVFNumero  := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFNumero','=','*'), 'valor', '=', '|');
         vVFSerie   := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFSerie','=','*'), 'valor', '=', '|');
         vVFRota    := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFRota','=','*'), 'valor', '=', '|');
         vVFSaque   := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFSaque','=','*'), 'valor', '=', '|');
      END;       
      
      -- EXTRAINDO VALORES PARA CONSULTA
      BEGIN
        
         SELECT L.CON_VFRETECIOT_NUMERO,
                L.CON_VFRETECIOT_ID,
                L.CON_VFRETECIOT_IDCLIENTE
           INTO vCiot,
                vIdPancary,
                vIdTdv      
           FROM T_CON_VFRETECIOT L
          WHERE L.CON_CONHECIMENTO_CODIGO = vVFNumero
            AND L.CON_CONHECIMENTO_SERIE  = vVFSerie 
            AND L.GLB_ROTA_CODIGO         = vVFRota  
            AND L.CON_VALEFRETE_SAQUE     = vVFSaque; 
      END;  

      -- ID DA VIAGEM
      BEGIN
        V_INSERT.con_freteoper_id    := P_IDCONSULTA;
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'viagem.id';
        V_INSERT.uti_vfintegra_valor := TRIM(vIdPancary);

        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,V_STATUS, V_MESSAGE);

      EXCEPTION WHEN OTHERS THEN
        V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
        V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_CONSULTAPED, '||sqlerrm;
      END;

      -- ID DO CLIENTE
      BEGIN
        V_INSERT.con_freteoper_id    := P_IDCONSULTA;
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'viagem.id.cliente';
        V_INSERT.uti_vfintegra_valor := TRIM(vIdTdv);

        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,V_STATUS, V_MESSAGE);

      EXCEPTION WHEN OTHERS THEN
        V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
        V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_CONSULTAPED, '||sqlerrm;
      END;

      -- CONTRATANTE NUMERO
      BEGIN
        V_INSERT.con_freteoper_id    := P_IDCONSULTA;
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'viagem.contratante.documento.numero';
        V_INSERT.uti_vfintegra_valor := TRIM(ContratanteNumero);
        
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,V_STATUS, V_MESSAGE);

      EXCEPTION WHEN OTHERS THEN
        V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
        V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_CONSULTAPED, '||sqlerrm;
      END;
      
      -- NUMERO DO CIOT
      BEGIN
        V_INSERT.con_freteoper_id    := P_IDCONSULTA;
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'viagem.antt.ciot.numero';
        V_INSERT.uti_vfintegra_valor := TRIM(LPAD(vCiot,12,0));

        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,V_STATUS, V_MESSAGE);

      EXCEPTION WHEN OTHERS THEN
        V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
        V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_CONSULTAPED, '||sqlerrm;
      END;
      
      -- OBTER PRAÇA
      BEGIN
        V_INSERT.con_freteoper_id    := P_IDCONSULTA;
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'viagem.pedagio.obter.praca';
        V_INSERT.uti_vfintegra_valor := TRIM('N');

        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,V_STATUS, V_MESSAGE);

      EXCEPTION WHEN OTHERS THEN
        V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
        V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_CONSULTAPED, '||sqlerrm;
      END;
      
      -- OBTER ROTA
      BEGIN
        V_INSERT.con_freteoper_id    := P_IDCONSULTA;
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'viagem.pedagio.obter.rota';
        V_INSERT.uti_vfintegra_valor := TRIM('N');

        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,V_STATUS, V_MESSAGE);

      EXCEPTION WHEN OTHERS THEN
        V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
        V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_CONSULTAPED, '||sqlerrm;
      END;
      
      -- OBTER FAVORECIDO
      BEGIN
        V_INSERT.con_freteoper_id    := P_IDCONSULTA;
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'viagem.obter.favorecido';
        V_INSERT.uti_vfintegra_valor := TRIM('N');

        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,V_STATUS, V_MESSAGE);

      EXCEPTION WHEN OTHERS THEN
        V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
        V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_CONSULTAPED, '||sqlerrm;
      END;
      
      -- OBTER DOCUMENTOS
      BEGIN
        V_INSERT.con_freteoper_id    := P_IDCONSULTA;
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'viagem.obter.documento';
        V_INSERT.uti_vfintegra_valor := TRIM('N');

        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,V_STATUS, V_MESSAGE);

      EXCEPTION WHEN OTHERS THEN
        V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
        V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_CONSULTAPED, '||sqlerrm;
      END;
      
      -- OBTER VALORES
      BEGIN
        V_INSERT.con_freteoper_id    := P_IDCONSULTA;
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'viagem.obter.valores';
        V_INSERT.uti_vfintegra_valor := TRIM('S');

        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,V_STATUS, V_MESSAGE);

      EXCEPTION WHEN OTHERS THEN
        V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
        V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_CONSULTAPED, '||sqlerrm;
      END;
      
      -- OBTER VEICULOS
      BEGIN
        V_INSERT.con_freteoper_id    := P_IDCONSULTA;
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'viagem.obter.veiculo';
        V_INSERT.uti_vfintegra_valor := TRIM('S');

        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,V_STATUS, V_MESSAGE);

      EXCEPTION WHEN OTHERS THEN
        V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
        V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_CONSULTAPED, '||sqlerrm;
      END;
      

      OPEN P_CURSOR FOR
      SELECT K.UTI_VFINTEGRA_CHAVE CHAVE,
             K.UTI_VFINTEGRA_VALOR VALOR
        FROM T_UTI_VFINTEGRA K
       WHERE K.CON_FRETEOPER_ID   = P_IDCONSULTA
         AND K.CON_FRETEOPER_ROTA = P_ROTA
    ORDER BY K.UTI_VFINTEGRA_SEQ;

      DELETE T_UTI_VFINTEGRA D
       WHERE D.CON_FRETEOPER_ID   = P_IDCONSULTA
         AND D.CON_FRETEOPER_ROTA = P_ROTA;

       COMMIT;

    EXCEPTION WHEN OTHERS THEN
       P_STATUS   := tdvadm.pkg_glb_common.Status_Erro;
       P_MESSAGE  := 'Erro ao consultar. Erro='||SQLCODE;
    END;

    P_STATUS   := tdvadm.pkg_glb_common.Status_Nomal;
    P_MESSAGE  := 'Processamento Normal.';

  END SP_GET_CONSULTASTFRETE;
  
  PROCEDURE SP_SET_CONSULTASTFRETE(P_QRYSTR       IN  CLOB,
                                   P_IDCONSULTA   IN  NUMBER,
                                   P_ROTA         IN  CHAR,
                                   P_STATUS       OUT CHAR,
                                   P_MESSAGE      OUT VARCHAR2)AS
  V_IDVALIDO CHAR(1);
  V_TIPO     TDVADM.T_CFE_INTEGRATDV.CFE_INTEGRATDV_COD%TYPE;
  V_QTDELOOP INTEGER;
  V_QTDESEQ  INTEGER;
  BEGIN
    BEGIN

        /*     TIPO DA CONSULTA    */

        V_TIPO := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'IntegraTdv_Cod','=','*'), 'valor', '=', '|');


        /*  SE NÃO FOR ID DE INTEGRAÇÃO DE PEDAGIO BLOQUEAMOS */
        IF V_TIPO NOT IN (38) THEN
           P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
           P_MESSAGE := 'ERRO: INTEGRAÇÃO TDV INFORMADA NÃO É VALIDA!';
           RETURN;
        END IF;

        V_QTDELOOP := 0;

        /*     CADASTRA OPERAÇÃO PARA INTEGRAÇÃO DO FRETE      */
        FOR R_CURSOR IN (SELECT K.CFE_INTEGRATDV_COD,
                                 K.CFE_OPERACOES_COD,
                                 K.CFE_OPERATDV_SEQOP,
                                 K.CFE_OPERATDV_SEQINT
                            FROM T_CFE_OPERATDV K
                            WHERE K.CFE_INTEGRATDV_COD = V_TIPO)
        LOOP
            V_QTDELOOP := V_QTDELOOP +1;


             SELECT COUNT(*)+1
               INTO V_QTDESEQ
               FROM T_CON_FRETEOPER K
               WHERE K.CON_FRETEOPER_ID   = P_IDCONSULTA
                 AND K.CON_FRETEOPER_ROTA = P_ROTA
                 AND K.CFE_INTEGRATDV_COD = R_CURSOR.CFE_INTEGRATDV_COD
                 AND K.CFE_OPERACOES_COD  = R_CURSOR.CFE_OPERACOES_COD;


            INSERT INTO T_CON_FRETEOPER F VALUES(P_IDCONSULTA,
                                                 P_ROTA,
                                                 R_CURSOR.CFE_INTEGRATDV_COD,
                                                 R_CURSOR.CFE_OPERACOES_COD,
                                                 'AG',
                                                 NULL,
                                                 NULL,
                                                 NULL,
                                                 NULL,
                                                 NULL,
                                                 P_QRYSTR,
                                                 SYSDATE,
                                                 NULL,
                                                 NULL,
                                                 V_QTDESEQ,
                                                 0);
        END LOOP;

        IF V_QTDELOOP = 0 THEN
           P_STATUS  := tdvadm.pkg_glb_common.Status_Warning;
           P_MESSAGE := 'Nenhuma operação cadastrada!';
          RETURN;
        END IF;

        COMMIT;

    EXCEPTION WHEN OTHERS THEN
          P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          P_MESSAGE := 'Erro: pkg_cfe_frete.sp_set_consultapedrota, '||sqlerrm;
    END;

  END SP_SET_CONSULTASTFRETE;
  
  PROCEDURE SP_VLD_CONSULTASEFRETE( P_XMLRETORNO      IN  CLOB,
                                    P_IDCONSULTA      IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ID%TYPE,
                                    P_ROTA            IN  TDVADM.T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,
                                    P_CODOPERACAOTDV  IN  VARCHAR2,
                                    P_CODOPERACAOWS   IN  VARCHAR2,
                                    P_SEQUENCIA       IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_SEQ%TYPE
                                  ) is
 --Variávei utilizada para guardar mensagem de erro gerada em raise.
 vMsgErro varchar2(100);

 --Variavel de controle
 vControle integer;

 vQryStr   T_CON_FRETEOPER.CON_FRETEOPER_PARAMQRYSTR%TYPE; 
 
begin
  --Inicializo as variáveis que serão utilizadas durante o processamento.
  vControle := 0;
  vMsgErro  := '';

  begin

    --Para essa consulta, caso a mensagem seja "0" o favorecido está cadastrado.
    IF PKG_CFE_FRETE.FN_Get_ChaveXml(P_XMLRETORNO, 'mensagem.codigo') = '0' THEN

      --Caso a variavel tenha valor maior que 0, Registra consulta.

         update tdvadm.t_con_freteoper  oper
           set
             OPER.CFE_STATUSFRETEOPER_STATUS  = 'OK',
             oper.con_freteoper_obs     = PKG_CFE_FRETE.FN_Get_ChaveXml(P_XMLRETORNO, 'mensagem.descricao'),
             oper.con_freteoper_retorno = sysdate,
             oper.con_freteoper_confret = Trim(P_XMLRETORNO)
         where
            0=0
           and oper.con_freteoper_id     = P_IDCONSULTA
           and oper.con_freteoper_rota   = P_ROTA
           and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
           and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
           and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;


      else
        --Caso a chave "MENSAGEM.CODIGO não
         update tdvadm.t_con_freteoper  oper
           set
             OPER.CFE_STATUSFRETEOPER_STATUS  = 'IV',
             oper.con_freteoper_obs     = PKG_CFE_FRETE.FN_Get_ChaveXml(P_XMLRETORNO, 'mensagem.descricao'),
             oper.con_freteoper_retorno = sysdate,
             oper.con_freteoper_confret = Trim(P_XMLRETORNO)
         where
            0=0
           and oper.con_freteoper_id     = P_IDCONSULTA
           and oper.con_freteoper_rota   = P_ROTA
           and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
           and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
           and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;


      end if;
  exception
    --caso ocorra algum erro durante o processamento. Registra o erro
    when others then
      --Transfiro a mensagem de erro, para uma variável para poder registrar no campo obs.
      vMsgErro := substr(sqlerrm, 1, 90);

      --atualizo a tabela de freteOperacao
      update tdvadm.t_con_freteoper  oper
        set
          OPER.CFE_STATUSFRETEOPER_STATUS  = 'ER',
          oper.con_freteoper_obs     = 'Erro: ' || vMsgErro,
          oper.con_freteoper_retorno = sysdate,
          oper.con_freteoper_confret = Trim(P_XMLRETORNO)
      where
         0=0
        and oper.con_freteoper_id     = P_IDCONSULTA
        and oper.con_freteoper_rota   = P_ROTA
        and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
        and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
        and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;

  end;

end SP_VLD_CONSULTASEFRETE;

  PROCEDURE SP_GET_CONSULTASTPARCEL(P_QryStr       IN  clob,
                                    P_IDCONSULTA   IN  NUMBER,
                                    P_ROTA         IN  CHAR,
                                    P_CURSOR       OUT T_CURSOR,
                                    P_STATUS       OUT CHAR,
                                    P_MESSAGE      OUT VARCHAR2)AS
  V_INSERT         PKG_CFE_FRETE.TpRegTxt;
  V_STATUS         CHAR(1);
  V_MESSAGE        VARCHAR2(200);
  vVfNumero        t_con_valefrete.con_conhecimento_codigo%type;
  vVfSerie         t_con_valefrete.con_conhecimento_serie%type;
  vVfRota          t_con_valefrete.glb_rota_codigo%type;
  vVfSaque         t_con_valefrete.con_valefrete_saque%type;  
  vCiotNumero      t_con_vfreteciot.con_vfreteciot_numero%type;
  vIdCliente       t_con_vfreteciot.con_vfreteciot_idcliente%type;
  vIdgeren         t_con_vfreteciot.con_vfreteciot_id%type;
  vNumParcelTdv    t_con_calcvalefrete.con_calcvalefretetp_codigo%type;
  vNumParcelGer    t_con_calcvalefrete.con_calcvalefretetp_codigo%type;

  BEGIN
     BEGIN

     vVfNumero        := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFNumero','=','*'), 'valor', '=', '|');
     vVfSerie         := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFSerie','=','*'), 'valor', '=', '|');
     vVfRota          := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFRota','=','*'), 'valor', '=', '|');
     vVfSaque         := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFSaque','=','*'), 'valor', '=', '|');
    
     vNumParcelTdv    := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFParcelTdv','=','*'), 'valor', '=', '|');
     vNumParcelGer    := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFParcelGer','=','*'), 'valor', '=', '|');
     
     SELECT CF.CON_VFRETECIOT_NUMERO,
            CF.CON_VFRETECIOT_IDCLIENTE,
            CF.CON_VFRETECIOT_ID
       INTO vCiotNumero,      
            vIdCliente ,      
            vIdgeren         
       FROM T_CON_VFRETECIOT CF
      WHERE CF.CON_CONHECIMENTO_CODIGO = vVfNumero
        AND CF.CON_CONHECIMENTO_SERIE  = vVfSerie 
        AND CF.GLB_ROTA_CODIGO         = vVfRota  
        AND CF.CON_VALEFRETE_SAQUE     = vVfSaque;
     
     -- ID GERENCIADORA
        BEGIN

          V_INSERT.con_freteoper_id    := P_IDCONSULTA;
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.id';
          V_INSERT.uti_vfintegra_valor := TRIM(vIdgeren);

          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
        END;

     -- ID CLIENTE
        BEGIN

          V_INSERT.con_freteoper_id    := P_IDCONSULTA;
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.id.cliente';
          V_INSERT.uti_vfintegra_valor := TRIM(vIdCliente);

          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
        END;
        
     -- CONTRATANTE NUMERO
        BEGIN

          V_INSERT.con_freteoper_id    := P_IDCONSULTA;
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.contratante.documento.numero';
          V_INSERT.uti_vfintegra_valor := TRIM(ContratanteNumero);

          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
        END; 
        
     -- TIPO DOCUMENTO
        BEGIN

          V_INSERT.con_freteoper_id    := P_IDCONSULTA;
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.unidade.documento.tipo';
          V_INSERT.uti_vfintegra_valor := TRIM('1');

          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
        END;     

     -- PARCELA CLIENTE
        BEGIN

          V_INSERT.con_freteoper_id    := P_IDCONSULTA;
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.parcela.numero.cliente';
          V_INSERT.uti_vfintegra_valor := TRIM(vNumParcelTdv);

          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
        END;
  
     -- CIOT NUMERO
        BEGIN

          V_INSERT.con_freteoper_id    := P_IDCONSULTA;
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.antt.ciot.numero';
          V_INSERT.uti_vfintegra_valor := LPAD(TRIM(vCiotNumero),12,'0');

          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
        END; 

        OPEN P_CURSOR FOR
       SELECT K.UTI_VFINTEGRA_CHAVE CHAVE,
              K.UTI_VFINTEGRA_VALOR VALOR
         FROM T_UTI_VFINTEGRA K
        WHERE K.CON_FRETEOPER_ID   = P_IDCONSULTA
          AND K.CON_FRETEOPER_ROTA = P_ROTA
        ORDER BY K.UTI_VFINTEGRA_SEQ;

      DELETE T_UTI_VFINTEGRA D
       WHERE D.CON_FRETEOPER_ID   = P_IDCONSULTA
         AND D.CON_FRETEOPER_ROTA = P_ROTA;

      P_STATUS   := tdvadm.pkg_glb_common.Status_Nomal;
      P_MESSAGE  := 'Processamento Normal.';

      COMMIT;

     EXCEPTION WHEN OTHERS THEN
       P_STATUS    := tdvadm.pkg_glb_common.Status_Erro;
       P_MESSAGE  := 'Erro ao consultar. Erro='||Sqlerrm;
     END;

  END SP_GET_CONSULTASTPARCEL;
  
  PROCEDURE SP_SET_STATUSPARCELA(P_QRYSTR       IN  VARCHAR2,
                                 P_IDCONSULTA   IN  VARCHAR2,
                                 P_ROTA         IN  CHAR,
                                 P_STATUS       OUT CHAR,
                                 P_MESSAGE      OUT VARCHAR2)AS
  V_IDVALIDO CHAR(1);
  V_TIPO     TDVADM.T_CFE_INTEGRATDV.CFE_INTEGRATDV_COD%TYPE;
  V_QTDELOOP INTEGER;
  V_QTDESEQ  INTEGER;

  --Variável utilizada para recuperar número da parcela.
  vParcela  Varchar2(10);
  --Variável de controle
  vControl Integer;

  --Variáveis utilizadas para recuperar valores do Vale de Frete
  vVFrete_Codigo    tdvadm.t_con_valefrete.con_conhecimento_codigo%Type;
  vVFrete_Serie     tdvadm.t_con_valefrete.con_conhecimento_serie%Type;
  vVFrete_Rota      tdvadm.t_con_valefrete.glb_rota_codigo%Type;
  vVFrete_Saque     tdvadm.t_con_valefrete.con_valefrete_saque%Type;
  vUsuario          tdvadm.t_usu_usuario.usu_usuario_codigo%type;
  vRotaUsuario      tdvadm.t_usu_usuario.glb_rota_codigo%type;

  Begin
    vParcela := '';
    vControl := 0;
    BEGIN

        /*     TIPO DA CONSULTA    */

        V_TIPO         := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'RIntegraTdv_Cod','=','*'), 'valor', '=', '|');
        vParcela       := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFParcelTdv','=','*'), 'valor', '=', '|');

        --Dados do Vale de Frete
        vVFrete_Codigo := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFNumero','=','*'), 'valor', '=', '|');
        vVFrete_Serie  := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFSerie','=','*'), 'valor', '=', '|');
        vVFrete_Rota   := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFRota','=','*'), 'valor', '=', '|');
        vVFrete_Saque  := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFSaque','=','*'), 'valor', '=', '|');
        vUsuario       := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFUsuarioTDV','=','*'), 'valor', '=', '|');
        vRotaUsuario   := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFRotaUsuarioTDV','=','*'), 'valor', '=', '|');

        IF nvl(vRotaUsuario,'000') = '000' THEN
           P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
           P_MESSAGE := 'Erro: Rota do usuario para pagamento de parcela, não informada!!';
           RETURN;
        END IF;

       /*  SE NÃO FOR ID DE INTEGRAÇÃO DE CONSULTA STATUS BLOQUEAMOS */
       IF V_TIPO NOT IN (39) THEN
           P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
           P_MESSAGE := 'ERRO: INTEGRAÇÃO TDV INFORMADA NÃO É VALIDA!';
           RETURN;
        END IF;

        Begin
          --verifico se a solicitação já foi realizada.
          Select Count(*) Into vControl
          From t_con_freteoper oper
          Where
            0=0
            And oper.con_freteoper_id    = P_IDCONSULTA
            And oper.con_freteoper_rota  = P_ROTA
            AND oper.cfe_integratdv_cod  = V_TIPO
            And Trim(TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'VFParcelTdv','=','*'), 'valor', '=', '|')) = Trim(vParcela)

            And Trim(TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'VFNumero','=','*'), 'valor', '=', '|')) = Trim(vVFrete_Codigo)
            And Trim(TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'VFSerie','=','*'), 'valor', '=', '|')) = Trim(vVFrete_Serie)
            And Trim(TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'VFRota','=','*'), 'valor', '=', '|')) = Trim(vVFrete_Rota)
            And Trim(TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'VFSaque','=','*'), 'valor', '=', '|')) = Trim(vVFrete_Saque);

        Exception
          --caso ocorra algum erro durante a busca, encerro o processamento.
          When Others Then
            P_STATUS := pkg_glb_common.Status_Erro;
            P_MESSAGE := 'Erro ao tentar buscar dados de Id.' || chr(13) || Sqlerrm;
            Return;
        End;

        --Caso tenha encontrado algum registro.
        If (vControl > 0)  Then
          P_STATUS := pkg_glb_common.Status_Erro;
          P_MESSAGE := 'Operação já solicitada.';
          Return;
        End If;


        /*     VALIDA ID    */
        V_IDVALIDO := 'N';

        IF V_IDVALIDO = 'N' THEN

           V_QTDELOOP := 0;

           /*     CADASTRA OPERAÇÃO PARA INTEGRAÇÃO DO FRETE      */
           FOR R_CURSOR IN (SELECT K.CFE_INTEGRATDV_COD,
                                    K.CFE_OPERACOES_COD,
                                    K.CFE_OPERATDV_SEQOP,
                                    K.CFE_OPERATDV_SEQINT
                               FROM T_CFE_OPERATDV K
                               WHERE K.CFE_INTEGRATDV_COD = V_TIPO)
           LOOP
              V_QTDELOOP := V_QTDELOOP +1;


               SELECT COUNT(*)+1
                 INTO V_QTDESEQ
                 FROM T_CON_FRETEOPER K
                 WHERE K.CON_FRETEOPER_ID   = P_IDCONSULTA
                   AND K.CON_FRETEOPER_ROTA = P_ROTA
                   AND K.CFE_INTEGRATDV_COD = R_CURSOR.CFE_INTEGRATDV_COD
                   AND K.CFE_OPERACOES_COD  = R_CURSOR.CFE_OPERACOES_COD;


              INSERT INTO T_CON_FRETEOPER F VALUES(P_IDCONSULTA,
                                                   P_ROTA,
                                                   R_CURSOR.CFE_INTEGRATDV_COD,
                                                   R_CURSOR.CFE_OPERACOES_COD,
                                                   'AG',
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   P_QRYSTR,
                                                   SYSDATE,
                                                   NULL,
                                                   NULL,
                                                   V_QTDESEQ,
                                                   0);
           END LOOP;

        IF V_QTDELOOP = 0 THEN
           P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
           P_MESSAGE := 'ERRO: NENHUMA OPERAÇÃO CADASTRADA PARA ESSE VALE DE FRETE!!';
          RETURN;
        END IF;

        ELSE
          P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          P_MESSAGE := 'ERRO: ID PARA CADASTRO DE INTEGRAÇÃO DO VALE DE FRETE NÃO VALIDADO!';
          RETURN;
        END IF;

        COMMIT;

    EXCEPTION WHEN OTHERS THEN
          P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          P_MESSAGE := 'ERRO: PKG_CFE_FRETE2.SP_GET_INTEGRACAO, '||sqlerrm;
    END;

  END SP_SET_STATUSPARCELA;
  
  PROCEDURE SP_VLD_STPARCELA( P_XMLRETORNO      IN CLOB,
                              P_IDCONSULTA      IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ID%TYPE,
                              P_ROTA            IN  TDVADM.T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,
                              P_CODOPERACAOTDV  IN  VARCHAR2,
                              P_CODOPERACAOWS   IN  VARCHAR2,
                              P_SEQUENCIA       IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_SEQ%TYPE
                            ) is
 --Variável utilizada para guardar mensagem de erro.
 vMsgErro   t_con_freteoper.con_freteoper_obs%type;

 --Variáveis recuperadas da QryString;
 VVFRETE_CODIGO      TDVADM.T_CON_CALCVALEFRETE.CON_CONHECIMENTO_CODIGO%TYPE;
 VVFRETE_SERIE       TDVADM.T_CON_CALCVALEFRETE.CON_CONHECIMENTO_SERIE%TYPE;
 VVFRETE_ROTA        TDVADM.T_CON_CALCVALEFRETE.GLB_ROTA_CODIGO%TYPE;
 VVFRETE_SAQUE       TDVADM.T_CON_CALCVALEFRETE.CON_VALEFRETE_SAQUE%TYPE;

 VVFRETETP_CODIGO    TDVADM.T_CON_CALCVALEFRETE.CON_CALCVALEFRETETP_CODIGO%TYPE;
 VVFRETE_CODPAROPER  TDVADM.T_CON_CALCVALEFRETE.CON_CALCVALEFRETE_CODPAROPER%TYPE;
 vUsuario            tdvadm.t_usu_usuario.usu_usuario_codigo%type;
 VFParcelIdSt        varchar2(2);
 VVRotaAUTPGTO       tdvadm.t_con_calcvalefrete.glb_rota_codigolib%Type;
 vQryString          tdvadm.t_con_freteoper.con_freteoper_paramqrystr%type;
 vCodoperacaotdv     T_CFE_OPERATDV.CFE_INTEGRATDV_COD%TYPE;
 vCodoperacaows      T_CFE_OPERATDV.CFE_OPERACOES_COD%TYPE;
 vSequencia          TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_SEQ%TYPE;
 
 vStatus             char(1); 
 vMessage            varchar2(200);
 vXml                clob;

 BEGIN
    
     BEGIN
       --Verifico se a consulta foi realizada com sucesso.
       IF PKG_CFE_FRETE.FN_GET_CHAVEXML(P_XMLRETORNO, 'mensagem.codigo') = '0' THEN

         --Verifico se a alteração foi realizada com sucesso.
    --     IF PKG_CFE_FRETE.FN_GET_CHAVEXML(P_XMLRETORNO, 'mensagem.parcela1.codigo') = '0' THEN
         IF (instr(lower(PKG_CFE_FRETE.FN_GET_CHAVEXML(P_XMLRETORNO, 'mensagem.descricao')), 'operacao realizada com sucesso') > 0)
            and
            (lower(PKG_CFE_FRETE.FN_GET_CHAVEXML(P_XMLRETORNO, 'viagem.parcela.status.id')) = 5) THEN

            --Atualiza a tabela de operação de frete.
            update tdvadm.t_con_freteoper oper
              set
                --OPER.CFE_STATUSFRETEOPER_STATUS = STATUS_OK,
                OPER.CFE_STATUSFRETEOPER_STATUS = 'OK',
                oper.con_freteoper_retorno = sysdate,
                oper.con_freteoper_confret = P_XMLRETORNO,
                oper.con_freteoper_obs     = 'Consulta de Parcela realizada com sucesso!'
            where
              0=0
              and oper.con_freteoper_id     = P_IDCONSULTA
              and oper.con_freteoper_rota   = P_ROTA
              and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
              and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
              and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;


             --busco a QryString para recuperar valores.
             select
                oper.con_freteoper_paramqrystr
              into
                vQryString
              from
                tdvadm.t_con_freteoper oper
              where
                0=0
                and oper.con_freteoper_id     = P_IDCONSULTA
                and oper.con_freteoper_rota   = P_ROTA
                and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
                and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
                and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;

            --Caso a validação tenha ocorrido com sucesso, recupero os valores do VALE da QryString;
            vCodoperacaotdv      := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryString,'RPCodoperacaotdv','=','*'),'valor', '=', '|');
            vCodoperacaows       := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryString,'RPCodoperacaows','=','*'),'valor', '=', '|');
            vSequencia           := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryString,'RPSequencia','=','*'),'valor', '=', '|');
            
           vXml := '<ResponseTo>
                    <Consulta>
                      <CodigoOperacaoWs>'||vCodoperacaows||'</CodigoOperacaoWs>
                      <CodigoOperacaoTdv>'||vCodoperacaotdv||'</CodigoOperacaoTdv>
                      <Sequencia>'||vSequencia||'</Sequencia>
                    </Consulta>
                    <ResponseToRows>
                      <ResponseToRow>
                        <Chave>mensagem.codigo</Chave>
                        <Valor>0</Valor>
                      </ResponseToRow>
                      <ResponseToRow>
                        <Chave>mensagem.descricao</Chave>
                        <Valor>Operacao realizada com sucesso</Valor>
                      </ResponseToRow>
                      <ResponseToRow>
                        <Chave>mensagem.parcela.qtde</Chave>
                        <Valor>1</Valor>
                      </ResponseToRow>
                      <ResponseToRow>
                        <Chave>mensagem.parcela1.codigo</Chave>
                        <Valor>0</Valor>
                      </ResponseToRow>
                      <ResponseToRow>
                        <Chave>mensagem.parcela1.descricao</Chave>
                        <Valor>Operacao realizada com sucesso</Valor>
                      </ResponseToRow>
                    </ResponseToRows>
                  </ResponseTo>';
            BEGIN
                  PKG_CFE_FRETE.SP_VLD_PGTOPARCELA(vXml           , 
                                                   P_IDCONSULTA   , 
                                                   P_ROTA         , 
                                                   vCodoperacaotdv, 
                                                   vCodoperacaows , 
                                                   vSequencia     );
            EXCEPTION WHEN OTHERS THEN
             vStatus   := '';
             vMessage  := '';
            END;    
           
           ELSE
             --Caso a alteração não tenha sido realizada com sucesso.
             update tdvadm.t_con_freteoper oper
              set
                --OPER.CFE_STATUSFRETEOPER_STATUS = STATUS_INVALIDO,
                OPER.CFE_STATUSFRETEOPER_STATUS = 'IV',
                oper.con_freteoper_retorno = sysdate,
                oper.con_freteoper_confret = P_XMLRETORNO,
                OPER.CON_FRETEOPER_OBS     = PKG_CFE_FRETE.FN_GET_CHAVEXML(P_XMLRETORNO, 'mensagem.parcela1.descricao')
            where
              0=0
              and oper.con_freteoper_id     = P_IDCONSULTA
              and oper.con_freteoper_rota   = P_ROTA
              and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
              and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
              and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;
         end if;
       Else
          --Se o retorno não for igual a zero, a consulta não foi realizada com sucesso.
          update tdvadm.t_con_freteoper oper
            set
              --OPER.CFE_STATUSFRETEOPER_STATUS = STATUS_ERRO,
              OPER.CFE_STATUSFRETEOPER_STATUS = 'ER',
              oper.con_freteoper_retorno = sysdate,
              oper.con_freteoper_confret = P_XMLRETORNO,
              OPER.CON_FRETEOPER_OBS     = PKG_CFE_FRETE.FN_GET_CHAVEXML(P_XMLRETORNO, 'mensagem.descricao')
          where
            0=0
            and oper.con_freteoper_id     = P_IDCONSULTA
            and oper.con_freteoper_rota   = P_ROTA
            and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
            and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
            and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;
        END IF;

     EXCEPTION
        --Caso estoure o raise em algum momento eu registro no campo de observação.
        when others then
          --Transfiro a mensagem de erro, para uma variável para poder registrar no campo obs.
          vMsgErro := substr(sqlerrm, 1, 90);

          --atualizo a tabela de freteOperacao
          update tdvadm.t_con_freteoper  oper
            set
              --OPER.CFE_STATUSFRETEOPER_STATUS  = STATUS_ERRO,
              OPER.CFE_STATUSFRETEOPER_STATUS  = 'ER',
              oper.con_freteoper_obs     = 'Erro: ' || vMsgErro,
              oper.con_freteoper_retorno = sysdate,
              oper.con_freteoper_confret = Trim(P_XMLRETORNO)
          where
             0=0
            and oper.con_freteoper_id     = P_IDCONSULTA
            and oper.con_freteoper_rota   = P_ROTA
            and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
            and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
            and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;
     
     END;
 
 END SP_VLD_STPARCELA;
 
 
  PROCEDURE SP_GET_STATUSOPERACOES(P_CURSOR   OUT T_CURSOR,
                                  P_STATUS   OUT CHAR,
                                  P_MESSAGEM OUT VARCHAR2)   AS
 BEGIN
   
    BEGIN
       OPEN P_CURSOR FOR
       
       
  
       
       SELECT DECODE(ITDV.CFE_INTEGRATDV_IPSERVER,
                    '172.16.0.215',
                    'Servidor de Consultas: 172.16.0.215',
                    '172.16.0.213',
                    'Servidor de Consultas e-social: 172.16.0.213',
                    '172.16.0.87',
                    'Servidor de Operações: 172.16.0.87',
                    'Outras Consultas') "Servidor",
             COUNT(*) "Quantidade"
        FROM TDVADM.T_CON_FRETEOPER L, 
             TDVADM.T_CFE_INTEGRATDV ITDV
       WHERE L.CFE_STATUSFRETEOPER_STATUS = 'AG'
         AND L.CFE_INTEGRATDV_COD = ITDV.CFE_INTEGRATDV_COD
       GROUP BY ITDV.CFE_INTEGRATDV_IPSERVER;

       
       P_STATUS    := pkg_glb_common.Status_Nomal;
       P_MESSAGEM  := 'Processamento Normal!';
       
    EXCEPTION WHEN OTHERS THEN
       P_STATUS    := pkg_glb_common.Status_Erro;
       P_MESSAGEM  := 'Erro ao realziar consulta. Erro: '||sqlerrm;
    END;     
 
 END SP_GET_STATUSOPERACOES;
 
  PROCEDURE SP_GET_STATUSEMPRESA(P_CURSOR   OUT T_CURSOR,
                                P_STATUS   OUT CHAR,
                                P_MESSAGEM OUT VARCHAR2)   AS
 BEGIN
   
    BEGIN
       OPEN P_CURSOR FOR
       
             SELECT 'Banco Bradesco' "Empresa",
                    'Sim' "Disponivel"
               FROM DUAL
             
              union
             
             SELECT 'ANTT' "Empresa",
                    'Sim' "Disponivel"
               FROM DUAL
             
              union
             
             SELECT 'Pamcary' "Empresa",
                    'Sim' "Disponivel"
               FROM DUAL;
             
       P_STATUS    := pkg_glb_common.Status_Nomal;
       P_MESSAGEM  := 'Processamento Normal!';
       
    EXCEPTION WHEN OTHERS THEN
       P_STATUS    := pkg_glb_common.Status_Erro;
       P_MESSAGEM  := 'Erro ao realziar consulta. Erro: '||sqlerrm;
    END;     
 
 END SP_GET_STATUSEMPRESA;     
 
  PROCEDURE SP_SET_INTEGRAVFPED(P_QRYSTR       IN  varchar2,
                               P_IDCONSULTA   IN  VARCHAR2,
                               P_ROTA         IN  CHAR,
                               P_STATUS       OUT CHAR,
                               P_MESSAGE      OUT VARCHAR2) AS
  V_IDVALIDO       CHAR(2);
  V_TIPO           TDVADM.T_CFE_INTEGRATDV.CFE_INTEGRATDV_COD%TYPE;
  V_QTDELOOP       INTEGER;
  V_EXISTINT       INTEGER;
  V_STATUSOPER     TDVADM.T_CON_FRETEOPER.CFE_STATUSFRETEOPER_STATUS%TYPE;
  V_QTDEINTEGRA    INTEGER;

  vExistePedVf    INTEGER;
  vValeFreteCod    t_con_valefrete.con_conhecimento_codigo%TYPE;
  vValeFreteSerie  t_con_valefrete.con_conhecimento_serie%TYPE;
  vValeFreteRota   t_con_valefrete.glb_rota_codigo%TYPE;
  vValeFreteSaque  t_con_valefrete.con_valefrete_saque%TYPE;

  BEGIN
    Begin
        
    
       /********************************************************/ 
       /************* INFORMAÇÕES DA QRY STR *******************/
       /********************************************************/
       
       BEGIN                       
          V_TIPO          := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'IntegraTdv_Cod','=','*'), 'valor', '=', '|');
          vValeFreteCod   := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFNumero','=','*'), 'valor', '=', '|');
          vValeFreteSerie := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFSerie','=','*'), 'valor', '=', '|');
          vValeFreteRota  := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFRota','=','*'), 'valor', '=', '|');
          vValeFreteSaque := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFSaque','=','*'), 'valor', '=', '|');
       END;
       
       /********************************************************/
       
       
       /********************************************************/ 
       /************ VALIDANDO TIPO DE INTEGRAÇÃO **************/
       /********************************************************/
       
       BEGIN
         IF V_TIPO NOT IN (42) THEN
             P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
             P_MESSAGE := 'ERRO: INTEGRAÇÃO TDV INFORMADA NÃO É VALIDA!';
             RETURN;
         END IF;
       END;
       
       /********************************************************/
       
       /********************************************************/ 
       /**VAL. SE JA EXISTE UMA SOLICTAÇÃO DE PED PARA ESSE VF**/
       /********************************************************/
       
       BEGIN
         BEGIN
            SELECT COUNT(*)
              INTO vExistePedVf
              FROM T_CON_FRETEOPER K
             WHERE K.CFE_INTEGRATDV_COD         = V_TIPO
               AND k.con_freteoper_id           = P_IDCONSULTA
               AND k.con_freteoper_rota         = P_ROTA
               AND K.CFE_STATUSFRETEOPER_STATUS = 'OK'
               AND TDVADM.fn_querystring(TDVADM.fn_querystring(K.CON_FRETEOPER_PARAMQRYSTR,'VFNumero','=','*'), 'valor', '=', '|') = trim(vValeFreteCod)
               AND TDVADM.fn_querystring(TDVADM.fn_querystring(K.CON_FRETEOPER_PARAMQRYSTR,'VFSerie','=','*'), 'valor', '=', '|')  = trim(vValeFreteSerie)
               AND TDVADM.fn_querystring(TDVADM.fn_querystring(K.CON_FRETEOPER_PARAMQRYSTR,'VFRota','=','*'), 'valor', '=', '|')   = trim(vValeFreteRota)
               AND TDVADM.fn_querystring(TDVADM.fn_querystring(K.CON_FRETEOPER_PARAMQRYSTR,'VFSaque','=','*'), 'valor', '=', '|')  = trim(vValeFreteSaque);
         EXCEPTION WHEN OTHERS THEN

           vExistePedVf := 0;

         END;

         IF vExistePedVf > 0 THEN
             P_STATUS  := tdvadm.pkg_glb_common.Status_Nomal;
             P_MESSAGE := 'Ja existe um ID criado para esse Vale de Frete!';
             RETURN;
         END IF;
       END;
       
       /********************************************************/
       
       /********************************************************/ 
       /*SE EXISTE ALGUMA SOLICITAÇÃO PARA VGM PED PARA ESSE VF*/
       /********************************************************/
       
       begin
         
       BEGIN

          SELECT COUNT(*)
           INTO V_EXISTINT
           FROM T_CON_FRETEOPER K
           WHERE K.CFE_INTEGRATDV_COD = V_TIPO
             AND k.con_freteoper_id   = P_IDCONSULTA
             AND k.con_freteoper_rota = P_ROTA
             AND K.CFE_STATUSFRETEOPER_STATUS = 'AG';

       EXCEPTION WHEN OTHERS THEN
          V_EXISTINT := 0;
       END;

       IF V_EXISTINT > 0 THEN
          P_STATUS  := tdvadm.pkg_glb_common.Status_Nomal;
          P_MESSAGE := 'Em processamento!';
          RETURN;
       END IF;
       
       end;
       
       /********************************************************/
       
       
       
       /********************************************************/ 
       /**  SE EXISTE UMA SOLICITAÇÃO DE PED COM ERRO OU IV    */
       /********************************************************/
       
       begin
         
           -- VERIFICO SE O ID PASSADO JÁ SE ENCONTRA COM ERRO OU INVÁLIDO
           -- PRA EVITAR QUE INSIRA NOVAMENTE.
           BEGIN
             SELECT COUNT(*)
               INTO V_EXISTINT
               FROM TDVADM.T_CON_FRETEOPER FO
              WHERE FO.CON_FRETEOPER_ID   = P_IDCONSULTA
                AND FO.CFE_INTEGRATDV_COD = V_TIPO
                AND FO.CON_FRETEOPER_ROTA = P_ROTA
                AND FO.CFE_STATUSFRETEOPER_STATUS IN ('ER','IV');
           EXCEPTION WHEN OTHERS THEN
             V_STATUSOPER := 'ER';
           END;

           IF V_EXISTINT > 0 THEN
             P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;

             SELECT 'ID possue uma solicitação de CIOT com erro ou INVALIDA! CONSULTE O MONITOR DE FRETE'
             INTO P_MESSAGE
             FROM DUAL;
             RETURN;
           END IF;
       
       end;
       
       /********************************************************/
       
       
       /********************************************************/ 
       /************ VALIDA O ID PARA GERAÇÃO DA INTEGRAÇÃO ****/
       /********************************************************/
       
       begin
       
         V_IDVALIDO := PKG_CFE_FRETE.FN_GET_IDVALIDO(P_IDCONSULTA, P_ROTA);

         IF V_IDVALIDO = 'OK' THEN

            SELECT COUNT(*)
              INTO V_QTDEINTEGRA
            FROM T_CON_FRETEOPER K
            WHERE K.CON_FRETEOPER_ID   = P_IDCONSULTA
              AND K.CON_FRETEOPER_ROTA = P_ROTA
              AND K.CFE_INTEGRATDV_COD = V_TIPO;

            V_QTDELOOP := 0;

            /*     CADASTRA OPERAÇÃO PARA INTEGRAÇÃO DO FRETE      */
            FOR R_CURSOR IN (SELECT K.CFE_INTEGRATDV_COD,
                                     K.CFE_OPERACOES_COD,
                                     K.CFE_OPERATDV_SEQOP,
                                     K.CFE_OPERATDV_SEQINT
                                FROM T_CFE_OPERATDV K
                                WHERE K.CFE_INTEGRATDV_COD = V_TIPO)
            LOOP
               V_QTDELOOP := V_QTDELOOP +1;

               INSERT INTO T_CON_FRETEOPER F VALUES(P_IDCONSULTA,
                                                    P_ROTA,
                                                    R_CURSOR.CFE_INTEGRATDV_COD,
                                                    R_CURSOR.CFE_OPERACOES_COD,
                                                    'AG',
                                                    NULL,
                                                    NULL,
                                                    NULL,
                                                    NULL,
                                                    NULL,
                                                    P_QRYSTR,
                                                    SYSDATE,
                                                    NULL,
                                                    NULL,
                                                    V_QTDEINTEGRA+1,
                                                    0);
            END LOOP;

         IF V_QTDELOOP = 0 THEN
            P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
            P_MESSAGE := 'ERRO: NENHUMA OPERAÇÃO CADASTRADA PARA ESSE VALE DE FRETE!!';
           RETURN;
         END IF;

         ELSE
           P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
           P_MESSAGE := 'ERRO: ID PARA CADASTRO DE INTEGRAÇÃO DO VALE DE FRETE NÃO VALIDADO!';
           RETURN;
         END IF;
         
       
       end;
       
       /********************************************************/
       
       /********************************************************/
       /************ MARCO UMA SOLICITAÇÃO DE PEDAGIO **********/
       /********************************************************/
       
       BEGIN
          INSERT INTO T_CON_VFRETESOLPED(CON_CONHECIMENTO_CODIGO ,
                                          CON_CONHECIMENTO_SERIE  ,
                                          GLB_ROTA_CODIGO         ,
                                          CON_VALEFRETE_SAQUE     ,
                                          CON_VFRETESOLPED_DATA   )
                                   VALUES(vValeFreteCod           ,
                                          vValeFreteSerie         ,
                                          vValeFreteRota          ,
                                          vValeFreteSaque         ,
                                          SYSDATE);

        EXCEPTION WHEN OTHERS THEN
            P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
            P_MESSAGE := 'Erro ao Criar Solicitação de CIOT. Erro: '||SQLERRM;
        END;
       
       /********************************************************/
       
       
       /********************************************************/
       /************ MARCO UMA SOLICITAÇÃO DE PEDAGIO **********/
       /********************************************************/
       
       BEGIN
         
         IF NVL(P_STATUS,'OK') <> tdvadm.pkg_glb_common.Status_Erro THEN

            P_STATUS  := tdvadm.pkg_glb_common.Status_Nomal;
            P_MESSAGE := 'Processamento Normal!';
            COMMIT;

         END IF;
       
       END;
       
       /********************************************************/
       
    EXCEPTION WHEN OTHERS THEN
      P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
      P_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;

      /*********************************************************/
      /*****************  DELETO A SOLICITAÇÃO *****************/
      /*********************************************************/

      DELETE T_CON_VFRETESOLPED LL
       WHERE LL.CON_CONHECIMENTO_CODIGO = vValeFreteCod
         AND LL.CON_CONHECIMENTO_SERIE  = vValeFreteSerie
         AND LL.GLB_ROTA_CODIGO         = vValeFreteRota
         AND LL.CON_VALEFRETE_SAQUE     = vValeFreteSaque;

      /*********************************************************/
    END;

  END SP_SET_INTEGRAVFPED;
  
  PROCEDURE SP_GET_INSERIRVIAGEMPED(P_QryStr       IN  clob,
                                    P_IDCONSULTA   IN  NUMBER,
                                    P_ROTA         IN  CHAR,
                                    P_CURSOR       OUT pkg_cfe_frete.T_CURSOR,
                                    P_STATUS       OUT CHAR,
                                    P_MESSAGE      OUT VARCHAR2)AS
  V_INSERT           PKG_CFE_FRETE.TpRegTxt;
  V_STATUS           CHAR(1);
  V_MESSAGE          VARCHAR2(200);
  
  vVfNumero          t_con_valefrete.con_conhecimento_codigo%type;
  vVfSerie           t_con_valefrete.con_conhecimento_serie%type;
  vVfRota            t_con_valefrete.glb_rota_codigo%type;
  vVfSaque           t_con_valefrete.con_valefrete_saque%type;
  vCartaoPed         varchar2(20);
  
  vOrigemViagem      t_glb_localidade.glb_localidade_codigo%type;
  vDestinoVIagem     t_glb_localidade.glb_localidade_codigo%type;
  vVeiculoPlaca      t_con_valefrete.con_valefrete_placa%type; 
  vVeiculoPlacaSaque t_con_valefrete.con_valefrete_placasaque%type;
  vDataCadastro      t_con_valefrete.con_valefrete_datacadastro%type;
  vValorPedagio      t_con_valefrete.con_valefrete_pedagio%type; 
  vViagemidaux1      varchar2(20);
  vQtdedocref        integer;
  vIndicedocfis      integer;
  vQryStrAux         t_con_freteoper.con_freteoper_paramqrystr%type;
  
  BEGIN
    
     BEGIN
       
       
       /***********************************************************/
       /************ RECUPERANDO INFORMAÇÕES DO QRY STR ***********/
       /***********************************************************/
       
       begin
            SELECT L.CON_FRETEOPER_PARAMQRYSTR
              INTO vQryStrAux 
              FROM T_CON_FRETEOPER L
             WHERE L.CON_FRETEOPER_ID   = P_IDCONSULTA
               AND L.CON_FRETEOPER_ROTA = P_ROTA
               AND L.CFE_INTEGRATDV_COD = '41'
               AND L.CFE_OPERACOES_COD  = '38';
     	 end;
       
       /***********************************************************/
       
       
       /***********************************************************/
       /******************* INFORMAÇÕE DA QUERY STR ***************/
       /***********************************************************/ 
       
       begin
         vVfNumero        := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFNumero','=','*'), 'valor', '=', '|');
         vVfSerie         := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFSerie','=','*'), 'valor', '=', '|');
         vVfRota          := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFRota','=','*'), 'valor', '=', '|');
         vVfSaque         := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFSaque','=','*'), 'valor', '=', '|');
         vCartaoPed       := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryStrAux,'MotoristaCartao','=','*'), 'valor', '=', '|');
       end;
       
       /***********************************************************/
       
       /***********************************************************/
       /********** INFORMAÇÕES TABELA DE VALE DE FRETE ************/
       /***********************************************************/
       
       begin
         
          SELECT vf.Glb_Localidade_Codigoori  ,
                 vf.glb_localidade_codigodes  ,
                 vf.con_valefrete_placa       ,
                 vf.con_valefrete_placasaque  ,
                 vf.con_valefrete_datacadastro,
                 vf.con_valefrete_pedagio 
            INTO vOrigemViagem                ,     
                 vDestinoVIagem               ,	
                 vVeiculoPlaca                ,
                 vVeiculoPlacaSaque           ,
                 vDataCadastro                ,
                 vValorPedagio    
            FROM t_con_valefrete vf
           where vf.con_conhecimento_codigo = vVfNumero
             and vf.con_conhecimento_serie  = vVfSerie 
             and vf.glb_rota_codigo         = vVfRota  
             and vf.con_valefrete_saque     = vVfSaque;   
             
       exception when others then
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
       end;  
       
       /***********************************************************/
       
       /***********************************************************/
       /********** INFORMAÇÕES TABELA DE VALE DE FRETE ************/
       /***********************************************************/ 
       
       begin
          -- viagem.id.cliente 
          BEGIN
            
            begin
               select seq_cfe_idviagem.nextval
                 into vViagemidaux1
                 from dual;
            end;  
            
            V_INSERT.con_freteoper_id    := P_IDCONSULTA;
            V_INSERT.con_freteoper_rota  := P_ROTA;
            V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
            V_INSERT.uti_vfintegra_chave := 'viagem.id.cliente';
            V_INSERT.uti_vfintegra_valor := TRIM(vViagemidaux1);

            PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

          EXCEPTION WHEN OTHERS THEN
            V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
            V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
          END;
         
          -- viagem.contratante.documento.numero 
          BEGIN

            V_INSERT.con_freteoper_id    := P_IDCONSULTA;
            V_INSERT.con_freteoper_rota  := P_ROTA;
            V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
            V_INSERT.uti_vfintegra_chave := 'viagem.contratante.documento.numero';
            V_INSERT.uti_vfintegra_valor := TRIM(pkg_cfe_frete.ContratanteNumero);

            PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

          EXCEPTION WHEN OTHERS THEN
            V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
            V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
          END;
          
          -- viagem.veiculo.placa 
          BEGIN

            V_INSERT.con_freteoper_id    := P_IDCONSULTA;
            V_INSERT.con_freteoper_rota  := P_ROTA;
            V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
            V_INSERT.uti_vfintegra_chave := 'viagem.veiculo.placa';
            V_INSERT.uti_vfintegra_valor := TRIM(vVeiculoPlaca);

            PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

          EXCEPTION WHEN OTHERS THEN
            V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
            V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
          END;
          
          -- viagem.veiculo.categoria
          BEGIN

            V_INSERT.con_freteoper_id    := P_IDCONSULTA;
            V_INSERT.con_freteoper_rota  := P_ROTA;
            V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
            V_INSERT.uti_vfintegra_chave := 'viagem.veiculo.categoria';
            V_INSERT.uti_vfintegra_valor := TRIM(NVL(PKG_CFE_FRETE.FN_GET_CATEGORIAVEIC(vVeiculoPlaca, vVeiculoPlacaSaque),'6'));
            
            
            PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

          EXCEPTION WHEN OTHERS THEN
            V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
            V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
          END;
          
          -- viagem.cartao.numero
          BEGIN

            V_INSERT.con_freteoper_id    := P_IDCONSULTA;
            V_INSERT.con_freteoper_rota  := P_ROTA;
            V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
            V_INSERT.uti_vfintegra_chave := 'viagem.cartao.numero';
            V_INSERT.uti_vfintegra_valor := TRIM(vCartaoPed);

            PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

          EXCEPTION WHEN OTHERS THEN
            V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
            V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
          END;
          
          -- viagem.contrato.numero
          BEGIN
                      
            V_INSERT.con_freteoper_id    := P_IDCONSULTA;
            V_INSERT.con_freteoper_rota  := P_ROTA;
            V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
            V_INSERT.uti_vfintegra_chave := 'viagem.contrato.numero';
            V_INSERT.uti_vfintegra_valor := TRIM(TRIM(vVfNumero)||TRIM(vVfSerie)||TRIM(vVfRota)||TRIM(vVfSaque));

            PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

          EXCEPTION WHEN OTHERS THEN
            V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
            V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
          END;
          
          -- viagem.data.partida 
          BEGIN

            V_INSERT.con_freteoper_id    := P_IDCONSULTA;
            V_INSERT.con_freteoper_rota  := P_ROTA;
            V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
            V_INSERT.uti_vfintegra_chave := 'viagem.data.partida';
            V_INSERT.uti_vfintegra_valor := TRIM(trunc(vDataCadastro));

            PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

          EXCEPTION WHEN OTHERS THEN
            V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
            V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
          END;
          
          -- viagem.pedagio.roteirizar 
          BEGIN

            V_INSERT.con_freteoper_id    := P_IDCONSULTA;
            V_INSERT.con_freteoper_rota  := P_ROTA;
            V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
            V_INSERT.uti_vfintegra_chave := 'viagem.pedagio.roteirizar';
            V_INSERT.uti_vfintegra_valor := TRIM('N');

            PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

          EXCEPTION WHEN OTHERS THEN
            V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
            V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
          END;
          
          -- viagem.pedagio.origem 
          BEGIN

            V_INSERT.con_freteoper_id    := P_IDCONSULTA;
            V_INSERT.con_freteoper_rota  := P_ROTA;
            V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
            V_INSERT.uti_vfintegra_chave := 'viagem.pedagio.origem';
            V_INSERT.uti_vfintegra_valor := '1';

            PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

          EXCEPTION WHEN OTHERS THEN
            V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
            V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
          END;
          
          -- viagem.origem.cidade.ibge
          BEGIN

            V_INSERT.con_freteoper_id    := P_IDCONSULTA;
            V_INSERT.con_freteoper_rota  := P_ROTA;
            V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
            V_INSERT.uti_vfintegra_chave := 'viagem.origem.cidade.ibge';
            V_INSERT.uti_vfintegra_valor := TRIM(PKG_CFE_FRETE.FN_GET_IBGE(vOrigemViagem));

            PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

          EXCEPTION WHEN OTHERS THEN
            V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
            V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
          END;
          
          -- viagem.destino.cidade.ibge
          BEGIN

            V_INSERT.con_freteoper_id    := P_IDCONSULTA;
            V_INSERT.con_freteoper_rota  := P_ROTA;
            V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
            V_INSERT.uti_vfintegra_chave := 'viagem.destino.cidade.ibge';
            V_INSERT.uti_vfintegra_valor := TRIM(PKG_CFE_FRETE.FN_GET_IBGE(vDestinoVIagem));

            PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

          EXCEPTION WHEN OTHERS THEN
            V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
            V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
          END;
          
          -- viagem.pedagio.valor
          BEGIN

            V_INSERT.con_freteoper_id    := P_IDCONSULTA;
            V_INSERT.con_freteoper_rota  := P_ROTA;
            V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
            V_INSERT.uti_vfintegra_chave := 'viagem.pedagio.valor';
            V_INSERT.uti_vfintegra_valor := TRIM(TO_CHAR(vValorPedagio,'999999999.00'));

            PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

          EXCEPTION WHEN OTHERS THEN
            V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
            V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
          END;
          
          -- viagem.pedagio.status.id
          BEGIN

            V_INSERT.con_freteoper_id    := P_IDCONSULTA;
            V_INSERT.con_freteoper_rota  := P_ROTA;
            V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
            V_INSERT.uti_vfintegra_chave := 'viagem.pedagio.status.id';
            V_INSERT.uti_vfintegra_valor := TRIM('1');

            PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

          EXCEPTION WHEN OTHERS THEN
            V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
            V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
          END;
          
          -- viagem.pedagio.obter.praca 
          BEGIN

            V_INSERT.con_freteoper_id    := P_IDCONSULTA;
            V_INSERT.con_freteoper_rota  := P_ROTA;
            V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
            V_INSERT.uti_vfintegra_chave := 'viagem.pedagio.obter.praca';
            V_INSERT.uti_vfintegra_valor := TRIM('N');

            PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

          EXCEPTION WHEN OTHERS THEN
            V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
            V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
          END;
          
        end;
        
       /***********************************************************/
       
       /***********************************************************/
       /********** DOCUMENTOS DE REFERENCIA DA VIAGEM *************/
       /***********************************************************/
       
       begin
           
         SELECT COUNT(*)
           INTO vQtdedocref
           FROM T_CON_VFRETECONHEC CC
          WHERE CC.CON_VALEFRETE_CODIGO     = vVfNumero  
            AND CC.CON_VALEFRETE_SERIE      = vVfSerie   
            AND CC.GLB_ROTA_CODIGOVALEFRETE = vVfRota    
            AND CC.CON_VALEFRETE_SAQUE      = vVfSaque;
         
         IF vQtdedocref > 0 THEN
            
            -- QUANTIDADES DE DOCUMENTOS
            BEGIN     
              V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
              V_INSERT.con_freteoper_rota  := P_ROTA;
              V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
              V_INSERT.uti_vfintegra_chave := TRIM('viagem.documento.qtde');
              V_INSERT.uti_vfintegra_valor := TRIM(TO_CHAR(vQtdedocref));
              
              PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
            EXCEPTION WHEN OTHERS THEN
              V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
              V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
            END; 
            
            /***********************************************************/
            /********************    CONHECIMENTOS    ******************/
            /***********************************************************/
            vIndicedocfis := 0;
            
            FOR R_CURSORCONHEC IN (SELECT CC.CON_CONHECIMENTO_CODIGO,
                                          CC.CON_CONHECIMENTO_SERIE,
                                          CC.GLB_ROTA_CODIGO,
                                          CH.GLB_CLIENTE_CGCCPFREMETENTE,
                                          CH.GLB_TPCLIEND_CODIGOREMETENTE,
                                          CH.GLB_CLIENTE_CGCCPFDESTINATARIO,
                                          CH.GLB_TPCLIEND_CODIGODESTINATARI,
                                          R.GLB_ROTA_SERIE
                                     FROM T_CON_VFRETECONHEC CC,
                                          T_CON_CONHECIMENTO CH,
                                          T_GLB_ROTA R
                                    WHERE CC.CON_VALEFRETE_CODIGO     = vVfNumero
                                      AND CC.CON_VALEFRETE_SERIE      = vVfSerie 
                                      AND CC.GLB_ROTA_CODIGOVALEFRETE = vVfRota  
                                      AND CC.CON_VALEFRETE_SAQUE      = vVfSaque 
                                      AND CC.GLB_ROTA_CODIGO          = R.GLB_ROTA_CODIGO
                                      AND CC.CON_CONHECIMENTO_CODIGO  = CH.CON_CONHECIMENTO_CODIGO
                                      AND CC.CON_CONHECIMENTO_SERIE   = CH.CON_CONHECIMENTO_SERIE
                                      AND CC.GLB_ROTA_CODIGO          = CH.GLB_ROTA_CODIGO)
            LOOP
                -- INDICE DO DOC FISCAL
                vIndicedocfis := vIndicedocfis+1;
                
                -- TIPO DO DOCUMENTO
                BEGIN     
                  V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                  V_INSERT.con_freteoper_rota  := P_ROTA;
                  V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                  V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.tipo'),'XX',TO_CHAR(vIndicedocfis));
                  V_INSERT.uti_vfintegra_valor := TRIM('5');
                  PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
                EXCEPTION WHEN OTHERS THEN
                  V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                  V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
                END; 
                
                -- NUMERO DO DOCUMENTO
                BEGIN     
                  V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                  V_INSERT.con_freteoper_rota  := P_ROTA;
                  V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                  V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.numero'),'XX',TO_CHAR(vIndicedocfis));
                  V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORCONHEC.CON_CONHECIMENTO_CODIGO);
                  PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
                EXCEPTION WHEN OTHERS THEN
                  V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                  V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
                END; 
                
                -- SERIE DO DOCUMENTO
                BEGIN     
                  V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
                  V_INSERT.con_freteoper_rota  := P_ROTA;
                  V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                  V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.serie'),'XX',TO_CHAR(vIndicedocfis));
                  V_INSERT.uti_vfintegra_valor := NVL(TRIM(R_CURSORCONHEC.GLB_ROTA_SERIE),'U');
                  PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
                EXCEPTION WHEN OTHERS THEN
                  V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                  V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
                END; 
                
            END LOOP;
            
            /***********************************************************/
         END IF;    
         
           
         END;  
       
       /***********************************************************/  	
       
       /***********************************************************/
       /***********  GRAVANDO NA TABELA DE PEDAGIO   **************/
       /***********************************************************/
       
       BEGIN
         
         IF NVL(V_STATUS,'OK') <> tdvadm.pkg_glb_common.Status_Erro THEN 
         
            BEGIN
             
             insert into t_con_vfretepedagio
               (con_conhecimento_codigo,
                con_conhecimento_serie,
                glb_rota_codigo,
                con_valefrete_saque,
                con_freteoper_id,
                con_freteoper_rota,
                con_vfretepedagio_id,
                con_vfretepedagio_idcliente,
                con_vfretepedagio_tppagamento,
                con_vfretepedagio_flagcancel,
                con_vfretepedagio_data,
                con_vfretepedagio_flagimprime,
                con_vfretepedagio_flagaltera,
                con_vfretepedagio_flagprocesal)
             VALUES
               (vVfNumero,
                vVfSerie,
                vVfRota,
                vVfSaque,
                P_IDCONSULTA,
                P_ROTA,
                NULL,
                vViagemidaux1,
                NULL,
                NULL,
                SYSDATE,
                'N',
                'N',
                'S');
                                          
            EXCEPTION WHEN DUP_VAL_ON_INDEX THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;  
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INSEREFRETE, '||sqlerrm;             
            END; 
                                    
         end if; 
       
       END;
       
       /***********************************************************/
       
       
       
       OPEN P_CURSOR FOR
       SELECT K.UTI_VFINTEGRA_CHAVE CHAVE,
              K.UTI_VFINTEGRA_VALOR VALOR
         FROM T_UTI_VFINTEGRA K
        WHERE K.CON_FRETEOPER_ID   = P_IDCONSULTA
          AND K.CON_FRETEOPER_ROTA = P_ROTA
        ORDER BY K.UTI_VFINTEGRA_SEQ;

      DELETE T_UTI_VFINTEGRA D
       WHERE D.CON_FRETEOPER_ID   = P_IDCONSULTA
         AND D.CON_FRETEOPER_ROTA = P_ROTA;

      P_STATUS   := tdvadm.pkg_glb_common.Status_Nomal;
      P_MESSAGE  := 'Processamento Normal.';

      COMMIT;

     EXCEPTION WHEN OTHERS THEN
       P_STATUS   := tdvadm.pkg_glb_common.Status_Erro;
       P_MESSAGE  := 'Erro ao consultar. Erro='||Sqlerrm;
     END;
  
  END SP_GET_INSERIRVIAGEMPED; 
  
  PROCEDURE SP_VLD_INSERIRVIAGEMPED(P_XMLRETORNO      IN CLOB,
                                   P_IDCONSULTA      IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ID%TYPE,
                                   P_ROTA            IN  TDVADM.T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,
                                   P_CODOPERACAOTDV  IN  VARCHAR2,
                                   P_CODOPERACAOWS   IN  VARCHAR2,
                                   P_SEQUENCIA       IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_SEQ%TYPE) is

 --Variável de linha utilizada para facilitar a inserção na tabela de CIOT.
 vTabPedagio   tdvadm.t_con_vfretepedagio%rowtype;

 --Variável utilizada para guardar mensagem de erro.
 vMsgErro      t_con_freteoper.con_freteoper_obs%type;
 vQryStrInsert t_con_freteoper.con_freteoper_paramqrystr%TYPE;
 vVfNumero     t_con_valefrete.con_conhecimento_codigo%TYPE;
 vVfSerie      t_con_valefrete.con_conhecimento_serie%TYPE;
 vVfRota       t_con_valefrete.glb_rota_codigo%TYPE;
 vVfSaque      t_con_valefrete.con_valefrete_saque%TYPE;
 vTPPagamento  CHAR(2);

BEGIN
  Begin
     
     BEGIN

        SELECT L.CON_FRETEOPER_PARAMQRYSTR
         INTO vQryStrInsert
         FROM T_CON_FRETEOPER L
        WHERE L.CON_FRETEOPER_ID   = P_IDCONSULTA
          AND L.CON_FRETEOPER_ROTA = P_ROTA
          And l.con_freteoper_seq  = P_SEQUENCIA
          and l.cfe_integratdv_cod = P_CODOPERACAOTDV
          and l.cfe_operacoes_cod  = P_CODOPERACAOWS;


          vVfNumero    := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryStrInsert,'VFNumero','=','*'), 'valor', '=', '|');
          vVfSerie     := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryStrInsert,'VFSerie','=','*'), 'valor', '=', '|');
          vVfRota      := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryStrInsert,'VFRota','=','*'), 'valor', '=', '|');
          vVfSaque     := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryStrInsert,'VFSaque','=','*'), 'valor', '=', '|');
          vTPPagamento := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryStrInsert,'IntegraTdv_Cod','=','*'), 'valor', '=', '|');

          vTabPedagio.Con_Conhecimento_Codigo := vVfNumero;
          vTabPedagio.Con_Conhecimento_Serie  := vVfSerie;
          vTabPedagio.Glb_Rota_Codigo         := vVfRota;
          vTabPedagio.Con_Valefrete_Saque     := vVfSaque;

      EXCEPTION WHEN OTHERS THEN
        vMsgErro := substr(sqlerrm, 1, 90);
      END;

     IF PKG_CFE_FRETE.FN_GET_CHAVEXML(P_XMLRETORNO, 'mensagem.codigo') = '0' THEN

        vTabPedagio.Con_Vfretepedagio_Id     := PKG_CFE_FRETE.FN_GET_CHAVEXML(P_XMLRETORNO, 'viagem.id');
        vTabPedagio.Con_Freteoper_Id         := P_IDCONSULTA;
        vTabPedagio.Con_Freteoper_Rota       := P_ROTA;

        UPDATE T_CON_VFRETEPEDAGIO PED
           SET PED.CON_VFRETEPEDAGIO_ID           = vTabPedagio.Con_Vfretepedagio_Id,
               PED.con_vfretepedagio_flagimprime  = 'S',
               PED.con_vfretepedagio_flagaltera   = 'N',
               PED.CON_VFRETEPEDAGIO_FLAGPROCESAL = 'N'
         WHERE PED.CON_CONHECIMENTO_CODIGO        = vTabPedagio.Con_Conhecimento_Codigo
           AND PED.CON_CONHECIMENTO_SERIE         = vTabPedagio.Con_Conhecimento_Serie
           AND PED.GLB_ROTA_CODIGO                = vTabPedagio.Glb_Rota_Codigo
           AND PED.CON_VALEFRETE_SAQUE            = vTabPedagio.Con_Valefrete_Saque;


        update tdvadm.t_con_freteoper oper
            set OPER.CFE_STATUSFRETEOPER_STATUS = 'OK',
                oper.con_freteoper_retorno      = sysdate,
                oper.con_freteoper_confret      = P_XMLRETORNO,
                oper.con_freteoper_obs          = 'Viagem para pgto de Pedágio, cadastrada com sucesso.'
          where 0=0
            and oper.con_freteoper_id     = P_IDCONSULTA
            and oper.con_freteoper_rota   = P_ROTA
            and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
            and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
            and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;
        else
          --Caso o retorno não seja "0" (zero)
          --Código da Mensagem não for zero "Consulta não realizada com sucesso.
          update tdvadm.t_con_freteoper oper
            set OPER.CFE_STATUSFRETEOPER_STATUS = 'IV',
                oper.con_freteoper_retorno = sysdate,
                oper.con_freteoper_confret = P_XMLRETORNO,
                OPER.CON_FRETEOPER_OBS     = PKG_CFE_FRETE.FN_GET_CHAVEXML(P_XMLRETORNO, 'mensagem.descricao')
          where 0=0
            and oper.con_freteoper_id     = P_IDCONSULTA
            and oper.con_freteoper_rota   = P_ROTA
            and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
            and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
            and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;

          --Excluo o registro de CIOT
          delete from T_CON_VFRETEPEDAGIO PED
           WHERE PED.CON_CONHECIMENTO_CODIGO  = vTabPedagio.Con_Conhecimento_Codigo
             AND PED.CON_CONHECIMENTO_SERIE   = vTabPedagio.Con_Conhecimento_Serie
             AND PED.GLB_ROTA_CODIGO          = vTabPedagio.Glb_Rota_Codigo
             AND PED.CON_VALEFRETE_SAQUE      = vTabPedagio.Con_Valefrete_Saque;
    END IF;



  EXCEPTION
    --Caso estoure o raise em algum momento eu registro no campo de observação.
    when others then
      --Transfiro a mensagem de erro, para uma variável para poder registrar no campo obs.
      vMsgErro := substr(sqlerrm, 1, 90);

      --atualizo a tabela de freteOperacao
      update tdvadm.t_con_freteoper  oper
        set OPER.CFE_STATUSFRETEOPER_STATUS  = 'ER',
            oper.con_freteoper_obs     = 'Erro: ' || vMsgErro,
            oper.con_freteoper_retorno = sysdate,
            oper.con_freteoper_confret = Trim(P_XMLRETORNO)
      where 0=0
        and oper.con_freteoper_id     = P_IDCONSULTA
        and oper.con_freteoper_rota   = P_ROTA
        and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
        and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
        and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;
  END;
  
END SP_VLD_INSERIRVIAGEMPED;
 
  PROCEDURE SP_SET_CANCELARPED(P_QRYSTR       IN  VARCHAR2,
                               P_IDCONSULTA   IN  VARCHAR2,
                               P_ROTA         IN  CHAR,
                               P_STATUS       OUT CHAR,
                               P_MESSAGE      OUT VARCHAR2)AS
  V_IDVALIDO      CHAR(1);
  V_TIPO          TDVADM.T_CFE_INTEGRATDV.CFE_INTEGRATDV_COD%TYPE;
  V_QTDELOOP      INTEGER;
  V_EXISTESEQ     INTEGER;
  V_EXISTCIOTVGN  INTEGER;
  vControl        Integer;
  vCiotNumero     t_con_vfreteciot.con_vfreteciot_numero%TYPE;
  vCiotProtocolo  t_con_vfreteciot.con_vfreteciot_protocolo%TYPE;
  vValeFreteNun   t_con_vfreteciot.con_conhecimento_codigo%TYPE;
  vValeFreteSerie t_con_vfreteciot.con_conhecimento_serie%TYPE;
  vValeFreteRota  t_con_vfreteciot.glb_rota_codigo%TYPE;
  vValeFreteSaque t_con_vfreteciot.con_valefrete_saque%TYPE;
  vTpViagem       t_vgm_vgciot%ROWTYPE;
  Begin

    Begin

       /***********************************/
       /*****     TIPO DA CONSULTA    *****/
       /***********************************/

       BEGIN
            V_TIPO                     := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'IntegraTdv_Cod','=','*'), 'valor', '=', '|');
            vValeFreteNun              := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFNumero','=','*'), 'valor', '=', '|');
            vValeFreteSerie            := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFSerie','=','*'), 'valor', '=', '|');
            vValeFreteRota             := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFRota','=','*'), 'valor', '=', '|');
            vValeFreteSaque            := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFSaque','=','*'), 'valor', '=', '|');

            /*  SE NÃO FOR ID DE INTEGRAÇÃO DE VALE DE FRETE BLOQUEAMOS */
            IF V_TIPO NOT IN (43) THEN
                P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                P_MESSAGE := 'ERRO: INTEGRAÇÃO TDV INFORMADA NÃO É VALIDA!';
                RETURN;
            END IF;

       END;

       /***********************************/


       /***********************************/

       /***********************************/
       /***** CRIANDO INTEGRAÇÃO        ***/
       /***********************************/

        BEGIN

        V_IDVALIDO := 'N';

        IF V_IDVALIDO = 'N' THEN

           V_QTDELOOP := 0;

           /*     CADASTRA OPERAÇÃO PARA INTEGRAÇÃO DO FRETE      */
           FOR R_CURSOR IN (SELECT K.CFE_INTEGRATDV_COD,
                                   K.CFE_OPERACOES_COD,
                                   K.CFE_OPERATDV_SEQOP,
                                   K.CFE_OPERATDV_SEQINT
                              FROM T_CFE_OPERATDV K
                             WHERE K.CFE_INTEGRATDV_COD = V_TIPO)
           LOOP
              V_QTDELOOP := V_QTDELOOP +1;


                SELECT COUNT(*)+1
                  INTO V_EXISTESEQ
                  FROM T_CON_FRETEOPER K
                 WHERE K.CON_FRETEOPER_ID   = P_IDCONSULTA
                   AND K.CON_FRETEOPER_ROTA = P_ROTA
                   AND K.CFE_INTEGRATDV_COD = R_CURSOR.CFE_INTEGRATDV_COD
                   AND K.CFE_OPERACOES_COD  = R_CURSOR.CFE_OPERACOES_COD;


              INSERT INTO T_CON_FRETEOPER F VALUES(P_IDCONSULTA,
                                                   P_ROTA,
                                                   R_CURSOR.CFE_INTEGRATDV_COD,
                                                   R_CURSOR.CFE_OPERACOES_COD,
                                                   'AG',
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   P_QRYSTR,
                                                   SYSDATE,
                                                   NULL,
                                                   NULL,
                                                   V_EXISTESEQ,
                                                   0);
           END LOOP;

        IF V_QTDELOOP = 0 THEN
           P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
           P_MESSAGE := 'ERRO: NENHUMA OPERAÇÃO CADASTRADA PARA ESSE VALE DE FRETE!!';
          RETURN;
        END IF;

        ELSE
          P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          P_MESSAGE := 'ERRO: ID PARA CADASTRO DE INTEGRAÇÃO DO VALE DE FRETE NÃO VALIDADO!';
          RETURN;
        END IF;

        END;

       /***********************************/
        IF NVL(P_STATUS,'OK') <> tdvadm.pkg_glb_common.Status_Erro THEN
           P_STATUS  := tdvadm.pkg_glb_common.Status_Nomal;
           P_MESSAGE := 'Processamento Normal!';
           COMMIT;
        END IF;
        
       
       
        COMMIT;

    EXCEPTION WHEN OTHERS THEN
          P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          P_MESSAGE := Sqlerrm || chr(13) || chr(13) || 'PKG_CFE_FRETE.SP_SET_CANCELARCIOT';
    END;

  END SP_SET_CANCELARPED; 

  PROCEDURE SP_GET_CANCELARVIAGEMPED(P_QryStr       IN  clob,
                                     P_IDCONSULTA   IN  NUMBER,
                                     P_ROTA         IN  CHAR,
                                     P_CURSOR       OUT PKG_CFE_FRETE.T_CURSOR,
                                     P_STATUS       OUT CHAR,
                                     P_MESSAGE      OUT VARCHAR2) AS
  V_INSERT           PKG_CFE_FRETE.TpRegTxt;
  V_STATUS           CHAR(1);
  V_MESSAGE          VARCHAR2(200); 
  vVfNumero          t_con_valefrete.con_conhecimento_codigo%type;
  vVfSerie           t_con_valefrete.con_conhecimento_serie%type;
  vVfRota            t_con_valefrete.glb_rota_codigo%type;
  vVfSaque           t_con_valefrete.con_valefrete_saque%type;
  vIdCliente         t_con_vfretepedagio.con_vfretepedagio_idcliente%type; 
  vIdGeren           t_con_vfretepedagio.con_vfretepedagio_id%type;
 
  BEGIN
    
     BEGIN
        
       
       /***********************************************************/
       /******************* INFORMAÇÕE DA QUERY STR ***************/
       /***********************************************************/ 
       
       begin
         vVfNumero        := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFNumero','=','*'), 'valor', '=', '|');
         vVfSerie         := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFSerie','=','*'), 'valor', '=', '|');
         vVfRota          := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFRota','=','*'), 'valor', '=', '|');
         vVfSaque         := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFSaque','=','*'), 'valor', '=', '|');
       end;
       
       /***********************************************************/
       
       /***********************************************************/
       /******* INFORMAÇÕES TABELA DE VALE DE FRETE / PED *********/
       /***********************************************************/
       
       begin
         
          SELECT p.con_vfretepedagio_idcliente,
                 p.con_vfretepedagio_id
            INTO vIdCliente,  
                 vIdGeren  
            FROM t_con_valefrete vf,
                 t_con_vfretepedagio p
           where vf.con_conhecimento_codigo = vVfNumero
             and vf.con_conhecimento_serie  = vVfSerie 
             and vf.glb_rota_codigo         = vVfRota  
             and vf.con_valefrete_saque     = vVfSaque
             and vf.con_conhecimento_codigo = p.con_conhecimento_codigo
             and vf.con_conhecimento_serie  = p.con_conhecimento_serie
             and vf.glb_rota_codigo         = p.glb_rota_codigo
             and vf.con_valefrete_saque     = p.con_valefrete_saque;
             
       exception when others then
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
       end;  
       
       /***********************************************************/
       
       /***********************************************************/
       /********** INFORMAÇÕES DO ARQUIVO DE INTEGRACAO ***********/
       /***********************************************************/ 
       
       begin
         
          -- viagem.id
          BEGIN
            
            V_INSERT.con_freteoper_id    := P_IDCONSULTA;
            V_INSERT.con_freteoper_rota  := P_ROTA;
            V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
            V_INSERT.uti_vfintegra_chave := 'viagem.id';
            V_INSERT.uti_vfintegra_valor := TRIM(vIdGeren);
            
            
            
            PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

          EXCEPTION WHEN OTHERS THEN
            V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
            V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
          END;
          
          -- viagem.id.cliente
          BEGIN
            
            V_INSERT.con_freteoper_id    := P_IDCONSULTA;
            V_INSERT.con_freteoper_rota  := P_ROTA;
            V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
            V_INSERT.uti_vfintegra_chave := 'viagem.id.cliente';
            V_INSERT.uti_vfintegra_valor := TRIM(vIdCliente);
            
            
            
            PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

          EXCEPTION WHEN OTHERS THEN
            V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
            V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
          END;
                  
          -- viagem.contratante.documento.numero 
          BEGIN

            V_INSERT.con_freteoper_id    := P_IDCONSULTA;
            V_INSERT.con_freteoper_rota  := P_ROTA;
            V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
            V_INSERT.uti_vfintegra_chave := 'viagem.contratante.documento.numero';
            V_INSERT.uti_vfintegra_valor := TRIM(pkg_cfe_frete.ContratanteNumero);

            PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

          EXCEPTION WHEN OTHERS THEN
            V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
            V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
          END;
       
       end;
        
       /***********************************************************/
 	

       
       OPEN P_CURSOR FOR
       SELECT K.UTI_VFINTEGRA_CHAVE CHAVE,
              K.UTI_VFINTEGRA_VALOR VALOR
         FROM T_UTI_VFINTEGRA K
        WHERE K.CON_FRETEOPER_ID   = P_IDCONSULTA
          AND K.CON_FRETEOPER_ROTA = P_ROTA
        ORDER BY K.UTI_VFINTEGRA_SEQ;

      DELETE T_UTI_VFINTEGRA D
       WHERE D.CON_FRETEOPER_ID   = P_IDCONSULTA
         AND D.CON_FRETEOPER_ROTA = P_ROTA;

      P_STATUS   := tdvadm.pkg_glb_common.Status_Nomal;
      P_MESSAGE  := 'Processamento Normal.';

      COMMIT;

     EXCEPTION WHEN OTHERS THEN
       P_STATUS   := tdvadm.pkg_glb_common.Status_Erro;
       P_MESSAGE  := 'Erro ao consultar. Erro='||Sqlerrm;
     END;
  
  END SP_GET_CANCELARVIAGEMPED; 
 
  PROCEDURE SP_VLD_CANCELARVIAGEMPED(P_XMLRETORNO      IN CLOB,
                                     P_IDCONSULTA      IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ID%TYPE,
                                     P_ROTA            IN  TDVADM.T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,
                                     P_CODOPERACAOTDV  IN  VARCHAR2,
                                     P_CODOPERACAOWS   IN  VARCHAR2,
                                     P_SEQUENCIA       IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_SEQ%TYPE) is

 --Variável utilizada para guardar mensagem de erro.
 vMsgErro      t_con_freteoper.con_freteoper_obs%type;
 vQryStrInsert t_con_freteoper.con_freteoper_paramqrystr%TYPE;
 vVfNumero     t_con_valefrete.con_conhecimento_codigo%TYPE;
 vVfSerie      t_con_valefrete.con_conhecimento_serie%TYPE;
 vVfRota       t_con_valefrete.glb_rota_codigo%TYPE;
 vVfSaque      t_con_valefrete.con_valefrete_saque%TYPE;
 vTPPagamento  CHAR(2);

BEGIN
  Begin
     
     BEGIN

        SELECT L.CON_FRETEOPER_PARAMQRYSTR
          INTO vQryStrInsert
          FROM T_CON_FRETEOPER L
         WHERE L.CON_FRETEOPER_ID   = P_IDCONSULTA
           AND L.CON_FRETEOPER_ROTA = P_ROTA
           And l.con_freteoper_seq  = P_SEQUENCIA
           and l.cfe_integratdv_cod = P_CODOPERACAOTDV
           and l.cfe_operacoes_cod  = P_CODOPERACAOWS;


          vVfNumero    := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryStrInsert,'VFNumero','=','*'), 'valor', '=', '|');
          vVfSerie     := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryStrInsert,'VFSerie','=','*'), 'valor', '=', '|');
          vVfRota      := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryStrInsert,'VFRota','=','*'), 'valor', '=', '|');
          vVfSaque     := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryStrInsert,'VFSaque','=','*'), 'valor', '=', '|');
          vTPPagamento := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryStrInsert,'IntegraTdv_Cod','=','*'), 'valor', '=', '|');


      EXCEPTION WHEN OTHERS THEN
        vMsgErro := substr(sqlerrm, 1, 90);
      END;

     IF PKG_CFE_FRETE.FN_GET_CHAVEXML(P_XMLRETORNO, 'mensagem.codigo') = '0' THEN


        DELETE T_CON_VFRETEPEDAGIO PED
         WHERE PED.CON_CONHECIMENTO_CODIGO        = vVfNumero   
           AND PED.CON_CONHECIMENTO_SERIE         = vVfSerie    
           AND PED.GLB_ROTA_CODIGO                = vVfRota     
           AND PED.CON_VALEFRETE_SAQUE            = vVfSaque;

        update tdvadm.t_con_freteoper oper
            set OPER.CFE_STATUSFRETEOPER_STATUS = 'OK',
                oper.con_freteoper_retorno      = sysdate,
                oper.con_freteoper_confret      = P_XMLRETORNO,
                oper.con_freteoper_obs          = 'Cancelamento de Viagem realizada com sucesso.'
          where 0=0
            and oper.con_freteoper_id     = P_IDCONSULTA
            and oper.con_freteoper_rota   = P_ROTA
            and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
            and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
            and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;
            
        else
          --Caso o retorno não seja "0" (zero)
          --Código da Mensagem não for zero "Consulta não realizada com sucesso.
          update tdvadm.t_con_freteoper oper
            set OPER.CFE_STATUSFRETEOPER_STATUS = 'IV',
                oper.con_freteoper_retorno = sysdate,
                oper.con_freteoper_confret = P_XMLRETORNO,
                OPER.CON_FRETEOPER_OBS     = PKG_CFE_FRETE.FN_GET_CHAVEXML(P_XMLRETORNO, 'mensagem.descricao')
          where 0=0
            and oper.con_freteoper_id     = P_IDCONSULTA
            and oper.con_freteoper_rota   = P_ROTA
            and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
            and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
            and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;

    END IF;



  EXCEPTION
    --Caso estoure o raise em algum momento eu registro no campo de observação.
    when others then
      --Transfiro a mensagem de erro, para uma variável para poder registrar no campo obs.
      vMsgErro := substr(sqlerrm, 1, 90);

      --atualizo a tabela de freteOperacao
      update tdvadm.t_con_freteoper  oper
        set OPER.CFE_STATUSFRETEOPER_STATUS  = 'ER',
            oper.con_freteoper_obs     = 'Erro: ' || vMsgErro,
            oper.con_freteoper_retorno = sysdate,
            oper.con_freteoper_confret = Trim(P_XMLRETORNO)
      where 0=0
        and oper.con_freteoper_id     = P_IDCONSULTA
        and oper.con_freteoper_rota   = P_ROTA
        and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
        and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
        and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;
  END;
  
END SP_VLD_CANCELARVIAGEMPED;
  
  PROCEDURE SP_SET_ALTERARPARCELAVGM(P_QRYSTR       IN  VARCHAR2,
                                     P_IDCONSULTA   IN  VARCHAR2,
                                     P_ROTA         IN  CHAR,
                                     P_STATUS       OUT CHAR,
                                     P_MESSAGE      OUT VARCHAR2)AS
  V_IDVALIDO          CHAR(1);
  V_TIPO              TDVADM.T_CFE_INTEGRATDV.CFE_INTEGRATDV_COD%TYPE;
  V_QTDELOOP          INTEGER;
  V_EXISTESEQ         INTEGER;

  --variável utilizada para guardar o número da parcela;
  vParcela            VARCHAR2(10);
  vParcelaOper        VARCHAR2(20);

  --variável de controle.
  vControl            Integer;
  vControlB           Integer;

  --Variáveis utilizadas para recuperar valores do Vale de Frete

  vViagemCod          t_vgm_viagem.vgm_viagem_codigo%type;
  vViagemRota         t_vgm_viagem.glb_rota_codigo%type;

  vParcelStatus       VARCHAR2(10);

  Begin
    vParcela           := '';
    vControl           := 0;

    Begin

        /*     TIPO DA CONSULTA    */

        V_TIPO         := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'IntegraTdv_Cod','=','*'), 'valor', '=', '|');
        vParcela       := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFParcelTdv','=','*'), 'valor', '=', '|');
        vParcelaOper   := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFParcelGer','=','*'), 'valor', '=', '|');
        vParcelStatus  := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFParcelIdSt','=','*'), 'valor', '=', '|');

        --Dados do Vale de Frete
        vViagemCod  := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VGViagemCod','=','*'), 'valor', '=', '|');
        vViagemRota := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VGViagemRota','=','*'), 'valor', '=', '|');
 
       /*  SE NÃO FOR ID DE INTEGRAÇÃO DE VALE DE FRETE BLOQUEAMOS */
       IF V_TIPO NOT IN (44) THEN
           P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
           P_MESSAGE := 'Integração Informada não é valida!!';
           RETURN;
       END IF;
       

       IF nvl(vParcelaOper,' NULO') = 'NULO' THEN
          P_STATUS  := pkg_glb_common.Status_Erro;
          P_MESSAGE := 'Codigo da parcela Gerenciadora não valida!';
          RETURN;
       END IF;

        Begin
          --verifico se a solicitação já foi realizada. ( Mesma parcela, no mesmo saque do  mesmo Vale de Frete )


        /********************KLAYTON 07/08/2012************************/
        /*******VERIFICO SE TEM UMA OPER DE AUT E OUTRA DE BLQ*********/
        /**********SE TIVER AUTORIZANDO********************************/
        IF vParcelStatus = '2' THEN

             Select Count(*)
               Into vControl
               From t_con_freteoper oper
              WHERE 0=0
                And oper.con_freteoper_id    = P_IDCONSULTA
                And oper.con_freteoper_rota  = P_ROTA
                And Trim(TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'VFParcelTdv','=','*'), 'valor', '=', '|')) = Trim(vParcela)

                And Trim(TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'IntegraTdv_Cod','=','*'), 'valor', '=', '|')) = Trim(V_TIPO)
                And Trim(TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'VFParcelIdSt','=','*'), 'valor', '=', '|'))   = Trim(vParcelStatus)

                And Trim(TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'VGViagemCod','=','*'), 'valor', '=', '|'))    = Trim(vViagemCod)
                And Trim(TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'VGViagemRota','=','*'), 'valor', '=', '|'))    = Trim(vViagemRota);


             Select Count(*)
               Into vControlb
               From t_con_freteoper oper
              WHERE 0=0
                And oper.con_freteoper_id    = P_IDCONSULTA
                And oper.con_freteoper_rota  = P_ROTA
                And Trim(TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'VFParcelTdv','=','*'), 'valor', '=', '|')) = Trim(vParcela)

                And Trim(TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'IntegraTdv_Cod','=','*'), 'valor', '=', '|')) = Trim(V_TIPO)
                And Trim(TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'VFParcelIdSt','=','*'), 'valor', '=', '|')) = Trim('3')

                And Trim(TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'VGViagemCod','=','*'), 'valor', '=', '|'))    = Trim(vViagemCod)
                And Trim(TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'VGViagemRota','=','*'), 'valor', '=', '|'))    = Trim(vViagemRota);


         ELSE

           Select Count(*)
             Into vControl
             From t_con_freteoper oper
            WHERE 0=0
              And oper.con_freteoper_id    = P_IDCONSULTA
              And oper.con_freteoper_rota  = P_ROTA
              And Trim(TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'VFParcelTdv','=','*'), 'valor', '=', '|')) = Trim(vParcela)

              And Trim(TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'IntegraTdv_Cod','=','*'), 'valor', '=', '|')) = Trim(V_TIPO)
              And Trim(TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'VFParcelIdSt','=','*'), 'valor', '=', '|')) = Trim(vParcelStatus)

             And Trim(TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'VGViagemCod','=','*'), 'valor', '=', '|'))    = Trim(vViagemCod)
             And Trim(TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'VGViagemRota','=','*'), 'valor', '=', '|'))    = Trim(vViagemRota);

         END IF;

        Exception
          --caso ocorra algum erro durante a busca, encerro o processamento.
          When Others Then
            P_STATUS := pkg_glb_common.Status_Erro;
            P_MESSAGE := 'Erro ao tentar buscar dados de Id.' || chr(13) || Sqlerrm;
            Return;
        End;

        --Caso tenha encontrado algum registro.

        IF (vParcelStatus = '2') THEN
           If vControl <> vControlB  Then
             P_STATUS := pkg_glb_common.Status_Erro;
             P_MESSAGE := 'Operação já solicitada.';
             Return;
           End If;
        ELSE
          If (vControl > 0) Then
             P_STATUS := pkg_glb_common.Status_Erro;
             P_MESSAGE := 'Operação já solicitada.';
             Return;
           End If;
        END IF;

        /*     VALIDA ID    */
        V_IDVALIDO := 'N';

        IF V_IDVALIDO = 'N' THEN

           V_QTDELOOP := 0;

           /*     CADASTRA OPERAÇÃO PARA INTEGRAÇÃO DO FRETE      */
           FOR R_CURSOR IN (SELECT K.CFE_INTEGRATDV_COD,
                                    K.CFE_OPERACOES_COD,
                                    K.CFE_OPERATDV_SEQOP,
                                    K.CFE_OPERATDV_SEQINT
                               FROM T_CFE_OPERATDV K
                               WHERE K.CFE_INTEGRATDV_COD = V_TIPO)
           LOOP
              V_QTDELOOP := V_QTDELOOP +1;


               SELECT COUNT(*)+1
                 INTO V_EXISTESEQ
                 FROM T_CON_FRETEOPER K
                 WHERE K.CON_FRETEOPER_ID   = P_IDCONSULTA
                   AND K.CON_FRETEOPER_ROTA = P_ROTA
                   AND K.CFE_INTEGRATDV_COD = R_CURSOR.CFE_INTEGRATDV_COD
                   AND K.CFE_OPERACOES_COD  = R_CURSOR.CFE_OPERACOES_COD;


              INSERT INTO T_CON_FRETEOPER F VALUES(P_IDCONSULTA,
                                                   P_ROTA,
                                                   R_CURSOR.CFE_INTEGRATDV_COD,
                                                   R_CURSOR.CFE_OPERACOES_COD,
                                                   'AG',
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   P_QRYSTR,
                                                   SYSDATE,
                                                   NULL,
                                                   NULL,
                                                   V_EXISTESEQ,
                                                   0);
           END LOOP;

        IF V_QTDELOOP = 0 THEN
           P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
           P_MESSAGE := 'ERRO: NENHUMA OPERAÇÃO CADASTRADA PARA ESSE VALE DE FRETE!!';
          RETURN;
        END IF;

        ELSE
          P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          P_MESSAGE := 'ERRO: ID PARA CADASTRO DE INTEGRAÇÃO DO VALE DE FRETE NÃO VALIDADO!';
          RETURN;
        END IF;

        COMMIT;

    EXCEPTION WHEN OTHERS THEN
          P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          P_MESSAGE := 'ERRO: PKG_CFE_FRETE2.SP_GET_INTEGRACAO, '||sqlerrm;
    END;

  END SP_SET_ALTERARPARCELAVGM;

  PROCEDURE SP_SET_PAGARPARCELAVGM(P_QRYSTR       IN  VARCHAR2,
                                   P_IDCONSULTA   IN  VARCHAR2,
                                   P_ROTA         IN  CHAR,
                                   P_STATUS       OUT CHAR,
                                   P_MESSAGE      OUT VARCHAR2)AS
  V_IDVALIDO CHAR(1);
  V_TIPO     TDVADM.T_CFE_INTEGRATDV.CFE_INTEGRATDV_COD%TYPE;
  V_QTDELOOP INTEGER;
  V_QTDESEQ  INTEGER;

  --Variável utilizada para recuperar número da parcela.
  vParcela  Varchar2(10);
  --Variável de controle
  vControl Integer;

  --Variáveis utilizadas para recuperar valores do Vale de Frete
  vViagemCodigo     t_vgm_viagem.vgm_viagem_codigo%type;
  vViagemRota       t_vgm_viagem.glb_rota_codigo%type;

  vUsuario          tdvadm.t_usu_usuario.usu_usuario_codigo%type;
  vRotaUsuario      tdvadm.t_usu_usuario.glb_rota_codigo%type;

  Begin
    vParcela := '';
    vControl := 0;
    BEGIN

        /*     TIPO DA CONSULTA    */
        V_TIPO := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'IntegraTdv_Cod','=','*'), 'valor', '=', '|');
        vParcela := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFParcelTdv','=','*'), 'valor', '=', '|');

        --Dados do Vale de Frete
        vViagemCodigo := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VGViagemCod','=','*'), 'valor', '=', '|');
        vViagemRota   := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VGViagemRota','=','*'), 'valor', '=', '|');
        vUsuario       := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFUsuarioTDV','=','*'), 'valor', '=', '|');

        vRotaUsuario   := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFRotaUsuarioTDV','=','*'), 'valor', '=', '|');

        IF nvl(vRotaUsuario,'000') = '000' THEN
           P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
           P_MESSAGE := 'Erro: Rota do usuario para pagamento de parcela, não informada!!';
           RETURN;
        END IF;

       /*  SE NÃO FOR ID DE INTEGRAÇÃO DE VALE DE FRETE BLOQUEAMOS */
       IF V_TIPO NOT IN (23) THEN
           P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
           P_MESSAGE := 'ERRO: INTEGRAÇÃO TDV INFORMADA NÃO É VALIDA!';
           RETURN;
        END IF;

        Begin
          --verifico se a solicitação já foi realizada.
          Select Count(*) Into vControl
          From t_con_freteoper oper
          Where
            0=0
            And oper.con_freteoper_id    = P_IDCONSULTA
            And oper.con_freteoper_rota  = P_ROTA
            AND oper.cfe_integratdv_cod  = V_TIPO
            And Trim(TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'VFParcelTdv','=','*'), 'valor', '=', '|')) = Trim(vParcela)
            And Trim(TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'VGViagemCod','=','*'), 'valor', '=', '|')) = Trim(vViagemCodigo)
            And Trim(TDVADM.fn_querystring(TDVADM.fn_querystring(oper.con_freteoper_paramqrystr,'VGViagemRota','=','*'), 'valor', '=', '|')) = Trim(vViagemRota);

        Exception
          --caso ocorra algum erro durante a busca, encerro o processamento.
          When Others Then
            P_STATUS := pkg_glb_common.Status_Erro;
            P_MESSAGE := 'Erro ao tentar buscar dados de Id.' || chr(13) || Sqlerrm;
            Return;
        End;

        --Caso tenha encontrado algum registro.
        If (vControl > 0) Then
          P_STATUS := pkg_glb_common.Status_Erro;
          P_MESSAGE := 'Operação já solicitada.';
          Return;
        End If;


        /*     VALIDA ID    */
        V_IDVALIDO := 'N';

        IF V_IDVALIDO = 'N' THEN

           V_QTDELOOP := 0;

           /*     CADASTRA OPERAÇÃO PARA INTEGRAÇÃO DO FRETE      */
           FOR R_CURSOR IN (SELECT K.CFE_INTEGRATDV_COD,
                                    K.CFE_OPERACOES_COD,
                                    K.CFE_OPERATDV_SEQOP,
                                    K.CFE_OPERATDV_SEQINT
                               FROM T_CFE_OPERATDV K
                               WHERE K.CFE_INTEGRATDV_COD = V_TIPO)
           LOOP
              V_QTDELOOP := V_QTDELOOP +1;


               SELECT COUNT(*)+1
                 INTO V_QTDESEQ
                 FROM T_CON_FRETEOPER K
                 WHERE K.CON_FRETEOPER_ID   = P_IDCONSULTA
                   AND K.CON_FRETEOPER_ROTA = P_ROTA
                   AND K.CFE_INTEGRATDV_COD = R_CURSOR.CFE_INTEGRATDV_COD
                   AND K.CFE_OPERACOES_COD  = R_CURSOR.CFE_OPERACOES_COD;


              INSERT INTO T_CON_FRETEOPER F VALUES(P_IDCONSULTA,
                                                   P_ROTA,
                                                   R_CURSOR.CFE_INTEGRATDV_COD,
                                                   R_CURSOR.CFE_OPERACOES_COD,
                                                   'AG',
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   P_QRYSTR,
                                                   SYSDATE,
                                                   NULL,
                                                   NULL,
                                                   V_QTDESEQ,
                                                   0);
           END LOOP;

        IF V_QTDELOOP = 0 THEN
           P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
           P_MESSAGE := 'ERRO: NENHUMA OPERAÇÃO CADASTRADA PARA ESSE VALE DE FRETE!!';
          RETURN;
        END IF;

        ELSE
          P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          P_MESSAGE := 'ERRO: ID PARA CADASTRO DE INTEGRAÇÃO DO VALE DE FRETE NÃO VALIDADO!';
          RETURN;
        END IF;

        COMMIT;

    EXCEPTION WHEN OTHERS THEN
          P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          P_MESSAGE := 'ERRO: PKG_CFE_FRETE2.SP_GET_INTEGRACAO, '||sqlerrm;
    END;

  END SP_SET_PAGARPARCELAVGM;
  
  PROCEDURE SP_GET_PAGPARCELAVGM(P_QRYSTR       IN  CLOB,
                                 P_IDCONSULTA   IN  NUMBER,
                                 P_ROTA         IN  CHAR,
                                 P_CURSOR       OUT T_CURSOR,
                                 P_STATUS       OUT CHAR,
                                 P_MESSAGE      OUT VARCHAR2) AS
                                 
    V_INSERT              PKG_CFE_FRETE.TpRegTxt;
    V_STATUS              CHAR(1);
    V_MESSAGE             VARCHAR2(200);
    v_ViagemId            NUMBER;
    v_ViagemCliente       NUMBER;
    v_ContratanteDocNum   VARCHAR2(20);
    v_ViagemDocTipo       NUMBER;
    v_ViagemDocNum        VARCHAR2(20);
    v_ViagemParcelaQtde   NUMBER;
    v_ViagemAnttCiot      NUMBER;
    V_CodParcelaOper      T_CON_CALCVALEFRETE.CON_CALCVALEFRETE_CODPAROPER%TYPE;
    V_CodParcelaTdv       T_CON_CALCVALEFRETE.CON_CALCVALEFRETETP_CODIGO%TYPE;
    v_CnpjRota            T_GLB_ROTA.GLB_ROTA_CGC%TYPE;
    
    vViagemCodigo         T_VGM_VIAGEM.VGM_VIAGEM_CODIGO%TYPE;
    vViagemRota           T_VGM_VIAGEM.GLB_ROTA_CODIGO%TYPE;
     
  BEGIN

    BEGIN

      /********************************************************************/
      /**************        VARIAVEIS DO QRYSTR  *************************/
      /********************************************************************/
       
       BEGIN
        
        vViagemCodigo := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VGViagemCod','=','*'), 'valor', '=', '|');
        vViagemRota   := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VGViagemRota','=','*'), 'valor', '=', '|');


        V_CodParcelaOper   := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QRYSTR,'VFParcelGer','=','*'), 'valor', '=', '|');
        V_CodParcelaTdv   := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QRYSTR,'VFParcelTdv','=','*'), 'valor', '=', '|'); 

        v_ViagemParcelaQtde := 1;
       
       END;
       
      /********************************************************************/


      /********************************************************************/
      /*****************     VARIAVEIS DA TABELA DE CIOT    ***************/
      /********************************************************************/
      
      BEGIN
        
        -- Buscando Informação do numero do Ciot
        BEGIN

            SELECT ci.vgm_vgciot_id            ,
                   ci.vgm_vgciot_idcliente     ,
                   ci.vgm_vgciot_numero
              INTO v_ViagemId                  ,
                   v_ViagemCliente             ,
                   v_ViagemAnttCiot
              FROM T_VGM_VGCIOT CI
              WHERE CI.VGM_VIAGEM_CODIGO = vViagemCodigo
                AND CI.GLB_ROTA_CODIGO   = vViagemRota;
                  
        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'Erro ao executar PKG_CFE_FRETE.SP_GET_PAGPARCELAVGM, Erro:'||sqlerrm;
        END;
        
        -- Validando Código da parcela
        if (V_CodParcelaOper is null) or (V_CodParcelaTdv is null) then
           V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
           V_MESSAGE := 'Erro ao solicitar pagamento, codigo da parcela TDV ou gerenciadora não informada!';
           return;
        end if;
        
        -- Documento do contratante
        v_ContratanteDocNum := PKG_CFE_FRETE.ContratanteNumero;

        -- DEFININDO O CONTRANTE E FILIAL
        BEGIN
            SELECT RT.GLB_ROTA_CGC  
              INTO v_CnpjRota 
              FROM T_GLB_ROTA RT 
             WHERE RT.GLB_ROTA_CODIGO = vViagemRota;

             IF TRIM(v_CnpjRota) = PKG_CFE_FRETE.contratanteNumero THEN
                v_ViagemDocTipo     := '88';
                v_ViagemDocNum      := vViagemRota;
             END IF;
         END;
       
       END;
       
      /********************************************************************/
      
      
      /********************************************************************/
      /*****************  CONSTRUINDO ARQUIVO DE INTEGRAÇÃO ***************/
      /********************************************************************/
      
      BEGIN
      
        BEGIN -- VIAGEM ID
          V_INSERT.con_freteoper_id    := P_IDCONSULTA;
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.id';
          V_INSERT.uti_vfintegra_valor := v_ViagemId;
          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_PAGPARCELAVGM, '||sqlerrm;
        END;

        BEGIN -- viagem.id.cliente
          V_INSERT.con_freteoper_id    := P_IDCONSULTA;
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.id.cliente';
          V_INSERT.uti_vfintegra_valor := v_ViagemCliente;
          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_PAGPARCELAVGM, '||sqlerrm;
        END;

        BEGIN -- viagem.contratante.documento.numero

          v_ContratanteDocNum := PKG_CFE_FRETE.ContratanteNumero;

          V_INSERT.con_freteoper_id    := P_IDCONSULTA;
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.contratante.documento.numero';
          V_INSERT.uti_vfintegra_valor := v_ContratanteDocNum;
          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_PAGPARCELAVGM, '||sqlerrm;
        END;

        IF (v_ViagemDocTipo IS NOT NULL) AND (v_ViagemDocNum is NOT NULL)  THEN

           BEGIN -- viagem.unidade.documento.tipo
             V_INSERT.con_freteoper_id    := P_IDCONSULTA;
             V_INSERT.con_freteoper_rota  := P_ROTA;
             V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
             V_INSERT.uti_vfintegra_chave := 'viagem.unidade.documento.tipo';
             V_INSERT.uti_vfintegra_valor := v_ViagemDocTipo;
             PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
           EXCEPTION WHEN OTHERS THEN
             V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
             V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_PAGPARCELAVGM, '||sqlerrm;
           END;

           BEGIN -- viagem.unidade.documento.numero
             V_INSERT.con_freteoper_id    := P_IDCONSULTA;
             V_INSERT.con_freteoper_rota  := P_ROTA;
             V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
             V_INSERT.uti_vfintegra_chave := 'viagem.unidade.documento.numero';
             V_INSERT.uti_vfintegra_valor := v_ViagemDocNum;
             PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
           EXCEPTION WHEN OTHERS THEN
             V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
             V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_PAGPARCELAVGM, '||sqlerrm;
           END;

        END IF;

        BEGIN -- viagem.parcela.qtde
          V_INSERT.con_freteoper_id    := P_IDCONSULTA;
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.parcela.qtde';
          V_INSERT.uti_vfintegra_valor := v_ViagemParcelaQtde;
          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_PAGPARCELAVGM, '||sqlerrm;
        END;

        IF V_CodParcelaOper IN ('1','2') THEN

            BEGIN -- viagem.parcela1.numero.cliente
              V_INSERT.con_freteoper_id    := P_IDCONSULTA;
              V_INSERT.con_freteoper_rota  := P_ROTA;
              V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
              V_INSERT.uti_vfintegra_chave := 'viagem.parcela1.numero.cliente';
              V_INSERT.uti_vfintegra_valor := TO_NUMBER(V_CodParcelaTdv);
              PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
            EXCEPTION WHEN OTHERS THEN
              V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
              V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_PAGPARCELAVGM, '||sqlerrm;
            END;

        else

            BEGIN -- viagem.parcela1.numero
              V_INSERT.con_freteoper_id    := P_IDCONSULTA;
              V_INSERT.con_freteoper_rota  := P_ROTA;
              V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
              V_INSERT.uti_vfintegra_chave := 'viagem.parcela1.numero';
              V_INSERT.uti_vfintegra_valor := V_CodParcelaOper;
              PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
            EXCEPTION WHEN OTHERS THEN
              V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
              V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_PAGPARCELAVGM, '||sqlerrm;
            END;


        END IF;

        BEGIN -- viagem.antt.ciot.numero
        V_INSERT.con_freteoper_id    := P_IDCONSULTA;
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := 'viagem.antt.ciot.numero';
        V_INSERT.uti_vfintegra_valor := v_ViagemAnttCiot;
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
      EXCEPTION WHEN OTHERS THEN
        V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
        V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_PAGPARCELAVGM, '||sqlerrm;
      END;
      
      
      END;
      
      /********************************************************************/
      
      /********************************************************************/
      /******************* RETORNANDO OS VALORES DA INTEGRAÇÃO ************/
      /********************************************************************/
      
      BEGIN

      IF NVL(V_STATUS,tdvadm.pkg_glb_common.Status_Nomal) = tdvadm.pkg_glb_common.Status_Nomal THEN
         
         OPEN P_CURSOR FOR
          SELECT K.UTI_VFINTEGRA_CHAVE CHAVE,
                 K.UTI_VFINTEGRA_VALOR VALOR
            FROM T_UTI_VFINTEGRA K
           WHERE K.CON_FRETEOPER_ID   = P_IDCONSULTA
             AND K.CON_FRETEOPER_ROTA = P_ROTA
          ORDER BY K.UTI_VFINTEGRA_SEQ;
          
          
         P_STATUS   := tdvadm.pkg_glb_common.Status_Nomal;
         P_MESSAGE := 'Processamento Normal.'; 
             
      ELSE
         P_STATUS    := V_STATUS;
         P_MESSAGE   := V_MESSAGE;
      END IF;

      END;
      
      /********************************************************************/
      
    EXCEPTION WHEN OTHERS THEN
      P_STATUS    := tdvadm.pkg_glb_common.Status_Erro;
      P_MESSAGE   := 'Erro ao Gerar arquivo de integração para o ID: '||P_IDCONSULTA||' Rota: '||P_ROTA||' Erro: '||SQLERRM;
    END;
      
    
    DELETE T_UTI_VFINTEGRA D
     WHERE D.CON_FRETEOPER_ID   = P_IDCONSULTA
       AND D.CON_FRETEOPER_ROTA = P_ROTA;

    COMMIT;
    

  END SP_GET_PAGPARCELAVGM;
  
  PROCEDURE SP_VLD_PGTOPARCELAVGM( P_XMLRETORNO      IN  CLOB,
                                   P_IDCONSULTA      IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ID%TYPE,
                                   P_ROTA            IN  TDVADM.T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,
                                   P_CODOPERACAOTDV  IN  VARCHAR2,
                                   P_CODOPERACAOWS   IN  VARCHAR2,
                                   P_SEQUENCIA       IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_SEQ%TYPE
                                 ) IS
   --Variável utilizada para guardar mensagem de erro.
   vMsgErro   t_con_freteoper.con_freteoper_obs%type;
 
   --Variáveis recuperadas da QryString;
   vViagemNumero       T_VGM_VIAGEM.VGM_VIAGEM_CODIGO%TYPE;
   vViagemRota         T_VGM_VIAGEM.GLB_ROTA_CODIGO%TYPE; 

   VVFRETETP_CODIGO    TDVADM.T_CON_CALCVALEFRETE.CON_CALCVALEFRETETP_CODIGO%TYPE;
   VVFRETE_CODPAROPER  TDVADM.T_CON_CALCVALEFRETE.CON_CALCVALEFRETE_CODPAROPER%TYPE;
   vUsuario            tdvadm.t_usu_usuario.usu_usuario_codigo%type;
   VFParcelIdSt        varchar2(02);
   VVRotaAUTPGTO       tdvadm.t_con_calcvalefrete.glb_rota_codigolib%Type;
   VVRotaCax           tdvadm.t_con_calcvalefrete.glb_rota_codigocx%Type;
   vCartaoPgto         tdvadm.t_con_calcvalefrete.con_calcvalefrete_cartao%TYPE;
   vCartaoPgtoPed      tdvadm.t_con_calcvalefrete.con_calcvalefrete_cartao%TYPE;
   vQryString          tdvadm.t_con_freteoper.con_freteoper_paramqrystr%type;
Begin
  BEGIN
    --Verifico se a consulta foi realizada com sucesso.
    IF PKG_CFE_FRETE.FN_GET_CHAVEXML(P_XMLRETORNO, 'mensagem.codigo') = '0' THEN

      --Verifico se o pagamento foi realizado com sucesso.
      IF PKG_CFE_FRETE.FN_GET_CHAVEXML(P_XMLRETORNO, 'mensagem.parcela1.codigo') = '0' THEN

            select oper.con_freteoper_paramqrystr
             into vQryString
             from tdvadm.t_con_freteoper oper
             where 0=0
               and oper.con_freteoper_id     = P_IDCONSULTA
               and oper.con_freteoper_rota   = P_ROTA
               and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
               and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
               and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;


            vViagemNumero       := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryString,'VGViagemCod','=','*'),  'valor', '=', '|');
            vViagemRota         := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryString,'VGViagemRota','=','*'),  'valor', '=', '|'); 
            
            VVFRETETP_CODIGO    := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryString,'VFParcelTdv','=','*'),  'valor', '=', '|');
            VVFRETE_CODPAROPER  := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryString,'VFParcelGer','=','*'),  'valor', '=', '|');
            vUsuario            := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryString,'VFUsuarioTDV','=','*'), 'valor', '=', '|');
            VFParcelIdSt        := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryString,'VFParcelIdSt','=','*'), 'valor', '=', '|');
            VVRotaAUTPGTO       := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryString,'VFRotaUsuarioTDV','=','*'), 'valor', '=', '|');


        --Atualiza os dados da tabela de calculo.
        UPDATE TDVADM.t_Vgm_Parcelas  CALC
          SET CALC.USU_USUARIO_CODIGOPGTO         = vUsuario,
              CALC.VGM_PARCELAS_DTPGTO            = SYSDATE
        WHERE 0=0
          AND CALC.VGM_VIAGEM_CODIGO              = vViagemNumero   
          AND CALC.VGM_VIAGEM_CODIGO              = vViagemRota 
          AND CALC.VGM_PARCELAS_CODPAROPER        = VVFRETE_CODPAROPER;

        --Atualiza a tabela de operação de frete.
        update tdvadm.t_con_freteoper oper
          set
            OPER.CFE_STATUSFRETEOPER_STATUS = STATUS_OK,
            oper.con_freteoper_retorno = sysdate,
            oper.con_freteoper_confret = P_XMLRETORNO,
            oper.con_freteoper_obs     = 'Validação realizada com sucesso'
        where
          0=0
          and oper.con_freteoper_id     = P_IDCONSULTA
          and oper.con_freteoper_rota   = P_ROTA
          and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
          and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
          and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;

      else
         --Caso o pagamento não tenha sido realizada com sucesso.
         update tdvadm.t_con_freteoper oper
          set
            OPER.CFE_STATUSFRETEOPER_STATUS = STATUS_INVALIDO,
            oper.con_freteoper_retorno = sysdate,
            oper.con_freteoper_confret = P_XMLRETORNO,
            OPER.CON_FRETEOPER_OBS     = PKG_CFE_FRETE.FN_GET_CHAVEXML(P_XMLRETORNO, 'mensagem.parcela1.descricao')
        where
          0=0
          and oper.con_freteoper_id     = P_IDCONSULTA
          and oper.con_freteoper_rota   = P_ROTA
          and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
          and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
          and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;
       end if;
    
    ELSE
     --Se o retorno não for igual a zero, a consulta não foi realizada com sucesso.
     update tdvadm.t_con_freteoper oper
      set
        OPER.CFE_STATUSFRETEOPER_STATUS = STATUS_ERRO,
        oper.con_freteoper_retorno = sysdate,
        oper.con_freteoper_confret = P_XMLRETORNO,
        OPER.CON_FRETEOPER_OBS     = PKG_CFE_FRETE.FN_GET_CHAVEXML(P_XMLRETORNO, 'mensagem.descricao')
      where
       0=0
       and oper.con_freteoper_id     = P_IDCONSULTA
       and oper.con_freteoper_rota   = P_ROTA
       and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
       and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
       and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;
     END IF;

   EXCEPTION
    --Caso estoure o raise em algum momento eu registro no campo de observação.
    when others then
      --Transfiro a mensagem de erro, para uma variável para poder registrar no campo obs.
      vMsgErro := substr(sqlerrm, 1, 90);

      --atualizo a tabela de freteOperacao
      update tdvadm.t_con_freteoper  oper
        set
          OPER.CFE_STATUSFRETEOPER_STATUS  = STATUS_ERRO,
          oper.con_freteoper_obs     = 'Erro: ' || vMsgErro,
          oper.con_freteoper_retorno = sysdate,
          oper.con_freteoper_confret = Trim(P_XMLRETORNO)
      where
         0=0
        and oper.con_freteoper_id     = P_IDCONSULTA
        and oper.con_freteoper_rota   = P_ROTA
        and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
        and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
        and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;
  END;
End SP_VLD_PGTOPARCELAVGM;
      
  PROCEDURE SP_GET_ALTSTATUSPARCELAVGM(P_QRYSTR       IN  CLOB,
                                       P_IDCONSULTA   IN  NUMBER,
                                       P_ROTA         IN  CHAR,
                                       P_CURSOR       OUT T_CURSOR,
                                       P_STATUS       OUT CHAR,
                                       P_MESSAGE      OUT VARCHAR2) AS

    V_INSERT              PKG_CFE_FRETE.TpRegTxt;
    V_STATUS              CHAR(1);
    V_MESSAGE             VARCHAR2(200);
    v_ViagemId            NUMBER;
    v_ViagemCliente       NUMBER;
    v_ContratanteDocNum   VARCHAR2(20);
    v_ViagemDocTipo       NUMBER;
    v_ViagemDocNum        VARCHAR2(20);
    v_ViagemParcelaQtde   NUMBER;
    v_ViagemAnttCiot      NUMBER;
    vViagemCodigo         T_VGM_VIAGEM.VGM_VIAGEM_CODIGO%TYPE; 
    vViagemRota           T_VGM_VIAGEM.GLB_ROTA_CODIGO%TYPE;
    V_CodParcelaOper      T_CON_CALCVALEFRETE.CON_CALCVALEFRETE_CODPAROPER%TYPE;
    V_CodParcelaTdv       T_CON_CALCVALEFRETE.CON_CALCVALEFRETETP_CODIGO%TYPE;
    V_StatusParcel        T_CFE_STATUSPARC.CFE_STATUSPARC_ID%TYPE;
    v_CnpjRota            T_GLB_ROTA.GLB_ROTA_CGC%TYPE;

  BEGIN

    BEGIN

       /********************************************************************/
       /**************        VARIAVEIS DO QRYSTR  *************************/
       /********************************************************************/

       BEGIN

         vViagemCodigo := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VGViagemCod','=','*'), 'valor', '=', '|');
         vViagemRota   := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VGViagemRota','=','*'), 'valor', '=', '|');

         V_CodParcelaOper  := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QRYSTR,'VFParcelGer','=','*'), 'valor', '=', '|');
         V_CodParcelaTdv   := trim(TDVADM.fn_querystring(TDVADM.fn_querystring(P_QRYSTR,'VFParcelTdv','=','*'), 'valor', '=', '|'));
         V_StatusParcel    := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QRYSTR,'VFParcelIdSt','=','*'), 'valor', '=', '|');

         v_ViagemParcelaQtde := 1;

       END;

       /********************************************************************/


       /********************************************************************/
       /*****************     VARIAVEIS DA TABELA DE CIOT    ***************/
       /********************************************************************/
       
       BEGIN
         
         BEGIN

            SELECT ci.vgm_vgciot_id            ,
                   ci.vgm_vgciot_idcliente     ,
                   ci.vgm_vgciot_numero
              INTO v_ViagemId                  ,
                   v_ViagemCliente             ,
                   v_ViagemAnttCiot
              FROM t_vgm_vgciot CI
              WHERE ci.vgm_viagem_codigo = vViagemCodigo
                and ci.glb_rota_codigo   = vViagemRota;
                  
         EXCEPTION WHEN OTHERS THEN
            V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
            V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_ALTSTATUSPARCELAVGM, '||sqlerrm;
         END;

         v_ContratanteDocNum := PKG_CFE_FRETE.ContratanteNumero;

         -- DEFININDO O CONTRANTE E FILIAL
         BEGIN
             SELECT RT.GLB_ROTA_CGC  INTO v_CnpjRota FROM T_GLB_ROTA RT WHERE RT.GLB_ROTA_CODIGO = vViagemRota;

             IF TRIM(v_CnpjRota) = PKG_CFE_FRETE.contratanteNumero THEN
                v_ViagemDocTipo     := '88';
                v_ViagemDocNum      := vViagemRota;
             END IF;
         END;
       
       END;
      
       /********************************************************************/
      
       /********************************************************************/
       /********************    CRIANDO ARQUIVO INTEGRAÇÃO   ***************/
       /********************************************************************/
       
       BEGIN
      
        BEGIN -- VIAGEM ID
          V_INSERT.con_freteoper_id    := P_IDCONSULTA;
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.id';
          V_INSERT.uti_vfintegra_valor := v_ViagemId;
          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_ALTSTATUSPARCELAVGM, '||sqlerrm;
        END;

        BEGIN -- viagem.id.cliente
          V_INSERT.con_freteoper_id    := P_IDCONSULTA;
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.id.cliente';
          V_INSERT.uti_vfintegra_valor := v_ViagemCliente;
          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_ALTSTATUSPARCELAVGM, '||sqlerrm;
        END;

        BEGIN -- viagem.contratante.documento.numero

          v_ContratanteDocNum := PKG_CFE_FRETE.ContratanteNumero;

          V_INSERT.con_freteoper_id    := P_IDCONSULTA;
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.contratante.documento.numero';
          V_INSERT.uti_vfintegra_valor := v_ContratanteDocNum;
          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_ALTSTATUSPARCELAVGM, '||sqlerrm;
        END;

        IF (v_ViagemDocTipo IS NOT NULL) AND (v_ViagemDocNum is NOT NULL)  THEN

           BEGIN -- viagem.unidade.documento.tipo
             V_INSERT.con_freteoper_id    := P_IDCONSULTA;
             V_INSERT.con_freteoper_rota  := P_ROTA;
             V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
             V_INSERT.uti_vfintegra_chave := 'viagem.unidade.documento.tipo';
             V_INSERT.uti_vfintegra_valor := v_ViagemDocTipo;
             PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
           EXCEPTION WHEN OTHERS THEN
             V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
             V_MESSAGE := 'ERRO: PKG_CFE_FRETE2.SP_GET_ALTSTATUSPARCELAVGM, '||sqlerrm;
           END;

           BEGIN -- viagem.unidade.documento.numero
             V_INSERT.con_freteoper_id    := P_IDCONSULTA;
             V_INSERT.con_freteoper_rota  := P_ROTA;
             V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
             V_INSERT.uti_vfintegra_chave := 'viagem.unidade.documento.numero';
             V_INSERT.uti_vfintegra_valor := v_ViagemDocNum;
             PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
           EXCEPTION WHEN OTHERS THEN
             V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
             V_MESSAGE := 'ERRO: PKG_CFE_FRETE2.SP_GET_ALTSTATUSPARCELAVGM, '||sqlerrm;
           END;

        END IF;

        BEGIN -- viagem.parcela.qtde
          V_INSERT.con_freteoper_id    := P_IDCONSULTA;
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.parcela.qtde';
          V_INSERT.uti_vfintegra_valor := v_ViagemParcelaQtde;
          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE2.SP_GET_ALTSTATUSPARCELAVGM, '||sqlerrm;
        END;

        BEGIN -- viagem.parcela1.status.id
          V_INSERT.con_freteoper_id    := P_IDCONSULTA;
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.parcela1.status.id';
          V_INSERT.uti_vfintegra_valor := V_StatusParcel;
          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE2.SP_GET_ALTSTATUSPARCELAVGM, '||sqlerrm;
        END;

        IF V_CodParcelaOper IN ('1','2') THEN

        BEGIN -- viagem.parcela1.numero.cliente
          V_INSERT.con_freteoper_id    := P_IDCONSULTA;
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.parcela1.numero.cliente';
          V_INSERT.uti_vfintegra_valor := TO_NUMBER(V_CodParcelaTdv);
          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE2.SP_GET_ALTSTATUSPARCELAVGM, '||sqlerrm;
        END;

        else

        BEGIN -- viagem.parcela1.numero
          V_INSERT.con_freteoper_id    := P_IDCONSULTA;
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.parcela1.numero';
          V_INSERT.uti_vfintegra_valor := V_CodParcelaOper;
          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE2.SP_GET_ALTERARSTATUSPARCELA, '||sqlerrm;
        END;
        END IF;

        BEGIN -- viagem.antt.ciot.numero
          V_INSERT.con_freteoper_id    := P_IDCONSULTA;
          V_INSERT.con_freteoper_rota  := P_ROTA;
          V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
          V_INSERT.uti_vfintegra_chave := 'viagem.antt.ciot.numero';
          V_INSERT.uti_vfintegra_valor := v_ViagemAnttCiot;
          PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, P_MESSAGE);
        EXCEPTION WHEN OTHERS THEN
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE2.SP_GET_ALTSTATUSPARCELAVGM, '||sqlerrm;
        END;
        
      END;
      
       /********************************************************************/
      
      
       /********************************************************************/
       /****************RETORNANDO ARQUIVO DE INTEGRAÇÃO *******************/
       /********************************************************************/
      
        BEGIN
        	   
          if nvl(V_STATUS,pkg_glb_common.Status_Nomal) = pkg_glb_common.Status_Nomal then  
           
             OPEN P_CURSOR FOR
             SELECT K.UTI_VFINTEGRA_CHAVE CHAVE,
                    K.UTI_VFINTEGRA_VALOR VALOR
               FROM T_UTI_VFINTEGRA K
              WHERE K.CON_FRETEOPER_ID   = P_IDCONSULTA
                AND K.CON_FRETEOPER_ROTA = P_ROTA
              ORDER BY K.UTI_VFINTEGRA_SEQ;
              
              
              P_STATUS   := tdvadm.pkg_glb_common.Status_Nomal;
              P_MESSAGE := 'Processamento Normal.';
              
          else
              P_STATUS    := V_STATUS;
              P_MESSAGE   := V_MESSAGE;
          end if;  
        
        END;
        
       /********************************************************************/

    EXCEPTION WHEN OTHERS THEN
      P_STATUS    := tdvadm.pkg_glb_common.Status_Erro;
      P_MESSAGE   := 'Erro ao consultar. Erro='||SQLERRM;
    END;

    DELETE T_UTI_VFINTEGRA D
      WHERE D.CON_FRETEOPER_ID   = P_IDCONSULTA
        AND D.CON_FRETEOPER_ROTA = P_ROTA;
        
    COMMIT;    

  END SP_GET_ALTSTATUSPARCELAVGM;
  
  PROCEDURE SP_VLD_ALTRSTATUSPARCVGM( P_XMLRETORNO      IN  CLOB,
                                      P_IDCONSULTA      IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_ID%TYPE,
                                      P_ROTA            IN  TDVADM.T_GLB_ROTA.GLB_ROTA_CODIGO%TYPE,
                                      P_CODOPERACAOTDV  IN  VARCHAR2,
                                      P_CODOPERACAOWS   IN  VARCHAR2,
                                      P_SEQUENCIA       IN  TDVADM.T_CON_FRETEOPER.CON_FRETEOPER_SEQ%TYPE
                                    ) is
 
   --Constants privadas
   STATUS_OK       CONSTANT CHAR(02) := 'OK';
   STATUS_INVALIDO CONSTANT CHAR(02) := 'IV';
   STATUS_ERRO     CONSTANT CHAR(02) := 'ER';
 
   --Variável utilizada para guardar mensagem de erro.
   vMsgErro   t_con_freteoper.con_freteoper_obs%type;

   --Variáveis recuperadas da QryString;
   VVFRETE_CODIGO      TDVADM.T_CON_CALCVALEFRETE.CON_CONHECIMENTO_CODIGO%TYPE;
   VVFRETE_SERIE       TDVADM.T_CON_CALCVALEFRETE.CON_CONHECIMENTO_SERIE%TYPE;
   VVFRETE_ROTA        TDVADM.T_CON_CALCVALEFRETE.GLB_ROTA_CODIGO%TYPE;
   VVFRETE_SAQUE       TDVADM.T_CON_CALCVALEFRETE.CON_VALEFRETE_SAQUE%TYPE;
   VVFRETETP_CODIGO    TDVADM.T_CON_CALCVALEFRETE.CON_CALCVALEFRETETP_CODIGO%TYPE;
   VVFRETE_CODPAROPER  TDVADM.T_CON_CALCVALEFRETE.CON_CALCVALEFRETE_CODPAROPER%TYPE;
   vUsuario            tdvadm.t_usu_usuario.usu_usuario_codigo%type;
   VFParcelIdSt        varchar2(2);
   VVRotaAUTPGTO       tdvadm.t_con_calcvalefrete.glb_rota_codigolib%Type;
   vQryString          tdvadm.t_con_freteoper.con_freteoper_paramqrystr%type;
   vViagemNumero       tdvadm.t_vgm_viagem.vgm_viagem_codigo%type; 
   vViagemRota         tdvadm.t_vgm_viagem.glb_rota_codigo%type;


begin
 BEGIN
   --Verifico se a consulta foi realizada com sucesso.
   IF PKG_CFE_FRETE.FN_GET_CHAVEXML(P_XMLRETORNO, 'mensagem.codigo') = '0' THEN

     --Verifico se a alteração foi realizada com sucesso.
     
     IF instr(lower(PKG_CFE_FRETE.FN_GET_CHAVEXML(P_XMLRETORNO, 'mensagem.parcela1.descricao')), 'operacao realizada com sucesso') > 0 THEN

        --Atualiza a tabela de operação de frete.
        update tdvadm.t_con_freteoper oper
           set OPER.CFE_STATUSFRETEOPER_STATUS = STATUS_OK,
               oper.con_freteoper_retorno      = sysdate,
               oper.con_freteoper_confret      = P_XMLRETORNO,
               oper.con_freteoper_obs          = 'Validação realizada com sucesso'
         where 0 = 0
           and oper.con_freteoper_id = P_IDCONSULTA
           and oper.con_freteoper_rota = P_ROTA
           and oper.CFE_INTEGRATDV_COD = P_CODOPERACAOTDV
           and oper.CFE_OPERACOES_COD = P_CODOPERACAOWS
           and OPER.CON_FRETEOPER_SEQ = P_SEQUENCIA;


        --busco a QryString para recuperar valores.
        select oper.con_freteoper_paramqrystr
          into vQryString
          from tdvadm.t_con_freteoper oper
         where 0 = 0
           and oper.con_freteoper_id = P_IDCONSULTA
           and oper.con_freteoper_rota = P_ROTA
           and oper.CFE_INTEGRATDV_COD = P_CODOPERACAOTDV
           and oper.CFE_OPERACOES_COD = P_CODOPERACAOWS
           and OPER.CON_FRETEOPER_SEQ = P_SEQUENCIA;

        --Caso a validação tenha ocorrido com sucesso, recupero os valores do VALE da QryString;
         vViagemNumero       := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryString,'VGViagemCod','=','*'),  'valor', '=', '|');
         vViagemRota         := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryString,'VGViagemRota','=','*'),  'valor', '=', '|');

         VVFRETETP_CODIGO    := trim(TDVADM.fn_querystring(TDVADM.fn_querystring(vQryString,'VFParcelTdv','=','*'),  'valor', '=', '|'));
         VVFRETE_CODPAROPER  := trim(TDVADM.fn_querystring(TDVADM.fn_querystring(vQryString,'VFParcelGer','=','*'),  'valor', '=', '|'));
         vUsuario            := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryString,'VFUsuarioTDV','=','*'), 'valor', '=', '|');
         VFParcelIdSt        := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryString,'VFParcelIdSt','=','*'), 'valor', '=', '|');
         VVRotaAUTPGTO       := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryString,'VFRotaUsuarioTDV','=','*'), 'valor', '=', '|');

       --caso a alateração seja para liberação, atualizo os dados,
       if Trim(VFParcelIdSt) = '2' then
         
         --Atualiza os dados da tabela de calculo.
          UPDATE TDVADM.T_VGM_PARCELAS  CALC
             SET CALC.Usu_Usuario_Codigoliberou     = vUsuario,
                 CALC.VGM_PARCELAS_DTLIBERACAO      = SYSDATE,
                 calc.usu_usuario_bloqueou          = null,
                 calc.vgm_parcelas_dtbloqueio       = null
           WHERE 0=0
             AND CALC.GLB_ROTA_CODIGO              = vViagemRota
             AND CALC.VGM_VIAGEM_CODIGO            = vViagemNumero
             AND CALC.VGM_PARCELAS_CODPAROPER      = VVFRETE_CODPAROPER;
            
              
       end if;

       --caso a alteração seja de bloqueio.
       if Trim(VFParcelIdSt) = '3' then
         --Atualiza os dados da tabela de calculo.
          UPDATE TDVADM.T_VGM_PARCELAS  CALC
             SET calc.usu_usuario_bloqueou           = vUsuario,
                 calc.vgm_parcelas_dtbloqueio        = sysdate,
                 calc.Usu_Usuario_Codigoliberou      = NULL,
                 calc.vgm_parcelas_dtliberacao       = NULL
          WHERE 0=0
            AND CALC.GLB_ROTA_CODIGO                 = vViagemRota
            AND CALC.VGM_VIAGEM_CODIGO               = vViagemNumero
            AND CALC.VGM_PARCELAS_CODPAROPER         = VVFRETE_CODPAROPER;
            
       end if;


       ELSE
         --Caso a alteração não tenha sido realizada com sucesso.
         update tdvadm.t_con_freteoper oper
          set
            OPER.CFE_STATUSFRETEOPER_STATUS = STATUS_INVALIDO,
            oper.con_freteoper_retorno = sysdate,
            oper.con_freteoper_confret = P_XMLRETORNO,
            OPER.CON_FRETEOPER_OBS     = PKG_CFE_FRETE.FN_GET_CHAVEXML(P_XMLRETORNO, 'mensagem.parcela1.descricao')
        where
          0=0
          and oper.con_freteoper_id     = P_IDCONSULTA
          and oper.con_freteoper_rota   = P_ROTA
          and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
          and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
          and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;
     end if;
   Else
      --Se o retorno não for igual a zero, a consulta não foi realizada com sucesso.
      update tdvadm.t_con_freteoper oper
        set
          OPER.CFE_STATUSFRETEOPER_STATUS = STATUS_ERRO,
          oper.con_freteoper_retorno = sysdate,
          oper.con_freteoper_confret = P_XMLRETORNO,
          OPER.CON_FRETEOPER_OBS     = PKG_CFE_FRETE.FN_GET_CHAVEXML(P_XMLRETORNO, 'mensagem.descricao')
      where
        0=0
        and oper.con_freteoper_id     = P_IDCONSULTA
        and oper.con_freteoper_rota   = P_ROTA
        and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
        and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
        and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;
    END IF;

 EXCEPTION
    --Caso estoure o raise em algum momento eu registro no campo de observação.
    when others then
      --Transfiro a mensagem de erro, para uma variável para poder registrar no campo obs.
      vMsgErro := substr(sqlerrm, 1, 90);

      --atualizo a tabela de freteOperacao
      update tdvadm.t_con_freteoper  oper
        set
          OPER.CFE_STATUSFRETEOPER_STATUS  = STATUS_ERRO,
          oper.con_freteoper_obs     = 'Erro: ' || vMsgErro,
          oper.con_freteoper_retorno = sysdate,
          oper.con_freteoper_confret = Trim(P_XMLRETORNO)
      where
         0=0
        and oper.con_freteoper_id     = P_IDCONSULTA
        and oper.con_freteoper_rota   = P_ROTA
        and oper.CFE_INTEGRATDV_COD   = P_CODOPERACAOTDV
        and oper.CFE_OPERACOES_COD    = P_CODOPERACAOWS
        and OPER.CON_FRETEOPER_SEQ    = P_SEQUENCIA;
  END;
end SP_VLD_ALTRSTATUSPARCVGM;

  PROCEDURE SP_GETPROPERTIES_FTP(P_TIPO_CODIGO NUMBER,
                                 P_STATUS OUT CHAR,
                                 P_MESSAGE OUT VARCHAR2,
                                 P_CURSOR  OUT TYPES.cursorType)
     /**********************************************************************************************
    * ROTINA           : SP_GETPROPERTIES_FTP                                                      *
    * PROGRAMA         : Monitor Frete Eletronico                                                  *
    * ANALISTA         : Diego Lírio                                                               *
    * DESENVOLVEDOR    : Diego Lírio                                                               *
    * DATA DE CRIACAO  : 04/06/2013                                                                *
    * BANCO            : ORACLE-TDP                                                                *
    * EXECUTADO POR    :                                                                           *
    * ALIMENTA         :                                                                           *
    * FUNCINALIDADE    : Pega propriedades do Ftp: link ftp, user, senha e diretorio temp no WS    *
    * ATUALIZA         :                                                                           *
    * PARTICULARIDADES :                                                                           *                                           
    * PARAM. OBRIGAT.  : P_STATUS -> RETORNA STATUS DA PROC.                                       *
    *                    P_MESSAGE -> MESSAGE DA PROC.                                             *
    *                    P_CURSOR  -> RETORNA PROPERTIES DO FTP                                    *
    ***********************************************************************************************/                                    
    IS
    BEGIN
       BEGIN
          OPEN P_CURSOR FOR
          /*******************************************************************************
          * IPFTP   -> RETORNA O IP DO SERVIDOR ONDE SERA FEITO O FTP.                   *
          * USUARIO -> USUARIO DE ACESSO AO FTP.                                         *
          * SENHA   -> SENHA DE ACESSO AO FTP.                                           *
          *******************************************************************************/
              SELECT V.USU_VARSIS_IPFTP IP_FTP,
                     '/certificado/' LOCAL,
                     V.USU_VARSIS_USER  USUARIO,
                     V.USU_VARSIS_SENHA SENHA
              FROM T_USU_VARSIS V
              WHERE V.USU_VARSIS_TPCODIGO = P_TIPO_CODIGO;
              
              P_STATUS := 'N';
              P_MESSAGE := 'PROPRIEDADES DO FTP RETORNADO COM SUCESSO!';
       EXCEPTION     
          WHEN OTHERS THEN
              P_STATUS := 'E';
              P_MESSAGE := 'ERRO AO PEGAR PROPRIEDADES DO FTP!'||CHR(13)||SQLERRM;          
       END;   
    END SP_GETPROPERTIES_FTP;   
  
  FUNCTION FN_GET_MAQUINAPORIP(P_IPLOCAL IN VARCHAR2) 
    RETURN VARCHAR2                            
  IS
    vCodigoMaquina  tdvadm.t_int_maquinas.int_maquinas_codigo%type;  
  BEGIN
    
    BEGIN     
      -- busco o código da maquina pela tabela de usuário
      -- como foi adicionado os servidores como usuário por causa dos parametros
      -- o código do usuário é o mesmo que da t_int_maquinas
      SELECT U.USU_USUARIO_CODIGO
      INTO VCODIGOMAQUINA
      FROM TDVADM.T_USU_USUARIO U
      WHERE 0=0
      AND U.USU_USUARIO_IPMAQUINA = P_IPLOCAL
      AND ROWNUM = 1;
      
    EXCEPTION WHEN OTHERS THEN
      RAISE_APPLICATION_ERROR(-21000, SQLERRM||' TRACE: '||DBMS_UTILITY.format_error_backtrace);
    END;
       
    RETURN vCodigoMaquina;
  END FN_GET_MAQUINAPORIP;  
  
  FUNCTION FN_GET_IPCONTINGENCIA(P_IPLOCAL IN VARCHAR2) 
    RETURN VARCHAR2                            
  IS
    vCodigoMaquina  tdvadm.t_int_maquinas.int_maquinas_codigo%type; 
    vIpContingencia tdvadm.t_int_maquinas.int_maquinas_ipcontingencia%type; 
  BEGIN
    
    BEGIN           
      vCodigoMaquina := FN_GET_MAQUINAPORIP(P_IPLOCAL);
    
      -- busco o ip de contingencia da maquina, pra poder mudar as integrações para o ip de contingencia
      SELECT M.INT_MAQUINAS_IPCONTINGENCIA
      INTO VIPCONTINGENCIA
      FROM TDVADM.T_INT_MAQUINAS M
      WHERE 0=0
      AND TRIM(UPPER(M.INT_MAQUINAS_CODIGO)) = TRIM(UPPER(vCodigoMaquina));
      
    EXCEPTION WHEN OTHERS THEN
      RAISE_APPLICATION_ERROR(-21000, SQLERRM||' TRACE: '||DBMS_UTILITY.format_error_backtrace);
    END;
       
    RETURN vIpContingencia;
  END FN_GET_IPCONTINGENCIA;   
    
  PROCEDURE SP_GET_STATUSONOFF(P_IPLOCAL     IN  VARCHAR2,
                               P_STATUSONOFF OUT VARCHAR2,
                               P_STATUS      OUT CHAR,
                               P_MESSAGE     OUT VARCHAR2)
  IS
    /******************************************************
     * P_STATUSONOFF: tem tipos especificos: 
     * OnLine, OffLine, None
     * na aplicação foi criado um enum com este tipos
     * se retornar alguma coisa diferente vai dar erro 
     * ao tentar fazer typecast
    ******************************************************/
    vStatus varchar2(1);
  BEGIN
    BEGIN
      
      select nvl(m.int_maquinas_online, 'N') -- N = off line
      into vStatus 
      from tdvadm.t_int_maquinas m
      where 0=0
      and trim(m.int_maquinas_ip) = P_IPLOCAL
      and to_date(m.int_maquinas_logon, 'DD/MM/YYYY HH24:MI') = (select max(to_date(mm.int_maquinas_logon, 'DD/MM/YYYY HH24:MI'))
                                                                 from tdvadm.t_int_maquinas mm
                                                                 where 0=0
                                                                 and mm.int_maquinas_ip = m.int_maquinas_ip);                                                                 
            
      P_STATUSONOFF := case upper(vStatus)
                         when 'S' then 'OnLine'
                         when 'N' then 'OffLine'
                         else 'NONE'
                       end;      
      
      P_STATUS      := 'N';
      P_MESSAGE     := 'OK';
    EXCEPTION
      WHEN OTHERS THEN
        P_STATUSONOFF := 'None';
        P_STATUS      := 'E';
        P_MESSAGE     := SQLERRM||' TRACE: '||DBMS_UTILITY.format_error_backtrace; 
    END;
  END SP_GET_STATUSONOFF;                                  
  
  PROCEDURE SP_GET_INCONTINGENCIA(P_IPLOCAL        IN  VARCHAR2,
                                  P_INCONTINGENCIA OUT CHAR,
                                  P_STATUS         OUT CHAR,
                                  P_MESSAGE        OUT VARCHAR2)
  IS
    vStatusOnOff varchar2(10);
  BEGIN
    BEGIN
      SP_GET_STATUSONOFF(P_IPLOCAL, vStatusOnOff, P_STATUS, P_MESSAGE);  
      P_INCONTINGENCIA := CASE  upper(vStatusOnOff)
                            WHEN 'OFFLINE' THEN 'S' -- SIM, ESTÁ EM CONTINGENCIA
                            WHEN 'ONLINE' THEN 'N' -- NÃO ESTÁ EM CONTINGENCIA
                            ELSE 'N'
                          END;
      P_STATUS  := 'N';
      P_MESSAGE := 'OK';      
    EXCEPTION
      WHEN OTHERS THEN
        P_INCONTINGENCIA := 'N';
        P_STATUS  := 'E';
        P_MESSAGE := SQLERRM||' TRACE: '||DBMS_UTILITY.format_error_backtrace;
    END;
  END SP_GET_INCONTINGENCIA;                                  
  
  PROCEDURE SP_SET_MAQUINAONOFF(P_IPLOCAL        IN  VARCHAR2,
                                P_ONLINE         IN  CHAR,
                                P_STATUS         OUT CHAR,
                                P_MESSAGE        OUT VARCHAR2)

  IS
    vCodigoMaquina  tdvadm.t_int_maquinas.int_maquinas_codigo%type;  
  BEGIN
    BEGIN     
      -- busco o código da maquina pela tabela de usuário
      -- como foi adicionado os servidores como usuário por causa dos parametros
      -- o código do usuário é o mesmo que da t_int_maquinas
      vCodigoMaquina := FN_GET_MAQUINAPORIP(P_IPLOCAL);
    
      -- atualizo para off pelo ip e pra tentar evitar de pegar mais de uma maquina com o mesmo ip
      -- uso o código da usuario conforme acima.
      UPDATE TDVADM.T_INT_MAQUINAS M
      SET M.INT_MAQUINAS_ONLINE = P_ONLINE -- N = OFFLINE, S = ONLINE
      WHERE 0=0
      AND M.INT_MAQUINAS_IP = P_IPLOCAL
      AND TRIM(UPPER(M.INT_MAQUINAS_CODIGO)) = TRIM(UPPER(VCODIGOMAQUINA));    
      COMMIT;    
          
      P_STATUS  := 'N';
      P_MESSAGE := 'OK';        
    EXCEPTION 
      WHEN OTHERS THEN
        P_STATUS  := 'E';
        P_MESSAGE := SQLERRM||' TRACE: '||DBMS_UTILITY.format_error_backtrace;        
    END;        
  END SP_SET_MAQUINAONOFF;   
                                  
  PROCEDURE SP_SET_CONTINGENCIA(P_IPLOCAL        IN  VARCHAR2,
                                P_STATUS         OUT CHAR,
                                P_MESSAGE        OUT VARCHAR2)
  IS
    vIpContingencia tdvadm.t_int_maquinas.int_maquinas_ipcontingencia%type;
  BEGIN
    BEGIN      
      -- SETO A MAQUINA COMO OFFLINE PASSANDO "N"
      SP_SET_MAQUINAONOFF(P_IPLOCAL, 'N', P_STATUS, P_MESSAGE);
             
      -- busco o ip de contingencia da maquina, pra poder mudar as integrações para o ip de contingencia
      vIpContingencia := FN_GET_IPCONTINGENCIA(P_IPLOCAL);
      
      -- muda todas as integrações deste ip para o ip de contingencia na tabela t_cfe_integratdv
      UPDATE TDVADM.T_CFE_INTEGRATDV I
      SET I.CFE_INTEGRATDV_IPSERVER = vIpContingencia
      WHERE 0=0
      AND I.CFE_INTEGRATDV_IPSERVER = P_IPLOCAL; 
      COMMIT;      
      
      P_STATUS  := 'N';
      P_MESSAGE := 'IP: '||P_IPLOCAL||' SETADO COMO CONTINGENCIA';        
    EXCEPTION 
      WHEN OTHERS THEN
        P_STATUS  := 'E';
        P_MESSAGE := SQLERRM||' TRACE: '||DBMS_UTILITY.format_error_backtrace;        
    END;
  END SP_SET_CONTINGENCIA;                                       
    
  PROCEDURE SP_SET_RESTORECONTINGENCIA(P_IPLOCAL        IN  VARCHAR2,
                                       P_STATUS         OUT CHAR,
                                       P_MESSAGE        OUT VARCHAR2)
   
  IS 
  BEGIN
    BEGIN
    
      -- SETO A MAQUINA COMO ONLINE PASSANDO "S"
      SP_SET_MAQUINAONOFF(P_IPLOCAL, 'S', P_STATUS, P_MESSAGE);  
      
      -- VOLTO TODAS AS INTEGRAÇÕES DO "P_IPLOCAL" QUE ESTÁ NO IP DE CONTINGENCIA(tdvadm.t_int_maquinas.int_maquinas_ipcontingencia)
      UPDATE TDVADM.T_CFE_INTEGRATDV I
      SET I.CFE_INTEGRATDV_IPSERVER = P_IPLOCAL
      WHERE 0=0
      AND I.CFE_INTEGRATDV_IPOFICIAL = P_IPLOCAL; 
      COMMIT; 
              
      P_STATUS  := 'N';
      P_MESSAGE := 'IP: '||P_IPLOCAL||' RESTORNADO COMO OFICIAL';        
    EXCEPTION 
      WHEN OTHERS THEN
        P_STATUS  := 'E';
        P_MESSAGE := SQLERRM||' TRACE: '||DBMS_UTILITY.format_error_backtrace;        
    END;    
  END SP_SET_RESTORECONTINGENCIA;                                         
  
  Function Fn_GetCpfMotorista(pConjunto t_frt_conjveiculo.frt_conjveiculo_codigo%type) return varchar2 as
  vCpfMotorista t_frt_motorista.frt_motorista_cpf%type;
  begin
    
    begin
      
       /****************************************************/
       /** BUSCA O CPF DO MOTORISTA PELO O CODIGO DO FROTA**/
       /****************************************************/
       select m.frt_motorista_cpf
         into vCpfMotorista
         from t_frt_conjunto l,
              t_frt_motorista m
        where l.frt_conjveiculo_codigo = pConjunto
          and l.frt_motorista_codigo   = m.frt_motorista_codigo;
      
       return vCpfMotorista; 
           
    exception when others then
      return null;
    end;
        
  end Fn_GetCpfMotorista;  
  
  Procedure Sp_Set_Integravffrota(p_qrystr       in  varchar2,
                                  p_idconsulta   in  varchar2,
                                  p_rota         in  char,
                                  p_status       out char,
                                  p_message      out varchar2)as
  V_IDVALIDO       CHAR(2);
  V_TIPO           TDVADM.T_CFE_INTEGRATDV.CFE_INTEGRATDV_COD%TYPE;
  V_QTDELOOP       INTEGER;
  V_EXISTINT       INTEGER;
  V_STATUSOPER     TDVADM.T_CON_FRETEOPER.CFE_STATUSFRETEOPER_STATUS%TYPE;
  V_QTDEINTEGRA    INTEGER;

  vExisteCiotVf    INTEGER;
  vValeFreteCod    t_con_valefrete.con_conhecimento_codigo%TYPE;
  vValeFreteSerie  t_con_valefrete.con_conhecimento_serie%TYPE;
  vValeFreteRota   t_con_valefrete.glb_rota_codigo%TYPE;
  vValeFreteSaque  t_con_valefrete.con_valefrete_saque%TYPE;
  vQryStr          varchar2(4000);
  BEGIN

    Begin

        /*************************************************************************/
        /***                     EXTRAINDO VALORES DA QRYSTRING                ***/
        /*************************************************************************/
        
        begin
          
           V_TIPO          := '90';
           vValeFreteCod   := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFNumero','=','*'), 'valor', '=', '|');
           vValeFreteSerie := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFSerie','=','*'), 'valor', '=', '|');
           vValeFreteRota  := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFRota','=','*'), 'valor', '=', '|');
           vValeFreteSaque := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFSaque','=','*'), 'valor', '=', '|');
          
        end;
        
        /*************************************************************************/

        
        /*************************************************************************/
        /***SE NÃO FOR ID DE INTEGRAÇÃO DE VIAGEM PARA PGTO AO FROTA BLOQUEAMOS***/
        /*************************************************************************/
        
        begin
          
         IF V_TIPO NOT IN (90) THEN
           P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
           P_MESSAGE := 'ERRO: INTEGRAÇÃO TDV INFORMADA NÃO É VALIDA!';
           RETURN;
         END IF;
        
        end;

        /*************************************************************************/
        
        
        
        /*************************************************************************/
        /*SE ja tivermos um ID cadastrado para esse vale frete / saque bloqueamos*/
        /*************************************************************************/
        
        begin
          
         BEGIN

            SELECT COUNT(*)
              INTO vExisteCiotVf
              FROM T_CON_FRETEOPER K
             WHERE K.CFE_INTEGRATDV_COD         = V_TIPO
               AND k.con_freteoper_id           = P_IDCONSULTA
               AND k.con_freteoper_rota         = P_ROTA
               AND K.CFE_STATUSFRETEOPER_STATUS = 'OK'
               AND TDVADM.fn_querystring(TDVADM.fn_querystring(K.CON_FRETEOPER_PARAMQRYSTR,'VFNumero','=','*'), 'valor', '=', '|') = trim(vValeFreteCod)
               AND TDVADM.fn_querystring(TDVADM.fn_querystring(K.CON_FRETEOPER_PARAMQRYSTR,'VFSerie','=','*'), 'valor', '=', '|')  = trim(vValeFreteSerie)
               AND TDVADM.fn_querystring(TDVADM.fn_querystring(K.CON_FRETEOPER_PARAMQRYSTR,'VFRota','=','*'), 'valor', '=', '|')   = trim(vValeFreteRota)
               AND TDVADM.fn_querystring(TDVADM.fn_querystring(K.CON_FRETEOPER_PARAMQRYSTR,'VFSaque','=','*'), 'valor', '=', '|')  = trim(vValeFreteSaque);

          EXCEPTION WHEN OTHERS THEN

           vExisteCiotVf := 0;

          END;

         IF vExisteCiotVf > 0 THEN
             P_STATUS  := tdvadm.pkg_glb_common.Status_Nomal;
             P_MESSAGE := 'Ja existe um CIOT criado para esse vale de frete nesse ID.!';
             RETURN;
          END IF;

        end;
        
        /*************************************************************************/  
        
        
        
        /*************************************************************************/
        /*                SE JA EXISTE SOLICITAÇÃO DE CIOT                       */
        /*************************************************************************/
        
        begin
          
          BEGIN

            SELECT COUNT(*)
              INTO V_EXISTINT
              FROM T_CON_FRETEOPER K
             WHERE K.CFE_INTEGRATDV_COD         = V_TIPO
               AND k.con_freteoper_id           = P_IDCONSULTA
               AND k.con_freteoper_rota         = P_ROTA
               AND K.CFE_STATUSFRETEOPER_STATUS = 'AG';

          EXCEPTION WHEN OTHERS THEN
            V_EXISTINT := 0;
          END;

          IF V_EXISTINT > 0 THEN
             P_STATUS  := tdvadm.pkg_glb_common.Status_Nomal;
             P_MESSAGE := 'Em processamento!';
             RETURN;
          END IF;
          
        end;
        
        /*************************************************************************/
        

        
        /*************************************************************************/
        /*    VERIFICO SE O ID PASSADO JÁ SE ENCONTRA COM ERRO OU INVÁLIDO       */
        /*    PRA EVITAR QUE INSIRA NOVAMENTE.                                   */
        /*************************************************************************/
        
        begin

          BEGIN
            SELECT COUNT(*)
              INTO V_EXISTINT
              FROM TDVADM.T_CON_FRETEOPER FO
             WHERE FO.CON_FRETEOPER_ID   = P_IDCONSULTA
               AND FO.CFE_INTEGRATDV_COD = V_TIPO
               AND FO.CON_FRETEOPER_ROTA = P_ROTA
               AND FO.CFE_STATUSFRETEOPER_STATUS IN ('ER','IV');
          EXCEPTION WHEN OTHERS THEN
            V_STATUSOPER := 'ER';
          END;

          IF V_EXISTINT > 0 THEN
       
             P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
    
             SELECT 'ID possue uma solicitação de CIOT com erro ou INVALIDA! CONSULTE O MONITOR DE FRETE'
               INTO P_MESSAGE
               FROM DUAL;
            
             RETURN;
            
          END IF;

        end;
        
        /*************************************************************************/
        
        
        
        /*************************************************************************/
        /*                             VALIDA ID                                 */
        /*************************************************************************/
        
        begin
        
           V_IDVALIDO := PKG_CFE_FRETE.FN_GET_IDVALIDO(P_IDCONSULTA, P_ROTA);

           IF V_IDVALIDO = 'OK' THEN

           SELECT COUNT(*)
             INTO V_QTDEINTEGRA
             FROM T_CON_FRETEOPER K
            WHERE K.CON_FRETEOPER_ID   = P_IDCONSULTA
              AND K.CON_FRETEOPER_ROTA = P_ROTA
              AND K.CFE_INTEGRATDV_COD = V_TIPO;

           V_QTDELOOP := 0;

           /*******************************************************/
           /*     CADASTRA OPERAÇÃO PARA INTEGRAÇÃO DO FRETE      */
           /*******************************************************/
           
           begin
             
             FOR R_CURSOR IN (SELECT K.CFE_INTEGRATDV_COD,
                                      K.CFE_OPERACOES_COD,
                                      K.CFE_OPERATDV_SEQOP,
                                      K.CFE_OPERATDV_SEQINT
                                 FROM T_CFE_OPERATDV K
                                 WHERE K.CFE_INTEGRATDV_COD = V_TIPO)
             LOOP
               
                V_QTDELOOP := V_QTDELOOP +1;

                INSERT INTO T_CON_FRETEOPER F VALUES(P_IDCONSULTA,
                                                     P_ROTA,
                                                     R_CURSOR.CFE_INTEGRATDV_COD,
                                                     R_CURSOR.CFE_OPERACOES_COD,
                                                     'AG',
                                                     NULL,
                                                     NULL,
                                                     NULL,
                                                     NULL,
                                                     NULL,
                                                     P_QRYSTR,
                                                     SYSDATE,
                                                     NULL,
                                                     NULL,
                                                     V_QTDEINTEGRA+1,
                                                     0);
             
             END LOOP;

             IF V_QTDELOOP = 0 THEN
                
                 P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                 P_MESSAGE := 'ERRO: NENHUMA OPERAÇÃO CADASTRADA PARA ESSE VALE DE FRETE!!';
                 RETURN;
                 
             END IF;
           
           end;
           
           /*******************************************************/
        

        ELSE
          
          P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          P_MESSAGE := 'ERRO: ID PARA CADASTRO DE INTEGRAÇÃO DO VALE DE FRETE NÃO VALIDADO!';
          RETURN;
          
        END IF;
        
        end;
        
        /*************************************************************************/
        
        
        /*************************************************************************/
        /***************       MARCO UMA SOLICITAÇÃO DE CIOT       ***************/
        /*************************************************************************/
        
        begin
          
          BEGIN
             INSERT INTO T_CON_VFRETESOLCIOT(CON_CONHECIMENTO_CODIGO ,
                                             CON_CONHECIMENTO_SERIE  ,
                                             GLB_ROTA_CODIGO         ,
                                             CON_VALEFRETE_SAQUE     ,
                                             CON_VFRETESOLCIOT_DATA)
                                      VALUES(vValeFreteCod           ,
                                             vValeFreteSerie         ,
                                             vValeFreteRota          ,
                                             vValeFreteSaque         ,
                                             SYSDATE);

           EXCEPTION WHEN OTHERS THEN
               P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               P_MESSAGE := 'Erro ao Criar Solicitação de CIOT. Erro: '||SQLERRM;
           END;
        
        end;
        
        /*************************************************************************/

        
        /*************************************************************************/
        /***************       RETORNO DA PROCEDURE                ***************/
        /*************************************************************************/
        
        begin
          
          IF NVL(P_STATUS,'OK') <> tdvadm.pkg_glb_common.Status_Erro THEN

             P_STATUS  := tdvadm.pkg_glb_common.Status_Nomal;
             P_MESSAGE := 'Processamento Normal!';
             COMMIT;

          END IF;
        
        end;
        
        /*************************************************************************/



    EXCEPTION WHEN OTHERS THEN
          
          P_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          P_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;

          /*************************************************************/
          /*****************  DELETO A SOLICITAÇÃO *********************/
          /*************************************************************/

          DELETE T_CON_VFRETESOLCIOT LL
           WHERE LL.CON_CONHECIMENTO_CODIGO = vValeFreteCod
             AND LL.CON_CONHECIMENTO_SERIE  = vValeFreteSerie
             AND LL.GLB_ROTA_CODIGO         = vValeFreteRota
             AND LL.CON_VALEFRETE_SAQUE     = vValeFreteSaque;

          /************************************************************/
    END;

  END Sp_Set_Integravffrota;
  
  Procedure Sp_Get_InserirViagemFrota(p_qrystr       in  clob,
                                      p_idconsulta   in  number,
                                      p_rota         in  char,
                                      p_cursor       out pkg_cfe_frete.t_cursor,
                                      p_status       out char,
                                      p_message      out varchar2)as
  V_INSERT           PKG_CFE_FRETE.TpRegTxt;
  V_STATUS           CHAR(1);
  V_MESSAGE          VARCHAR2(200);

  vVfNumero          t_con_valefrete.con_conhecimento_codigo%type;
  vVfSerie           t_con_valefrete.con_conhecimento_serie%type;
  vVfRota            t_con_valefrete.glb_rota_codigo%type;
  vVfSaque           t_con_valefrete.con_valefrete_saque%type;
  vCartaoPed         varchar2(20);

  vOrigemViagem      t_glb_localidade.glb_localidade_codigo%type;
  vDestinoVIagem     t_glb_localidade.glb_localidade_codigo%type;
  vVeiculoPlaca      t_con_valefrete.con_valefrete_placa%type;
  vVeiculoPlacaSaque t_con_valefrete.con_valefrete_placasaque%type;
  vDataCadastro      t_con_valefrete.con_valefrete_datacadastro%type;
  vValorPedagio      t_con_valefrete.con_valefrete_pedagio%type;
  vViagemidaux1      varchar2(20);
  vQtdedocref        integer;
  vIndicedocfis      integer;
  vQryStrAux         t_con_freteoper.con_freteoper_paramqrystr%type;
  vQtdeParcelas      integer;
  vTipoFavorecido    CHAR(1);
  BEGIN

     BEGIN


       /***********************************************************/
       /************ RECUPERANDO INFORMAÇÕES DO QRY STR ***********/
       /***********************************************************/

       begin
            select l.con_freteoper_paramqrystr
              into vQryStrAux
              from t_con_freteoper l
             where l.con_freteoper_id   = p_idconsulta
               and l.con_freteoper_rota = p_rota
               and l.cfe_integratdv_cod = '89'
               and l.cfe_operacoes_cod  = '33';
        end;

       /***********************************************************/


       /***********************************************************/
       /******************* INFORMAÇÕE DA QUERY STR ***************/
       /***********************************************************/

       begin
         vVfNumero        := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFNumero','=','*'), 'valor', '=', '|');
         vVfSerie         := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFSerie','=','*'), 'valor', '=', '|');
         vVfRota          := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFRota','=','*'), 'valor', '=', '|');
         vVfSaque         := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QryStr,'VFSaque','=','*'), 'valor', '=', '|');
         vCartaoPed       := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryStrAux,'MotoristaCartao','=','*'), 'valor', '=', '|');
       end;

       /***********************************************************/

       /***********************************************************/
       /********** INFORMAÇÕES TABELA DE VALE DE FRETE ************/
       /***********************************************************/

       begin

          SELECT vf.Glb_Localidade_Codigoori  ,
                 vf.glb_localidade_codigodes  ,
                 vf.con_valefrete_placa       ,
                 vf.con_valefrete_placasaque  ,
                 vf.con_valefrete_datacadastro,
                 vf.con_valefrete_pedagio
            INTO vOrigemViagem                ,
                 vDestinoVIagem               ,
                 vVeiculoPlaca                ,
                 vVeiculoPlacaSaque           ,
                 vDataCadastro                ,
                 vValorPedagio
            FROM t_con_valefrete vf
           where vf.con_conhecimento_codigo = vVfNumero
             and vf.con_conhecimento_serie  = vVfSerie
             and vf.glb_rota_codigo         = vVfRota
             and vf.con_valefrete_saque     = vVfSaque;

       exception when others then
          V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
          V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
       end;

       /***********************************************************/

       /***********************************************************/
       /********** INFORMAÇÕES TABELA DE VALE DE FRETE ************/
       /***********************************************************/

       begin
          -- viagem.id.cliente
          BEGIN

            begin
               select seq_cfe_idviagem.nextval
                 into vViagemidaux1
                 from dual;
            end;

            V_INSERT.con_freteoper_id    := P_IDCONSULTA;
            V_INSERT.con_freteoper_rota  := P_ROTA;
            V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
            V_INSERT.uti_vfintegra_chave := 'viagem.id.cliente';
            V_INSERT.uti_vfintegra_valor := TRIM(vViagemidaux1);

            PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

          EXCEPTION WHEN OTHERS THEN
            V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
            V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
          END;

          -- viagem.contratante.documento.numero
          BEGIN

            V_INSERT.con_freteoper_id    := P_IDCONSULTA;
            V_INSERT.con_freteoper_rota  := P_ROTA;
            V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
            V_INSERT.uti_vfintegra_chave := 'viagem.contratante.documento.numero';
            V_INSERT.uti_vfintegra_valor := TRIM(pkg_cfe_frete.ContratanteNumero);

            PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

          EXCEPTION WHEN OTHERS THEN
            V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
            V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
          END;
          
          -- viagem.unidade.documento.tipo
          BEGIN

            V_INSERT.con_freteoper_id    := P_IDCONSULTA;
            V_INSERT.con_freteoper_rota  := P_ROTA;
            V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
            V_INSERT.uti_vfintegra_chave := 'viagem.unidade.documento.tipo';
            V_INSERT.uti_vfintegra_valor := TRIM('88');

            PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

          EXCEPTION WHEN OTHERS THEN
            V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
            V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
          END;
          
          -- viagem.unidade.documento.numero
          BEGIN

            V_INSERT.con_freteoper_id    := P_IDCONSULTA;
            V_INSERT.con_freteoper_rota  := P_ROTA;
            V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
            V_INSERT.uti_vfintegra_chave := 'viagem.unidade.documento.numero';
            V_INSERT.uti_vfintegra_valor := TRIM(p_rota);

            PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

          EXCEPTION WHEN OTHERS THEN
            V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
            V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
          END;

          -- viagem.veiculo.placa
          BEGIN

            V_INSERT.con_freteoper_id    := P_IDCONSULTA;
            V_INSERT.con_freteoper_rota  := P_ROTA;
            V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
            V_INSERT.uti_vfintegra_chave := 'viagem.veiculo.placa';
            V_INSERT.uti_vfintegra_valor := pkg_frtcar_veiculo.FN_GET_PLACA(TRIM(vVeiculoPlaca),sysdate);

            PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

          EXCEPTION WHEN OTHERS THEN
            V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
            V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
          END;

          -- viagem.veiculo.categoria
          BEGIN

            V_INSERT.con_freteoper_id    := P_IDCONSULTA;
            V_INSERT.con_freteoper_rota  := P_ROTA;
            V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
            V_INSERT.uti_vfintegra_chave := 'viagem.veiculo.categoria';
            V_INSERT.uti_vfintegra_valor := TRIM(NVL(PKG_CFE_FRETE.FN_GET_CATEGORIAVEIC(vVeiculoPlaca, vVeiculoPlacaSaque),'6'));


            PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

          EXCEPTION WHEN OTHERS THEN
            V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
            V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
          END;

          -- viagem.cartao.numero
          BEGIN

            V_INSERT.con_freteoper_id    := P_IDCONSULTA;
            V_INSERT.con_freteoper_rota  := P_ROTA;
            V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
            V_INSERT.uti_vfintegra_chave := 'viagem.cartao.numero';
            V_INSERT.uti_vfintegra_valor := TRIM(vCartaoPed);

            PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

          EXCEPTION WHEN OTHERS THEN
            V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
            V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
          END;

          -- viagem.contrato.numero
          BEGIN

            V_INSERT.con_freteoper_id    := P_IDCONSULTA;
            V_INSERT.con_freteoper_rota  := P_ROTA;
            V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
            V_INSERT.uti_vfintegra_chave := 'viagem.contrato.numero';
            V_INSERT.uti_vfintegra_valor := TRIM(TRIM(vVfNumero)||TRIM(vVfSerie)||TRIM(vVfRota)||TRIM(vVfSaque));

            PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

          EXCEPTION WHEN OTHERS THEN
            V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
            V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
          END;

          -- viagem.data.partida
          BEGIN

            V_INSERT.con_freteoper_id    := P_IDCONSULTA;
            V_INSERT.con_freteoper_rota  := P_ROTA;
            V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
            V_INSERT.uti_vfintegra_chave := 'viagem.data.partida';
            V_INSERT.uti_vfintegra_valor := TRIM(trunc(vDataCadastro));

            PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

          EXCEPTION WHEN OTHERS THEN
            V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
            V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
          END;

          -- viagem.origem.cidade.ibge
          BEGIN

            V_INSERT.con_freteoper_id    := P_IDCONSULTA;
            V_INSERT.con_freteoper_rota  := P_ROTA;
            V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
            V_INSERT.uti_vfintegra_chave := 'viagem.origem.cidade.ibge';
            V_INSERT.uti_vfintegra_valor := TRIM(PKG_CFE_FRETE.FN_GET_IBGE(vOrigemViagem));

            PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

          EXCEPTION WHEN OTHERS THEN
            V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
            V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
          END;

          -- viagem.destino.cidade.ibge
          BEGIN

            V_INSERT.con_freteoper_id    := P_IDCONSULTA;
            V_INSERT.con_freteoper_rota  := P_ROTA;
            V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
            V_INSERT.uti_vfintegra_chave := 'viagem.destino.cidade.ibge';
            V_INSERT.uti_vfintegra_valor := TRIM(PKG_CFE_FRETE.FN_GET_IBGE(vDestinoVIagem));

            PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

          EXCEPTION WHEN OTHERS THEN
            V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
            V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
          END;

        end;

       /***********************************************************/

       /***********************************************************/
       /********** DOCUMENTOS DE REFERENCIA DA VIAGEM *************/
       /***********************************************************/

       begin

         SELECT COUNT(*)
           INTO vQtdedocref
           FROM T_CON_VFRETECONHEC CC
          WHERE CC.CON_VALEFRETE_CODIGO     = vVfNumero
            AND CC.CON_VALEFRETE_SERIE      = vVfSerie
            AND CC.GLB_ROTA_CODIGOVALEFRETE = vVfRota
            AND CC.CON_VALEFRETE_SAQUE      = vVfSaque;

         
         /***********************************************************/
         /********************Existe Cte Vinculado ao VF*************/
         /***********************************************************/
         
         IF (vQtdedocref > 0) THEN

            -- QUANTIDADES DE DOCUMENTOS
            BEGIN
              V_INSERT.con_freteoper_id    := P_IDCONSULTA;
              V_INSERT.con_freteoper_rota  := P_ROTA;
              V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
              V_INSERT.uti_vfintegra_chave := TRIM('viagem.documento.qtde');
              V_INSERT.uti_vfintegra_valor := TRIM(TO_CHAR(vQtdedocref));

              PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
            EXCEPTION WHEN OTHERS THEN
              V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
              V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
            END;

            /***********************************************************/
            /********************    CONHECIMENTOS    ******************/
            /***********************************************************/
            vIndicedocfis := 0;

            FOR R_CURSORCONHEC IN (SELECT CC.CON_CONHECIMENTO_CODIGO,
                                          CC.CON_CONHECIMENTO_SERIE,
                                          CC.GLB_ROTA_CODIGO,
                                          CH.GLB_CLIENTE_CGCCPFREMETENTE,
                                          CH.GLB_TPCLIEND_CODIGOREMETENTE,
                                          CH.GLB_CLIENTE_CGCCPFDESTINATARIO,
                                          CH.GLB_TPCLIEND_CODIGODESTINATARI,
                                          R.GLB_ROTA_SERIE
                                     FROM T_CON_VFRETECONHEC CC,
                                          T_CON_CONHECIMENTO CH,
                                          T_GLB_ROTA R
                                    WHERE CC.CON_VALEFRETE_CODIGO     = vVfNumero
                                      AND CC.CON_VALEFRETE_SERIE      = vVfSerie
                                      AND CC.GLB_ROTA_CODIGOVALEFRETE = vVfRota
                                      AND CC.CON_VALEFRETE_SAQUE      = vVfSaque
                                      AND CC.GLB_ROTA_CODIGO          = R.GLB_ROTA_CODIGO
                                      AND CC.CON_CONHECIMENTO_CODIGO  = CH.CON_CONHECIMENTO_CODIGO
                                      AND CC.CON_CONHECIMENTO_SERIE   = CH.CON_CONHECIMENTO_SERIE
                                      AND CC.GLB_ROTA_CODIGO          = CH.GLB_ROTA_CODIGO)
            LOOP
                -- INDICE DO DOC FISCAL
                vIndicedocfis := vIndicedocfis+1;

                -- TIPO DO DOCUMENTO
                BEGIN
                  V_INSERT.con_freteoper_id    := P_IDCONSULTA;
                  V_INSERT.con_freteoper_rota  := P_ROTA;
                  V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                  V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.tipo'),'XX',TO_CHAR(vIndicedocfis));
                  V_INSERT.uti_vfintegra_valor := TRIM('5');
                  PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                EXCEPTION WHEN OTHERS THEN
                  V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                  V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
                END;

                -- NUMERO DO DOCUMENTO
                BEGIN
                  V_INSERT.con_freteoper_id    := P_IDCONSULTA;
                  V_INSERT.con_freteoper_rota  := P_ROTA;
                  V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                  V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.numero'),'XX',TO_CHAR(vIndicedocfis));
                  V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORCONHEC.CON_CONHECIMENTO_CODIGO);
                  PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                EXCEPTION WHEN OTHERS THEN
                  V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                  V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
                END;

                -- SERIE DO DOCUMENTO
                BEGIN
                  V_INSERT.con_freteoper_id    := P_IDCONSULTA;
                  V_INSERT.con_freteoper_rota  := P_ROTA;
                  V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                  V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.serie'),'XX',TO_CHAR(vIndicedocfis));
                  V_INSERT.uti_vfintegra_valor := NVL(TRIM(R_CURSORCONHEC.GLB_ROTA_SERIE),'U');
                  PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                EXCEPTION WHEN OTHERS THEN
                  V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                  V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
                END;

            END LOOP;

            /***********************************************************/
         
         END IF;
         
         /***********************************************************/
         
         
         /***********************************************************/
         /************** Não existe Cte vinculado ao VF *************/
         /************** Mando o Numero do Vale de frete*************/
         /***********************************************************/
         begin
            
            IF (vQtdedocref = 0) THEN             
                      
               -- QUANTIDADES DE DOCUMENTOS
               BEGIN
                V_INSERT.con_freteoper_id    := P_IDCONSULTA;
                V_INSERT.con_freteoper_rota  := P_ROTA;
                V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                V_INSERT.uti_vfintegra_chave := TRIM('viagem.documento.qtde');
                V_INSERT.uti_vfintegra_valor := TRIM(TO_CHAR('1'));

                PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
               EXCEPTION WHEN OTHERS THEN
                V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
               END;
              
               -- TIPO DO DOCUMENTO
               BEGIN
                  V_INSERT.con_freteoper_id    := P_IDCONSULTA;
                  V_INSERT.con_freteoper_rota  := P_ROTA;
                  V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                  V_INSERT.uti_vfintegra_chave := TRIM('viagem.documento1.tipo');
                  V_INSERT.uti_vfintegra_valor := TRIM('5');
                  PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                EXCEPTION WHEN OTHERS THEN
                  V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                  V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
                END;
              
               -- NUMERO DO DOCUMENTO
               BEGIN
                  V_INSERT.con_freteoper_id    := P_IDCONSULTA;
                  V_INSERT.con_freteoper_rota  := P_ROTA;
                  V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                  V_INSERT.uti_vfintegra_chave := 'viagem.documento1.numero';
                  V_INSERT.uti_vfintegra_valor := trim(vVfNumero);
                  PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                EXCEPTION WHEN OTHERS THEN
                  V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                  V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
                END;

               -- SERIE DO DOCUMENTO
               BEGIN
                  V_INSERT.con_freteoper_id    := P_IDCONSULTA;
                  V_INSERT.con_freteoper_rota  := P_ROTA;
                  V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
                  V_INSERT.uti_vfintegra_chave := 'viagem.documento1.serie';
                  V_INSERT.uti_vfintegra_valor := TRIM(vVfRota);

                  PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
                EXCEPTION WHEN OTHERS THEN
                  V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
                  V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
                END;
            
            end if;
            
         end;  
         /***********************************************************/
         
         END;

       /***********************************************************/
       
       
       /***********************************************************/
       /*************          PARCELAS         *******************/
       /***********************************************************/
    
       BEGIN
         -- QUANTIDADE DE PARCELAS
         SELECT COUNT(*)
           INTO vQtdeParcelas                        
           FROM T_CON_CALCVALEFRETE F
          WHERE F.CON_CONHECIMENTO_CODIGO            = vVfNumero  
            AND F.CON_CONHECIMENTO_SERIE             = vVfSerie   
            AND F.GLB_ROTA_CODIGO                    = vVfRota    
            AND F.CON_VALEFRETE_SAQUE                = vVfSaque   
            AND F.CON_CALCVALEFRETE_FLAGPGTO         = 'S'
            AND TO_NUMBER(F.CON_CALCVALEFRETE_VALOR) > '0';
       
         -- QUANTIDADE PARCELAS
         BEGIN     
           V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
           V_INSERT.con_freteoper_rota  := P_ROTA;
           V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
           V_INSERT.uti_vfintegra_chave := TRIM('viagem.parcela.qtde');
           V_INSERT.uti_vfintegra_valor := TRIM(TO_CHAR(vQtdeParcelas));
           PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
         EXCEPTION WHEN OTHERS THEN
           V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
           V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
         END;
                                
        
        vQtdeParcelas := 0;
        FOR R_PARCELAS IN (SELECT F.CON_CONHECIMENTO_CODIGO,
                                  F.CON_CONHECIMENTO_SERIE,
                                  F.GLB_ROTA_CODIGO,
                                  F.CON_VALEFRETE_SAQUE,
                                  F.CON_CALCVALEFRETE_SEQ,
                                  F.CON_CALCVALEFRETE_TIPO,
                                  F.CON_CALCVALEFRETE_VALOR,
                                  F.CON_CALCVALEFRETE_VENCIMENTO,
                                  F.CON_CALCVALEFRETETP_CODIGO,
                                  F.CON_CALCVALEFRETE_TPPESSOA,
                                  TP.CON_CALCVALEFRETETP_CODPAMCARY,
                                  NVL(F.CON_CALCVALEFRETE_FLAGLIB,'N') CON_CALCVALEFRETE_FLAGLIB
                              FROM T_CON_CALCVALEFRETE F,
                                   T_CON_CALCVALEFRETETP TP
                             WHERE F.CON_CONHECIMENTO_CODIGO             = vVfNumero 
                               AND F.CON_CONHECIMENTO_SERIE              = vVfSerie  
                               AND F.GLB_ROTA_CODIGO                     = vVfRota   
                               AND F.CON_VALEFRETE_SAQUE                 = vVfSaque  
                               AND F.CON_CALCVALEFRETE_FLAGPGTO          = 'S'
                               AND F.CON_CALCVALEFRETETP_CODIGO          = TP.CON_CALCVALEFRETETP_CODIGO
                               AND TO_NUMBER(F.CON_CALCVALEFRETE_VALOR)  > 0
                               ORDER BY F.CON_CALCVALEFRETETP_CODIGO)
        LOOP
            vQtdeParcelas := vQtdeParcelas +1;
            
             -- EFETIVAÇÃO PARCELA
             BEGIN     
               V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := REPLACE('viagem.parcelaXX.efetivacao.tipo','XX',TRIM(TO_CHAR(vQtdeParcelas)));
               V_INSERT.uti_vfintegra_valor := TRIM('1');
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
             END;
                  
             -- VALOR PARCELA
             BEGIN     
               V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := REPLACE('viagem.parcelaXX.valor','XX',TRIM(TO_CHAR(vQtdeParcelas)));
               V_INSERT.uti_vfintegra_valor := TRIM(TO_CHAR(R_PARCELAS.CON_CALCVALEFRETE_VALOR,'999999999.00'));
               
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
             END;
               
             
             -- TIPO PARCELA
             BEGIN     
               V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := REPLACE('viagem.parcelaXX.tipo','XX',TRIM(TO_CHAR(vQtdeParcelas)));
               V_INSERT.uti_vfintegra_valor := '1';
               
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
             END;
             
                
             -- SUBTIPO PARCELA
             BEGIN     
               V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := REPLACE('viagem.parcelaXX.subtipo','XX',TRIM(TO_CHAR(vQtdeParcelas)));
               V_INSERT.uti_vfintegra_valor := TRIM(TO_NUMBER(R_PARCELAS.CON_CALCVALEFRETETP_CODPAMCARY));
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
             END;
                  
             -- PARCELA BASE
             BEGIN     
               V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := REPLACE('viagem.parcelaXX.base','XX',TRIM(TO_CHAR(vQtdeParcelas)));
               V_INSERT.uti_vfintegra_valor := TRIM('N');
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
             END;
             
             
             -- STATUS PARCELA
             BEGIN     
               V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := REPLACE('viagem.parcelaXX.status.id','XX',TRIM(TO_CHAR(vQtdeParcelas)));
               
               IF R_PARCELAS.CON_CALCVALEFRETE_FLAGLIB = 'N' THEN
                  V_INSERT.uti_vfintegra_valor := TRIM('1');
               ELSIF R_PARCELAS.CON_CALCVALEFRETE_FLAGLIB = 'S' THEN
                  V_INSERT.uti_vfintegra_valor := TRIM('2');
               END IF;   
               
               
               
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
             END;
                  
             -- DATA PARCELA
             BEGIN     
               V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := REPLACE('viagem.parcelaXX.data','XX',TRIM(TO_CHAR(vQtdeParcelas)));
               V_INSERT.uti_vfintegra_valor := TRIM(R_PARCELAS.CON_CALCVALEFRETE_VENCIMENTO);
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
             END;
                  
             -- FAVORECIDO PARCELA
             BEGIN     
               V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := REPLACE('viagem.parcelaXX.favorecido.tipo.id','XX',TRIM(TO_CHAR(vQtdeParcelas)));
               
               SELECT DECODE(R_PARCELAS.CON_CALCVALEFRETE_TPPESSOA,'P','1','M','3')
                 INTO vTipoFavorecido
                 FROM DUAL;
               
               V_INSERT.uti_vfintegra_valor := vTipoFavorecido;
               
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
             END;
                  
             -- NUMERO CLIENTE
             BEGIN     
               V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := REPLACE('viagem.parcelaXX.numero.cliente','XX',TRIM(TO_CHAR(vQtdeParcelas)));
               V_INSERT.uti_vfintegra_valor := TRIM(TO_CHAR(TO_NUMBER(R_PARCELAS.CON_CALCVALEFRETETP_CODIGO)));
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
             END; 
             
             
             
             BEGIN
               UPDATE T_CON_CALCVALEFRETE CAL
                  SET CAL.CON_CALCVALEFRETE_CODPAROPER = vQtdeParcelas
                WHERE CAL.CON_CONHECIMENTO_CODIGO      = R_PARCELAS.CON_CONHECIMENTO_CODIGO
                  AND CAL.CON_CONHECIMENTO_SERIE       = R_PARCELAS.CON_CONHECIMENTO_SERIE
                  AND CAL.GLB_ROTA_CODIGO              = R_PARCELAS.GLB_ROTA_CODIGO
                  AND CAL.CON_VALEFRETE_SAQUE          = R_PARCELAS.CON_VALEFRETE_SAQUE
                  AND CAL.CON_CALCVALEFRETE_SEQ        = R_PARCELAS.CON_CALCVALEFRETE_SEQ;
                    
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm; 
             END;  
             
             
        END LOOP;    

    END; 
    
       /***********************************************************/
       
       
       /***********************************************************/
       /***********  GRAVANDO NA TABELA DE CIOT / VIAGEM **********/
       /***********************************************************/

       BEGIN

         IF NVL(V_STATUS,'OK') <> tdvadm.pkg_glb_common.Status_Erro THEN

            BEGIN

                      INSERT INTO T_CON_VFRETECIOT(CON_CONHECIMENTO_CODIGO,
                                       CON_CONHECIMENTO_SERIE,
                                       GLB_ROTA_CODIGO,
                                       CON_VALEFRETE_SAQUE,
                                       CON_VFRETECIOT_NUMERO,
                                       CON_VFRETECIOT_PROTOCOLO,
                                       CON_FRETEOPER_ID,
                                       CON_FRETEOPER_ROTA,
                                       CON_VFRETECIOT_ID,
                                       CON_VFRETECIOT_IDCLIENTE,
                                       con_vfreteciot_flagimprime,
                                       con_vfreteciot_flagaltera,
                                       con_vfreteciot_flagprocesal )
                                VALUES(vVfNumero,  
                                       vVfSerie ,  
                                       vVfRota  ,  
                                       vVfSaque ,  
                                       NULL,
                                       NULL,
                                       P_IDCONSULTA,             
                                       P_ROTA,
                                       NULL,
                                       vViagemidaux1,
                                       'N',
                                       'N',
                                       'S'); 

            EXCEPTION WHEN DUP_VAL_ON_INDEX THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INSEREFRETE, '||sqlerrm;
            END;

         end if;

       END;

       /***********************************************************/



       OPEN P_CURSOR FOR
       SELECT K.UTI_VFINTEGRA_CHAVE CHAVE,
              K.UTI_VFINTEGRA_VALOR VALOR
         FROM T_UTI_VFINTEGRA K
        WHERE K.CON_FRETEOPER_ID   = P_IDCONSULTA
          AND K.CON_FRETEOPER_ROTA = P_ROTA
        ORDER BY K.UTI_VFINTEGRA_SEQ;

       DELETE T_UTI_VFINTEGRA D
        WHERE D.CON_FRETEOPER_ID   = P_IDCONSULTA
          AND D.CON_FRETEOPER_ROTA = P_ROTA;

      P_STATUS   := tdvadm.pkg_glb_common.Status_Nomal;
      P_MESSAGE  := 'Processamento Normal.';

      COMMIT;

     EXCEPTION WHEN OTHERS THEN
       P_STATUS   := tdvadm.pkg_glb_common.Status_Erro;
       P_MESSAGE  := 'Erro ao consultar. Erro='||dbms_utility.format_error_backtrace;
     END;

  END Sp_Get_InserirViagemFrota;
  
  Procedure Sp_Vld_ConsultaCiotFrota(p_xmlretorno      in clob,
                                     p_idconsulta      in  tdvadm.t_con_freteoper.con_freteoper_id%type,
                                     p_rota            in  tdvadm.t_glb_rota.glb_rota_codigo%type,
                                     p_codoperacaotdv  in  varchar2,
                                     p_codoperacaows   in  varchar2,
                                     p_sequencia       in  tdvadm.t_con_freteoper.con_freteoper_seq%type) is

 --Variável de linha utilizada para facilitar a inserção na tabela de CIOT.
 vTabCiot   tdvadm.t_con_vfreteciot%rowtype;

 --Variável utilizada para guardar mensagem de erro.
 vMsgErro      t_con_freteoper.con_freteoper_obs%type;
 vQryStrInsert t_con_freteoper.con_freteoper_paramqrystr%TYPE;
 vVfNumero     t_con_valefrete.con_conhecimento_codigo%TYPE;
 vVfSerie      t_con_valefrete.con_conhecimento_serie%TYPE;
 vVfRota       t_con_valefrete.glb_rota_codigo%TYPE;
 vVfSaque      t_con_valefrete.con_valefrete_saque%TYPE;
 vTPPagamento  CHAR(2);
 
 STATUS_OK       CONSTANT CHAR(02) := 'OK';
 STATUS_INVALIDO CONSTANT CHAR(02) := 'IV';
 STATUS_ERRO     CONSTANT CHAR(02) := 'ER';

  BEGIN
    
    Begin
        
        /*********************************************************/           
        /*** Informações da QryString                          ***/
        /*********************************************************/
        begin
          
             BEGIN
         
          select l.con_freteoper_paramqrystr
            into vQryStrInsert
            from t_con_freteoper l
           where l.con_freteoper_id   = p_idconsulta
             and l.con_freteoper_rota = p_rota
             and l.cfe_integratdv_cod = '90'
             and l.cfe_operacoes_cod  = '83'
             and l.con_freteoper_seq = p_sequencia;


          vVfNumero    := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryStrInsert,'VFNumero','=','*'), 'valor', '=', '|');
          vVfSerie     := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryStrInsert,'VFSerie','=','*'), 'valor', '=', '|');
          vVfRota      := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryStrInsert,'VFRota','=','*'), 'valor', '=', '|');
          vVfSaque     := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryStrInsert,'VFSaque','=','*'), 'valor', '=', '|');
          vTPPagamento := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryStrInsert,'IntegraTdv_Cod','=','*'), 'valor', '=', '|');

          vTabCiot.Con_Conhecimento_Codigo := vVfNumero;
          vTabCiot.Con_Conhecimento_Serie  := vVfSerie;
          vTabCiot.Glb_Rota_Codigo         := vVfRota;
          vTabCiot.Con_Valefrete_Saque     := vVfSaque;

        EXCEPTION WHEN OTHERS THEN
          vMsgErro := substr(sqlerrm, 1, 90);
        END;
        
        end;
        /*********************************************************/
         
        /*********************************************************/
        /***Para essa consulta, o retorno da mensagem com "0"  ***/ 
        /* signifca que retornou corretamente                  ***/
        /*********************************************************/
        begin
          
           IF PKG_CFE_FRETE.FN_GET_CHAVEXML(P_XMLRETORNO, 'mensagem.codigo') = '0' THEN
             
              vTabCiot.Con_Vfreteciot_Id        := PKG_CFE_FRETE.FN_GET_CHAVEXML(P_XMLRETORNO, 'viagem.id');
              vTabCiot.Con_Freteoper_Id         := P_IDCONSULTA;
              vTabCiot.Con_Freteoper_Rota       := P_ROTA;

              --executo o insert propriamente dito.
              -- ALTERADO PARA ATUALIZAR POIS JA CRIAMOS UM REGISTRO NA GERAÇÃO DO ARQUIVO!
              UPDATE T_CON_VFRETECIOT CIOT
                 SET CIOT.CON_VFRETECIOT_NUMERO       = vTabCiot.Con_Vfreteciot_Id,
                     CIOT.CON_VFRETECIOT_PROTOCOLO    = 0,
                     CIOT.CON_VFRETECIOT_ID           = vTabCiot.Con_Vfreteciot_Id,
                     ciot.con_vfreteciot_tppagamento  = vTPPagamento,
                     ciot.con_vfreteciot_flagimprime  = 'S',
                     ciot.con_vfreteciot_flagaltera   = 'N',
                     CIOT.CON_VFRETECIOT_FLAGPROCESAL = 'N'
               WHERE CIOT.CON_CONHECIMENTO_CODIGO     = vTabCiot.Con_Conhecimento_Codigo
                 AND CIOT.CON_CONHECIMENTO_SERIE      = vTabCiot.Con_Conhecimento_Serie
                 AND CIOT.GLB_ROTA_CODIGO             = vTabCiot.Glb_Rota_Codigo
                 AND CIOT.CON_VALEFRETE_SAQUE         = vTabCiot.Con_Valefrete_Saque
                 AND CIOT.CON_VFRETECIOT_NUMERO       IS NULL;

              --Atualiza a tabela de operação de frete.
              update tdvadm.t_con_freteoper oper
                 set OPER.CFE_STATUSFRETEOPER_STATUS  = STATUS_OK,
                     oper.con_freteoper_retorno       = sysdate,
                     oper.con_freteoper_confret       = P_XMLRETORNO,
                     oper.con_freteoper_obs           = 'Validação realizada com sucesso'
               where 0=0
                 and oper.con_freteoper_id            = P_IDCONSULTA
                 and oper.con_freteoper_rota          = P_ROTA
                 and oper.CFE_INTEGRATDV_COD          = P_CODOPERACAOTDV
                 and oper.CFE_OPERACOES_COD           = P_CODOPERACAOWS
                 and OPER.CON_FRETEOPER_SEQ           = P_SEQUENCIA;
                
          else
            --Caso o retorno não seja "0" (zero)
            --Código da Mensagem não for zero "Consulta não realizada com sucesso.
           update tdvadm.t_con_freteoper oper
              set OPER.CFE_STATUSFRETEOPER_STATUS = STATUS_INVALIDO,
                  oper.con_freteoper_retorno      = sysdate,
                  oper.con_freteoper_confret      = P_XMLRETORNO,
                  OPER.CON_FRETEOPER_OBS          = PKG_CFE_FRETE.FN_GET_CHAVEXML(P_XMLRETORNO, 'mensagem.descricao')
            where 0=0
              and oper.con_freteoper_id           = P_IDCONSULTA
              and oper.con_freteoper_rota         = P_ROTA
              and oper.CFE_INTEGRATDV_COD         = P_CODOPERACAOTDV
              and oper.CFE_OPERACOES_COD          = P_CODOPERACAOWS
              and OPER.CON_FRETEOPER_SEQ          = P_SEQUENCIA;

            --Excluo o registro de CIOT
           delete from T_CON_VFRETECIOT CIOT
            WHERE CIOT.CON_CONHECIMENTO_CODIGO  = vTabCiot.Con_Conhecimento_Codigo
              AND CIOT.CON_CONHECIMENTO_SERIE   = vTabCiot.Con_Conhecimento_Serie
              AND CIOT.GLB_ROTA_CODIGO          = vTabCiot.Glb_Rota_Codigo
              AND CIOT.CON_VALEFRETE_SAQUE      = vTabCiot.Con_Valefrete_Saque
              AND CIOT.CON_VFRETECIOT_NUMERO    IS NULL;
          
          END IF;

        end;  
        /*********************************************************/
        
        /*********************************************************/
        /*****************  DELETO A SOLICITAÇÃO *****************/
        /*********************************************************/
        begin
          
          DELETE T_CON_VFRETESOLCIOT LL
           WHERE LL.CON_CONHECIMENTO_CODIGO = vTabCiot.Con_Conhecimento_Codigo
             AND LL.CON_CONHECIMENTO_SERIE  = vTabCiot.Con_Conhecimento_Serie
             AND LL.GLB_ROTA_CODIGO         = vTabCiot.Glb_Rota_Codigo
             AND LL.CON_VALEFRETE_SAQUE     = vTabCiot.Con_Valefrete_Saque;

        end;
        /*********************************************************/


    EXCEPTION
      --Caso estoure o raise em algum momento eu registro no campo de observação.
      when others then
        --Transfiro a mensagem de erro, para uma variável para poder registrar no campo obs.
        vMsgErro := substr(sqlerrm, 1, 90);

        --atualizo a tabela de freteOperacao
       update tdvadm.t_con_freteoper  oper
          set OPER.CFE_STATUSFRETEOPER_STATUS  = STATUS_ERRO,
              oper.con_freteoper_obs           = 'Erro: ' || vMsgErro,
              oper.con_freteoper_retorno       = sysdate,
              oper.con_freteoper_confret       = Trim(P_XMLRETORNO)
        where 0=0
          and oper.con_freteoper_id            = P_IDCONSULTA
          and oper.con_freteoper_rota          = P_ROTA
          and oper.CFE_INTEGRATDV_COD          = P_CODOPERACAOTDV
          and oper.CFE_OPERACOES_COD           = P_CODOPERACAOWS
          and OPER.CON_FRETEOPER_SEQ           = P_SEQUENCIA;
          
    END;

  END Sp_Vld_ConsultaCiotFrota;
  
  Procedure Sp_Get_PgtoFrota(p_Frota   in  t_frt_conjveiculo.frt_conjveiculo_codigo%type,
                             p_Status  out char,
                             p_Message out varchar2)as
  
  --vPlacaIdNovo         varchar2(2000):='0002196*0002202';
  vPlacaIdNovo         varchar2(2000)  :='nullo';
  vExiste              integer;
  vListaParams         glbadm.pkg_listas.tlistausuparametros;
  vPlacasObrigadasPgto varchar2(2000);
  vAplicacao           tdvadm.t_usu_aplicacao.usu_aplicacao_codigo%type := 'comvlfrete';
  vUsuarioTdv          tdvadm.t_usu_usuario.usu_usuario_codigo%type     := 'jsantos';
  vRotaAplicacao       tdvadm.t_glb_rota.glb_rota_codigo%type           := '010';
  begin
    
    begin
      
       if vUsuarioTdv is not null then
          
          if Not glbadm.pkg_listas.fn_get_usuparamtros(vAplicacao,
                                                       vUsuarioTdv,
                                                       vRotaAplicacao,
                                                       vListaParams) Then
                                            
             p_Status :=  pkg_glb_common.Status_Erro;
             p_Message := p_Message || '10 - Erro ao Buscar Parametros.' || chr(10);
             return;
          else
            vPlacasObrigadasPgto     := vListaParams('CODFRTPG').TEXTO;
          End if ; 
        
        end if;
      
      
      
      
      vExiste := instr(nvl(vPlacasObrigadasPgto,'TDV'),p_Frota);
      
      -- PARA FORÇAR AS FILIAIS LIGAREM AO BRUNO!
      --vExiste := 1;
      
      if (vExiste > 0) then
      
        p_Status  := tdvadm.pkg_glb_common.Status_Nomal;
        p_Message := 'Pagamento em cartão!';
      
      else
      
        p_Status  := tdvadm.pkg_glb_common.Status_Warning;  
        p_Message := 'Pagamento em cheque!';
      
      end if;    
      
    exception when others then
      p_Status  := tdvadm.pkg_glb_common.Status_Erro;  
      p_Message := 'Erro ao executar pkg_cfe_frete.Sp_Get_PgtoFrota. '||Sqlerrm;
    end;
        
  end Sp_Get_PgtoFrota;                 
  
  Procedure Sp_Get_IdValidacaoFrota(pQtdeDiasValid   in  integer,
                                    pProp_Cnpj       in  tdvadm.t_car_proprietario.car_proprietario_cgccpfcodigo%type,
                                    pMotor_Cpf       in  tdvadm.t_car_carreteiro.car_carreteiro_cpfcodigo%type,
                                    pMotor_saque     in  tdvadm.t_car_carreteiro.car_carreteiro_saque%type,
                                    pPlaca_Codigo    in  tdvadm.t_car_veiculo.car_veiculo_placa%type,
                                    pPlaca_saque     in  tdvadm.t_car_veiculo.car_veiculo_saque%type,
                                    pIdRetorno       out tdvadm.t_con_freteoper.con_freteoper_id%type,
                                    pIdRota          out tdvadm.t_con_freteoper.con_freteoper_rota%type,
                                    pFlagId          out char,
                                    pStatus          out char,
                                    pMessage         out varchar2) is

 -- Variavel de controle.
 vControl  boolean;
 vCount    Integer;

 -- Cursor utilizado para buscar IDs, desse motorista, com esse proprietário, nesse veiculo e nessa rota.
 cursor vCursorId (
   vId_PropCnpj       tdvadm.t_car_proprietario.car_proprietario_cgccpfcodigo%type,
   vID_PlacaCodigo    tdvadm.t_car_veiculo.car_veiculo_placa%type,
   vID_PlacaSaque     tdvadm.t_car_veiculo.car_veiculo_saque%type,
   vID_MotorCnpj      tdvadm.t_car_carreteiro.car_carreteiro_cpfcodigo%type,
   vID_MotorSaque     tdvadm.t_car_carreteiro.car_carreteiro_saque%type,
   vID_QtdediasValid  integer
   ) Is
    Select Distinct
           oper.con_freteoper_id,
           oper.con_freteoper_rota,
           oper.con_freteoper_dtcad
      from t_con_freteoper  oper,
           t_uti_sequencia seq
     where 0=0
       And seq.uti_sequencia_rota   = oper.con_freteoper_rota
       And seq.uti_sequencia_codigo = oper.con_freteoper_id
       and 0 < ( select count(*)
                   from tdvadm.t_cfe_integratdv integr
                  where integr.cfe_integratdv_cod         = oper.cfe_integratdv_cod
                    and integr.cfe_integratdv_operusuario = 'N')

    And seq.car_veiculo_placa          = vID_PlacaCodigo
    And seq.car_carreteiro_cpfcodigo   =  vID_MotorCnpj
    And seq.car_veiculo_placa          =  vID_PlacaCodigo
    --Id Originado em uma das operações de contratação de motorista frota.
    And OPER.CFE_INTEGRATDV_COD        IN ('89')

    --Verifica se o ID está dentro do prazo de validade.
    And Trunc(oper.con_freteoper_dtcad) >= (trunc(sysdate) -  vID_QtdediasValid)

    order by oper.con_freteoper_dtcad DESC,
             oper.con_freteoper_id    Desc;
 
 -- Segundo cursor, que trará individualmente cada ID por Rota, e todas as suas validações.
 -- Esse cursor deve ser aberto dentro do laço do primeiro cursor, e dependerá dos resultados de sua linha
 cursor vCursorDetId (
   vId_codigo      tdvadm.t_con_freteoper.con_freteoper_id%type,
   vId_rota        tdvadm.t_con_freteoper.con_freteoper_rota%type
  ) is
  SELECT OPER.CON_FRETEOPER_ID,
         OPER.CON_FRETEOPER_ROTA,
         OPER.CFE_STATUSFRETEOPER_STATUS,
         OPER.CON_FRETEOPER_RETORNO
    FROM T_CON_FRETEOPER OPER
  WHERE 0=0
    AND OPER.CON_FRETEOPER_ID   = vId_codigo
    AND OPER.CON_FRETEOPER_ROTA = vId_rota
    --Cursor dependerá das operações de viagem,
    AND OPER.CFE_INTEGRATDV_COD IN (1, 5,  20, 21, 25, 26, 27, 28);

  begin
    
    -- Inicializo as variáveis que serão utilizadas nessa procedure
    vControl := false;
    
    Begin
      --Abro o primeiro cursor para buscar todos os ID, não utilizados e que estejam dentro do prazo de validade.
      for cCursorId in vCursorId( Trim(pProp_Cnpj),
                                  Trim(pPlaca_Codigo),
                                  Trim(pPlaca_saque),
                                  Trim(pMotor_Cpf),
                                  Trim(pMotor_saque),
                                  pQtdeDiasValid
                                )
                                loop
                                  
                                    --Seto a variável de controle para True;
                                    vControl := true;

                                    Begin
                                      
                                      --a partir de um id, conto a quantidade de registros não validados.
                                      select count(*) 
                                        into vcount
                                        from t_con_freteoper oper
                                       where 0=0
                                         and oper.con_freteoper_id           = ccursorid.con_freteoper_id
                                         and oper.con_freteoper_rota         = ccursorid.con_freteoper_rota
                                         and oper.cfe_integratdv_cod         in ('89')
                                         and oper.cfe_statusfreteoper_status <> 'OK';

                                      --caso tenha algum registro diferente de 'ok'
                                      If vCount > 0 Then
                                        --Mudo o status da variável para false;
                                        vControl := False;
                                      End If;

                                    exception
                                      when others then
                                        pStatus := pkg_glb_common.Status_Erro;
                                        pMessage := 'Erro ao tentar abrir / tratar o cursor de detalhe de ID' || chr(13)|| sqlerrm;
                                    end;

                                    --Saindo do loop central, verifico se a variável continua verdadeira
                                    if vControl  = true then
                                      --seto os paramentros de saida
                                      pStatus    := pkg_glb_common.Status_Nomal;
                                      pMessage   := '';
                                      pIdRetorno := cCursorId.Con_Freteoper_Id;
                                      pIdRota    := cCursorId.Con_Freteoper_Rota;
                                      pFlagId    := pkg_glb_common.Boolean_Sim;
                                      Exit;
                                    else
                                      --caso não encontre nenhum id Valido.
                                      pStatus    := pkg_glb_common.Status_Nomal;
                                      pMessage   := '';
                                      pIdRetorno := 0;
                                      pIdRota    := '';
                                      pFlagId    := pkg_glb_common.Boolean_Nao;
                                      
                                    end if;


                                end loop;

    Exception
      --caso ocorra algum erro durante o processo de abertura/ tratamento do cursor.
      when others then
        --seto os paramenros de retorno
        pStatus := pkg_glb_common.Status_Erro;
        pMessage:= 'Erro ao tentar abrir / tratar cursor de IDs.' || chr(13) || sqlerrm ;
        return;
    end;

  end sp_get_idValidacaoFrota;
  
  /********************************** Rotinas Frete Comum **********************************/
  
  Procedure Sp_Set_InsereTpRegTxt(P_INSERT       In Out pkg_cfe_frete.TpRegTxt,
                                  P_IDCONSULTA   IN Number,
                                  P_ROTA         IN Char,
                                  P_INTEGRACHAVE IN Varchar2,
                                  P_INTEGRAVALOR IN Varchar2,
                                  P_STATUS       OUT CHAR,
                                  P_MESSAGE      OUT VARCHAR2)
  AS
  Begin
      Begin
        P_INSERT.con_freteoper_id    := P_IDCONSULTA;
        P_INSERT.con_freteoper_rota  := P_ROTA;
        P_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        P_INSERT.uti_vfintegra_chave := P_INTEGRACHAVE;
        P_INSERT.uti_vfintegra_valor := P_INTEGRAVALOR;
        PKG_CFE_FRETE.SP_GRAVALINHATXT(P_INSERT, P_STATUS, P_MESSAGE);
        P_STATUS  := STATUS_N;
        P_MESSAGE := 'Processamento Normal';
      Exception When Others Then
        raise_application_error(-20001, 'Sp_Set_InsereTpRegTxt >>> ' || Sqlerrm);
      End;    
  End Sp_Set_InsereTpRegTxt;    
  
  Procedure Sp_Set_DeleteTpRegTxt(P_IDCONSULTA   IN Number,
                                  P_ROTA         IN Char,
                                  P_STATUS       OUT CHAR,
                                  P_MESSAGE      OUT VARCHAR2)
  As
  Begin
      Begin
        Delete T_UTI_VFINTEGRA D
         Where D.CON_FRETEOPER_ID   = P_IDCONSULTA
           AND D.CON_FRETEOPER_ROTA = P_ROTA;
        Commit;   
        P_STATUS  := STATUS_N;
        P_MESSAGE := 'Processamento Normal';         
      Exception When Others Then
        raise_application_error(-20001, 'Sp_Set_DeleteTpRegTxt >>> ' || Sqlerrm);  
      End;  
  End Sp_Set_DeleteTpRegTxt;       
  
  Procedure Sp_Get_CursorTpRegTxt(P_IDCONSULTA   IN  NUMBER,
                                  P_ROTA         IN  CHAR,
                                  P_CURSOR       OUT PKG_CFE_FRETE.T_CURSOR,
                                  P_STATUS       OUT CHAR,
                                  P_MESSAGE      OUT VARCHAR2)
  As
  Begin
      Begin
        Open P_CURSOR For
        Select K.UTI_VFINTEGRA_CHAVE CHAVE,
               K.UTI_VFINTEGRA_VALOR VALOR
          From T_UTI_VFINTEGRA K
         Where K.CON_FRETEOPER_ID   = P_IDCONSULTA
           AND K.CON_FRETEOPER_ROTA = P_ROTA
         Order By K.UTI_VFINTEGRA_SEQ;            
        P_STATUS  := STATUS_N;
        P_MESSAGE := 'Processamento Normal';         
      Exception When Others Then
        raise_application_error(-20001, 'Sp_Get_CursorTpRegTxt >>> ' || Sqlerrm);  
      End;     
  End Sp_Get_CursorTpRegTxt;    
  
  Function Fn_Get_RNTRCProprietario(P_QryStr   IN  clob,
                                    P_CPFCNPJ  IN  T_CAR_PROPRIETARIO.CAR_PROPRIETARIO_CGCCPFCODIGO%Type) 
    Return T_CAR_PROPRIETARIO.CAR_PROPRIETARIO_RNTRC%Type 
  As
    V_RNTRC T_CAR_PROPRIETARIO.CAR_PROPRIETARIO_RNTRC%Type;
  Begin
      Begin
        --Busco na QryString o código do RNTRC
        V_RNTRC := TDVADM.fn_querystring(TDVADM.fn_querystring(P_QRYSTR,'PropRntrc','=','*'), 'valor', '=', '|');
         
        --Caso a variável retorne em branco.
        If (nvl(trim(V_RNTRC), 'R') = 'R') Then
          --busco na tabela de proprietário o RNTRC que está cadastrado.
          Select trim(L.CAR_PROPRIETARIO_RNTRC)
            Into V_RNTRC
            From T_CAR_PROPRIETARIO L
           Where L.CAR_PROPRIETARIO_CGCCPFCODIGO = P_CPFCNPJ;
        End If;   
                
      Exception When Others Then
        raise_application_error(-20001, 'Sp_Get_RNTRCProprietario >>> ' || Sqlerrm);  
      End;    
      Return trim(V_RNTRC);                                   
  End Fn_Get_RNTRCProprietario;     
  
  Function Fn_Get_CodigoTipoProprietario(P_CPFCNPJ T_CAR_PROPRIETARIO.CAR_PROPRIETARIO_CGCCPFCODIGO%Type) 
    Return Varchar2
  As
    V_ProprietarioTipo Char(1);
  Begin
      -----------------------
      -- Tipo de Documento:
      -- 1 = CNPJ
      -- 2 = CPF
      -- 5 = RNTRC PF
      -- 6 = RNTRC PJ
      -----------------------
      -- Pela quantdade de caracteres vejo se é CPF ou CNPJ
      V_ProprietarioTipo := Case LENGTH(TRIM(P_CPFCNPJ)) 
                                When 14 Then '1' 
                                When 11 Then '2'
                              End;
      Return trim(V_ProprietarioTipo);      
  End Fn_Get_CodigoTipoProprietario;   
  
  Function Fn_Get_CodigoTipoRNTRC(P_CPFCNPJ T_CAR_PROPRIETARIO.CAR_PROPRIETARIO_CGCCPFCODIGO%Type) 
    Return Varchar2
  As
    V_RNTRCTipo Char(1);
  Begin
      -----------------------
      -- Tipo de Documento:
      -- 1 = CNPJ
      -- 2 = CPF
      -- 5 = RNTRC PF
      -- 6 = RNTRC PJ
      -----------------------
      -- Pela quantdade de caracteres vejo se é CPF ou CNPJ
      V_RNTRCTipo := Case LENGTH(TRIM(P_CPFCNPJ)) 
                       When 14 Then '6' 
                       When 11 Then '5'
                     End;
      Return trim(V_RNTRCTipo);      
  End Fn_Get_CodigoTipoRNTRC;     
  
  Function Fn_Get_VlrTransfSaque(pValeFrete in t_con_valefrete.con_conhecimento_codigo%type,
                                 pSerie     in t_con_valefrete.con_conhecimento_serie%type,
                                 pRota      in t_con_valefrete.glb_rota_codigo%type,
                                 pSaque     in t_con_valefrete.con_valefrete_saque%type)return number as
                                 
  vValorTransfSaque              t_con_calcvalefrete.con_calcvalefrete_valor%type;
  vValoAdiantamento              t_con_valefrete.con_valefrete_adiantamento%type;
  
  begin
    
  	  select nvl(k.con_valefrete_adiantamento,0) 
        into vValoAdiantamento
        from t_con_valefrete k
       where k.con_conhecimento_codigo = pValeFrete
         and k.con_conhecimento_serie  = pSerie    
         and k.glb_rota_codigo         = pRota     
         and k.con_valefrete_saque     = pSaque;
         
     
    if (vValoAdiantamento <> 0) then    
    
     select sum(l.con_calcvalefrete_valor)
       into vValorTransfSaque
       from t_con_calcvalefrete l
      where l.con_conhecimento_codigo = pValeFrete
        and l.con_conhecimento_serie  = pSerie    
        and l.glb_rota_codigo         = pRota     
        and l.con_valefrete_saque     = pSaque
        and l.con_calcvalefretetp_codigo in ('06','07');
    else
      
      vValorTransfSaque := 0;
      
    end if;      
     
     return vValorTransfSaque;    
    
  end Fn_Get_VlrTransfSaque;                                  
  
  /*********************************************************/
  /*************  consulta e-social valida *****************/
  /*********************************************************/
  procedure Sp_Set_ConsultaESocial(pCpf     in tdvadm.t_car_proprietario.car_proprietario_cgccpfcodigo%type,
                                   pStatus  out char,
                                   pMessage out varchar2)as
  vExisteConsVal integer := 0;
  begin
    
     /*********************************************************/
     /******** Analise da consulta e-social, ultimos 30 dias **/
     /*********************************************************/
     select count(*)
       into vExisteConsVal
       from tdvadm.t_car_esocial e
      where e.car_proprietario_cgccpfcodigo = pCpf
        and trunc(e.car_esocial_dtconsulta) between trunc(sysdate-90) and trunc(sysdate)
        and e.car_esocial_status            = '200';
        /*********************************************************/
     
     if (vExisteConsVal = 0) then
       
       pStatus   := 'E'; 
       pMessage  := 'Proprietario sem consulta valida do e-Social nos ultimos 30 dias!';
       
     else
       
       pStatus   := 'N'; 
       pMessage  := 'Processamento Normal!';
   
    end if;        
    
  end Sp_Set_ConsultaESocial;                           
  
  /*********************************************************/
  /************* Parcelas antigas          *****************/
  /*********************************************************/
  procedure Sp_Get_Inserirviagempa(p_qrystr       in  clob,
                                   p_idconsulta   in  number,
                                   p_rota         in  char,
                                   p_cursor       out tdvadm.pkg_cfe_frete.t_cursor,
                                   p_status       out char,
                                   p_message      out varchar2) as
                                                          
  vVFrete_Codigo      tdvadm.t_con_valefrete.con_conhecimento_codigo%type;
  vVFrete_Serie       tdvadm.t_con_valefrete.con_conhecimento_serie%type;
  vVFrete_Rota        tdvadm.t_con_valefrete.glb_rota_codigo%type;
  vVFrete_Saque       tdvadm.t_con_valefrete.con_valefrete_saque%type;
  vParcela            varchar2(10);
  vParcelaOper        varchar2(20);
  vTipo               tdvadm.t_cfe_integratdv.cfe_integratdv_cod%type;
  vParcelStatus       varchar2(10);
  vValorParcela       tdvadm.t_con_calcvalefrete.con_calcvalefrete_valor%type;
  vDataPagamento      tdvadm.t_con_calcvalefrete.con_calcvalefrete_dtpgto%type;
  vQryStrAux          tdvadm.t_con_freteoper.con_freteoper_paramqrystr%type;
  vOrigemViagem       tdvadm.t_glb_localidade.glb_localidade_codigo%type;
  vDestinoVIagem      tdvadm.t_glb_localidade.glb_localidade_codigo%type;
  vVeiculoPlaca       tdvadm.t_con_valefrete.con_valefrete_placa%type;
  vVeiculoPlacaSaque  tdvadm.t_con_valefrete.con_valefrete_placasaque%type;
  vDataCadastro       tdvadm.t_con_valefrete.con_valefrete_datacadastro%type;
  V_STATUS            CHAR(1);
  V_MESSAGE           VARCHAR2(200);
  vViagemidaux1       varchar2(20);
  V_INSERT            tdvadm.PKG_CFE_FRETE.TpRegTxt;
  vCartaoProp         varchar2(20);
  vQtdedocref         integer := 0;
  vIndicedocfis       integer := 0;
  vQtdeParcelas       integer := 0;
  vTipoFavorecido     char(1);
  vValorTarifas       tdvadm.t_con_calcvalefrete.con_calcvalefrete_valor%type;
  begin
  
  begin
    
  
      

    
    /***********************************************************/
    /** RECUPERANDO INFORMAÇÕES DO QRY STR DA CONSULTA *********/
    /***********************************************************/

    begin
         select l.con_freteoper_paramqrystr
           into vQryStrAux
           from tdvadm.t_con_freteoper l
          where l.con_freteoper_id   = p_idconsulta
            and l.con_freteoper_rota = p_rota
            and l.cfe_operacoes_cod  = '8';
     end;

    /***********************************************************/


    /***********************************************************/
    /******************* INFORMAÇÕE DA QUERY STR ***************/
    /***********************************************************/

    begin
    
      vTipo            := tdvadm.fn_querystring(tdvadm.fn_querystring(P_QryStr,'IntegraTdv_Cod','=','*'), 'valor', '=', '|');
      vParcela         := tdvadm.fn_querystring(tdvadm.fn_querystring(P_QryStr,'VFParcelTdv','=','*'), 'valor', '=', '|');
      vParcelaOper     := tdvadm.fn_querystring(tdvadm.fn_querystring(P_QryStr,'VFParcelGer','=','*'), 'valor', '=', '|');
      vVFrete_Codigo   := tdvadm.fn_querystring(tdvadm.fn_querystring(P_QryStr,'VFNumero','=','*'), 'valor', '=', '|');
      vVFrete_Serie    := tdvadm.fn_querystring(tdvadm.fn_querystring(P_QryStr,'VFSerie','=','*'), 'valor', '=', '|');
      vVFrete_Rota     := tdvadm.fn_querystring(tdvadm.fn_querystring(P_QryStr,'VFRota','=','*'), 'valor', '=', '|');
      vVFrete_Saque    := tdvadm.fn_querystring(tdvadm.fn_querystring(P_QryStr,'VFSaque','=','*'), 'valor', '=', '|');
      vParcelStatus    := tdvadm.fn_querystring(tdvadm.fn_querystring(P_QryStr,'VFParcelIdSt','=','*'), 'valor', '=', '|');
      vCartaoProp      := TDVADM.fn_querystring(TDVADM.fn_querystring(vQryStrAux,'ProprietarioCartao','=','*'), 'valor', '=', '|');
    
    end;

    /***********************************************************/

    /***********************************************************/
    /********** INFORMAÇÕES TABELA DE VALE DE FRETE ************/
    /***********************************************************/

    begin

       SELECT vf.Glb_Localidade_Codigoori  ,
              vf.glb_localidade_codigodes  ,
              vf.con_valefrete_placa       ,
              vf.con_valefrete_placasaque  ,
              vf.con_valefrete_datacadastro
         INTO vOrigemViagem                ,
              vDestinoVIagem               ,
              vVeiculoPlaca                ,
              vVeiculoPlacaSaque           ,
              vDataCadastro                
         FROM tdvadm.t_con_valefrete vf
        where vf.con_conhecimento_codigo = vVFrete_Codigo
          and vf.con_conhecimento_serie  = vVFrete_Serie 
          and vf.glb_rota_codigo         = vVFrete_Rota  
          and vf.con_valefrete_saque     = vVFrete_Saque; 

    exception when others then
       V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
       V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
    end;
    
    
    /***********************************************************/

    /***********************************************************/
    /********** INFORMAÇÕES TABELA DE VALE DE FRETE ************/
    /***********************************************************/

    begin
       -- viagem.id.cliente
       BEGIN

         begin
            select seq_cfe_idviagem.nextval
              into vViagemidaux1
              from dual;
         end;

         V_INSERT.con_freteoper_id    := P_IDCONSULTA;
         V_INSERT.con_freteoper_rota  := P_ROTA;
         V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
         V_INSERT.uti_vfintegra_chave := 'viagem.id.cliente';
         V_INSERT.uti_vfintegra_valor := TRIM(vViagemidaux1);

         PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

       EXCEPTION WHEN OTHERS THEN
         V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
         V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
       END;

       -- viagem.contratante.documento.numero
       BEGIN

         V_INSERT.con_freteoper_id    := P_IDCONSULTA;
         V_INSERT.con_freteoper_rota  := P_ROTA;
         V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
         V_INSERT.uti_vfintegra_chave := 'viagem.contratante.documento.numero';
         V_INSERT.uti_vfintegra_valor := TRIM(pkg_cfe_frete.ContratanteNumero);

         PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

       EXCEPTION WHEN OTHERS THEN
         V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
         V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
       END;
       
       -- viagem.unidade.documento.tipo
       BEGIN

         V_INSERT.con_freteoper_id    := P_IDCONSULTA;
         V_INSERT.con_freteoper_rota  := P_ROTA;
         V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
         V_INSERT.uti_vfintegra_chave := 'viagem.unidade.documento.tipo';
         V_INSERT.uti_vfintegra_valor := TRIM('88');

         PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

       EXCEPTION WHEN OTHERS THEN
         V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
         V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
       END;
       
       -- viagem.unidade.documento.numero
       BEGIN

         V_INSERT.con_freteoper_id    := P_IDCONSULTA;
         V_INSERT.con_freteoper_rota  := P_ROTA;
         V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
         V_INSERT.uti_vfintegra_chave := 'viagem.unidade.documento.numero';
         V_INSERT.uti_vfintegra_valor := TRIM(p_rota);

         PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

       EXCEPTION WHEN OTHERS THEN
         V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
         V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
       END;

       -- viagem.veiculo.placa
       BEGIN

         V_INSERT.con_freteoper_id    := P_IDCONSULTA;
         V_INSERT.con_freteoper_rota  := P_ROTA;
         V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
         V_INSERT.uti_vfintegra_chave := 'viagem.veiculo.placa';
         V_INSERT.uti_vfintegra_valor := trim(vVeiculoPlaca);

         PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

       EXCEPTION WHEN OTHERS THEN
         V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
         V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
       END;

       -- viagem.veiculo.categoria
       BEGIN

         V_INSERT.con_freteoper_id    := P_IDCONSULTA;
         V_INSERT.con_freteoper_rota  := P_ROTA;
         V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
         V_INSERT.uti_vfintegra_chave := 'viagem.veiculo.categoria';
         V_INSERT.uti_vfintegra_valor := TRIM(NVL(PKG_CFE_FRETE.FN_GET_CATEGORIAVEIC(vVeiculoPlaca, vVeiculoPlacaSaque),'6'));


         PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

       EXCEPTION WHEN OTHERS THEN
         V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
         V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
       END;

       -- viagem.cartao.numero
       BEGIN

         V_INSERT.con_freteoper_id    := P_IDCONSULTA;
         V_INSERT.con_freteoper_rota  := P_ROTA;
         V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
         V_INSERT.uti_vfintegra_chave := 'viagem.cartao.numero';
         V_INSERT.uti_vfintegra_valor := TRIM(vCartaoProp);

         PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

       EXCEPTION WHEN OTHERS THEN
         V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
         V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
       END;

       -- viagem.contrato.numero
       BEGIN

         V_INSERT.con_freteoper_id    := P_IDCONSULTA;
         V_INSERT.con_freteoper_rota  := P_ROTA;
         V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
         V_INSERT.uti_vfintegra_chave := 'viagem.contrato.numero';
         V_INSERT.uti_vfintegra_valor := 'VG'||TRIM(TRIM(vVFrete_Codigo)||TRIM(vVFrete_Serie)||TRIM(vVFrete_Rota)||TRIM(vVFrete_Saque));

         PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

       EXCEPTION WHEN OTHERS THEN
         V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
         V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
       END;

       -- viagem.data.partida
       BEGIN

         V_INSERT.con_freteoper_id    := P_IDCONSULTA;
         V_INSERT.con_freteoper_rota  := P_ROTA;
         V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
         V_INSERT.uti_vfintegra_chave := 'viagem.data.partida';
         V_INSERT.uti_vfintegra_valor := trunc(sysdate);

         PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

       EXCEPTION WHEN OTHERS THEN
         V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
         V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
       END;

       -- viagem.origem.cidade.ibge
       BEGIN

         V_INSERT.con_freteoper_id    := P_IDCONSULTA;
         V_INSERT.con_freteoper_rota  := P_ROTA;
         V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
         V_INSERT.uti_vfintegra_chave := 'viagem.origem.cidade.ibge';
         V_INSERT.uti_vfintegra_valor := TRIM(PKG_CFE_FRETE.FN_GET_IBGE(vOrigemViagem));

         PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

       EXCEPTION WHEN OTHERS THEN
         V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
         V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
       END;

       -- viagem.destino.cidade.ibge
       BEGIN

         V_INSERT.con_freteoper_id    := P_IDCONSULTA;
         V_INSERT.con_freteoper_rota  := P_ROTA;
         V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
         V_INSERT.uti_vfintegra_chave := 'viagem.destino.cidade.ibge';
         V_INSERT.uti_vfintegra_valor := TRIM(PKG_CFE_FRETE.FN_GET_IBGE(vDestinoVIagem));

         PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);

       EXCEPTION WHEN OTHERS THEN
         V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
         V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
       END;

     end;

    /***********************************************************/

    /***********************************************************/
    /********** DOCUMENTOS DE REFERENCIA DA VIAGEM *************/
    /***********************************************************/

    begin

      SELECT COUNT(*)
        INTO vQtdedocref
        FROM tdvadm.T_CON_VFRETECONHEC CC
       WHERE CC.CON_VALEFRETE_CODIGO     = vVFrete_Codigo
         AND CC.CON_VALEFRETE_SERIE      = vVFrete_Serie 
         AND CC.GLB_ROTA_CODIGOVALEFRETE = vVFrete_Rota  
         AND CC.CON_VALEFRETE_SAQUE      = vVFrete_Saque; 

      
      /***********************************************************/
      /********************Existe Cte Vinculado ao VF*************/
      /***********************************************************/
      
      IF (vQtdedocref > 0) THEN

         -- QUANTIDADES DE DOCUMENTOS
         BEGIN
           V_INSERT.con_freteoper_id    := P_IDCONSULTA;
           V_INSERT.con_freteoper_rota  := P_ROTA;
           V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
           V_INSERT.uti_vfintegra_chave := TRIM('viagem.documento.qtde');
           V_INSERT.uti_vfintegra_valor := TRIM(TO_CHAR(vQtdedocref));

           PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
         EXCEPTION WHEN OTHERS THEN
           V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
           V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
         END;

         /***********************************************************/
         /********************    CONHECIMENTOS    ******************/
         /***********************************************************/
         vIndicedocfis := 0;

         FOR R_CURSORCONHEC IN (SELECT CC.CON_CONHECIMENTO_CODIGO,
                                       CC.CON_CONHECIMENTO_SERIE,
                                       CC.GLB_ROTA_CODIGO,
                                       CH.GLB_CLIENTE_CGCCPFREMETENTE,
                                       CH.GLB_TPCLIEND_CODIGOREMETENTE,
                                       CH.GLB_CLIENTE_CGCCPFDESTINATARIO,
                                       CH.GLB_TPCLIEND_CODIGODESTINATARI,
                                       R.GLB_ROTA_SERIE
                                  FROM tdvadm.T_CON_VFRETECONHEC CC,
                                       tdvadm.T_CON_CONHECIMENTO CH,
                                       tdvadm.T_GLB_ROTA R
                                 WHERE CC.CON_VALEFRETE_CODIGO     = vVFrete_Codigo
                                   AND CC.CON_VALEFRETE_SERIE      = vVFrete_Serie 
                                   AND CC.GLB_ROTA_CODIGOVALEFRETE = vVFrete_Rota  
                                   AND CC.CON_VALEFRETE_SAQUE      = vVFrete_Saque
                                   AND CC.GLB_ROTA_CODIGO          = R.GLB_ROTA_CODIGO
                                   AND CC.CON_CONHECIMENTO_CODIGO  = CH.CON_CONHECIMENTO_CODIGO
                                   AND CC.CON_CONHECIMENTO_SERIE   = CH.CON_CONHECIMENTO_SERIE
                                   AND CC.GLB_ROTA_CODIGO          = CH.GLB_ROTA_CODIGO)
         LOOP
             -- INDICE DO DOC FISCAL
             vIndicedocfis := vIndicedocfis+1;

             -- TIPO DO DOCUMENTO
             BEGIN
               V_INSERT.con_freteoper_id    := P_IDCONSULTA;
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.tipo'),'XX',TO_CHAR(vIndicedocfis));
               V_INSERT.uti_vfintegra_valor := TRIM('5');
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
             END;

             -- NUMERO DO DOCUMENTO
             BEGIN
               V_INSERT.con_freteoper_id    := P_IDCONSULTA;
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.numero'),'XX',TO_CHAR(vIndicedocfis));
               V_INSERT.uti_vfintegra_valor := TRIM(R_CURSORCONHEC.CON_CONHECIMENTO_CODIGO);
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
             END;

             -- SERIE DO DOCUMENTO
             BEGIN
               V_INSERT.con_freteoper_id    := P_IDCONSULTA;
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := REPLACE(TRIM('viagem.documentoXX.serie'),'XX',TO_CHAR(vIndicedocfis));
               V_INSERT.uti_vfintegra_valor := NVL(TRIM(R_CURSORCONHEC.GLB_ROTA_SERIE),'U');
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
             END;

         END LOOP;

         /***********************************************************/
      
      END IF;
      
      /***********************************************************/
      
      
      /***********************************************************/
      /************** Não existe Cte vinculado ao VF *************/
      /************** Mando o Numero do Vale de frete*************/
      /***********************************************************/
      begin
         
         IF (vQtdedocref = 0) THEN             
                   
            -- QUANTIDADES DE DOCUMENTOS
            BEGIN
             V_INSERT.con_freteoper_id    := P_IDCONSULTA;
             V_INSERT.con_freteoper_rota  := P_ROTA;
             V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
             V_INSERT.uti_vfintegra_chave := TRIM('viagem.documento.qtde');
             V_INSERT.uti_vfintegra_valor := TRIM(TO_CHAR('1'));

             PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
            EXCEPTION WHEN OTHERS THEN
             V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
             V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
            END;
           
            -- TIPO DO DOCUMENTO
            BEGIN
               V_INSERT.con_freteoper_id    := P_IDCONSULTA;
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := TRIM('viagem.documento1.tipo');
               V_INSERT.uti_vfintegra_valor := TRIM('5');
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
             END;
           
            -- NUMERO DO DOCUMENTO
            BEGIN
               V_INSERT.con_freteoper_id    := P_IDCONSULTA;
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := 'viagem.documento1.numero';
               V_INSERT.uti_vfintegra_valor := trim(vVFrete_Codigo);
               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
             END;

            -- SERIE DO DOCUMENTO
            BEGIN
               V_INSERT.con_freteoper_id    := P_IDCONSULTA;
               V_INSERT.con_freteoper_rota  := P_ROTA;
               V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
               V_INSERT.uti_vfintegra_chave := 'viagem.documento1.serie';
               V_INSERT.uti_vfintegra_valor := TRIM(vVFrete_Rota);

               PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);
             EXCEPTION WHEN OTHERS THEN
               V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
               V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;
             END;
         
         end if;
         
      end;  
      /***********************************************************/
      
      END;

    /***********************************************************/
    
    
    /***********************************************************/
    /*************          PARCELAS         *******************/
    /***********************************************************/
    
    BEGIN
      
      -- quantidade de parcelas
      select count(*)
        into vqtdeparcelas                        
        from tdvadm.t_con_calcvalefrete f
       where f.con_conhecimento_codigo            = vvfrete_codigo
         and f.con_conhecimento_serie             = vvfrete_serie 
         and f.glb_rota_codigo                    = vvfrete_rota  
         and f.con_valefrete_saque                = vvfrete_saque
         and f.con_calcvalefrete_flagpgto         = 'S'
         and to_number(f.con_calcvalefrete_valor) > '0'
         and f.con_calcvalefrete_dtpgto           is null
         and f.con_calcvalefretetp_codigo         = vparcela
         and f.con_calcvalefrete_codparoper       = vparcelaoper;
         
      -- QUANTIDADE PARCELAS
      BEGIN     
        V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
        V_INSERT.con_freteoper_rota  := P_ROTA;
        V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
        V_INSERT.uti_vfintegra_chave := TRIM('viagem.parcela.qtde');
        V_INSERT.uti_vfintegra_valor := TRIM(TO_CHAR(vQtdeParcelas));
        PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
      EXCEPTION WHEN OTHERS THEN
        V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
        V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
      END;
                             
     
     vQtdeParcelas := 0;
     
     FOR R_PARCELAS IN (select f.con_conhecimento_codigo,
                               f.con_conhecimento_serie,
                               f.glb_rota_codigo,
                               f.con_valefrete_saque,
                               f.con_calcvalefrete_seq,
                               f.con_calcvalefrete_tipo,
                               decode(f.con_calcvalefretetp_codigo,
                                      '01',F.CON_CALCVALEFRETE_VALOR + tdvadm.pkg_cfe_frete.Fn_Get_VlrTransfSaque(F.con_conhecimento_codigo, F.con_conhecimento_serie, F.glb_rota_codigo, F.con_valefrete_saque),
                                      '20',F.CON_CALCVALEFRETE_VALOR) CON_CALCVALEFRETE_VALOR,
                               f.con_calcvalefrete_vencimento,
                               f.con_calcvalefretetp_codigo,
                               f.con_calcvalefrete_tppessoa,
                               tp.con_calcvalefretetp_codpamcary,
                               nvl(f.con_calcvalefrete_flaglib,'N') con_calcvalefrete_flaglib
                          from tdvadm.t_con_calcvalefrete f,
                               tdvadm.t_con_calcvalefretetp tp
                         where f.con_conhecimento_codigo             = vVFrete_Codigo
                           and f.con_conhecimento_serie              = vVFrete_Serie 
                           and f.glb_rota_codigo                     = vVFrete_Rota  
                           and f.con_valefrete_saque                 = vVFrete_Saque
                           and f.con_calcvalefrete_flagpgto          = 'S'
                           and f.con_calcvalefretetp_codigo          = tp.con_calcvalefretetp_codigo
                           and to_number(f.con_calcvalefrete_valor)  > 0
                           and f.con_calcvalefrete_dtpgto            is null
                           and f.con_calcvalefretetp_codigo          = vParcela
                           and f.con_calcvalefrete_codparoper        = vParcelaOper
                      ORder by f.con_calcvalefretetp_codigo)
     LOOP
       
         vQtdeParcelas := vQtdeParcelas +1;
         
          -- EFETIVAÇÃO PARCELA
          BEGIN     
            V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
            V_INSERT.con_freteoper_rota  := P_ROTA;
            V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
            V_INSERT.uti_vfintegra_chave := REPLACE('viagem.parcelaXX.efetivacao.tipo','XX',TRIM(TO_CHAR(vQtdeParcelas)));
            V_INSERT.uti_vfintegra_valor := TRIM('2');
            PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
          EXCEPTION WHEN OTHERS THEN
            V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
            V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
          END;
          
          -- STATUS PARCELA
          BEGIN     
            V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
            V_INSERT.con_freteoper_rota  := P_ROTA;
            V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
            V_INSERT.uti_vfintegra_chave := REPLACE('viagem.parcelaXX.status.id','XX',TRIM(TO_CHAR(vQtdeParcelas)));
            V_INSERT.uti_vfintegra_valor := TRIM('2');
            PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
          EXCEPTION WHEN OTHERS THEN
            V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
            V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
          END;
               
          -- VALOR PARCELA
          BEGIN     
            V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
            V_INSERT.con_freteoper_rota  := P_ROTA;
            V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
            V_INSERT.uti_vfintegra_chave := REPLACE('viagem.parcelaXX.valor','XX',TRIM(TO_CHAR(vQtdeParcelas)));
            V_INSERT.uti_vfintegra_valor := TRIM(TO_CHAR(R_PARCELAS.CON_CALCVALEFRETE_VALOR,'999999999.00'));
            
            PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
          EXCEPTION WHEN OTHERS THEN
            V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
            V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
          END;
             
          -- TIPO PARCELA
          BEGIN     
            V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
            V_INSERT.con_freteoper_rota  := P_ROTA;
            V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
            V_INSERT.uti_vfintegra_chave := REPLACE('viagem.parcelaXX.tipo','XX',TRIM(TO_CHAR(vQtdeParcelas)));
            V_INSERT.uti_vfintegra_valor := '1';
            
            PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
          EXCEPTION WHEN OTHERS THEN
            V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
            V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
          END;         
             
          -- SUBTIPO PARCELA
          BEGIN     
            V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
            V_INSERT.con_freteoper_rota  := P_ROTA;
            V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
            V_INSERT.uti_vfintegra_chave := REPLACE('viagem.parcelaXX.subtipo','XX',TRIM(TO_CHAR(vQtdeParcelas)));
            V_INSERT.uti_vfintegra_valor := TRIM(TO_NUMBER(R_PARCELAS.CON_CALCVALEFRETETP_CODPAMCARY));
            PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
          EXCEPTION WHEN OTHERS THEN
            V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
            V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
          END;
               
          -- PARCELA BASE
          BEGIN     
            V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
            V_INSERT.con_freteoper_rota  := P_ROTA;
            V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
            V_INSERT.uti_vfintegra_chave := REPLACE('viagem.parcelaXX.base','XX',TRIM(TO_CHAR(vQtdeParcelas)));
            V_INSERT.uti_vfintegra_valor := TRIM('N');
            PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
          EXCEPTION WHEN OTHERS THEN
            V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
            V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
          END;
          
          -- STATUS PARCELA
/*          BEGIN     
            V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
            V_INSERT.con_freteoper_rota  := P_ROTA;
            V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
            V_INSERT.uti_vfintegra_chave := REPLACE('viagem.parcelaXX.status.id','XX',TRIM(TO_CHAR(vQtdeParcelas)));
            
            IF R_PARCELAS.CON_CALCVALEFRETE_FLAGLIB = 'N' THEN
               V_INSERT.uti_vfintegra_valor := TRIM('1');
            ELSIF R_PARCELAS.CON_CALCVALEFRETE_FLAGLIB = 'S' THEN
               V_INSERT.uti_vfintegra_valor := TRIM('2');
            END IF;   
            
            
            
            PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
          EXCEPTION WHEN OTHERS THEN
            V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
            V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
          END;*/
               
          -- DATA PARCELA
          BEGIN     
            V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
            V_INSERT.con_freteoper_rota  := P_ROTA;
            V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
            V_INSERT.uti_vfintegra_chave := REPLACE('viagem.parcelaXX.data','XX',TRIM(TO_CHAR(vQtdeParcelas)));
            V_INSERT.uti_vfintegra_valor := trunc(sysdate);
            PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
          EXCEPTION WHEN OTHERS THEN
            V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
            V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
          END;
               
          -- FAVORECIDO PARCELA
          BEGIN     
            V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
            V_INSERT.con_freteoper_rota  := P_ROTA;
            V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
            V_INSERT.uti_vfintegra_chave := REPLACE('viagem.parcelaXX.favorecido.tipo.id','XX',TRIM(TO_CHAR(vQtdeParcelas)));
            
            SELECT DECODE(R_PARCELAS.CON_CALCVALEFRETE_TPPESSOA,'P','1','M','3')
              INTO vTipoFavorecido
              FROM DUAL;
            
            V_INSERT.uti_vfintegra_valor := vTipoFavorecido;
            
            PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
          EXCEPTION WHEN OTHERS THEN
            V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
            V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
          END;
               
          -- NUMERO CLIENTE
          BEGIN     
            V_INSERT.con_freteoper_id    := P_IDCONSULTA; 
            V_INSERT.con_freteoper_rota  := P_ROTA;
            V_INSERT.uti_vfintegra_seq   := PKG_CFE_FRETE.FN_GET_NEXTSEQREG(P_IDCONSULTA, P_ROTA);
            V_INSERT.uti_vfintegra_chave := REPLACE('viagem.parcelaXX.numero.cliente','XX',TRIM(TO_CHAR(vQtdeParcelas)));
            V_INSERT.uti_vfintegra_valor := TRIM(TO_CHAR(TO_NUMBER(R_PARCELAS.CON_CALCVALEFRETETP_CODIGO)));
            PKG_CFE_FRETE.SP_GRAVALINHATXT(V_INSERT,P_STATUS, V_MESSAGE);             
          EXCEPTION WHEN OTHERS THEN
            V_STATUS  := tdvadm.pkg_glb_common.Status_Erro;
            V_MESSAGE := 'ERRO: PKG_CFE_FRETE.SP_GET_INTEGRACAO, '||sqlerrm;             
          END; 
          
     END LOOP;    

    END; 
    
    /***********************************************************/
    

    open p_cursor for
    select k.uti_vfintegra_chave chave,
           k.uti_vfintegra_valor valor
      from tdvadm.t_uti_vfintegra k
     where k.con_freteoper_id   = p_idconsulta
       and k.con_freteoper_rota = p_rota
  order by k.uti_vfintegra_seq;

   delete tdvadm.t_uti_vfintegra d
    where d.con_freteoper_id   = p_idconsulta
      and d.con_freteoper_rota = p_rota;

      p_status   := tdvadm.pkg_glb_common.status_nomal;
      p_message  := 'processamento normal.';

      COMMIT;   

  exception when others then
    
    p_status    := tdvadm.pkg_glb_common.status_erro;
    p_message   := 'erro ao consultar. erro='||sqlerrm||' - '||dbms_utility.format_error_backtrace;
    return;

  end;
          
    p_status   := tdvadm.pkg_glb_common.status_nomal; 
    p_message := 'processamento normal.';

  end sp_get_inserirviagempa;

  /*********************************************************/
  /************* Parcelas antigas          *****************/
  /*********************************************************/
  procedure Sp_Vld_InserirViagemPA(p_xmlretorno      in clob,
                                   p_idconsulta      in tdvadm.t_con_freteoper.con_freteoper_id%type,
                                   p_rota            in tdvadm.t_glb_rota.glb_rota_codigo%type,
                                   p_codoperacaotdv  in varchar2,
                                   p_codoperacaows   in varchar2,
                                   p_sequencia       in tdvadm.t_con_freteoper.con_freteoper_seq%type) is

   --Variável de linha utilizada para facilitar a inserção na tabela de CIOT.
   vTabPgtoAvulso      tdvadm.T_CON_VFRETEPGTOAVU%rowtype;

   --Variável utilizada para guardar mensagem de erro.
   vMsgErro            tdvadm.t_con_freteoper.con_freteoper_obs%type;
   vQryString          tdvadm.t_con_freteoper.con_freteoper_paramqrystr%TYPE;
   vVfNumero           tdvadm.t_con_valefrete.con_conhecimento_codigo%TYPE;
   vVfSerie            tdvadm.t_con_valefrete.con_conhecimento_serie%TYPE;
   vVfRota             tdvadm.t_con_valefrete.glb_rota_codigo%TYPE;
   vVfSaque            tdvadm.t_con_valefrete.con_valefrete_saque%TYPE;
   vTPPagamento        CHAR(2);
   vParcelaTdv         tdvadm.t_con_calcvalefrete.con_calcvalefretetp_codigo%type;
   
   vVFreteCodParOper   tdvadm.t_con_calcvalefrete.con_calcvalefrete_codparoper%type;
   vUsuario            tdvadm.t_usu_usuario.usu_usuario_codigo%type;
   VFParcelIdSt        varchar2(02);
   VVRotaAUTPGTO       tdvadm.t_con_calcvalefrete.glb_rota_codigolib%Type;
   VVRotaCax           tdvadm.t_con_calcvalefrete.glb_rota_codigocx%Type;
   vCartaoPgto         tdvadm.t_con_calcvalefrete.con_calcvalefrete_cartao%TYPE;
   

   STATUS_OK       CONSTANT CHAR(02) := 'OK';
   STATUS_INVALIDO CONSTANT CHAR(02) := 'IV';
   STATUS_ERRO     CONSTANT CHAR(02) := 'ER';

  Begin

    Begin

        /*********************************************************/
        /*** Informações da QryString                          ***/
        /*********************************************************/
        begin

        BEGIN

          select l.con_freteoper_paramqrystr
            into vQryString
            from t_con_freteoper l
           where l.con_freteoper_id   = p_idconsulta
             and l.con_freteoper_rota = p_rota
             and l.cfe_integratdv_cod = p_codoperacaotdv
             and l.cfe_operacoes_cod  = p_codoperacaows 
             and l.con_freteoper_seq  = p_sequencia;  


          vVfNumero            := tdvadm.fn_querystring(TDVADM.fn_querystring(vQryString,'VFNumero','=','*'), 'valor', '=', '|');
          vVfSerie             := tdvadm.fn_querystring(TDVADM.fn_querystring(vQryString,'VFSerie','=','*'), 'valor', '=', '|');
          vVfRota              := tdvadm.fn_querystring(TDVADM.fn_querystring(vQryString,'VFRota','=','*'), 'valor', '=', '|');
          vVfSaque             := tdvadm.fn_querystring(TDVADM.fn_querystring(vQryString,'VFSaque','=','*'), 'valor', '=', '|');
          vParcelaTdv          := tdvadm.fn_querystring(TDVADM.fn_querystring(vQryString,'VFParcelTdv','=','*'), 'valor', '=', '|');
          vVFreteCodParOper    := tdvadm.fn_querystring(TDVADM.fn_querystring(vQryString,'VFParcelGer','=','*'),  'valor', '=', '|');
          vUsuario             := tdvadm.fn_querystring(TDVADM.fn_querystring(vQryString,'VFUsuarioTDV','=','*'), 'valor', '=', '|');
          VFParcelIdSt         := tdvadm.fn_querystring(TDVADM.fn_querystring(vQryString,'VFParcelIdSt','=','*'), 'valor', '=', '|');
          VVRotaAUTPGTO        := tdvadm.fn_querystring(TDVADM.fn_querystring(vQryString,'VFRotaUsuarioTDV','=','*'), 'valor', '=', '|');
        
        Begin
          Select r.glb_rota_caixa
            Into VVRotaCax
          From t_glb_rota r
          Where r.glb_rota_codigo = VVRotaAUTPGTO;  
        Exception
          When NO_DATA_FOUND Then
             -- usa o caixa da matriz quando não achar
             VVRotaCax := '999';       
          End;

          vTabPgtoAvulso.Con_Conhecimento_Codigo       := vVfNumero;
          vTabPgtoAvulso.Con_Conhecimento_Serie        := vVfSerie;
          vTabPgtoAvulso.Glb_Rota_Codigo               := vVfRota;
          vTabPgtoAvulso.Con_Valefrete_Saque           := vVfSaque;
          vTabPgtoAvulso.Con_Vfretepgtoavu_Codparcela  := vParcelaTdv;


        EXCEPTION WHEN OTHERS THEN
          vMsgErro := substr(sqlerrm, 1, 90);
        END;
        
        end;
        /*********************************************************/

        /*********************************************************/
        /***Para essa consulta, o retorno da mensagem com "0"  ***/
        /* signifca que retornou corretamente                  ***/
        /*********************************************************/
        begin

           IF PKG_CFE_FRETE.FN_GET_CHAVEXML(P_XMLRETORNO, 'mensagem.codigo') = '0' THEN
    
             vTabPgtoAvulso.Con_Vfretepgtoavu_Id   := PKG_CFE_FRETE.FN_GET_CHAVEXML(P_XMLRETORNO, 'viagem.id');
             vTabPgtoAvulso.Con_Freteoper_Id       := P_IDCONSULTA;
             vTabPgtoAvulso.Con_Freteoper_Rota     := P_ROTA;             
             
             insert into tdvadm.t_con_vfretepgtoavu
               (con_conhecimento_codigo,
                con_conhecimento_serie,
                glb_rota_codigo,
                con_valefrete_saque,
                con_freteoper_id,
                con_freteoper_rota,
                con_vfretepgtoavu_id,
                con_vfretepgtoavu_idcliente,
                con_vfretepgtoavu_data,
                con_vfretepgtoavu_codparcela)
             values
               (vtabpgtoavulso.con_conhecimento_codigo,
                vtabpgtoavulso.con_conhecimento_serie,
                vtabpgtoavulso.glb_rota_codigo,
                vtabpgtoavulso.con_valefrete_saque,
                vtabpgtoavulso.con_freteoper_id,
                vtabpgtoavulso.con_freteoper_rota,
                vtabpgtoavulso.con_vfretepgtoavu_id,
                vtabpgtoavulso.con_vfretepgtoavu_idcliente,
                vtabpgtoavulso.con_vfretepgtoavu_data,
                vtabpgtoavulso.con_vfretepgtoavu_codparcela);
                
             commit;   
                  
             --Atualiza a tabela de operação de frete.
             update tdvadm.t_con_freteoper oper
                 set OPER.CFE_STATUSFRETEOPER_STATUS  = STATUS_OK,
                     oper.con_freteoper_retorno       = sysdate,
                     oper.con_freteoper_confret       = P_XMLRETORNO,
                     oper.con_freteoper_obs           = 'Validação realizada com sucesso'
               where 0=0
                 and oper.con_freteoper_id            = P_IDCONSULTA
                 and oper.con_freteoper_rota          = P_ROTA
                 and oper.CFE_INTEGRATDV_COD          = P_CODOPERACAOTDV
                 and oper.CFE_OPERACOES_COD           = P_CODOPERACAOWS
                 and OPER.CON_FRETEOPER_SEQ           = P_SEQUENCIA;
             
             
                        
             vCartaoPgto :=  tdvadm.pkg_cfe_frete.fn_get_cartaofrete(vvfnumero,
                                                                     vvfserie,
                                                                     vvfrota,  
                                                                     vvfsaque,
                                                                     vParcelaTdv); 
                                                                          
             --Atualiza os dados da tabela de calculo.
             update tdvadm.t_con_calcvalefrete        calc
                set calc.usu_usuario_codigopgto        = vusuario,
                    calc.con_calcvalefrete_dtpgto      = sysdate,
                    calc.usu_usuario_codigoliberou     = vusuario,
                    calc.con_calcvalefrete_dtliberacao = sysdate,
                    calc.glb_rota_codigopgto           = vvrotaautpgto,
                    calc.glb_rota_codigocx             = vvrotacax,
                    calc.con_calcvalefrete_cartao      = vcartaopgto,
                    calc.con_calcvalefrete_pagva       = 'S'
              where 0=0
                and calc.con_conhecimento_codigo       = vVfNumero 
                and calc.con_conhecimento_serie        = vVfSerie  
                and calc.glb_rota_codigo               = vVfRota   
                and calc.con_valefrete_saque           = vVfSaque  
                and calc.con_calcvalefretetp_codigo    = vParcelaTdv
                and calc.con_calcvalefrete_codparoper  = vVFreteCodParOper;
             
             
             if (vParcelaTdv in ('01')) then
               
               update tdvadm.t_con_calcvalefrete  calc
                  set calc.usu_usuario_codigopgto        = vusuario,
                      calc.con_calcvalefrete_dtpgto      = sysdate,
                      calc.usu_usuario_codigoliberou     = vusuario,
                      calc.con_calcvalefrete_dtliberacao = sysdate,
                      calc.glb_rota_codigopgto           = vvrotaautpgto,
                      calc.glb_rota_codigocx             = vvrotacax,
                      calc.con_calcvalefrete_cartao      = vcartaopgto
                where 0=0
                  and calc.con_conhecimento_codigo       = vVfNumero 
                  and calc.con_conhecimento_serie        = vVfSerie  
                  and calc.glb_rota_codigo               = vVfRota   
                  and calc.con_valefrete_saque           = vVfSaque  
                  and calc.con_calcvalefretetp_codigo    in ('06','07') --(06)saque/(07)tarifa
                  and calc.con_calcvalefrete_valor       <> 0;           
             
             end if;

          else

           update tdvadm.t_con_freteoper oper
              set OPER.CFE_STATUSFRETEOPER_STATUS = STATUS_INVALIDO,
                  oper.con_freteoper_retorno      = sysdate,
                  oper.con_freteoper_confret      = P_XMLRETORNO,
                  OPER.CON_FRETEOPER_OBS          = PKG_CFE_FRETE.FN_GET_CHAVEXML(P_XMLRETORNO, 'mensagem.descricao')
            where 0=0
              and oper.con_freteoper_id           = P_IDCONSULTA
              and oper.con_freteoper_rota         = P_ROTA
              and oper.CFE_INTEGRATDV_COD         = P_CODOPERACAOTDV
              and oper.CFE_OPERACOES_COD          = P_CODOPERACAOWS
              and OPER.CON_FRETEOPER_SEQ          = P_SEQUENCIA;


          END IF;

        end;
  

    exception
      --Caso estoure o raise em algum momento eu registro no campo de observação.
      when others then
        --Transfiro a mensagem de erro, para uma variável para poder registrar no campo obs.
        vMsgErro := substr(sqlerrm, 1, 90);

        --atualizo a tabela de freteOperacao
       update tdvadm.t_con_freteoper  oper
          set OPER.CFE_STATUSFRETEOPER_STATUS  = STATUS_ERRO,
              oper.con_freteoper_obs           = 'Erro: ' || vMsgErro,
              oper.con_freteoper_retorno       = sysdate,
              oper.con_freteoper_confret       = Trim(P_XMLRETORNO)
        where 0=0
          and oper.con_freteoper_id            = P_IDCONSULTA
          and oper.con_freteoper_rota          = P_ROTA
          and oper.CFE_INTEGRATDV_COD          = P_CODOPERACAOTDV
          and oper.CFE_OPERACOES_COD           = P_CODOPERACAOWS
          and OPER.CON_FRETEOPER_SEQ           = P_SEQUENCIA;

    End;

   End Sp_Vld_InserirViagemPA;
  
  /*********************************************************/
  /************* Parcelas antigas          *****************/
  /*********************************************************/
  Procedure Sp_Set_Criaviagemavulsa(p_qrystr       in  varchar2,
                                    p_idconsulta   in  varchar2,
                                    p_rota         in  char,
                                    p_status       out char,
                                    p_message      out varchar2) as

  vVFrete_Codigo      tdvadm.t_con_valefrete.con_conhecimento_codigo%type;
  vVFrete_Serie       tdvadm.t_con_valefrete.con_conhecimento_serie%type;
  vVFrete_Rota        tdvadm.t_con_valefrete.glb_rota_codigo%type;
  vVFrete_Saque       tdvadm.t_con_valefrete.con_valefrete_saque%type;
  vParcela            varchar2(10);
  vParcelaOper        varchar2(20);
  vTipo               tdvadm.t_cfe_integratdv.cfe_integratdv_cod%type;
  vParcelStatus       varchar2(10);
  vValorParcela       tdvadm.t_con_calcvalefrete.con_calcvalefrete_valor%type;
  vDataPagamento      tdvadm.t_con_calcvalefrete.con_calcvalefrete_dtpgto%type;
  vListaParams        glbadm.pkg_listas.tlistausuparametros;
  vUsuarioPgto        tdvadm.t_usu_usuario.usu_usuario_codigo%type;
  vExecutouParametros boolean;
  vAplicacao          varchar2(20) := 'pagtofrete';
  vPodePagar          varchar2(30) := 'N';
  vCodParametro       varchar2(10) := 'PAGAR';
  vCodDePara          varchar2(10) := '94';
  vQtdeLoop           integer      := 0;
  vQtdeSeq            integer      := 0;
  vJaExisteParcela    integer      := 0;
  vParcelaApta        integer      := 0;
  vViagemCiot         integer      := 0;
  
  begin  

  Begin
    
    vTipo            := tdvadm.fn_querystring(tdvadm.fn_querystring(P_QryStr,'IntegraTdv_Cod','=','*'), 'valor', '=', '|');
    vParcela         := tdvadm.fn_querystring(tdvadm.fn_querystring(P_QryStr,'VFParcelTdv','=','*'), 'valor', '=', '|');
    vParcelaOper     := tdvadm.fn_querystring(tdvadm.fn_querystring(P_QryStr,'VFParcelGer','=','*'), 'valor', '=', '|');
    vVFrete_Codigo   := tdvadm.fn_querystring(tdvadm.fn_querystring(P_QryStr,'VFNumero','=','*'), 'valor', '=', '|');
    vVFrete_Serie    := tdvadm.fn_querystring(tdvadm.fn_querystring(P_QryStr,'VFSerie','=','*'), 'valor', '=', '|');
    vVFrete_Rota     := tdvadm.fn_querystring(tdvadm.fn_querystring(P_QryStr,'VFRota','=','*'), 'valor', '=', '|');
    vVFrete_Saque    := tdvadm.fn_querystring(tdvadm.fn_querystring(P_QryStr,'VFSaque','=','*'), 'valor', '=', '|');
    vParcelStatus    := tdvadm.fn_querystring(tdvadm.fn_querystring(P_QryStr,'VFParcelIdSt','=','*'), 'valor', '=', '|');
    vUsuarioPgto     := tdvadm.fn_querystring(tdvadm.fn_querystring(P_QryStr,'VFUsuarioTDV','=','*'), 'valor', '=', '|');
    
    -- verificação de parcela apta
    begin
      
      select cal.con_calcvalefrete_valor,
             cal.con_calcvalefrete_dtpgto,
             count(*)
        into vValorParcela,
             vDataPagamento,
             vParcelaApta
        from tdvadm.t_con_valefrete vf,
             tdvadm.t_con_calcvalefrete cal
       where vf.con_conhecimento_codigo         =  vVFrete_Codigo
         and vf.con_conhecimento_serie          =  vVFrete_Serie 
         and vf.glb_rota_codigo                 =  vVFrete_Rota  
         and vf.con_valefrete_saque             =  vVFrete_Saque
         and vf.con_conhecimento_codigo         =  cal.con_conhecimento_codigo
         and vf.con_conhecimento_serie          =  cal.con_conhecimento_serie
         and vf.glb_rota_codigo                 =  cal.glb_rota_codigo
         and vf.con_valefrete_saque             =  cal.con_valefrete_saque
         and cal.con_calcvalefretetp_codigo     =  vParcela
         and cal.con_calcvalefrete_codparoper   =  vParcelaOper
         and cal.con_calcvalefrete_dtbloqueio   is null
         and cal.con_calcvalefrete_dtpgto       is null
    group by cal.con_calcvalefrete_valor,
             cal.con_calcvalefrete_dtpgto;
      
    exception when others then
      vParcelaApta := 0;
    end;   
    
    if (vParcelaApta = 0 ) then
      
      P_STATUS :=  PKG_GLB_COMMON.Status_Erro;
      P_MESSAGE := P_MESSAGE || 'Parcela não esta apta a ser paga, a mesma ja foi paga ou esta bloqueada!' || chr(10)||vVFrete_Codigo||'-'||vVFrete_Serie ||'-'||vVFrete_Rota  ||'-'||vVFrete_Saque||'-'||vParcela||'-'||vParcelaOper;
      return;
      
    end if;    
           
    -- verificação de vf com ciot
    select count(*)
      into vViagemCiot
      from tdvadm.t_con_valefrete vf,
           tdvadm.t_con_vfreteciot ci
     where vf.con_conhecimento_codigo         = vVFrete_Codigo
       and vf.con_conhecimento_serie          = vVFrete_Serie 
       and vf.glb_rota_codigo                 = vVFrete_Rota  
       and vf.con_valefrete_saque             = vVFrete_Saque
       and vf.con_conhecimento_codigo         = ci.con_conhecimento_codigo
       and vf.con_conhecimento_serie          = ci.con_conhecimento_serie
       and vf.glb_rota_codigo                 = ci.glb_rota_codigo
       and vf.con_valefrete_saque             = ci.con_valefrete_saque;

    if (vViagemCiot = 0 ) then
      
      P_STATUS :=  PKG_GLB_COMMON.Status_Erro;
      P_MESSAGE := P_MESSAGE || 'Vale de frete não contem CIOT associado!' || chr(10);
      return;
      
    end if;  
       
    -- analise de liberação de usuario
    if vUsuarioPgto is not null then
      
      vExecutouParametros := glbadm.pkg_listas.fn_get_usuparamtros(vAplicacao, vUsuarioPgto, null, vListaParams);
          
      if Not vExecutouParametros Then                                                        
      
         P_STATUS :=  PKG_GLB_COMMON.Status_Erro;
         P_MESSAGE := P_MESSAGE || '10 - Erro ao Buscar Parametros.' || chr(10);
         return;
      else
      
        vPodePagar := vListaParams(vCodParametro).texto;            
      
      End if ;
           
    end if;
    
    if (nvl(vPodePagar,'N') != 'S') then
      
      P_STATUS :=  PKG_GLB_COMMON.Status_Erro;
      P_MESSAGE := P_MESSAGE || 'Essa parcela foi criada na conta (Pamcard | Roadcard) antiga, é necessario um usuario com liberação de pagamento para autorizar essa parcela!' || chr(10);
      return;
    
    end If;  
    
    -- Criando a integração
    for r_cursor in (select k.cfe_integratdv_cod,
                            k.cfe_operacoes_cod,
                            k.cfe_operatdv_seqop,
                            k.cfe_operatdv_seqint
                       from tdvadm.t_cfe_operatdv k
                      where k.cfe_integratdv_cod = vCodDePara)
    loop
      
      vQtdeLoop := vQtdeLoop +1;
                     
      select count(*)+1
        into vQtdeSeq
        from tdvadm.t_con_freteoper k
       where k.con_freteoper_id   = p_idconsulta
         and k.con_freteoper_rota = p_rota
         and k.cfe_integratdv_cod = r_cursor.cfe_integratdv_cod
         and k.cfe_operacoes_cod  = r_cursor.cfe_operacoes_cod;
         
      select count(*)
        into vJaExisteParcela
        from tdvadm.t_con_freteoper k
       where k.con_freteoper_id   = p_idconsulta
         and k.con_freteoper_rota = p_rota
         and k.cfe_integratdv_cod = r_cursor.cfe_integratdv_cod
         and k.cfe_operacoes_cod  = r_cursor.cfe_operacoes_cod
         and tdvadm.fn_querystring(tdvadm.fn_querystring(k.con_freteoper_paramqrystr,'VFNumero','=','*'), 'valor', '=', '|')    = vVFrete_Codigo
         and tdvadm.fn_querystring(tdvadm.fn_querystring(k.con_freteoper_paramqrystr,'VFSerie','=','*'), 'valor', '=', '|')     = vVFrete_Serie 
         and tdvadm.fn_querystring(tdvadm.fn_querystring(k.con_freteoper_paramqrystr,'VFRota','=','*'), 'valor', '=', '|')      = vVFrete_Rota  
         and tdvadm.fn_querystring(tdvadm.fn_querystring(k.con_freteoper_paramqrystr,'VFSaque','=','*'), 'valor', '=', '|')     = vVFrete_Saque
         and tdvadm.fn_querystring(tdvadm.fn_querystring(k.con_freteoper_paramqrystr,'VFParcelTdv','=','*'), 'valor', '=', '|') = vParcela;    
       
       
      if (vJaExisteParcela >0) then
           p_status    := tdvadm.pkg_glb_common.Status_Erro;
           p_message   := 'Ja existe uma integração de criação de viagem (Parcelas Antigas).';
           return;
      end if;  
       
      insert into tdvadm.t_con_freteoper f values(p_idconsulta,
                                                  p_rota,
                                                  r_cursor.cfe_integratdv_cod,
                                                  r_cursor.cfe_operacoes_cod,
                                                  'AG',
                                                  null,
                                                  null,
                                                  null,
                                                  null,
                                                  null,
                                                  p_qrystr,
                                                  sysdate,
                                                  null,
                                                  null,
                                                  vQtdeSeq,
                                                  0);
           
    end loop; 
    
    p_status   := tdvadm.pkg_glb_common.Status_Nomal; 
    p_message  := 'Processamento Normal. Foi criada um pagamento avulso para essa parcela, pois ela perterce a conta antiga da Della Volpe na (Pamcard | Roadcard)!';    
           
  exception when others then
    
    p_status    := tdvadm.pkg_glb_common.Status_Erro;
    p_message   := 'Erro ao consultar. Erro='||SQLERRM;
    
  end;     
 

  end sp_set_criaviagemavulsa;

  
END PKG_CFE_FRETE;
/
